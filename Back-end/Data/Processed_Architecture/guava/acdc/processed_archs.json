{"version_list": ["v18.0", "v19.0", "20.0"], "package_list": ["testing", "io", "escape", "primitives", "eventbus", "xml", "leaf", "graph", "cache", "html", "net", "annotations", "math", "core", "hash", "reflect", "base", "user", "publicsuffix", "util", "collect", "truth", "animal_sniffer"], "name": "combined", "children": [{"clusters": ["com.google.common.base.ss", "com.google.common.cache.ss", "com.google.common.collect.ss", "com.google.common.collect.testing.features.ss", "com.google.common.collect.testing.google.ss", "com.google.common.collect.testing.ss", "com.google.common.collect.testing.testers.ss", "com.google.common.escape.ss", "com.google.common.eventbus.ss", "com.google.common.hash.ss", "com.google.common.io.ss", "com.google.common.math.ss", "com.google.common.net.ss", "com.google.common.primitives.ss", "com.google.common.reflect.ss", "com.google.common.ss", "com.google.common.testing.ss", "com.google.common.util.concurrent.ss", "com.google.common.util.concurrent.testing.ss"], "package_level": 4, "name": "v18.0", "children": [{"name": "com.google.common.base.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.annotations.GwtIncompatible", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.AbstractIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.AbstractIterator$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.AbstractIterator$State", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Ascii", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat$5", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat$StringConverter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$10", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$11", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$12", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$13", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$14", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$15", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$3", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$4", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$5", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$6", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$7", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$8", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$9", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$And", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$BitSetMatcher", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$FastMatcher", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$NegatedFastMatcher", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$NegatedMatcher", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$Or", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.CharMatcher$RangesMatcher", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.Converter", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.Converter$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.Converter$1$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.Converter$ConverterComposition", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.Converter$FunctionBasedConverter", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.Converter$IdentityConverter", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.Converter$ReverseConverter", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Enums", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Enums$StringConverter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.Equivalence", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.Equivalence$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.Equivalence$Equals", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.Equivalence$EquivalentToPredicate", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.Equivalence$Identity", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.base.Equivalence$Wrapper", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizablePhantomReference", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableReference", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableReferenceQueue", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableReferenceQueue$DecoupledLoader", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableReferenceQueue$DirectLoader", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableReferenceQueue$FinalizerLoader", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableReferenceQueue$SystemLoader", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableSoftReference", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableWeakReference", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Function", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FunctionalEquivalence", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$ConstantFunction", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$ForMapWithDefault", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$FunctionComposition", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$FunctionForMapNoDefault", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$IdentityFunction", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$PredicateFunction", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$SupplierFunction", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$ToStringFunction", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.GwtSerializationDependencies", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.GwtSerializationDependencies$OptionalDependencies", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Joiner", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Joiner$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Joiner$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Joiner$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Joiner$MapJoiner", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Array handling in Objects#toStringHelper"], "name": "com.google.common.base.MoreObjects", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1125) created by **adrianshum** on 2012-08-29 at 03:06 AM_\n\n---\n\nCurrently there is no handling for arrays in helpers in Objects, e.g. toStringHelper and Object.equal.\n\nThat means, I cannot do\nObjects.toStringHelper(getClass())\n&nbsp;&nbsp;&nbsp;&nbsp;.add(\"foo\", this.foo)\n&nbsp;&nbsp;&nbsp;&nbsp;.add(\"anArray\", this.anArray)\n&nbsp;&nbsp;&nbsp;&nbsp;.toString();\n\n(I know I can change it to add(\"anArray\", Arrays.toString(this.anArray)) but it looks bad)\n\nSame for Objects.equal, when I am overriding equals(), I cannot do:\nreturn Objects.equal(\"foo\", other.foo) \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&& Objects.equals(\"anArray\", other.anArray);\n\nI believe adding corresponding overloads should not be difficult, and it makes the API much easier to use.\n"], "labels": [[0]], "ids": ["1125"], "change": 0, "size": 1}, {"titles": ["Array handling in Objects#toStringHelper"], "name": "com.google.common.base.MoreObjects$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1125) created by **adrianshum** on 2012-08-29 at 03:06 AM_\n\n---\n\nCurrently there is no handling for arrays in helpers in Objects, e.g. toStringHelper and Object.equal.\n\nThat means, I cannot do\nObjects.toStringHelper(getClass())\n&nbsp;&nbsp;&nbsp;&nbsp;.add(\"foo\", this.foo)\n&nbsp;&nbsp;&nbsp;&nbsp;.add(\"anArray\", this.anArray)\n&nbsp;&nbsp;&nbsp;&nbsp;.toString();\n\n(I know I can change it to add(\"anArray\", Arrays.toString(this.anArray)) but it looks bad)\n\nSame for Objects.equal, when I am overriding equals(), I cannot do:\nreturn Objects.equal(\"foo\", other.foo) \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&& Objects.equals(\"anArray\", other.anArray);\n\nI believe adding corresponding overloads should not be difficult, and it makes the API much easier to use.\n"], "labels": [[0]], "ids": ["1125"], "change": 0, "size": 1}, {"titles": ["Array handling in Objects#toStringHelper"], "name": "com.google.common.base.MoreObjects$ToStringHelper", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1125) created by **adrianshum** on 2012-08-29 at 03:06 AM_\n\n---\n\nCurrently there is no handling for arrays in helpers in Objects, e.g. toStringHelper and Object.equal.\n\nThat means, I cannot do\nObjects.toStringHelper(getClass())\n&nbsp;&nbsp;&nbsp;&nbsp;.add(\"foo\", this.foo)\n&nbsp;&nbsp;&nbsp;&nbsp;.add(\"anArray\", this.anArray)\n&nbsp;&nbsp;&nbsp;&nbsp;.toString();\n\n(I know I can change it to add(\"anArray\", Arrays.toString(this.anArray)) but it looks bad)\n\nSame for Objects.equal, when I am overriding equals(), I cannot do:\nreturn Objects.equal(\"foo\", other.foo) \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&& Objects.equals(\"anArray\", other.anArray);\n\nI believe adding corresponding overloads should not be difficult, and it makes the API much easier to use.\n"], "labels": [[0]], "ids": ["1125"], "change": 0, "size": 1}, {"titles": ["Array handling in Objects#toStringHelper"], "name": "com.google.common.base.MoreObjects$ToStringHelper$ValueHolder", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1125) created by **adrianshum** on 2012-08-29 at 03:06 AM_\n\n---\n\nCurrently there is no handling for arrays in helpers in Objects, e.g. toStringHelper and Object.equal.\n\nThat means, I cannot do\nObjects.toStringHelper(getClass())\n&nbsp;&nbsp;&nbsp;&nbsp;.add(\"foo\", this.foo)\n&nbsp;&nbsp;&nbsp;&nbsp;.add(\"anArray\", this.anArray)\n&nbsp;&nbsp;&nbsp;&nbsp;.toString();\n\n(I know I can change it to add(\"anArray\", Arrays.toString(this.anArray)) but it looks bad)\n\nSame for Objects.equal, when I am overriding equals(), I cannot do:\nreturn Objects.equal(\"foo\", other.foo) \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&& Objects.equals(\"anArray\", other.anArray);\n\nI believe adding corresponding overloads should not be difficult, and it makes the API much easier to use.\n"], "labels": [[0]], "ids": ["1125"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Objects", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Objects$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Objects$ToStringHelper", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Objects$ToStringHelper$ValueHolder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Optional.hashCode()", "Optional.hashCode()"], "name": "com.google.common.base.Optional$1", "version": "v18.0", "bodys": ["Uncorrect hashCode() implementation at com.google.common.base.Absent and com.google.common.base.Present - for example if hashCode() of reference at Present return 0 then it hashCode() equal Absent.\n\nexample: Optional.absent() has same hash code as Optional.of(0.0) or Optional.of(0)\n", "Uncorrect hashCode() implementation at com.google.common.base.Absent and com.google.common.base.Present - for example if hashCode() of reference at Present return 0 then it hashCode() equal Absent.\n\nexample: Optional.absent() has same hash code as Optional.of(0.0) or Optional.of(0)\n"], "labels": [[0], [0]], "ids": ["2037", "2037"], "change": 0, "size": 1}, {"titles": ["Optional.hashCode()", "Optional.hashCode()"], "name": "com.google.common.base.Optional$1$1", "version": "v18.0", "bodys": ["Uncorrect hashCode() implementation at com.google.common.base.Absent and com.google.common.base.Present - for example if hashCode() of reference at Present return 0 then it hashCode() equal Absent.\n\nexample: Optional.absent() has same hash code as Optional.of(0.0) or Optional.of(0)\n", "Uncorrect hashCode() implementation at com.google.common.base.Absent and com.google.common.base.Present - for example if hashCode() of reference at Present return 0 then it hashCode() equal Absent.\n\nexample: Optional.absent() has same hash code as Optional.of(0.0) or Optional.of(0)\n"], "labels": [[0], [0]], "ids": ["2037", "2037"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.PairwiseEquivalence", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.PairwiseEquivalence_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.base.Platform", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicate", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$AndPredicate", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$AssignableFromPredicate", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$CompositionPredicate", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$ContainsPatternFromStringPredicate", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$ContainsPatternPredicate", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$InPredicate", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$InstanceOfPredicate", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$IsEqualToPredicate", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$NotPredicate", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$ObjectPredicate", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$ObjectPredicate$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$ObjectPredicate$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$ObjectPredicate$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$ObjectPredicate$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$OrPredicate", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.SmallCharMatcher", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$2$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$3$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$4$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$5", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$MapSplitter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$SplittingIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$Strategy", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.StandardSystemProperty", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Possible duplicate tests? - testElapsed_millis() and testElapsedMillis()", "Possible duplicate tests? - testElapsed_millis() and testElapsedMillis()", "Possible duplicate tests? - testElapsed_millis() and testElapsedMillis()", "Running tests in a non-US locale might fail", "De-@Beta Stopwatch", "De-@Beta Stopwatch"], "name": "com.google.common.base.Stopwatch", "version": "v18.0", "bodys": ["Hello, I was reading through the set of tests at https://github.com/google/guava/blob/master/guava-tests/test/com/google/common/base/StopwatchTest.java , and I noticed there are two tests that appear to do the same thing - testElapsed_millis() and testElapsedMillis(). Is this expected? Could one test perhaps be an old test under a different naming convention? From the history it looks like they were added independently.\n\nThe contribution guide recommends creating an issue as the first step, so I thought I would ask.\n\nGitHub suggests that both functions are only called from guava-gwt/test/com/google/common/base/StopwatchTest_gwt.java . Would it be appropriate to create a pull request to remove one of the tests? (Or of course, feel free to simply remove one yourself if the workflow is easier; I just wanted to ask)\n\nCheers!\n", "Hello, I was reading through the set of tests at https://github.com/google/guava/blob/master/guava-tests/test/com/google/common/base/StopwatchTest.java , and I noticed there are two tests that appear to do the same thing - testElapsed_millis() and testElapsedMillis(). Is this expected? Could one test perhaps be an old test under a different naming convention? From the history it looks like they were added independently.\n\nThe contribution guide recommends creating an issue as the first step, so I thought I would ask.\n\nGitHub suggests that both functions are only called from guava-gwt/test/com/google/common/base/StopwatchTest_gwt.java . Would it be appropriate to create a pull request to remove one of the tests? (Or of course, feel free to simply remove one yourself if the workflow is easier; I just wanted to ask)\n\nCheers!\n", "Hello, I was reading through the set of tests at https://github.com/google/guava/blob/master/guava-tests/test/com/google/common/base/StopwatchTest.java , and I noticed there are two tests that appear to do the same thing - testElapsed_millis() and testElapsedMillis(). Is this expected? Could one test perhaps be an old test under a different naming convention? From the history it looks like they were added independently.\n\nThe contribution guide recommends creating an issue as the first step, so I thought I would ask.\n\nGitHub suggests that both functions are only called from guava-gwt/test/com/google/common/base/StopwatchTest_gwt.java . Would it be appropriate to create a pull request to remove one of the tests? (Or of course, feel free to simply remove one yourself if the workflow is easier; I just wanted to ask)\n\nCheers!\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1312) created by **vgal...@tennaxia.com** on 2013-02-28 at 01:05 PM_\n\n---\n\nHello,\n\nIt would be great if Stopwatch could be promoted in next release.\n\nThank you\n\nvictor\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1312) created by **vgal...@tennaxia.com** on 2013-02-28 at 01:05 PM_\n\n---\n\nHello,\n\nIt would be great if Stopwatch could be promoted in next release.\n\nThank you\n\nvictor\n"], "labels": [[6], [6], [6], [1], [7], [7]], "ids": ["2039", "2039", "2039", "1567", "1312", "1312"], "change": 0, "size": 1}, {"titles": ["Possible duplicate tests? - testElapsed_millis() and testElapsedMillis()", "Possible duplicate tests? - testElapsed_millis() and testElapsedMillis()", "Possible duplicate tests? - testElapsed_millis() and testElapsedMillis()", "Running tests in a non-US locale might fail", "De-@Beta Stopwatch", "De-@Beta Stopwatch"], "name": "com.google.common.base.Stopwatch$1", "version": "v18.0", "bodys": ["Hello, I was reading through the set of tests at https://github.com/google/guava/blob/master/guava-tests/test/com/google/common/base/StopwatchTest.java , and I noticed there are two tests that appear to do the same thing - testElapsed_millis() and testElapsedMillis(). Is this expected? Could one test perhaps be an old test under a different naming convention? From the history it looks like they were added independently.\n\nThe contribution guide recommends creating an issue as the first step, so I thought I would ask.\n\nGitHub suggests that both functions are only called from guava-gwt/test/com/google/common/base/StopwatchTest_gwt.java . Would it be appropriate to create a pull request to remove one of the tests? (Or of course, feel free to simply remove one yourself if the workflow is easier; I just wanted to ask)\n\nCheers!\n", "Hello, I was reading through the set of tests at https://github.com/google/guava/blob/master/guava-tests/test/com/google/common/base/StopwatchTest.java , and I noticed there are two tests that appear to do the same thing - testElapsed_millis() and testElapsedMillis(). Is this expected? Could one test perhaps be an old test under a different naming convention? From the history it looks like they were added independently.\n\nThe contribution guide recommends creating an issue as the first step, so I thought I would ask.\n\nGitHub suggests that both functions are only called from guava-gwt/test/com/google/common/base/StopwatchTest_gwt.java . Would it be appropriate to create a pull request to remove one of the tests? (Or of course, feel free to simply remove one yourself if the workflow is easier; I just wanted to ask)\n\nCheers!\n", "Hello, I was reading through the set of tests at https://github.com/google/guava/blob/master/guava-tests/test/com/google/common/base/StopwatchTest.java , and I noticed there are two tests that appear to do the same thing - testElapsed_millis() and testElapsedMillis(). Is this expected? Could one test perhaps be an old test under a different naming convention? From the history it looks like they were added independently.\n\nThe contribution guide recommends creating an issue as the first step, so I thought I would ask.\n\nGitHub suggests that both functions are only called from guava-gwt/test/com/google/common/base/StopwatchTest_gwt.java . Would it be appropriate to create a pull request to remove one of the tests? (Or of course, feel free to simply remove one yourself if the workflow is easier; I just wanted to ask)\n\nCheers!\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1312) created by **vgal...@tennaxia.com** on 2013-02-28 at 01:05 PM_\n\n---\n\nHello,\n\nIt would be great if Stopwatch could be promoted in next release.\n\nThank you\n\nvictor\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1312) created by **vgal...@tennaxia.com** on 2013-02-28 at 01:05 PM_\n\n---\n\nHello,\n\nIt would be great if Stopwatch could be promoted in next release.\n\nThank you\n\nvictor\n"], "labels": [[6], [6], [6], [1], [7], [7]], "ids": ["2039", "2039", "2039", "1567", "1312", "1312"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$ExpiringMemoizingSupplier", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$MemoizingSupplier", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$SupplierComposition", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$SupplierFunction", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$SupplierFunctionImpl", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$SupplierOfInstance", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$ThreadSafeSupplier", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Ticker", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Ticker$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Verify", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.VerifyException", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.cache.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.base.Preconditions", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Utf8", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.AbstractCache", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.AbstractCache$SimpleStatsCounter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.AbstractCache$StatsCounter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap", "Cache.stats usage should be documented better", "Running tests in a non-US locale might fail", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.Cache", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "As a novice of using Cache I think its statistic activation should be documented in the API of stats().\n\nFirst: recordStats() is to be isssued.\nSecond: stats() can not be instantiated because it is a factory for a final statistic.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1], [2], [1], [1]], "ids": ["339", "339", "2178", "1567", "2101"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilder", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilder$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilder$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilder$3", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilder$NullListener", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilder$OneWeigher", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilderSpec", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilderSpec$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilderSpec$AccessDurationParser", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilderSpec$ConcurrencyLevelParser", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilderSpec$DurationParser", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilderSpec$InitialCapacityParser", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilderSpec$IntegerParser", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilderSpec$KeyStrengthParser", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilderSpec$LongParser", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilderSpec$MaximumSizeParser", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilderSpec$MaximumWeightParser", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilderSpec$RecordStatsParser", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilderSpec$RefreshDurationParser", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilderSpec$ValueParser", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilderSpec$ValueStrengthParser", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.cache.CacheBuilderSpec$WriteDurationParser", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader$FunctionToCacheLoader", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader$InvalidCacheLoadException", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader$SupplierToCacheLoader", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader$UnsupportedLoadingOperationException", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheStats", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.ForwardingCache", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.ForwardingCache$SimpleForwardingCache", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.ForwardingLoadingCache", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LoadingCache", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$1", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$2", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$AbstractCacheSet", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$AbstractReferenceEntry", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$AccessQueue", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$AccessQueue$1", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$AccessQueue$2", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$EntryFactory", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$EntryFactory$1", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$EntryFactory$2", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$EntryFactory$3", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$EntryFactory$4", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$EntryFactory$5", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$EntryFactory$6", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$EntryFactory$7", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$EntryFactory$8", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$EntryIterator", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$EntrySet", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$HashIterator", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$KeyIterator", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$KeySet", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$LoadingSerializationProxy", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$LoadingValueReference", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$LoadingValueReference$1", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$LocalLoadingCache", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$LocalManualCache", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$LocalManualCache$1", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$ManualSerializationProxy", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$NullEntry", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$ReferenceEntry", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$Segment", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$Segment$1", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$SoftValueReference", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$Strength", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$Strength$1", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$Strength$2", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$Strength$3", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$StrongAccessEntry", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$StrongAccessWriteEntry", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$StrongEntry", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$StrongValueReference", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$StrongWriteEntry", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$ValueIterator", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$ValueReference", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$Values", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$WeakAccessEntry", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$WeakAccessWriteEntry", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$WeakEntry", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$WeakValueReference", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$WeakWriteEntry", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$WeightedSoftValueReference", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$WeightedStrongValueReference", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$WeightedWeakValueReference", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$WriteQueue", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$WriteQueue$1", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$WriteQueue$2", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": ["Cache.asMap().size() may return a negative value", "Wrong RemovalCause published on cache.invaldateAll()"], "name": "com.google.common.cache.LocalCache$WriteThroughEntry", "version": "v18.0", "bodys": ["My multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\n\n``` java\n(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\n(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\n```\n\nThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\n\n```\njava.lang.NegativeArraySizeException\nat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\nat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\nat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\nat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "When the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\n\nDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\n\n> The key and/or value may be null if they were already garbage collected.\n\nTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\n\n``` java\n@Test\npublic void clear_expireAfterAccess() {\n  FakeTicker ticker = new FakeTicker();\n  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\n  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\n      ArgumentCaptor.forClass(RemovalNotification.class);\n  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\n      .expireAfterAccess(1, TimeUnit.MINUTES)\n      .removalListener(listener)\n      .ticker(ticker)\n      .build();\n  cache.put(1, 1);\n  ticker.advance(10, TimeUnit.MINUTES);\n  cache.invalidateAll();\n\n  verify(listener).onRemoval(captor.capture());\n  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\n}\n```\n\nThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \n\nUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\n"], "labels": [[1], [1]], "ids": ["2108", "2101"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LongAddable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LongAddables", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LongAddables$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LongAddables$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LongAddables$PureJavaLongAddable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LongAdder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalCause", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalCause$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalCause$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalCause$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalCause$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalCause$5", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalListener", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalListeners", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalListeners$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalListeners$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalNotification", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.Striped64", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.Striped64$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.Striped64$Cell", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.Weigher", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EvictingQueue", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableBiMap_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.escape.ArrayBasedUnicodeEscaper", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashingInputStream", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashingOutputStream", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.PatternFilenameFilter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FakeTicker", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FakeTimeLimiter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SettableFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "sun.misc.Unsafe", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.collect.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.annotations.Beta", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.annotations.VisibleForTesting", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Optional.hashCode()"], "name": "com.google.common.base.Absent", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "Uncorrect hashCode() implementation at com.google.common.base.Absent and com.google.common.base.Present - for example if hashCode() of reference at Present return 0 then it hashCode() equal Absent.\n\nexample: Optional.absent() has same hash code as Optional.of(0.0) or Optional.of(0)\n"], "labels": [[1], [0]], "ids": ["339", "2037"], "change": 0, "size": 1}, {"titles": ["Optional.hashCode()", "Optional.hashCode()"], "name": "com.google.common.base.Optional", "version": "v18.0", "bodys": ["Uncorrect hashCode() implementation at com.google.common.base.Absent and com.google.common.base.Present - for example if hashCode() of reference at Present return 0 then it hashCode() equal Absent.\n\nexample: Optional.absent() has same hash code as Optional.of(0.0) or Optional.of(0)\n", "Uncorrect hashCode() implementation at com.google.common.base.Absent and com.google.common.base.Present - for example if hashCode() of reference at Present return 0 then it hashCode() equal Absent.\n\nexample: Optional.absent() has same hash code as Optional.of(0.0) or Optional.of(0)\n"], "labels": [[0], [0]], "ids": ["2037", "2037"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Present", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Present_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.AbstractLoadingCache", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$EntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$EntrySet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$EntrySet$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$Inverse", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$KeySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$ValueSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractIndexedListIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractIterator$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractIterator$State", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractListMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$AsMap", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$Itr", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$KeySet", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$KeySet$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedList", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultiset", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultiset$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultiset$1$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultimap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultimap$Entries", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultimap$EntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultimap$Values", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultiset$ElementSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultiset$EntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractNavigableMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractNavigableMap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractNavigableMap$DescendingMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractRangeSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractSequentialIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractSetMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractSortedKeySortedSetMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractSortedMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractSortedMultiset$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractSortedSetMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractTable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractTable$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractTable$CellSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractTable$Values", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.AllEqualOrdering", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AllEqualOrdering_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$ArrayMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$ArrayMap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$ArrayMap$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$ArrayMap$1$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$Column", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$ColumnMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$Row", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$RowMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser$InOrderIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser$PostOrderIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser$PreOrderIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BoundType", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BoundType$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BoundType$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ByFunctionOrdering", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ByFunctionOrdering_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.CartesianList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.CartesianList$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.CollectPreconditions", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$FilteredCollection", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$OrderedPermutationCollection", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$OrderedPermutationIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$PermutationCollection", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$PermutationIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$TransformedCollection", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComparatorOrdering", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComparatorOrdering_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComparisonChain", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComparisonChain$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComparisonChain$InactiveComparisonChain", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.CompoundOrdering", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.CompoundOrdering_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComputationException", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.ComputingConcurrentHashMap", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.ComputingConcurrentHashMap$ComputedReference", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.ComputingConcurrentHashMap$ComputingSerializationProxy", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConcurrentHashMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConcurrentHashMultiset$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConcurrentHashMultiset$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConcurrentHashMultiset$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConcurrentHashMultiset$EntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConcurrentHashMultiset$FieldSettersHolder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraint", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints$ConstrainedCollection", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints$ConstrainedList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints$ConstrainedListIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints$ConstrainedRandomAccessList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints$ConstrainedSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints$ConstrainedSortedSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Count", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.Cut", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.Cut$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.Cut$AboveAll", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.Cut$AboveValue", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.Cut$BelowAll", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.Cut$BelowValue", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$Column", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$ColumnMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$Row", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$RowMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DescendingImmutableSortedMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DescendingImmutableSortedSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DescendingMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DescendingMultiset$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.DiscreteDomain", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.DiscreteDomain$BigIntegerDomain", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.DiscreteDomain$IntegerDomain", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.DiscreteDomain$LongDomain", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyContiguousSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyContiguousSet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyContiguousSet$SerializedForm", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyImmutableBiMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyImmutableBiMap_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.EmptyImmutableListMultimap", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyImmutableListMultimap_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.EmptyImmutableSet", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.EmptyImmutableSetMultimap", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyImmutableSetMultimap_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyImmutableSet_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyImmutableSortedMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyImmutableSortedMap_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyImmutableSortedMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyImmutableSortedSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyImmutableSortedSet_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.EnumBiMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EnumHashBiMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ExplicitOrdering", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$AsMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$AsMap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$AsMap$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$AsMap$2$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$AsMap$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$Keys", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$Keys$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$Keys$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$ValuePredicate", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntrySetMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeyListMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeyMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeyMultimap$AddRejectingList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeyMultimap$AddRejectingSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeyMultimap$Entries", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeySetMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeySetMultimap$EntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredMultimapValues", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredSetMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.FluentIterable", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.FluentIterable$1", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.FluentIterable$FromIterableFunction", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingBlockingDeque", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingCollection", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingConcurrentMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingDeque", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingListIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMap$StandardEntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMap$StandardKeySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMap$StandardValues", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMultiset$StandardElementSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingNavigableMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingNavigableSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingNavigableSet$StandardDescendingSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingQueue", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSetMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedMap$StandardKeySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedMultiset$StandardElementSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedSetMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingTable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GeneralRange", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GenericMapMaker", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GenericMapMaker$NullListener", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$HashBasedTableDependencies", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$ImmutableListMultimapDependencies", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$ImmutableSetMultimapDependencies", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$ImmutableTableDependencies", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$LinkedListMultimapDependencies", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$TreeBasedTableDependencies", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$TreeMultimapDependencies", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtTransient", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBasedTable_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$BiEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$EntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$EntrySet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$EntrySet$1$MapEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$EntrySet$1.MapEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse$1$1$InverseEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse$1$1.InverseEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse$InverseKeySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse$InverseKeySet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$InverseSerializedForm", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Itr", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$KeySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$KeySet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Hashing", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.ImmutableAsList", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.ImmutableAsList$SerializedForm", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableBiMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableBiMap$Builder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableBiMap$SerializedForm", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEntry_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumMap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumMap$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumMap$2$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumMap$EnumSerializedForm", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumSet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumSet$EnumSerializedForm", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumSet_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Possible deadlock in ImmutableList "], "name": "com.google.common.collect.ImmutableList", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "ImmutableList contains following code since version 15.0\n\n private static final ImmutableList<Object> EMPTY =\n      new RegularImmutableList<Object>(ObjectArrays.EMPTY_ARRAY);\n"], "labels": [[1], [1]], "ids": ["339", "1977"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Possible deadlock in ImmutableList "], "name": "com.google.common.collect.ImmutableList$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "ImmutableList contains following code since version 15.0\n\n private static final ImmutableList<Object> EMPTY =\n      new RegularImmutableList<Object>(ObjectArrays.EMPTY_ARRAY);\n"], "labels": [[1], [1]], "ids": ["339", "1977"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Possible deadlock in ImmutableList "], "name": "com.google.common.collect.ImmutableList$ReverseImmutableList", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "ImmutableList contains following code since version 15.0\n\n private static final ImmutableList<Object> EMPTY =\n      new RegularImmutableList<Object>(ObjectArrays.EMPTY_ARRAY);\n"], "labels": [[1], [1]], "ids": ["339", "1977"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Possible deadlock in ImmutableList "], "name": "com.google.common.collect.ImmutableList$SerializedForm", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "ImmutableList contains following code since version 15.0\n\n private static final ImmutableList<Object> EMPTY =\n      new RegularImmutableList<Object>(ObjectArrays.EMPTY_ARRAY);\n"], "labels": [[1], [1]], "ids": ["339", "1977"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Possible deadlock in ImmutableList "], "name": "com.google.common.collect.ImmutableList$SubList", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "ImmutableList contains following code since version 15.0\n\n private static final ImmutableList<Object> EMPTY =\n      new RegularImmutableList<Object>(ObjectArrays.EMPTY_ARRAY);\n"], "labels": [[1], [1]], "ids": ["339", "1977"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableListMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableListMultimap$Builder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableListMultimap_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Guava can't be compiled by JDT"], "name": "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets", "version": "v18.0", "bodys": ["I'm a [Spoon](https://github.com/INRIA/spoon) contributor, an open source project to analyse and transform Java source code. This project have a dependency to [JDT](https://eclipse.org/jdt/) to compile target source code. Recently, I tried to analyse Guava with Spoon but JDT can't compile our project.\n\nWhat is the problem?\n\nIn [`ImmutableMap`](https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableMap.java) class, we have these methods:\n\n``` java\n// If the map is an EnumMap, it must have key type K for some <K extends Enum<K>>.\n@SuppressWarnings({\"unchecked\", \"rawtypes\"})\nprivate static <K, V> ImmutableMap<K, V> copyOfEnumMapUnsafe(Map<? extends K, ? extends V> map) {\n    return copyOfEnumMap((EnumMap) map);\n}\n\nprivate static <K extends Enum<K>, V> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\n    EnumMap<K, V> copy = new EnumMap<K, V>(original);\n    for (Map.Entry<?, ?> entry : copy.entrySet()) {\n        checkEntryNotNull(entry.getKey(), entry.getValue());\n    }\n    return ImmutableEnumMap.asImmutable(copy);\n}\n```\n\nThis code is valid but there is an error from JDT:\n\n> Type mismatch: cannot convert from `<Enum<Enum<K>>>` to `<K>`\n\nBefore the creation of this issue, I reported the bug in the bugtracker of JDT (issue [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404)). In 2 words, the conclusion was that: \"Yes, JDT don't support this usage of Java but there is a better practice\". This better practice is explained [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404#c3):\n\n``` java\nprivate static <K extends Enum<K>> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\n    return copyOfEnumMap((EnumMap<K,?>) map);\n}\n```\n\nI tried some tricky solutions but, unfortunately, this solution can't be applied in your project. So I come to notify you that your project can't be compiled by JDT.\n"], "labels": [[]], "ids": ["2082"], "change": 0, "size": 1}, {"titles": ["Guava can't be compiled by JDT"], "name": "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1", "version": "v18.0", "bodys": ["I'm a [Spoon](https://github.com/INRIA/spoon) contributor, an open source project to analyse and transform Java source code. This project have a dependency to [JDT](https://eclipse.org/jdt/) to compile target source code. Recently, I tried to analyse Guava with Spoon but JDT can't compile our project.\n\nWhat is the problem?\n\nIn [`ImmutableMap`](https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableMap.java) class, we have these methods:\n\n``` java\n// If the map is an EnumMap, it must have key type K for some <K extends Enum<K>>.\n@SuppressWarnings({\"unchecked\", \"rawtypes\"})\nprivate static <K, V> ImmutableMap<K, V> copyOfEnumMapUnsafe(Map<? extends K, ? extends V> map) {\n    return copyOfEnumMap((EnumMap) map);\n}\n\nprivate static <K extends Enum<K>, V> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\n    EnumMap<K, V> copy = new EnumMap<K, V>(original);\n    for (Map.Entry<?, ?> entry : copy.entrySet()) {\n        checkEntryNotNull(entry.getKey(), entry.getValue());\n    }\n    return ImmutableEnumMap.asImmutable(copy);\n}\n```\n\nThis code is valid but there is an error from JDT:\n\n> Type mismatch: cannot convert from `<Enum<Enum<K>>>` to `<K>`\n\nBefore the creation of this issue, I reported the bug in the bugtracker of JDT (issue [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404)). In 2 words, the conclusion was that: \"Yes, JDT don't support this usage of Java but there is a better practice\". This better practice is explained [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404#c3):\n\n``` java\nprivate static <K extends Enum<K>> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\n    return copyOfEnumMap((EnumMap<K,?>) map);\n}\n```\n\nI tried some tricky solutions but, unfortunately, this solution can't be applied in your project. So I come to notify you that your project can't be compiled by JDT.\n"], "labels": [[]], "ids": ["2082"], "change": 0, "size": 1}, {"titles": ["Guava can't be compiled by JDT"], "name": "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1", "version": "v18.0", "bodys": ["I'm a [Spoon](https://github.com/INRIA/spoon) contributor, an open source project to analyse and transform Java source code. This project have a dependency to [JDT](https://eclipse.org/jdt/) to compile target source code. Recently, I tried to analyse Guava with Spoon but JDT can't compile our project.\n\nWhat is the problem?\n\nIn [`ImmutableMap`](https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableMap.java) class, we have these methods:\n\n``` java\n// If the map is an EnumMap, it must have key type K for some <K extends Enum<K>>.\n@SuppressWarnings({\"unchecked\", \"rawtypes\"})\nprivate static <K, V> ImmutableMap<K, V> copyOfEnumMapUnsafe(Map<? extends K, ? extends V> map) {\n    return copyOfEnumMap((EnumMap) map);\n}\n\nprivate static <K extends Enum<K>, V> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\n    EnumMap<K, V> copy = new EnumMap<K, V>(original);\n    for (Map.Entry<?, ?> entry : copy.entrySet()) {\n        checkEntryNotNull(entry.getKey(), entry.getValue());\n    }\n    return ImmutableEnumMap.asImmutable(copy);\n}\n```\n\nThis code is valid but there is an error from JDT:\n\n> Type mismatch: cannot convert from `<Enum<Enum<K>>>` to `<K>`\n\nBefore the creation of this issue, I reported the bug in the bugtracker of JDT (issue [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404)). In 2 words, the conclusion was that: \"Yes, JDT don't support this usage of Java but there is a better practice\". This better practice is explained [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404#c3):\n\n``` java\nprivate static <K extends Enum<K>> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\n    return copyOfEnumMap((EnumMap<K,?>) map);\n}\n```\n\nI tried some tricky solutions but, unfortunately, this solution can't be applied in your project. So I come to notify you that your project can't be compiled by JDT.\n"], "labels": [[]], "ids": ["2082"], "change": 0, "size": 1}, {"titles": ["Guava can't be compiled by JDT"], "name": "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1$1", "version": "v18.0", "bodys": ["I'm a [Spoon](https://github.com/INRIA/spoon) contributor, an open source project to analyse and transform Java source code. This project have a dependency to [JDT](https://eclipse.org/jdt/) to compile target source code. Recently, I tried to analyse Guava with Spoon but JDT can't compile our project.\n\nWhat is the problem?\n\nIn [`ImmutableMap`](https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableMap.java) class, we have these methods:\n\n``` java\n// If the map is an EnumMap, it must have key type K for some <K extends Enum<K>>.\n@SuppressWarnings({\"unchecked\", \"rawtypes\"})\nprivate static <K, V> ImmutableMap<K, V> copyOfEnumMapUnsafe(Map<? extends K, ? extends V> map) {\n    return copyOfEnumMap((EnumMap) map);\n}\n\nprivate static <K extends Enum<K>, V> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\n    EnumMap<K, V> copy = new EnumMap<K, V>(original);\n    for (Map.Entry<?, ?> entry : copy.entrySet()) {\n        checkEntryNotNull(entry.getKey(), entry.getValue());\n    }\n    return ImmutableEnumMap.asImmutable(copy);\n}\n```\n\nThis code is valid but there is an error from JDT:\n\n> Type mismatch: cannot convert from `<Enum<Enum<K>>>` to `<K>`\n\nBefore the creation of this issue, I reported the bug in the bugtracker of JDT (issue [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404)). In 2 words, the conclusion was that: \"Yes, JDT don't support this usage of Java but there is a better practice\". This better practice is explained [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404#c3):\n\n``` java\nprivate static <K extends Enum<K>> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\n    return copyOfEnumMap((EnumMap<K,?>) map);\n}\n```\n\nI tried some tricky solutions but, unfortunately, this solution can't be applied in your project. So I come to notify you that your project can't be compiled by JDT.\n"], "labels": [[]], "ids": ["2082"], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapEntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapKeySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapKeySet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapValues", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapValues$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapValues$SerializedForm", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$Builder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$BuilderMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$EntryCollection", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$FieldSettersHolder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$Itr", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$Keys", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$Values", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultiset$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultiset$Builder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultiset$EntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultiset$EntrySet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultiset$SerializedForm", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeMap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeMap$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeMap$Builder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeSet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeSet$AsSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeSet$AsSet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeSet$AsSet$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeSet$Builder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeSet$ComplementRanges", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeSet$SerializedForm", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSet$SerializedForm", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSetMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSetMultimap$Builder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSetMultimap$BuilderMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSetMultimap$EntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSetMultimap_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedAsList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMap$Builder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMap$SerializedForm", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMapFauxverideShim", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMap_CustomFieldSerializerBase", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMultiset$Builder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMultiset$SerializedForm", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMultisetFauxverideShim", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.ImmutableSortedSet", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.ImmutableSortedSet$SerializedForm", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedSetFauxverideShim", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableTable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableTable$Builder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableTable_CustomFieldSerializerBase", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Interner", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Interners", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Interners$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Interners$InternerFunction", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Interners$WeakInterner", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Interners$WeakInterner$Dummy", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.toArray broken in case of concurrent modifications", "Iterables.toArray broken in case of concurrent modifications", "Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterables", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1], [1], [2], [2], [1], [1], [1], [1]], "ids": ["1596", "1596", "1596", "1543", "1543", "1558", "1558", "2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.toArray broken in case of concurrent modifications", "Iterables.toArray broken in case of concurrent modifications", "Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterables$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1], [1], [2], [2], [1], [1], [1], [1]], "ids": ["1596", "1596", "1596", "1543", "1543", "1558", "1558", "2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.toArray broken in case of concurrent modifications", "Iterables.toArray broken in case of concurrent modifications", "Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterables$10", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1], [1], [2], [2], [1], [1], [1], [1]], "ids": ["1596", "1596", "1596", "1543", "1543", "1558", "1558", "2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.toArray broken in case of concurrent modifications", "Iterables.toArray broken in case of concurrent modifications", "Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterables$10$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1], [1], [2], [2], [1], [1], [1], [1]], "ids": ["1596", "1596", "1596", "1543", "1543", "1558", "1558", "2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.toArray broken in case of concurrent modifications", "Iterables.toArray broken in case of concurrent modifications", "Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterables$11", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1], [1], [2], [2], [1], [1], [1], [1]], "ids": ["1596", "1596", "1596", "1543", "1543", "1558", "1558", "2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.toArray broken in case of concurrent modifications", "Iterables.toArray broken in case of concurrent modifications", "Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterables$12", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1], [1], [2], [2], [1], [1], [1], [1]], "ids": ["1596", "1596", "1596", "1543", "1543", "1558", "1558", "2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.toArray broken in case of concurrent modifications", "Iterables.toArray broken in case of concurrent modifications", "Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterables$13", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1], [1], [2], [2], [1], [1], [1], [1]], "ids": ["1596", "1596", "1596", "1543", "1543", "1558", "1558", "2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.toArray broken in case of concurrent modifications", "Iterables.toArray broken in case of concurrent modifications", "Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterables$14", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1], [1], [2], [2], [1], [1], [1], [1]], "ids": ["1596", "1596", "1596", "1543", "1543", "1558", "1558", "2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.toArray broken in case of concurrent modifications", "Iterables.toArray broken in case of concurrent modifications", "Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterables$15", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1], [1], [2], [2], [1], [1], [1], [1]], "ids": ["1596", "1596", "1596", "1543", "1543", "1558", "1558", "2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.toArray broken in case of concurrent modifications", "Iterables.toArray broken in case of concurrent modifications", "Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterables$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1], [1], [2], [2], [1], [1], [1], [1]], "ids": ["1596", "1596", "1596", "1543", "1543", "1558", "1558", "2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.toArray broken in case of concurrent modifications", "Iterables.toArray broken in case of concurrent modifications", "Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterables$3", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1], [1], [2], [2], [1], [1], [1], [1]], "ids": ["1596", "1596", "1596", "1543", "1543", "1558", "1558", "2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.toArray broken in case of concurrent modifications", "Iterables.toArray broken in case of concurrent modifications", "Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterables$4", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1], [1], [2], [2], [1], [1], [1], [1]], "ids": ["1596", "1596", "1596", "1543", "1543", "1558", "1558", "2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.toArray broken in case of concurrent modifications", "Iterables.toArray broken in case of concurrent modifications", "Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterables$5", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1], [1], [2], [2], [1], [1], [1], [1]], "ids": ["1596", "1596", "1596", "1543", "1543", "1558", "1558", "2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.toArray broken in case of concurrent modifications", "Iterables.toArray broken in case of concurrent modifications", "Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterables$6", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1], [1], [2], [2], [1], [1], [1], [1]], "ids": ["1596", "1596", "1596", "1543", "1543", "1558", "1558", "2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.toArray broken in case of concurrent modifications", "Iterables.toArray broken in case of concurrent modifications", "Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterables$7", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1], [1], [2], [2], [1], [1], [1], [1]], "ids": ["1596", "1596", "1596", "1543", "1543", "1558", "1558", "2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.toArray broken in case of concurrent modifications", "Iterables.toArray broken in case of concurrent modifications", "Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterables$8", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1], [1], [2], [2], [1], [1], [1], [1]], "ids": ["1596", "1596", "1596", "1543", "1543", "1558", "1558", "2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.toArray broken in case of concurrent modifications", "Iterables.toArray broken in case of concurrent modifications", "Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterables$9", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1], [1], [2], [2], [1], [1], [1], [1]], "ids": ["1596", "1596", "1596", "1543", "1543", "1558", "1558", "2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.toArray broken in case of concurrent modifications", "Iterables.toArray broken in case of concurrent modifications", "Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterables$ConsumingQueueIterator", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1], [1], [2], [2], [1], [1], [1], [1]], "ids": ["1596", "1596", "1596", "1543", "1543", "1558", "1558", "2008", "2008"], "change": 5, "size": 1}, {"titles": ["Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.removeIf wrong items removed when ArrayList is used", "Iterables.toArray broken in case of concurrent modifications", "Iterables.toArray broken in case of concurrent modifications", "Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterables$UnmodifiableIterable", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\n\n---\n\nThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\n\n\"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.\" (java.util.List, JavaDoc).\n\nWhen a list prohibits duplicates, \ncom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \nleads to exceptions, because an element temporarily may be contained muiltple times in the list. \nThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\n\nSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\n\n---\n\nHi,\n\nI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\n\nNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\n\n<code language=\"java\">\n&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\n&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\n\n```\n    final List<String> list = Lists.newArrayList(\"a\", \"b\", \"a\");\n\n    System.out.println(list); // [a, b, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [b, a]\n\n}\n\n@Test\npublic void testWrong() throws Exception {\n\n    final List<String> list = Lists.newArrayList(\"a\", \"a\", \"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [] should be [a]\n\n}\n\n@Test\npublic void testOkWithLinkedList() throws Exception {\n\n    final List<String> list = Lists.newLinkedList();\n    list.add(\"a\");\n    list.add(\"a\");\n    list.add(\"a\");\n\n    System.out.println(list); // [a, a, a]\n    Iterables.removeIf(list, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return Iterables.frequency(list, input) >= 2;\n        }\n    });\n    System.out.println(list); // [a]\n\n}\n```\n\n</code>\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\n\n---\n\nIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\n\nThe documentation says \"return a newly-allocated array into which all the elements of the iterable have been copied\", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\n\nIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\n\nThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1], [1], [2], [2], [1], [1], [1], [1]], "ids": ["1596", "1596", "1596", "1543", "1543", "1558", "1558", "2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterators", "version": "v18.0", "bodys": ["I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1]], "ids": ["2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterators$1", "version": "v18.0", "bodys": ["I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1]], "ids": ["2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterators$10", "version": "v18.0", "bodys": ["I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1]], "ids": ["2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterators$11", "version": "v18.0", "bodys": ["I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1]], "ids": ["2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterators$12", "version": "v18.0", "bodys": ["I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1]], "ids": ["2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterators$13", "version": "v18.0", "bodys": ["I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1]], "ids": ["2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterators$14", "version": "v18.0", "bodys": ["I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1]], "ids": ["2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterators$2", "version": "v18.0", "bodys": ["I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1]], "ids": ["2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterators$3", "version": "v18.0", "bodys": ["I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1]], "ids": ["2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterators$4", "version": "v18.0", "bodys": ["I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1]], "ids": ["2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterators$5", "version": "v18.0", "bodys": ["I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1]], "ids": ["2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterators$6", "version": "v18.0", "bodys": ["I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1]], "ids": ["2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterators$7", "version": "v18.0", "bodys": ["I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1]], "ids": ["2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterators$8", "version": "v18.0", "bodys": ["I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1]], "ids": ["2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterators$9", "version": "v18.0", "bodys": ["I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1]], "ids": ["2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterators$MergingIterator", "version": "v18.0", "bodys": ["I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1]], "ids": ["2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterators$MergingIterator$1", "version": "v18.0", "bodys": ["I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1]], "ids": ["2008", "2008"], "change": 0, "size": 1}, {"titles": ["Iterators.concat is not gc friendly", "Iterators.concat is not gc friendly"], "name": "com.google.common.collect.Iterators$PeekingImpl", "version": "v18.0", "bodys": ["I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n", "I ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\n\n(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\n\nHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\n"], "labels": [[1], [1]], "ids": ["2008", "2008"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LexicographicalOrdering", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LexicographicalOrdering_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap$ValueEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap$ValueSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap$ValueSet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap$ValueSetLink", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$3$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$KeyList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$Node", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$NodeIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$AbstractListWrapper", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$CharSequenceAsList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$OnePlusArrayList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$Partition", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$RandomAccessListWrapper", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$RandomAccessPartition", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$RandomAccessReverseList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$ReverseList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$ReverseList$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$StringAsImmutableList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$TransformingRandomAccessList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$TransformingRandomAccessList$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$TransformingSequentialList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$TransformingSequentialList$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$TwoPlusArrayList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraint", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$2$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedAsMapEntries", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedAsMapEntries$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedAsMapValues", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedAsMapValues$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedBiMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedEntries", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedEntries$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedEntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedListMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedMultimap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedMultimap$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedSetMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$InverseConstraint", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$NotNullMapConstraint", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapDifference", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapDifference$ValueDifference", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Javadoc error in MapMaker"], "name": "com.google.common.collect.MapMaker", "version": "v18.0", "bodys": ["MapMaker javadoc advertises \"on-demand computation of values for keys not already present\" but this doesn't appear to actually be possible.\n"], "labels": [[2]], "ids": ["1885"], "change": 0, "size": 1}, {"titles": ["Javadoc error in MapMaker"], "name": "com.google.common.collect.MapMaker$1", "version": "v18.0", "bodys": ["MapMaker javadoc advertises \"on-demand computation of values for keys not already present\" but this doesn't appear to actually be possible.\n"], "labels": [[2]], "ids": ["1885"], "change": 0, "size": 1}, {"titles": ["Javadoc error in MapMaker"], "name": "com.google.common.collect.MapMaker$ComputingMapAdapter", "version": "v18.0", "bodys": ["MapMaker javadoc advertises \"on-demand computation of values for keys not already present\" but this doesn't appear to actually be possible.\n"], "labels": [[2]], "ids": ["1885"], "change": 0, "size": 1}, {"titles": ["Javadoc error in MapMaker"], "name": "com.google.common.collect.MapMaker$NullComputingConcurrentMap", "version": "v18.0", "bodys": ["MapMaker javadoc advertises \"on-demand computation of values for keys not already present\" but this doesn't appear to actually be possible.\n"], "labels": [[2]], "ids": ["1885"], "change": 0, "size": 1}, {"titles": ["Javadoc error in MapMaker"], "name": "com.google.common.collect.MapMaker$NullConcurrentMap", "version": "v18.0", "bodys": ["MapMaker javadoc advertises \"on-demand computation of values for keys not already present\" but this doesn't appear to actually be possible.\n"], "labels": [[2]], "ids": ["1885"], "change": 0, "size": 1}, {"titles": ["Javadoc error in MapMaker"], "name": "com.google.common.collect.MapMaker$RemovalCause", "version": "v18.0", "bodys": ["MapMaker javadoc advertises \"on-demand computation of values for keys not already present\" but this doesn't appear to actually be possible.\n"], "labels": [[2]], "ids": ["1885"], "change": 0, "size": 1}, {"titles": ["Javadoc error in MapMaker"], "name": "com.google.common.collect.MapMaker$RemovalCause$1", "version": "v18.0", "bodys": ["MapMaker javadoc advertises \"on-demand computation of values for keys not already present\" but this doesn't appear to actually be possible.\n"], "labels": [[2]], "ids": ["1885"], "change": 0, "size": 1}, {"titles": ["Javadoc error in MapMaker"], "name": "com.google.common.collect.MapMaker$RemovalCause$2", "version": "v18.0", "bodys": ["MapMaker javadoc advertises \"on-demand computation of values for keys not already present\" but this doesn't appear to actually be possible.\n"], "labels": [[2]], "ids": ["1885"], "change": 0, "size": 1}, {"titles": ["Javadoc error in MapMaker"], "name": "com.google.common.collect.MapMaker$RemovalCause$3", "version": "v18.0", "bodys": ["MapMaker javadoc advertises \"on-demand computation of values for keys not already present\" but this doesn't appear to actually be possible.\n"], "labels": [[2]], "ids": ["1885"], "change": 0, "size": 1}, {"titles": ["Javadoc error in MapMaker"], "name": "com.google.common.collect.MapMaker$RemovalCause$4", "version": "v18.0", "bodys": ["MapMaker javadoc advertises \"on-demand computation of values for keys not already present\" but this doesn't appear to actually be possible.\n"], "labels": [[2]], "ids": ["1885"], "change": 0, "size": 1}, {"titles": ["Javadoc error in MapMaker"], "name": "com.google.common.collect.MapMaker$RemovalCause$5", "version": "v18.0", "bodys": ["MapMaker javadoc advertises \"on-demand computation of values for keys not already present\" but this doesn't appear to actually be possible.\n"], "labels": [[2]], "ids": ["1885"], "change": 0, "size": 1}, {"titles": ["Javadoc error in MapMaker"], "name": "com.google.common.collect.MapMaker$RemovalListener", "version": "v18.0", "bodys": ["MapMaker javadoc advertises \"on-demand computation of values for keys not already present\" but this doesn't appear to actually be possible.\n"], "labels": [[2]], "ids": ["1885"], "change": 0, "size": 1}, {"titles": ["Javadoc error in MapMaker"], "name": "com.google.common.collect.MapMaker$RemovalNotification", "version": "v18.0", "bodys": ["MapMaker javadoc advertises \"on-demand computation of values for keys not already present\" but this doesn't appear to actually be possible.\n"], "labels": [[2]], "ids": ["1885"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$CleanupMapTask", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryFactory", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryFactory$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryFactory$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryFactory$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryFactory$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryFactory$5", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryFactory$6", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryFactory$7", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryFactory$8", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EvictionQueue", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EvictionQueue$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EvictionQueue$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$ExpirationQueue", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$ExpirationQueue$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$HashIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$KeyIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$KeySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$NullEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$ReferenceEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$Segment", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$SerializationProxy", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$SoftEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$SoftEvictableEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$SoftExpirableEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$SoftValueReference", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$Strength", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$Strength$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$Strength$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$Strength$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$StrongEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$StrongEvictableEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$StrongValueReference", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$ValueIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$ValueReference", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$Values", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WeakEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WeakEvictableEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WeakValueReference", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WriteThroughEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$1", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$10", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$11", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$2", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$3", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$4", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$5", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$6", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$7", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$8", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$9", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$AbstractFilteredMap", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$AsMapView", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$AsMapView$1", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 5, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$BiMapConverter", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$DescendingMap", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$DescendingMap$1", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 5, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$EntryFunction", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$EntryFunction$1", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$EntryFunction$2", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$EntrySet", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$EntryTransformer", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$FilteredEntryBiMap", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$FilteredEntryBiMap$1", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$FilteredEntryMap", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$FilteredEntryMap$EntrySet", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$FilteredEntryMap$KeySet", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$FilteredEntryNavigableMap", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$FilteredEntryNavigableMap$1", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$FilteredEntrySortedMap", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$FilteredKeyMap", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$FilteredMapValues", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$ImprovedAbstractMap", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 5, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$KeySet", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$MapDifferenceImpl", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$NavigableAsMapView", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$NavigableKeySet", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$SortedAsMapView", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$SortedKeySet", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$SortedMapDifferenceImpl", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$TransformedEntriesMap", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$TransformedEntriesMap$1", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 5, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$TransformedEntriesNavigableMap", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$TransformedEntriesSortedMap", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$UnmodifiableBiMap", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$UnmodifiableEntries", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$UnmodifiableEntries$1", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 5, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$UnmodifiableEntrySet", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$UnmodifiableNavigableMap", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$ValueDifferenceImpl", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["De-@Beta Maps.asMap and toMap", "De-@Beta Maps.asMap and toMap"], "name": "com.google.common.collect.Maps$Values", "version": "v18.0", "bodys": ["Would be keen to use these in non-`@Beta`. Are there any plans?\n", "Would be keen to use these in non-`@Beta`. Are there any plans?\n"], "labels": [[0], [0]], "ids": ["1963", "1963"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.MinMaxPriorityQueue", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.MinMaxPriorityQueue$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.MinMaxPriorityQueue$Builder", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.MinMaxPriorityQueue$Heap", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.MinMaxPriorityQueue$MoveDesc", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.MinMaxPriorityQueue$QueueIterator", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$ArrayListSupplier", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$EnumSetSupplier", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$HashSetSupplier", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$LinkedListSupplier", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$ListMultimapBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$SetMultimapBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$TreeSetSupplier", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimap_CustomFieldSerializerBase", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$AsMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$AsMap$EntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$AsMap$EntrySet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$CustomListMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$CustomMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$CustomSetMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$CustomSortedSetMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$Entries", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$Keys", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$Keys$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$Keys$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$Keys$KeysEntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$MapMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$MapMultimap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$MapMultimap$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$TransformedEntriesListMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$TransformedEntriesMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$TransformedEntriesMultimap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$UnmodifiableListMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$UnmodifiableMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$UnmodifiableMultimap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$UnmodifiableSetMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$2$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$3$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$4$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$5", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$AbstractEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$ElementSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$ElementSet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$EntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$FilteredMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$FilteredMultiset$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$ImmutableEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$MultisetIteratorImpl", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$UnmodifiableMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["MutableClassToInstanceMap should implement Serializable", "MutableClassToInstanceMap should implement Serializable"], "name": "com.google.common.collect.MutableClassToInstanceMap", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1437) created by **mike.rumpf** on 2013-05-31 at 06:11 AM_\n\n---\n\nMutableClassToInstanceMap defines a serialVersionUID but itself does not implement Serializable. This is inconsistent to other guava collection types.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1437) created by **mike.rumpf** on 2013-05-31 at 06:11 AM_\n\n---\n\nMutableClassToInstanceMap defines a serialVersionUID but itself does not implement Serializable. This is inconsistent to other guava collection types.\n"], "labels": [[0], [0]], "ids": ["1437", "1437"], "change": 0, "size": 1}, {"titles": ["MutableClassToInstanceMap should implement Serializable", "MutableClassToInstanceMap should implement Serializable"], "name": "com.google.common.collect.MutableClassToInstanceMap$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1437) created by **mike.rumpf** on 2013-05-31 at 06:11 AM_\n\n---\n\nMutableClassToInstanceMap defines a serialVersionUID but itself does not implement Serializable. This is inconsistent to other guava collection types.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1437) created by **mike.rumpf** on 2013-05-31 at 06:11 AM_\n\n---\n\nMutableClassToInstanceMap defines a serialVersionUID but itself does not implement Serializable. This is inconsistent to other guava collection types.\n"], "labels": [[0], [0]], "ids": ["1437", "1437"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Use Singleton instances for nullable natural Orderings"], "name": "com.google.common.collect.NaturalOrdering", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1451) created by **drothmaler** on 2013-06-18 at 01:46 PM_\n\n---\n\nI think it would be good to extend the NaturalOrdering and ReverseNaturalOrdering implementations, to hold instances of their nullsFirst() and nullsLast() versions too.\nThis is because things like Ordering.natural().nullsFirst() are frequently used and currently there will be created a NullsFirstOrdering/NullsLastOrdering instance each time, you access it. \n\nIn many cases this will not be a problem, but if you use it inside a compareTo or compare method (e.g. in combination with the ComparisonChain as suggested in Issue 500 & Issue 556), it really makes a difference whether you use a share instance, or not.\n"], "labels": [[1], [3]], "ids": ["339", "1451"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.NaturalOrdering_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.NullsFirstOrdering", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.NullsFirstOrdering_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.NullsLastOrdering", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.NullsLastOrdering_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Add docs to Ordering to give guidance how to parse and understand long chains of calls", "Add docs to Ordering to give guidance how to parse and understand long chains of calls", "Add docs to Ordering to give guidance how to parse and understand long chains of calls"], "name": "com.google.common.collect.Ordering", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\n\n---\n\nIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\n\nWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\n\n---\n\nIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\n\nWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\n\n---\n\nIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\n\nWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\n"], "labels": [[2], [2], [2]], "ids": ["1342", "1342", "1342"], "change": 0, "size": 1}, {"titles": ["Add docs to Ordering to give guidance how to parse and understand long chains of calls", "Add docs to Ordering to give guidance how to parse and understand long chains of calls", "Add docs to Ordering to give guidance how to parse and understand long chains of calls"], "name": "com.google.common.collect.Ordering$ArbitraryOrdering", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\n\n---\n\nIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\n\nWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\n\n---\n\nIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\n\nWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\n\n---\n\nIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\n\nWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\n"], "labels": [[2], [2], [2]], "ids": ["1342", "1342", "1342"], "change": 0, "size": 1}, {"titles": ["Add docs to Ordering to give guidance how to parse and understand long chains of calls", "Add docs to Ordering to give guidance how to parse and understand long chains of calls", "Add docs to Ordering to give guidance how to parse and understand long chains of calls"], "name": "com.google.common.collect.Ordering$ArbitraryOrdering$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\n\n---\n\nIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\n\nWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\n\n---\n\nIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\n\nWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\n\n---\n\nIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\n\nWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\n"], "labels": [[2], [2], [2]], "ids": ["1342", "1342", "1342"], "change": 0, "size": 1}, {"titles": ["Add docs to Ordering to give guidance how to parse and understand long chains of calls", "Add docs to Ordering to give guidance how to parse and understand long chains of calls", "Add docs to Ordering to give guidance how to parse and understand long chains of calls"], "name": "com.google.common.collect.Ordering$ArbitraryOrderingHolder", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\n\n---\n\nIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\n\nWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\n\n---\n\nIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\n\nWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\n\n---\n\nIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\n\nWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\n"], "labels": [[2], [2], [2]], "ids": ["1342", "1342", "1342"], "change": 0, "size": 1}, {"titles": ["Add docs to Ordering to give guidance how to parse and understand long chains of calls", "Add docs to Ordering to give guidance how to parse and understand long chains of calls", "Add docs to Ordering to give guidance how to parse and understand long chains of calls"], "name": "com.google.common.collect.Ordering$IncomparableValueException", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\n\n---\n\nIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\n\nWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\n\n---\n\nIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\n\nWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\n\n---\n\nIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\n\nWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\n"], "labels": [[2], [2], [2]], "ids": ["1342", "1342", "1342"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.PeekingIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["ImmutableSet.toArray issue on singletonImmutableSet for v14"], "name": "com.google.common.collect.Platform", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1328) created by **gokhanoner** on 2013-03-11 at 03:23 PM_\n\n---\n\nHi,\n\nprivate static final ImmutableSet&lt;String> ISLEM_EB_FIELDS = ImmutableSet.of(\"ISLBLG\");\n\nFor above desc, a singletonImmutableSet is created. When I try\n\nISLEM_EB_FIELDS.toArray(new String[0])\n\non V13.0.1, ist OK but in v14, it throw class not found exception for\n\ncom.google.common.collect.GwtPlatform.java\n\nI tried it on a GWT application.\n"], "labels": [[1]], "ids": ["1328"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Range", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Range$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Range$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Range$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Range$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.RangeMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RangeSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["ContiguousSet.intersection doesn't handle singleton results."], "name": "com.google.common.collect.RegularContiguousSet", "version": "v18.0", "bodys": ["Let a < x < b:\n- [x].intersection([x]) should return [x], returns [],\n- [x].intersection([a..b]) should return [x], returns [],\n- [a..b].intersection([x]) should return [x], returns [],\n- [a..x].intersection([x..b]) should return [x], returns [].\n\nI'll create a PR in a minute.\n"], "labels": [[1]], "ids": ["2196"], "change": 0, "size": 1}, {"titles": ["ContiguousSet.intersection doesn't handle singleton results."], "name": "com.google.common.collect.RegularContiguousSet$1", "version": "v18.0", "bodys": ["Let a < x < b:\n- [x].intersection([x]) should return [x], returns [],\n- [x].intersection([a..b]) should return [x], returns [],\n- [a..b].intersection([x]) should return [x], returns [],\n- [a..x].intersection([x..b]) should return [x], returns [].\n\nI'll create a PR in a minute.\n"], "labels": [[1]], "ids": ["2196"], "change": 0, "size": 1}, {"titles": ["ContiguousSet.intersection doesn't handle singleton results."], "name": "com.google.common.collect.RegularContiguousSet$2", "version": "v18.0", "bodys": ["Let a < x < b:\n- [x].intersection([x]) should return [x], returns [],\n- [x].intersection([a..b]) should return [x], returns [],\n- [a..b].intersection([x]) should return [x], returns [],\n- [a..x].intersection([x..b]) should return [x], returns [].\n\nI'll create a PR in a minute.\n"], "labels": [[1]], "ids": ["2196"], "change": 0, "size": 1}, {"titles": ["ContiguousSet.intersection doesn't handle singleton results."], "name": "com.google.common.collect.RegularContiguousSet$SerializedForm", "version": "v18.0", "bodys": ["Let a < x < b:\n- [x].intersection([x]) should return [x], returns [],\n- [x].intersection([a..b]) should return [x], returns [],\n- [a..b].intersection([x]) should return [x], returns [],\n- [a..x].intersection([x..b]) should return [x], returns [].\n\nI'll create a PR in a minute.\n"], "labels": [[1]], "ids": ["2196"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap$Inverse", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap$NonTerminalBiMapEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Possible deadlock in ImmutableList "], "name": "com.google.common.collect.RegularImmutableList", "version": "v18.0", "bodys": ["ImmutableList contains following code since version 15.0\n\n private static final ImmutableList<Object> EMPTY =\n      new RegularImmutableList<Object>(ObjectArrays.EMPTY_ARRAY);\n"], "labels": [[1]], "ids": ["1977"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableList_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMap$EntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMap$NonTerminalMapEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSet_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSortedMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSortedMap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSortedMap$EntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSortedMap$EntrySet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSortedMap_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSortedMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSortedSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSortedSet_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableTable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableTable$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableTable$CellSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableTable$CellSet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableTable$Values", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.ReverseNaturalOrdering", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ReverseNaturalOrdering_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ReverseOrdering", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ReverseOrdering_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RowSortedTable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Serialization", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Serialization$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Serialization$FieldSetter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SetMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Reimplement and deprecate Sets.newSetFromMap (but no removing it)", "Reimplement and deprecate Sets.newSetFromMap (but no removing it)"], "name": "com.google.common.collect.Sets", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n"], "labels": [[0], [0]], "ids": ["1001", "1001"], "change": 0, "size": 1}, {"titles": ["Reimplement and deprecate Sets.newSetFromMap (but no removing it)", "Reimplement and deprecate Sets.newSetFromMap (but no removing it)"], "name": "com.google.common.collect.Sets$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n"], "labels": [[0], [0]], "ids": ["1001", "1001"], "change": 0, "size": 1}, {"titles": ["Reimplement and deprecate Sets.newSetFromMap (but no removing it)", "Reimplement and deprecate Sets.newSetFromMap (but no removing it)"], "name": "com.google.common.collect.Sets$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n"], "labels": [[0], [0]], "ids": ["1001", "1001"], "change": 0, "size": 1}, {"titles": ["Reimplement and deprecate Sets.newSetFromMap (but no removing it)", "Reimplement and deprecate Sets.newSetFromMap (but no removing it)"], "name": "com.google.common.collect.Sets$3", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n"], "labels": [[0], [0]], "ids": ["1001", "1001"], "change": 0, "size": 1}, {"titles": ["Reimplement and deprecate Sets.newSetFromMap (but no removing it)", "Reimplement and deprecate Sets.newSetFromMap (but no removing it)"], "name": "com.google.common.collect.Sets$CartesianSet", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n"], "labels": [[0], [0]], "ids": ["1001", "1001"], "change": 0, "size": 1}, {"titles": ["Reimplement and deprecate Sets.newSetFromMap (but no removing it)", "Reimplement and deprecate Sets.newSetFromMap (but no removing it)"], "name": "com.google.common.collect.Sets$CartesianSet$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n"], "labels": [[0], [0]], "ids": ["1001", "1001"], "change": 0, "size": 1}, {"titles": ["Reimplement and deprecate Sets.newSetFromMap (but no removing it)", "Reimplement and deprecate Sets.newSetFromMap (but no removing it)"], "name": "com.google.common.collect.Sets$DescendingSet", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n"], "labels": [[0], [0]], "ids": ["1001", "1001"], "change": 0, "size": 1}, {"titles": ["Reimplement and deprecate Sets.newSetFromMap (but no removing it)", "Reimplement and deprecate Sets.newSetFromMap (but no removing it)"], "name": "com.google.common.collect.Sets$FilteredNavigableSet", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n"], "labels": [[0], [0]], "ids": ["1001", "1001"], "change": 0, "size": 1}, {"titles": ["Reimplement and deprecate Sets.newSetFromMap (but no removing it)", "Reimplement and deprecate Sets.newSetFromMap (but no removing it)"], "name": "com.google.common.collect.Sets$FilteredSet", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n"], "labels": [[0], [0]], "ids": ["1001", "1001"], "change": 0, "size": 1}, {"titles": ["Reimplement and deprecate Sets.newSetFromMap (but no removing it)", "Reimplement and deprecate Sets.newSetFromMap (but no removing it)"], "name": "com.google.common.collect.Sets$FilteredSortedSet", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n"], "labels": [[0], [0]], "ids": ["1001", "1001"], "change": 0, "size": 1}, {"titles": ["Reimplement and deprecate Sets.newSetFromMap (but no removing it)", "Reimplement and deprecate Sets.newSetFromMap (but no removing it)"], "name": "com.google.common.collect.Sets$ImprovedAbstractSet", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n"], "labels": [[0], [0]], "ids": ["1001", "1001"], "change": 0, "size": 1}, {"titles": ["Reimplement and deprecate Sets.newSetFromMap (but no removing it)", "Reimplement and deprecate Sets.newSetFromMap (but no removing it)"], "name": "com.google.common.collect.Sets$PowerSet", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n"], "labels": [[0], [0]], "ids": ["1001", "1001"], "change": 0, "size": 1}, {"titles": ["Reimplement and deprecate Sets.newSetFromMap (but no removing it)", "Reimplement and deprecate Sets.newSetFromMap (but no removing it)"], "name": "com.google.common.collect.Sets$PowerSet$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n"], "labels": [[0], [0]], "ids": ["1001", "1001"], "change": 0, "size": 1}, {"titles": ["Reimplement and deprecate Sets.newSetFromMap (but no removing it)", "Reimplement and deprecate Sets.newSetFromMap (but no removing it)"], "name": "com.google.common.collect.Sets$SetView", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n"], "labels": [[0], [0]], "ids": ["1001", "1001"], "change": 0, "size": 1}, {"titles": ["Reimplement and deprecate Sets.newSetFromMap (but no removing it)", "Reimplement and deprecate Sets.newSetFromMap (but no removing it)"], "name": "com.google.common.collect.Sets$SubSet", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n"], "labels": [[0], [0]], "ids": ["1001", "1001"], "change": 0, "size": 1}, {"titles": ["Reimplement and deprecate Sets.newSetFromMap (but no removing it)", "Reimplement and deprecate Sets.newSetFromMap (but no removing it)"], "name": "com.google.common.collect.Sets$SubSet$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n"], "labels": [[0], [0]], "ids": ["1001", "1001"], "change": 0, "size": 1}, {"titles": ["Reimplement and deprecate Sets.newSetFromMap (but no removing it)", "Reimplement and deprecate Sets.newSetFromMap (but no removing it)"], "name": "com.google.common.collect.Sets$UnmodifiableNavigableSet", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\n\n---\n\nNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\n\n(a) no sense doing that until after the backport is worked out, and\n\n(b) I don't think we can do the usual \"schedule for deletion in 18 months\" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\n\nNot sure for which other libraries we might have a similar situation.\n"], "labels": [[0], [0]], "ids": ["1001", "1001"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableBiMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableList_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableSet_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableTable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableTable_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedIterable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedIterables", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyAbsentBehavior", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyAbsentBehavior$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyAbsentBehavior$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyAbsentBehavior$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyPresentBehavior", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyPresentBehavior$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyPresentBehavior$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyPresentBehavior$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyPresentBehavior$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyPresentBehavior$5", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedMapDifference", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedMultisetBridge", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedMultisets", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedMultisets$ElementSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedMultisets$NavigableElementSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedSetMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SparseImmutableTable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SparseImmutableTable_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardRowSortedTable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardRowSortedTable$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardRowSortedTable$RowSortedMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$CellIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Column", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Column$EntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Column$EntrySetIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Column$EntrySetIterator$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Column$KeySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Column$Values", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$ColumnKeyIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$ColumnKeySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$ColumnMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Row", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Row$RowEntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Row$RowEntrySet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Row$RowEntrySet$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$RowMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$RowMap$EntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$RowMap$EntrySet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$TableSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedAsMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedAsMapEntries", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedAsMapValues", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedAsMapValues$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedBiMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedCollection", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedDeque", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedListMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedNavigableMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedNavigableSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedObject", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedQueue", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedRandomAccessList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedSetMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedSortedMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedSortedSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Table", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Table$Cell", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Table_CustomFieldSerializerBase", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$AbstractCell", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$ImmutableCell", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$TransformedTable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$TransformedTable$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$TransformedTable$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$TransformedTable$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$TransposeTable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$TransposeTable$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$UnmodifiableRowSortedMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$UnmodifiableTable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TransformedIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TransformedListIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeBasedTable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeBasedTable$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeBasedTable$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeBasedTable$Factory", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeBasedTable$TreeRow", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeBasedTable_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$Aggregate", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$Aggregate$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$Aggregate$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$AvlNode", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$Reference", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.TreeRangeMap", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.TreeRangeMap$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.TreeRangeMap$AsMapOfRanges", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.TreeRangeMap$AsMapOfRanges$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.TreeRangeMap$RangeMapEntry", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$3", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$AsRanges", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$Complement", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$RangesByUpperBound", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$RangesByUpperBound$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$RangesByUpperBound$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$SubRangeSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$BreadthFirstIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$PostOrderIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$PostOrderNode", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$PreOrderIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.UnmodifiableIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.UnmodifiableListIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.UnmodifiableSortedMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.UsingToStringOrdering", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.UsingToStringOrdering_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.WellBehavedMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.WellBehavedMap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.WellBehavedMap$EntrySet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.WellBehavedMap$EntrySet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.WellBehavedMap$EntrySet$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CountingInputStream", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.io.CountingOutputStream", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.io.Flushables", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.TestLogHandler", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingBlockingQueue", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.gwt.user.client.rpc.SerializationException", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.gwt.user.client.rpc.SerializationStreamReader", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.gwt.user.client.rpc.SerializationStreamWriter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.gwt.user.client.rpc.core.java.util.Collection_CustomFieldSerializerBase", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.collect.testing.features.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.collect.testing.features.SetFeature", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.SetFeature$Require", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.collect.testing.google.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.collect.ArrayListMultimap_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.BiMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["ContiguousSet.intersection doesn't handle singleton results."], "name": "com.google.common.collect.ContiguousSet", "version": "v18.0", "bodys": ["Let a < x < b:\n- [x].intersection([x]) should return [x], returns [],\n- [x].intersection([a..b]) should return [x], returns [],\n- [a..b].intersection([x]) should return [x], returns [],\n- [a..x].intersection([x..b]) should return [x], returns [].\n\nI'll create a PR in a minute.\n"], "labels": [[1]], "ids": ["2196"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EnumMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ExplicitOrdering_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashMultimap_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashMultiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashMultiset_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableCollection", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableCollection$Builder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumMap_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": ["Guava can't be compiled by JDT"], "name": "com.google.common.collect.ImmutableMap", "version": "v18.0", "bodys": ["I'm a [Spoon](https://github.com/INRIA/spoon) contributor, an open source project to analyse and transform Java source code. This project have a dependency to [JDT](https://eclipse.org/jdt/) to compile target source code. Recently, I tried to analyse Guava with Spoon but JDT can't compile our project.\n\nWhat is the problem?\n\nIn [`ImmutableMap`](https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableMap.java) class, we have these methods:\n\n``` java\n// If the map is an EnumMap, it must have key type K for some <K extends Enum<K>>.\n@SuppressWarnings({\"unchecked\", \"rawtypes\"})\nprivate static <K, V> ImmutableMap<K, V> copyOfEnumMapUnsafe(Map<? extends K, ? extends V> map) {\n    return copyOfEnumMap((EnumMap) map);\n}\n\nprivate static <K extends Enum<K>, V> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\n    EnumMap<K, V> copy = new EnumMap<K, V>(original);\n    for (Map.Entry<?, ?> entry : copy.entrySet()) {\n        checkEntryNotNull(entry.getKey(), entry.getValue());\n    }\n    return ImmutableEnumMap.asImmutable(copy);\n}\n```\n\nThis code is valid but there is an error from JDT:\n\n> Type mismatch: cannot convert from `<Enum<Enum<K>>>` to `<K>`\n\nBefore the creation of this issue, I reported the bug in the bugtracker of JDT (issue [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404)). In 2 words, the conclusion was that: \"Yes, JDT don't support this usage of Java but there is a better practice\". This better practice is explained [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404#c3):\n\n``` java\nprivate static <K extends Enum<K>> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\n    return copyOfEnumMap((EnumMap<K,?>) map);\n}\n```\n\nI tried some tricky solutions but, unfortunately, this solution can't be applied in your project. So I come to notify you that your project can't be compiled by JDT.\n"], "labels": [[]], "ids": ["2082"], "change": 0, "size": 1}, {"titles": ["Guava can't be compiled by JDT"], "name": "com.google.common.collect.ImmutableMap$Builder", "version": "v18.0", "bodys": ["I'm a [Spoon](https://github.com/INRIA/spoon) contributor, an open source project to analyse and transform Java source code. This project have a dependency to [JDT](https://eclipse.org/jdt/) to compile target source code. Recently, I tried to analyse Guava with Spoon but JDT can't compile our project.\n\nWhat is the problem?\n\nIn [`ImmutableMap`](https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableMap.java) class, we have these methods:\n\n``` java\n// If the map is an EnumMap, it must have key type K for some <K extends Enum<K>>.\n@SuppressWarnings({\"unchecked\", \"rawtypes\"})\nprivate static <K, V> ImmutableMap<K, V> copyOfEnumMapUnsafe(Map<? extends K, ? extends V> map) {\n    return copyOfEnumMap((EnumMap) map);\n}\n\nprivate static <K extends Enum<K>, V> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\n    EnumMap<K, V> copy = new EnumMap<K, V>(original);\n    for (Map.Entry<?, ?> entry : copy.entrySet()) {\n        checkEntryNotNull(entry.getKey(), entry.getValue());\n    }\n    return ImmutableEnumMap.asImmutable(copy);\n}\n```\n\nThis code is valid but there is an error from JDT:\n\n> Type mismatch: cannot convert from `<Enum<Enum<K>>>` to `<K>`\n\nBefore the creation of this issue, I reported the bug in the bugtracker of JDT (issue [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404)). In 2 words, the conclusion was that: \"Yes, JDT don't support this usage of Java but there is a better practice\". This better practice is explained [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404#c3):\n\n``` java\nprivate static <K extends Enum<K>> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\n    return copyOfEnumMap((EnumMap<K,?>) map);\n}\n```\n\nI tried some tricky solutions but, unfortunately, this solution can't be applied in your project. So I come to notify you that your project can't be compiled by JDT.\n"], "labels": [[]], "ids": ["2082"], "change": 0, "size": 1}, {"titles": ["Guava can't be compiled by JDT"], "name": "com.google.common.collect.ImmutableMap$SerializedForm", "version": "v18.0", "bodys": ["I'm a [Spoon](https://github.com/INRIA/spoon) contributor, an open source project to analyse and transform Java source code. This project have a dependency to [JDT](https://eclipse.org/jdt/) to compile target source code. Recently, I tried to analyse Guava with Spoon but JDT can't compile our project.\n\nWhat is the problem?\n\nIn [`ImmutableMap`](https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableMap.java) class, we have these methods:\n\n``` java\n// If the map is an EnumMap, it must have key type K for some <K extends Enum<K>>.\n@SuppressWarnings({\"unchecked\", \"rawtypes\"})\nprivate static <K, V> ImmutableMap<K, V> copyOfEnumMapUnsafe(Map<? extends K, ? extends V> map) {\n    return copyOfEnumMap((EnumMap) map);\n}\n\nprivate static <K extends Enum<K>, V> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\n    EnumMap<K, V> copy = new EnumMap<K, V>(original);\n    for (Map.Entry<?, ?> entry : copy.entrySet()) {\n        checkEntryNotNull(entry.getKey(), entry.getValue());\n    }\n    return ImmutableEnumMap.asImmutable(copy);\n}\n```\n\nThis code is valid but there is an error from JDT:\n\n> Type mismatch: cannot convert from `<Enum<Enum<K>>>` to `<K>`\n\nBefore the creation of this issue, I reported the bug in the bugtracker of JDT (issue [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404)). In 2 words, the conclusion was that: \"Yes, JDT don't support this usage of Java but there is a better practice\". This better practice is explained [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404#c3):\n\n``` java\nprivate static <K extends Enum<K>> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\n    return copyOfEnumMap((EnumMap<K,?>) map);\n}\n```\n\nI tried some tricky solutions but, unfortunately, this solution can't be applied in your project. So I come to notify you that your project can't be compiled by JDT.\n"], "labels": [[]], "ids": ["2082"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapEntry$TerminalEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.ImmutableSortedSet$Builder", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultiset_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ListMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multiset", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multiset$Entry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multiset_CustomFieldSerializerBase", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ObjectArrays", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableAsList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableAsList_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMap_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultimap_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$KnownOrder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AnEnum", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.IteratorFeature", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.IteratorTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Chars", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Collider", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Colliders", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Enums", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Ints", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Strings", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Unhashables", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestCharacterListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestCollectionGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestCollidingSetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestContainerGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestEnumMapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringCollectionGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringSortedSetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestSubjectGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestUnhashableCollectionGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.UnhashableObject", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.MapFeature", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.MapFeature$Require", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.AbstractBiMapTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.AbstractListMultimapTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.AbstractMultimapTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.AbstractMultisetSetCountTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.AbstractMultisetTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapClearTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapGenerators", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapGenerators$ImmutableBiMapCopyOfGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapGenerators$ImmutableBiMapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapInverseTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapInverseTester$BiMapPair", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapPutTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapRemoveTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapTestSuiteBuilder$NoRecurse", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators$BiMapValueSetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators$InverseBiMapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators$MapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$BuilderAddAllListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$BuilderAddListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$BuilderReversedListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$CharactersOfCharSequenceGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$CharactersOfStringGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$ImmutableListHeadSubListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$ImmutableListMiddleSubListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$ImmutableListOfGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$ImmutableListTailSubListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$TestUnhashableListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$UnhashableElementsImmutableListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapAsMapTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapEqualsTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapPutAllTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapPutTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapRemoveTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapReplaceValuesTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapTestSuiteBuilder$MultimapAsMapGetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapTestSuiteBuilder$MultimapGetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableEnumMapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfEnumMapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfEnumMapGenerator$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapEntryListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapKeyListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapUnhashableValuesGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapValueListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapAsMapGetTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapAsMapTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapClearTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapContainsEntryTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapContainsKeyTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapContainsValueTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapEntriesTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapEqualsTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapFeature", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapFeature$Require", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapGetTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapKeySetTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapKeysTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutAllMultimapTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutIterableTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutIterableTester$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutIterableTester$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutIterableTester$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutIterableTester$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapRemoveAllTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapRemoveEntryTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapReplaceValuesTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapSizeTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$AsMapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$EntriesGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$MultimapAsMapGetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$MultimapGetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$ReserializedMultimapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$ValuesGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapToStringTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapValuesTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetAddTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetContainsTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetCountTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetElementSetTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetEntrySetTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetEqualsTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetFeature", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetFeature$Require", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetIteratorTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetIteratorTester$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetIteratorTester$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetIteratorTester$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetIteratorTester$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.testing.google.MultisetNavigationTester", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.testing.google.MultisetNavigationTester$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$3", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$4", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetReadsTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetRemoveTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetSerializationTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetSetCountConditionallyTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetSetCountUnconditionallyTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetTestSuiteBuilder$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetTestSuiteBuilder$ElementSetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetTestSuiteBuilder$NoRecurse", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetTestSuiteBuilder$ReserializedMultisetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$AbstractContiguousSetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ContiguousSetDescendingGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ContiguousSetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ContiguousSetHeadsetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ContiguousSetSubsetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ContiguousSetTailsetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$DegeneratedImmutableSetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSetAsListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSetCopyOfGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSetWithBadHashesGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetAsListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetAsListSubListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetCopyOfGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetDescendingAsListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetDescendingGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetExplicitComparator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetExplicitSuperclassComparatorGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetHeadsetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetReversedOrderGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetSubsetAsListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetSubsetAsListSubListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetSubsetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetTailsetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetUnhashableGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$TestUnhashableSetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapAsMapTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapEqualsTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapPutAllTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapPutTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapReplaceValuesTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder$EntriesGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder$MultimapAsMapGetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder$MultimapGetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapEntryListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapEntryListGenerator$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapKeyListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapValueListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$Bound", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$ForwardingTestMultisetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$NoRecurse", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedSetMultimapAsMapTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedSetMultimapGetTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedSetMultimapTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestBiMapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestEnumMultisetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestListMultimapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestMultimapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestMultisetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestSetMultimapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestStringBiMapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestStringListMultimapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.UnmodifiableCollectionTests", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.UnmodifiableCollectionTests$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SetCreationTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.truth.CollectionSubject", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.truth.CollectionSubject$Has", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.truth.IntegerSubject", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.truth.ListSubject", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.truth.MapSubject", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.truth.Ordered", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.truth.Truth", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.gwt.user.client.rpc.core.java.util.Map_CustomFieldSerializerBase", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "junit.framework.TestSuite", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.collect.testing.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.annotations.GwtCompatible", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.base.Absent_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingImmutableCollection", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingImmutableList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingImmutableMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingImmutableSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingListMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": ["ImmutableSet.toArray issue on singletonImmutableSet for v14", "ImmutableSet.toArray issue on singletonImmutableSet for v14"], "name": "com.google.common.collect.GwtPlatform", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1328) created by **gokhanoner** on 2013-03-11 at 03:23 PM_\n\n---\n\nHi,\n\nprivate static final ImmutableSet&lt;String> ISLEM_EB_FIELDS = ImmutableSet.of(\"ISLBLG\");\n\nFor above desc, a singletonImmutableSet is created. When I try\n\nISLEM_EB_FIELDS.toArray(new String[0])\n\non V13.0.1, ist OK but in v14, it throw class not found exception for\n\ncom.google.common.collect.GwtPlatform.java\n\nI tried it on a GWT application.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1328) created by **gokhanoner** on 2013-03-11 at 03:23 PM_\n\n---\n\nHi,\n\nprivate static final ImmutableSet&lt;String> ISLEM_EB_FIELDS = ImmutableSet.of(\"ISLBLG\");\n\nFor above desc, a singletonImmutableSet is created. When I try\n\nISLEM_EB_FIELDS.toArray(new String[0])\n\non V13.0.1, ist OK but in v14, it throw class not found exception for\n\ncom.google.common.collect.GwtPlatform.java\n\nI tried it on a GWT application.\n"], "labels": [[1], [1]], "ids": ["1328", "1328"], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractCollectionTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractCollectionTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractContainerTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractContainerTester$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractContainerTester$ArrayWithDuplicate", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$10", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$11", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$12", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$13", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$14", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$5", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$6", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$7", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$8", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$9", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$Stimulus", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$UnknownElementException", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractMapTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.BaseComparable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.CollectionTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.CollectionTestSuiteBuilder$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.CollectionTestSuiteBuilder$ReserializedCollectionGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$Bound", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$ForwardingTestMapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$MapEntrySetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$MapKeySetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$MapSortedKeySetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$SortedMapSubmapTestMapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$SortedSetSubsetTestSetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedComparable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedIteratorTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedTestIteratorGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ExampleIteratorTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$5", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$6", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$GwtTransient", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$NullsBefore", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$NullsBeforeB", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$NullsBeforeTwo", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.IteratorTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ListTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ListTestSuiteBuilder$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ListTestSuiteBuilder$ReserializedListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MapInterfaceTest", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MapInterfaceTest$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MapInterfaceTest$IncompatibleKeyType", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MapTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MapTestSuiteBuilder$ReserializedMapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MinimalCollection", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MinimalIterable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MinimalSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.NavigableMapTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.NavigableMapTestSuiteBuilder$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.NavigableMapTestSuiteBuilder$ForwardingTestMapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.NavigableMapTestSuiteBuilder$NavigableMapSubmapTestMapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.NavigableSetTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.NavigableSetTestSuiteBuilder$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.NavigableSetTestSuiteBuilder$NavigableSetSubsetTestSetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.OneSizeGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.OneSizeTestContainerGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.PerCollectionSizeTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.PerCollectionSizeTestSuiteBuilder$OneSizeTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["ImmutableSet.toArray issue on singletonImmutableSet for v14", "Running tests in a non-US locale might fail"], "name": "com.google.common.collect.testing.Platform", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1328) created by **gokhanoner** on 2013-03-11 at 03:23 PM_\n\n---\n\nHi,\n\nprivate static final ImmutableSet&lt;String> ISLEM_EB_FIELDS = ImmutableSet.of(\"ISLBLG\");\n\nFor above desc, a singletonImmutableSet is created. When I try\n\nISLEM_EB_FIELDS.toArray(new String[0])\n\non V13.0.1, ist OK but in v14, it throw class not found exception for\n\ncom.google.common.collect.GwtPlatform.java\n\nI tried it on a GWT application.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1], [1]], "ids": ["1328", "1567"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.QueueTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ReserializingTestCollectionGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ReserializingTestSetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SafeTreeMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SafeTreeMap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SafeTreeMap$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SafeTreeSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SafeTreeSet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SetTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SetTestSuiteBuilder$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SetTestSuiteBuilder$ReserializedSetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SortedMapInterfaceTest", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SortedMapTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SortedMapTestSuiteBuilder$NoRecurse", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SortedSetTestSuiteBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestEnumSetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestIntegerSetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestIntegerSortedSetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestIteratorGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestMapEntrySetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestMapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestQueueGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestSetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestSortedMapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestSortedSetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringListGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringMapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringQueueGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringSetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringSortedMapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$10", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$10$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$5", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$6", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$7", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$8", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$9", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$9$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["add testfw support for ConcurrentMap interface methods"], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\n\n---\n\nThe test framework is thorough beyond belief for those interfaces that it\ncovers. Are there any plans for widening coverage to some of the more\nspecific collection framework interfaces? ConcurrentMap is the first that\nsprings to mind, NavigableMap, Deque, SortedSet and the like might be\nuseful too. Obviously, providing testing for the _concurrency_ part of this\nis a whole different ballgame, but it would be a great start to be able to\ntest at least the single-threaded behaviour.\n\nMore generally (perhaps this belongs in a separate issue), are there any\nplans to make it easier to hook into the framework to test other types? As\na concrete example, I was playing with adding supplyIfAbsent(K,\nCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\n(after sorting out tests for the other four ConcurrentMap methods) it would\nhelp to have some changes in, for example,\n&nbsp;&nbsp;&nbsp;\\* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\n&nbsp;&nbsp;&nbsp;\\* TestStringMapGenerator#create(Entry[]) for the same reason\n&nbsp;&nbsp;&nbsp;\\* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\nlist, since Arrays#asList is inconveniently immutable.\n"], "labels": [[5]], "ids": ["149"], "change": 0, "size": 1}, {"titles": ["add testfw support for ConcurrentMap interface methods"], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\n\n---\n\nThe test framework is thorough beyond belief for those interfaces that it\ncovers. Are there any plans for widening coverage to some of the more\nspecific collection framework interfaces? ConcurrentMap is the first that\nsprings to mind, NavigableMap, Deque, SortedSet and the like might be\nuseful too. Obviously, providing testing for the _concurrency_ part of this\nis a whole different ballgame, but it would be a great start to be able to\ntest at least the single-threaded behaviour.\n\nMore generally (perhaps this belongs in a separate issue), are there any\nplans to make it easier to hook into the framework to test other types? As\na concrete example, I was playing with adding supplyIfAbsent(K,\nCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\n(after sorting out tests for the other four ConcurrentMap methods) it would\nhelp to have some changes in, for example,\n&nbsp;&nbsp;&nbsp;\\* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\n&nbsp;&nbsp;&nbsp;\\* TestStringMapGenerator#create(Entry[]) for the same reason\n&nbsp;&nbsp;&nbsp;\\* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\nlist, since Arrays#asList is inconveniently immutable.\n"], "labels": [[5]], "ids": ["149"], "change": 0, "size": 1}, {"titles": ["add testfw support for ConcurrentMap interface methods"], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$10", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\n\n---\n\nThe test framework is thorough beyond belief for those interfaces that it\ncovers. Are there any plans for widening coverage to some of the more\nspecific collection framework interfaces? ConcurrentMap is the first that\nsprings to mind, NavigableMap, Deque, SortedSet and the like might be\nuseful too. Obviously, providing testing for the _concurrency_ part of this\nis a whole different ballgame, but it would be a great start to be able to\ntest at least the single-threaded behaviour.\n\nMore generally (perhaps this belongs in a separate issue), are there any\nplans to make it easier to hook into the framework to test other types? As\na concrete example, I was playing with adding supplyIfAbsent(K,\nCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\n(after sorting out tests for the other four ConcurrentMap methods) it would\nhelp to have some changes in, for example,\n&nbsp;&nbsp;&nbsp;\\* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\n&nbsp;&nbsp;&nbsp;\\* TestStringMapGenerator#create(Entry[]) for the same reason\n&nbsp;&nbsp;&nbsp;\\* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\nlist, since Arrays#asList is inconveniently immutable.\n"], "labels": [[5]], "ids": ["149"], "change": 0, "size": 1}, {"titles": ["add testfw support for ConcurrentMap interface methods"], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\n\n---\n\nThe test framework is thorough beyond belief for those interfaces that it\ncovers. Are there any plans for widening coverage to some of the more\nspecific collection framework interfaces? ConcurrentMap is the first that\nsprings to mind, NavigableMap, Deque, SortedSet and the like might be\nuseful too. Obviously, providing testing for the _concurrency_ part of this\nis a whole different ballgame, but it would be a great start to be able to\ntest at least the single-threaded behaviour.\n\nMore generally (perhaps this belongs in a separate issue), are there any\nplans to make it easier to hook into the framework to test other types? As\na concrete example, I was playing with adding supplyIfAbsent(K,\nCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\n(after sorting out tests for the other four ConcurrentMap methods) it would\nhelp to have some changes in, for example,\n&nbsp;&nbsp;&nbsp;\\* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\n&nbsp;&nbsp;&nbsp;\\* TestStringMapGenerator#create(Entry[]) for the same reason\n&nbsp;&nbsp;&nbsp;\\* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\nlist, since Arrays#asList is inconveniently immutable.\n"], "labels": [[5]], "ids": ["149"], "change": 0, "size": 1}, {"titles": ["add testfw support for ConcurrentMap interface methods"], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$3", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\n\n---\n\nThe test framework is thorough beyond belief for those interfaces that it\ncovers. Are there any plans for widening coverage to some of the more\nspecific collection framework interfaces? ConcurrentMap is the first that\nsprings to mind, NavigableMap, Deque, SortedSet and the like might be\nuseful too. Obviously, providing testing for the _concurrency_ part of this\nis a whole different ballgame, but it would be a great start to be able to\ntest at least the single-threaded behaviour.\n\nMore generally (perhaps this belongs in a separate issue), are there any\nplans to make it easier to hook into the framework to test other types? As\na concrete example, I was playing with adding supplyIfAbsent(K,\nCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\n(after sorting out tests for the other four ConcurrentMap methods) it would\nhelp to have some changes in, for example,\n&nbsp;&nbsp;&nbsp;\\* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\n&nbsp;&nbsp;&nbsp;\\* TestStringMapGenerator#create(Entry[]) for the same reason\n&nbsp;&nbsp;&nbsp;\\* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\nlist, since Arrays#asList is inconveniently immutable.\n"], "labels": [[5]], "ids": ["149"], "change": 0, "size": 1}, {"titles": ["add testfw support for ConcurrentMap interface methods"], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$4", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\n\n---\n\nThe test framework is thorough beyond belief for those interfaces that it\ncovers. Are there any plans for widening coverage to some of the more\nspecific collection framework interfaces? ConcurrentMap is the first that\nsprings to mind, NavigableMap, Deque, SortedSet and the like might be\nuseful too. Obviously, providing testing for the _concurrency_ part of this\nis a whole different ballgame, but it would be a great start to be able to\ntest at least the single-threaded behaviour.\n\nMore generally (perhaps this belongs in a separate issue), are there any\nplans to make it easier to hook into the framework to test other types? As\na concrete example, I was playing with adding supplyIfAbsent(K,\nCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\n(after sorting out tests for the other four ConcurrentMap methods) it would\nhelp to have some changes in, for example,\n&nbsp;&nbsp;&nbsp;\\* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\n&nbsp;&nbsp;&nbsp;\\* TestStringMapGenerator#create(Entry[]) for the same reason\n&nbsp;&nbsp;&nbsp;\\* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\nlist, since Arrays#asList is inconveniently immutable.\n"], "labels": [[5]], "ids": ["149"], "change": 0, "size": 1}, {"titles": ["add testfw support for ConcurrentMap interface methods"], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$5", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\n\n---\n\nThe test framework is thorough beyond belief for those interfaces that it\ncovers. Are there any plans for widening coverage to some of the more\nspecific collection framework interfaces? ConcurrentMap is the first that\nsprings to mind, NavigableMap, Deque, SortedSet and the like might be\nuseful too. Obviously, providing testing for the _concurrency_ part of this\nis a whole different ballgame, but it would be a great start to be able to\ntest at least the single-threaded behaviour.\n\nMore generally (perhaps this belongs in a separate issue), are there any\nplans to make it easier to hook into the framework to test other types? As\na concrete example, I was playing with adding supplyIfAbsent(K,\nCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\n(after sorting out tests for the other four ConcurrentMap methods) it would\nhelp to have some changes in, for example,\n&nbsp;&nbsp;&nbsp;\\* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\n&nbsp;&nbsp;&nbsp;\\* TestStringMapGenerator#create(Entry[]) for the same reason\n&nbsp;&nbsp;&nbsp;\\* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\nlist, since Arrays#asList is inconveniently immutable.\n"], "labels": [[5]], "ids": ["149"], "change": 0, "size": 1}, {"titles": ["add testfw support for ConcurrentMap interface methods"], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$6", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\n\n---\n\nThe test framework is thorough beyond belief for those interfaces that it\ncovers. Are there any plans for widening coverage to some of the more\nspecific collection framework interfaces? ConcurrentMap is the first that\nsprings to mind, NavigableMap, Deque, SortedSet and the like might be\nuseful too. Obviously, providing testing for the _concurrency_ part of this\nis a whole different ballgame, but it would be a great start to be able to\ntest at least the single-threaded behaviour.\n\nMore generally (perhaps this belongs in a separate issue), are there any\nplans to make it easier to hook into the framework to test other types? As\na concrete example, I was playing with adding supplyIfAbsent(K,\nCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\n(after sorting out tests for the other four ConcurrentMap methods) it would\nhelp to have some changes in, for example,\n&nbsp;&nbsp;&nbsp;\\* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\n&nbsp;&nbsp;&nbsp;\\* TestStringMapGenerator#create(Entry[]) for the same reason\n&nbsp;&nbsp;&nbsp;\\* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\nlist, since Arrays#asList is inconveniently immutable.\n"], "labels": [[5]], "ids": ["149"], "change": 0, "size": 1}, {"titles": ["add testfw support for ConcurrentMap interface methods"], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$7", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\n\n---\n\nThe test framework is thorough beyond belief for those interfaces that it\ncovers. Are there any plans for widening coverage to some of the more\nspecific collection framework interfaces? ConcurrentMap is the first that\nsprings to mind, NavigableMap, Deque, SortedSet and the like might be\nuseful too. Obviously, providing testing for the _concurrency_ part of this\nis a whole different ballgame, but it would be a great start to be able to\ntest at least the single-threaded behaviour.\n\nMore generally (perhaps this belongs in a separate issue), are there any\nplans to make it easier to hook into the framework to test other types? As\na concrete example, I was playing with adding supplyIfAbsent(K,\nCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\n(after sorting out tests for the other four ConcurrentMap methods) it would\nhelp to have some changes in, for example,\n&nbsp;&nbsp;&nbsp;\\* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\n&nbsp;&nbsp;&nbsp;\\* TestStringMapGenerator#create(Entry[]) for the same reason\n&nbsp;&nbsp;&nbsp;\\* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\nlist, since Arrays#asList is inconveniently immutable.\n"], "labels": [[5]], "ids": ["149"], "change": 0, "size": 1}, {"titles": ["add testfw support for ConcurrentMap interface methods"], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$8", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\n\n---\n\nThe test framework is thorough beyond belief for those interfaces that it\ncovers. Are there any plans for widening coverage to some of the more\nspecific collection framework interfaces? ConcurrentMap is the first that\nsprings to mind, NavigableMap, Deque, SortedSet and the like might be\nuseful too. Obviously, providing testing for the _concurrency_ part of this\nis a whole different ballgame, but it would be a great start to be able to\ntest at least the single-threaded behaviour.\n\nMore generally (perhaps this belongs in a separate issue), are there any\nplans to make it easier to hook into the framework to test other types? As\na concrete example, I was playing with adding supplyIfAbsent(K,\nCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\n(after sorting out tests for the other four ConcurrentMap methods) it would\nhelp to have some changes in, for example,\n&nbsp;&nbsp;&nbsp;\\* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\n&nbsp;&nbsp;&nbsp;\\* TestStringMapGenerator#create(Entry[]) for the same reason\n&nbsp;&nbsp;&nbsp;\\* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\nlist, since Arrays#asList is inconveniently immutable.\n"], "labels": [[5]], "ids": ["149"], "change": 0, "size": 1}, {"titles": ["add testfw support for ConcurrentMap interface methods"], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$9", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\n\n---\n\nThe test framework is thorough beyond belief for those interfaces that it\ncovers. Are there any plans for widening coverage to some of the more\nspecific collection framework interfaces? ConcurrentMap is the first that\nsprings to mind, NavigableMap, Deque, SortedSet and the like might be\nuseful too. Obviously, providing testing for the _concurrency_ part of this\nis a whole different ballgame, but it would be a great start to be able to\ntest at least the single-threaded behaviour.\n\nMore generally (perhaps this belongs in a separate issue), are there any\nplans to make it easier to hook into the framework to test other types? As\na concrete example, I was playing with adding supplyIfAbsent(K,\nCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\n(after sorting out tests for the other four ConcurrentMap methods) it would\nhelp to have some changes in, for example,\n&nbsp;&nbsp;&nbsp;\\* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\n&nbsp;&nbsp;&nbsp;\\* TestStringMapGenerator#create(Entry[]) for the same reason\n&nbsp;&nbsp;&nbsp;\\* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\nlist, since Arrays#asList is inconveniently immutable.\n"], "labels": [[5]], "ids": ["149"], "change": 0, "size": 1}, {"titles": ["add testfw support for ConcurrentMap interface methods"], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$NullFriendlyComparator", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\n\n---\n\nThe test framework is thorough beyond belief for those interfaces that it\ncovers. Are there any plans for widening coverage to some of the more\nspecific collection framework interfaces? ConcurrentMap is the first that\nsprings to mind, NavigableMap, Deque, SortedSet and the like might be\nuseful too. Obviously, providing testing for the _concurrency_ part of this\nis a whole different ballgame, but it would be a great start to be able to\ntest at least the single-threaded behaviour.\n\nMore generally (perhaps this belongs in a separate issue), are there any\nplans to make it easier to hook into the framework to test other types? As\na concrete example, I was playing with adding supplyIfAbsent(K,\nCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\n(after sorting out tests for the other four ConcurrentMap methods) it would\nhelp to have some changes in, for example,\n&nbsp;&nbsp;&nbsp;\\* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\n&nbsp;&nbsp;&nbsp;\\* TestStringMapGenerator#create(Entry[]) for the same reason\n&nbsp;&nbsp;&nbsp;\\* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\nlist, since Arrays#asList is inconveniently immutable.\n"], "labels": [[5]], "ids": ["149"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil$5", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil$6", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$10", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$11", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$11$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$12", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$13", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$14", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$5", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$6", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$7", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$8", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$9", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$NullFriendlyComparator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.WrongType", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.CollectionFeature", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.CollectionFeature$Require", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.CollectionSize", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.CollectionSize$Require", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.ConflictingRequirementsException", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail", "Running tests in a non-US locale might fail"], "name": "com.google.common.collect.testing.features.Feature", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1], [1]], "ids": ["1567", "1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.collect.testing.features.FeatureUtil", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.ListFeature", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.ListFeature$Require", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.TesterAnnotation", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.TesterRequirements", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestStringMultisetGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestStringSetMultimapGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.AbstractListIndexOfTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.AbstractListTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.AbstractQueueTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.AbstractSetTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionAddAllTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionAddTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionClearTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionContainsAllTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionContainsTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionCreationTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionEqualsTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionIsEmptyTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionRemoveAllTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionRemoveTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionSerializationEqualTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionSerializationTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionSizeTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionToArrayTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionToStringTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListAddAllAtIndexTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListAddAllTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListAddAtIndexTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListAddTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListCreationTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListEqualsTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListGetTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListHashCodeTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListIndexOfTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListLastIndexOfTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListRemoveAllTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListRemoveAtIndexTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListRemoveTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListRetainAllTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListSetTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListSubListTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListToArrayTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapClearTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapContainsKeyTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapContainsValueTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapCreationTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapEqualsTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapGetTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapHashCodeTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapIsEmptyTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapPutAllTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapPutTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapRemoveTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapSerializationTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapSizeTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapToStringTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.NavigableMapNavigationTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.NavigableSetNavigationTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.collect.testing.testers.Platform", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.QueueElementTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.QueueOfferTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.QueuePeekTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.QueuePollTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.QueueRemoveTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SetAddAllTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SetAddTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SetEqualsTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SetHashCodeTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SetRemoveTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SortedSetNavigationTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.HttpHeaders", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.testing.SloppyTearDown", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.MockFutureListener", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "junit.framework.Assert", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "junit.framework.Test", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "junit.framework.TestCase", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.collect.testing.testers.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.collect.testing.ListIteratorTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionIteratorTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionIteratorTester$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionRetainAllTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionRetainAllTester$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionRetainAllTester$Target", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListListIteratorTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListListIteratorTester$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["add testfw support for ConcurrentMap interface methods"], "name": "com.google.common.collect.testing.testers.MapEntrySetTester", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\n\n---\n\nThe test framework is thorough beyond belief for those interfaces that it\ncovers. Are there any plans for widening coverage to some of the more\nspecific collection framework interfaces? ConcurrentMap is the first that\nsprings to mind, NavigableMap, Deque, SortedSet and the like might be\nuseful too. Obviously, providing testing for the _concurrency_ part of this\nis a whole different ballgame, but it would be a great start to be able to\ntest at least the single-threaded behaviour.\n\nMore generally (perhaps this belongs in a separate issue), are there any\nplans to make it easier to hook into the framework to test other types? As\na concrete example, I was playing with adding supplyIfAbsent(K,\nCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\n(after sorting out tests for the other four ConcurrentMap methods) it would\nhelp to have some changes in, for example,\n&nbsp;&nbsp;&nbsp;\\* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\n&nbsp;&nbsp;&nbsp;\\* TestStringMapGenerator#create(Entry[]) for the same reason\n&nbsp;&nbsp;&nbsp;\\* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\nlist, since Arrays#asList is inconveniently immutable.\n"], "labels": [[5]], "ids": ["149"], "change": 0, "size": 1}, {"titles": ["add testfw support for ConcurrentMap interface methods"], "name": "com.google.common.collect.testing.testers.MapEntrySetTester$IncomparableType", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\n\n---\n\nThe test framework is thorough beyond belief for those interfaces that it\ncovers. Are there any plans for widening coverage to some of the more\nspecific collection framework interfaces? ConcurrentMap is the first that\nsprings to mind, NavigableMap, Deque, SortedSet and the like might be\nuseful too. Obviously, providing testing for the _concurrency_ part of this\nis a whole different ballgame, but it would be a great start to be able to\ntest at least the single-threaded behaviour.\n\nMore generally (perhaps this belongs in a separate issue), are there any\nplans to make it easier to hook into the framework to test other types? As\na concrete example, I was playing with adding supplyIfAbsent(K,\nCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\n(after sorting out tests for the other four ConcurrentMap methods) it would\nhelp to have some changes in, for example,\n&nbsp;&nbsp;&nbsp;\\* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\n&nbsp;&nbsp;&nbsp;\\* TestStringMapGenerator#create(Entry[]) for the same reason\n&nbsp;&nbsp;&nbsp;\\* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\nlist, since Arrays#asList is inconveniently immutable.\n"], "labels": [[5]], "ids": ["149"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SortedMapNavigationTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SortedMapNavigationTester$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.escape.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.escape.ArrayBasedCharEscaper", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.ArrayBasedEscaperMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.CharEscaper", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.CharEscaperBuilder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.CharEscaperBuilder$CharArrayDecorator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escaper", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escaper$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escapers", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escapers$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escapers$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escapers$Builder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escapers$Builder$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Platform", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Platform$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.escape.UnicodeEscaper", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.testing.EscaperAsserts", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.html.HtmlEscapers", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.xml.XmlEscapers", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.eventbus.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.eventbus.AllowConcurrentEvents", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.AnnotatedSubscriberFinder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.AnnotatedSubscriberFinder$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.AnnotatedSubscriberFinder$MethodIdentifier", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.AsyncEventBus", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.AsyncEventBus$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.DeadEvent", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.eventbus.EventBus", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.eventbus.EventBus$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 5, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.eventbus.EventBus$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 5, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.eventbus.EventBus$3", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 5, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.eventbus.EventBus$EventWithSubscriber", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 5, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.eventbus.EventBus$LoggingSubscriberExceptionHandler", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.EventSubscriber", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Subscribe", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.SubscriberExceptionContext", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.SubscriberExceptionHandler", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.SubscriberFindingStrategy", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.SynchronizedEventSubscriber", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}]}, {"name": "com.google.common.hash.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.hash.AbstractByteHasher", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractCompositeHashFunction", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractCompositeHashFunction$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractHasher", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractNonStreamingHashFunction", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractStreamingHashFunction", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilter$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilter$SerialForm", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilter$Strategy", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilterStrategies", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilterStrategies$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilterStrategies$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilterStrategies$BitArray", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.ChecksumHashFunction", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.ChecksumHashFunction$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.ChecksumHashFunction$ChecksumHasher", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Crc32cHashFunction", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Crc32cHashFunction$Crc32cHasher", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnel", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$ByteArrayFunnel", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$IntegerFunnel", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$LongFunnel", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$SequentialFunnel", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$SinkAsStream", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$StringCharsetFunnel", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$UnencodedCharsFunnel", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashCode", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashCode$BytesHashCode", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashCode$IntHashCode", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashCode$LongHashCode", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashFunction", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hasher", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.hash.Hashing", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.hash.Hashing$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.hash.Hashing$Adler32Holder", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.hash.Hashing$ChecksumType", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.hash.Hashing$ChecksumType$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.hash.Hashing$ChecksumType$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.hash.Hashing$ConcatenatedHashFunction", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.hash.Hashing$Crc32Holder", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.hash.Hashing$Crc32cHolder", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.hash.Hashing$LinearCongruentialGenerator", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.hash.Hashing$Md5Holder", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.hash.Hashing$Murmur3_128Holder", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.hash.Hashing$Murmur3_32Holder", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.hash.Hashing$Sha1Holder", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.hash.Hashing$Sha256Holder", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.hash.Hashing$Sha512Holder", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.hash.Hashing$SipHash24Holder", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.MessageDigestHashFunction", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.MessageDigestHashFunction$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.MessageDigestHashFunction$SerializedForm", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Murmur3_128HashFunction", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Murmur3_32HashFunction", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.PrimitiveSink", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.SipHashFunction", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.SipHashFunction$SipHasher", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.io.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.io.AppendableWriter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding"], "name": "com.google.common.io.BaseEncoding", "version": "v18.0", "bodys": ["When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n"], "labels": [[0], [0], [0], [0], [0]], "ids": ["1947", "1947", "1947", "1947", "1947"], "change": 0, "size": 1}, {"titles": ["Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding"], "name": "com.google.common.io.BaseEncoding$1", "version": "v18.0", "bodys": ["When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n"], "labels": [[0], [0], [0], [0], [0]], "ids": ["1947", "1947", "1947", "1947", "1947"], "change": 0, "size": 1}, {"titles": ["Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding"], "name": "com.google.common.io.BaseEncoding$2", "version": "v18.0", "bodys": ["When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n"], "labels": [[0], [0], [0], [0], [0]], "ids": ["1947", "1947", "1947", "1947", "1947"], "change": 0, "size": 1}, {"titles": ["Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding"], "name": "com.google.common.io.BaseEncoding$3", "version": "v18.0", "bodys": ["When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n"], "labels": [[0], [0], [0], [0], [0]], "ids": ["1947", "1947", "1947", "1947", "1947"], "change": 0, "size": 1}, {"titles": ["Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding"], "name": "com.google.common.io.BaseEncoding$4", "version": "v18.0", "bodys": ["When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n"], "labels": [[0], [0], [0], [0], [0]], "ids": ["1947", "1947", "1947", "1947", "1947"], "change": 0, "size": 1}, {"titles": ["Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding"], "name": "com.google.common.io.BaseEncoding$Alphabet", "version": "v18.0", "bodys": ["When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n"], "labels": [[0], [0], [0], [0], [0]], "ids": ["1947", "1947", "1947", "1947", "1947"], "change": 0, "size": 1}, {"titles": ["Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding"], "name": "com.google.common.io.BaseEncoding$DecodingException", "version": "v18.0", "bodys": ["When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n"], "labels": [[0], [0], [0], [0], [0]], "ids": ["1947", "1947", "1947", "1947", "1947"], "change": 0, "size": 1}, {"titles": ["Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding"], "name": "com.google.common.io.BaseEncoding$SeparatedBaseEncoding", "version": "v18.0", "bodys": ["When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n"], "labels": [[0], [0], [0], [0], [0]], "ids": ["1947", "1947", "1947", "1947", "1947"], "change": 0, "size": 1}, {"titles": ["Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding"], "name": "com.google.common.io.BaseEncoding$StandardBaseEncoding", "version": "v18.0", "bodys": ["When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n"], "labels": [[0], [0], [0], [0], [0]], "ids": ["1947", "1947", "1947", "1947", "1947"], "change": 0, "size": 1}, {"titles": ["Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding"], "name": "com.google.common.io.BaseEncoding$StandardBaseEncoding$1", "version": "v18.0", "bodys": ["When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n"], "labels": [[0], [0], [0], [0], [0]], "ids": ["1947", "1947", "1947", "1947", "1947"], "change": 0, "size": 1}, {"titles": ["Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding", "Improve invalid character exceptions from BaseEncoding"], "name": "com.google.common.io.BaseEncoding$StandardBaseEncoding$2", "version": "v18.0", "bodys": ["When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n", "When decoding Base64/32/16 data an exception is thrown if an invalid character is found:\n\nBaseEncoding.java:501:\n\n``` java\n    int decode(char ch) throws IOException {\n      if (ch > Ascii.MAX || decodabet[ch] == -1) {\n        throw new DecodingException(\"Unrecognized character: \" + ch);\n      }\n      return decodabet[ch];\n    }\n```\n\nThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\n"], "labels": [[0], [0], [0], [0], [0]], "ids": ["1947", "1947", "1947", "1947", "1947"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteArrayDataInput", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteArrayDataOutput", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteProcessor", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteSink", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteSink$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteSink$AsCharSink", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["19rc1 regression in sliced bytesource: offset + length may overflow for large length values", "19rc1 regression in sliced bytesource: offset + length may overflow for large length values"], "name": "com.google.common.io.ByteSource", "version": "v18.0", "bodys": ["An algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \nThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\n\nI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\n", "An algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \nThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\n\nI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\n"], "labels": [[1], [1]], "ids": ["2127", "2127"], "change": 0, "size": 1}, {"titles": ["19rc1 regression in sliced bytesource: offset + length may overflow for large length values", "19rc1 regression in sliced bytesource: offset + length may overflow for large length values"], "name": "com.google.common.io.ByteSource$1", "version": "v18.0", "bodys": ["An algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \nThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\n\nI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\n", "An algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \nThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\n\nI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\n"], "labels": [[1], [1]], "ids": ["2127", "2127"], "change": 0, "size": 1}, {"titles": ["19rc1 regression in sliced bytesource: offset + length may overflow for large length values", "19rc1 regression in sliced bytesource: offset + length may overflow for large length values"], "name": "com.google.common.io.ByteSource$AsCharSource", "version": "v18.0", "bodys": ["An algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \nThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\n\nI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\n", "An algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \nThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\n\nI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\n"], "labels": [[1], [1]], "ids": ["2127", "2127"], "change": 0, "size": 1}, {"titles": ["19rc1 regression in sliced bytesource: offset + length may overflow for large length values", "19rc1 regression in sliced bytesource: offset + length may overflow for large length values"], "name": "com.google.common.io.ByteSource$ByteArrayByteSource", "version": "v18.0", "bodys": ["An algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \nThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\n\nI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\n", "An algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \nThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\n\nI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\n"], "labels": [[1], [1]], "ids": ["2127", "2127"], "change": 0, "size": 1}, {"titles": ["19rc1 regression in sliced bytesource: offset + length may overflow for large length values", "19rc1 regression in sliced bytesource: offset + length may overflow for large length values"], "name": "com.google.common.io.ByteSource$ConcatenatedByteSource", "version": "v18.0", "bodys": ["An algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \nThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\n\nI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\n", "An algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \nThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\n\nI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\n"], "labels": [[1], [1]], "ids": ["2127", "2127"], "change": 0, "size": 1}, {"titles": ["19rc1 regression in sliced bytesource: offset + length may overflow for large length values", "19rc1 regression in sliced bytesource: offset + length may overflow for large length values"], "name": "com.google.common.io.ByteSource$EmptyByteSource", "version": "v18.0", "bodys": ["An algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \nThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\n\nI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\n", "An algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \nThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\n\nI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\n"], "labels": [[1], [1]], "ids": ["2127", "2127"], "change": 0, "size": 1}, {"titles": ["19rc1 regression in sliced bytesource: offset + length may overflow for large length values", "19rc1 regression in sliced bytesource: offset + length may overflow for large length values"], "name": "com.google.common.io.ByteSource$SlicedByteSource", "version": "v18.0", "bodys": ["An algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \nThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\n\nI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\n", "An algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \nThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\n\nI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\n"], "labels": [[1], [1]], "ids": ["2127", "2127"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteStreams", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteStreams$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteStreams$ByteArrayDataInputStream", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteStreams$ByteArrayDataOutputStream", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteStreams$FastByteArrayOutputStream", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteStreams$LimitedInputStream", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharSequenceReader", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharSink", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharSource", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharSource$CharSequenceCharSource", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharSource$CharSequenceCharSource$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharSource$CharSequenceCharSource$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharSource$ConcatenatedCharSource", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharSource$EmptyCharSource", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharStreams", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharStreams$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharStreams$NullWriter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Closeables", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Closer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Closer$LoggingSuppressor", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Closer$SuppressingSuppressor", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Closer$Suppressor", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.FileBackedOutputStream", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.FileBackedOutputStream$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.FileBackedOutputStream$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.FileBackedOutputStream$MemoryOutput", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.FileWriteMode", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$FileByteSink", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$FileByteSource", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$FilePredicate", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$FilePredicate$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$FilePredicate$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.GwtWorkarounds", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.io.GwtWorkarounds$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.io.GwtWorkarounds$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.io.GwtWorkarounds$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.io.GwtWorkarounds$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.io.GwtWorkarounds$5", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.io.GwtWorkarounds$6", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.io.GwtWorkarounds$ByteInput", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.io.GwtWorkarounds$ByteOutput", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.io.GwtWorkarounds$CharInput", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.io.GwtWorkarounds$CharOutput", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.io.LineBuffer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.LineProcessor", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.LineReader", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.LineReader$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.MultiInputStream", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.MultiReader", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Resources", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Resources$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Resources$UrlByteSource", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.math.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.math.BigIntegerMath", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.BigIntegerMath$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.DoubleMath", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.DoubleMath$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.DoubleMath$MeanAccumulator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.math.DoubleUtils", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.IntMath", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.IntMath$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.LongMath", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.LongMath$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.MathPreconditions", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.net.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.base.Strings", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.HostAndPort", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.HostSpecifier", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.net.InetAddresses", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.net.InetAddresses$TeredoInfo", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.InternetDomainName", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.MediaType", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.MediaType$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.MediaType$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.MediaType$Tokenizer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.PercentEscaper", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.UrlEscapers", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.thirdparty.publicsuffix.PublicSuffixPatterns", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.thirdparty.publicsuffix.PublicSuffixType", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.thirdparty.publicsuffix.TrieParser", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.primitives.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.io.LittleEndianDataInputStream", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.LittleEndianDataOutputStream", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Booleans", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Booleans$BooleanArrayAsList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Booleans$LexicographicalComparator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Bytes", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Bytes$ByteArrayAsList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.primitives.Chars", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.primitives.Chars$CharArrayAsList", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.primitives.Chars$LexicographicalComparator", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Doubles", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Doubles$DoubleArrayAsList", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Doubles$DoubleConverter", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Doubles$LexicographicalComparator", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Floats", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Floats$FloatArrayAsList", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Floats$FloatConverter", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Floats$LexicographicalComparator", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Ints", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Ints$IntArrayAsList", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Ints$IntConverter", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Ints$LexicographicalComparator", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Longs", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Longs$LexicographicalComparator", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Longs$LongArrayAsList", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Longs$LongConverter", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.ParseRequest", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Shorts", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Shorts$LexicographicalComparator", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Shorts$ShortArrayAsList", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.primitives.Shorts$ShortConverter", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.SignedBytes", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.SignedBytes$LexicographicalComparator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedBytes", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedInts", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedInts$LexicographicalComparator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedLongs", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedLongs$LexicographicalComparator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.reflect.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.collect.ForwardingMapEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSet$Builder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ClassPath", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ClassPath$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ClassPath$ClassInfo", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ClassPath$ResourceInfo", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ClassPath$Scanner", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.reflect.Element", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ImmutableTypeToInstanceMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ImmutableTypeToInstanceMap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ImmutableTypeToInstanceMap$Builder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.reflect.Invokable", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.reflect.Invokable$ConstructorInvokable", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.reflect.Invokable$MethodInvokable", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.MutableTypeToInstanceMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.MutableTypeToInstanceMap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeCapture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeParameter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["TypeVisitor.visitClass in TypeResolver.populateTypeMappings should report the to type as well as the from type"], "name": "com.google.common.reflect.TypeResolver", "version": "v18.0", "bodys": ["The visitClass implementation in TypeResolver.populateTypeMappings has the following body:\n\n```\n  @Override void visitClass(Class<?> fromClass) {\n    // Can't map from a raw class to anything other than itself.\n    // You can't say \"assuming String is Integer\".\n    // And we don't support \"assuming String is T\"; user has to say \"assuming T is String\". \n    throw new IllegalArgumentException(\"No type mapping from \" + fromClass);\n  }\n```\n\nIt would be great if the IllegalArgumentException message reported the type it's trying to convert to, as well as the one its converting from, for easier debugging should this exception be thrown.\n"], "labels": [[0]], "ids": ["2158"], "change": 0, "size": 1}, {"titles": ["TypeVisitor.visitClass in TypeResolver.populateTypeMappings should report the to type as well as the from type"], "name": "com.google.common.reflect.TypeResolver$1", "version": "v18.0", "bodys": ["The visitClass implementation in TypeResolver.populateTypeMappings has the following body:\n\n```\n  @Override void visitClass(Class<?> fromClass) {\n    // Can't map from a raw class to anything other than itself.\n    // You can't say \"assuming String is Integer\".\n    // And we don't support \"assuming String is T\"; user has to say \"assuming T is String\". \n    throw new IllegalArgumentException(\"No type mapping from \" + fromClass);\n  }\n```\n\nIt would be great if the IllegalArgumentException message reported the type it's trying to convert to, as well as the one its converting from, for easier debugging should this exception be thrown.\n"], "labels": [[0]], "ids": ["2158"], "change": 0, "size": 1}, {"titles": ["TypeVisitor.visitClass in TypeResolver.populateTypeMappings should report the to type as well as the from type"], "name": "com.google.common.reflect.TypeResolver$TypeMappingIntrospector", "version": "v18.0", "bodys": ["The visitClass implementation in TypeResolver.populateTypeMappings has the following body:\n\n```\n  @Override void visitClass(Class<?> fromClass) {\n    // Can't map from a raw class to anything other than itself.\n    // You can't say \"assuming String is Integer\".\n    // And we don't support \"assuming String is T\"; user has to say \"assuming T is String\". \n    throw new IllegalArgumentException(\"No type mapping from \" + fromClass);\n  }\n```\n\nIt would be great if the IllegalArgumentException message reported the type it's trying to convert to, as well as the one its converting from, for easier debugging should this exception be thrown.\n"], "labels": [[0]], "ids": ["2158"], "change": 0, "size": 1}, {"titles": ["TypeVisitor.visitClass in TypeResolver.populateTypeMappings should report the to type as well as the from type"], "name": "com.google.common.reflect.TypeResolver$TypeTable", "version": "v18.0", "bodys": ["The visitClass implementation in TypeResolver.populateTypeMappings has the following body:\n\n```\n  @Override void visitClass(Class<?> fromClass) {\n    // Can't map from a raw class to anything other than itself.\n    // You can't say \"assuming String is Integer\".\n    // And we don't support \"assuming String is T\"; user has to say \"assuming T is String\". \n    throw new IllegalArgumentException(\"No type mapping from \" + fromClass);\n  }\n```\n\nIt would be great if the IllegalArgumentException message reported the type it's trying to convert to, as well as the one its converting from, for easier debugging should this exception be thrown.\n"], "labels": [[0]], "ids": ["2158"], "change": 0, "size": 1}, {"titles": ["TypeVisitor.visitClass in TypeResolver.populateTypeMappings should report the to type as well as the from type"], "name": "com.google.common.reflect.TypeResolver$TypeTable$1", "version": "v18.0", "bodys": ["The visitClass implementation in TypeResolver.populateTypeMappings has the following body:\n\n```\n  @Override void visitClass(Class<?> fromClass) {\n    // Can't map from a raw class to anything other than itself.\n    // You can't say \"assuming String is Integer\".\n    // And we don't support \"assuming String is T\"; user has to say \"assuming T is String\". \n    throw new IllegalArgumentException(\"No type mapping from \" + fromClass);\n  }\n```\n\nIt would be great if the IllegalArgumentException message reported the type it's trying to convert to, as well as the one its converting from, for easier debugging should this exception be thrown.\n"], "labels": [[0]], "ids": ["2158"], "change": 0, "size": 1}, {"titles": ["TypeVisitor.visitClass in TypeResolver.populateTypeMappings should report the to type as well as the from type"], "name": "com.google.common.reflect.TypeResolver$TypeVariableKey", "version": "v18.0", "bodys": ["The visitClass implementation in TypeResolver.populateTypeMappings has the following body:\n\n```\n  @Override void visitClass(Class<?> fromClass) {\n    // Can't map from a raw class to anything other than itself.\n    // You can't say \"assuming String is Integer\".\n    // And we don't support \"assuming String is T\"; user has to say \"assuming T is String\". \n    throw new IllegalArgumentException(\"No type mapping from \" + fromClass);\n  }\n```\n\nIt would be great if the IllegalArgumentException message reported the type it's trying to convert to, as well as the one its converting from, for easier debugging should this exception be thrown.\n"], "labels": [[0]], "ids": ["2158"], "change": 0, "size": 1}, {"titles": ["TypeVisitor.visitClass in TypeResolver.populateTypeMappings should report the to type as well as the from type"], "name": "com.google.common.reflect.TypeResolver$WildcardCapturer", "version": "v18.0", "bodys": ["The visitClass implementation in TypeResolver.populateTypeMappings has the following body:\n\n```\n  @Override void visitClass(Class<?> fromClass) {\n    // Can't map from a raw class to anything other than itself.\n    // You can't say \"assuming String is Integer\".\n    // And we don't support \"assuming String is T\"; user has to say \"assuming T is String\". \n    throw new IllegalArgumentException(\"No type mapping from \" + fromClass);\n  }\n```\n\nIt would be great if the IllegalArgumentException message reported the type it's trying to convert to, as well as the one its converting from, for easier debugging should this exception be thrown.\n"], "labels": [[0]], "ids": ["2158"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToInstanceMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$ClassSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$InterfaceSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$InterfaceSet$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$SimpleTypeToken", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeCollector", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeCollector$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeCollector$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeCollector$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeCollector$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeFilter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeFilter$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeFilter$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeSet", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeVisitor", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Unable to compile on Java 8"], "name": "com.google.common.reflect.Types", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\n\n---\n\nApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\n"], "labels": [[7]], "ids": ["1738"], "change": 0, "size": 1}, {"titles": ["Unable to compile on Java 8"], "name": "com.google.common.reflect.Types$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\n\n---\n\nApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\n"], "labels": [[7]], "ids": ["1738"], "change": 0, "size": 1}, {"titles": ["Unable to compile on Java 8"], "name": "com.google.common.reflect.Types$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\n\n---\n\nApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\n"], "labels": [[7]], "ids": ["1738"], "change": 0, "size": 1}, {"titles": ["Unable to compile on Java 8"], "name": "com.google.common.reflect.Types$ClassOwnership", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\n\n---\n\nApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\n"], "labels": [[7]], "ids": ["1738"], "change": 0, "size": 1}, {"titles": ["Unable to compile on Java 8"], "name": "com.google.common.reflect.Types$ClassOwnership$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\n\n---\n\nApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\n"], "labels": [[7]], "ids": ["1738"], "change": 0, "size": 1}, {"titles": ["Unable to compile on Java 8"], "name": "com.google.common.reflect.Types$ClassOwnership$1LocalClass", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\n\n---\n\nApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\n"], "labels": [[7]], "ids": ["1738"], "change": 0, "size": 1}, {"titles": ["Unable to compile on Java 8"], "name": "com.google.common.reflect.Types$ClassOwnership$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\n\n---\n\nApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\n"], "labels": [[7]], "ids": ["1738"], "change": 0, "size": 1}, {"titles": ["Unable to compile on Java 8"], "name": "com.google.common.reflect.Types$ClassOwnership$3", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\n\n---\n\nApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\n"], "labels": [[7]], "ids": ["1738"], "change": 0, "size": 1}, {"titles": ["Unable to compile on Java 8"], "name": "com.google.common.reflect.Types$GenericArrayTypeImpl", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\n\n---\n\nApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\n"], "labels": [[7]], "ids": ["1738"], "change": 0, "size": 1}, {"titles": ["Unable to compile on Java 8"], "name": "com.google.common.reflect.Types$JavaVersion", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\n\n---\n\nApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\n"], "labels": [[7]], "ids": ["1738"], "change": 0, "size": 1}, {"titles": ["Unable to compile on Java 8"], "name": "com.google.common.reflect.Types$JavaVersion$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\n\n---\n\nApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\n"], "labels": [[7]], "ids": ["1738"], "change": 0, "size": 1}, {"titles": ["Unable to compile on Java 8"], "name": "com.google.common.reflect.Types$JavaVersion$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\n\n---\n\nApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\n"], "labels": [[7]], "ids": ["1738"], "change": 0, "size": 1}, {"titles": ["Unable to compile on Java 8"], "name": "com.google.common.reflect.Types$JavaVersion$3", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\n\n---\n\nApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\n"], "labels": [[7]], "ids": ["1738"], "change": 0, "size": 1}, {"titles": ["Unable to compile on Java 8"], "name": "com.google.common.reflect.Types$JavaVersion$4", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\n\n---\n\nApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\n"], "labels": [[7]], "ids": ["1738"], "change": 0, "size": 1}, {"titles": ["Unable to compile on Java 8"], "name": "com.google.common.reflect.Types$NativeTypeVariableEquals", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\n\n---\n\nApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\n"], "labels": [[7]], "ids": ["1738"], "change": 0, "size": 1}, {"titles": ["Unable to compile on Java 8"], "name": "com.google.common.reflect.Types$ParameterizedTypeImpl", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\n\n---\n\nApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\n"], "labels": [[7]], "ids": ["1738"], "change": 0, "size": 1}, {"titles": ["Unable to compile on Java 8"], "name": "com.google.common.reflect.Types$TypeVariableImpl", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\n\n---\n\nApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\n"], "labels": [[7]], "ids": ["1738"], "change": 0, "size": 1}, {"titles": ["Unable to compile on Java 8"], "name": "com.google.common.reflect.Types$TypeVariableInvocationHandler", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\n\n---\n\nApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\n"], "labels": [[7]], "ids": ["1738"], "change": 0, "size": 1}, {"titles": ["Unable to compile on Java 8"], "name": "com.google.common.reflect.Types$WildcardTypeImpl", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\n\n---\n\nApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\n"], "labels": [[7]], "ids": ["1738"], "change": 0, "size": 1}]}, {"name": "com.google.common.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.ForceGuavaCompilationEntryPoint", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.gwt.core.client.EntryPoint", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.testing.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.base.Charsets", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Defaults", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayListMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ClassToInstanceMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBasedTable", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBasedTable$Factory", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashMultimap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableClassToInstanceMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableClassToInstanceMap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableClassToInstanceMap$Builder", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Possible deadlock in ImmutableList "], "name": "com.google.common.collect.ImmutableList$Builder", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "ImmutableList contains following code since version 15.0\n\n private static final ImmutableList<Object> EMPTY =\n      new RegularImmutableList<Object>(ObjectArrays.EMPTY_ARRAY);\n"], "labels": [[1], [1]], "ids": ["339", "1977"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Primitives", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedInteger", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedLong", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedLong_CustomFieldSerializer", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.reflect.AbstractInvocationHandler", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.reflect.Parameter", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Reflection", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.testing.AbstractPackageSanityTests", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.testing.AbstractPackageSanityTests$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.testing.AbstractPackageSanityTests$Chopper", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.testing.AbstractPackageSanityTests$Chopper$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.testing.AbstractPackageSanityTests$Chopper$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.testing.ArbitraryInstances", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.testing.ArbitraryInstances$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.testing.ArbitraryInstances$AlwaysEqual", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.testing.ArbitraryInstances$ByToString", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.testing.ArbitraryInstances$Dummies", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.testing.ArbitraryInstances$Dummies$DeterministicRandom", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.testing.ArbitraryInstances$Dummies$DummyCountDownLatch", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.testing.ArbitraryInstances$Dummies$DummyExecutor", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.testing.ArbitraryInstances$Dummies$DummyRunnable", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.testing.ArbitraryInstances$Dummies$DummyScheduledThreadPoolExecutor", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.testing.ArbitraryInstances$Dummies$DummyThreadFactory", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.testing.ArbitraryInstances$Dummies$InMemoryPrintStream", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.testing.ArbitraryInstances$Dummies$InMemoryPrintWriter", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.testing.ArbitraryInstances$NullByteSink", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$5", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$ParameterHasNoDistinctValueException", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$SerializableDummyProxy", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClusterException", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.DummyProxy", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.DummyProxy$DummyHandler", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.EqualsTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.EqualsTester$NotAnInstance", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.EquivalenceTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ForwardingWrapperTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ForwardingWrapperTester$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ForwardingWrapperTester$InteractionTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$FreshInvocationHandler", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$Generates", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.testing.GcFinalization", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.testing.GcFinalization$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.testing.GcFinalization$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.testing.GcFinalization$3", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.testing.GcFinalization$FinalizationPredicate", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Running tests in a non-US locale might fail"], "name": "com.google.common.testing.NullPointerTester", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1], [1]], "ids": ["339", "1567"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Running tests in a non-US locale might fail"], "name": "com.google.common.testing.NullPointerTester$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1], [1]], "ids": ["339", "1567"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Running tests in a non-US locale might fail"], "name": "com.google.common.testing.NullPointerTester$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1], [1]], "ids": ["339", "1567"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Running tests in a non-US locale might fail"], "name": "com.google.common.testing.NullPointerTester$ExceptionTypePolicy", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1], [1]], "ids": ["339", "1567"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Running tests in a non-US locale might fail"], "name": "com.google.common.testing.NullPointerTester$ExceptionTypePolicy$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1], [1]], "ids": ["339", "1567"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Running tests in a non-US locale might fail"], "name": "com.google.common.testing.NullPointerTester$ExceptionTypePolicy$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1], [1]], "ids": ["339", "1567"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Running tests in a non-US locale might fail"], "name": "com.google.common.testing.NullPointerTester$Signature", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1], [1]], "ids": ["339", "1567"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Running tests in a non-US locale might fail"], "name": "com.google.common.testing.NullPointerTester$Visibility", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1], [1]], "ids": ["339", "1567"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Running tests in a non-US locale might fail"], "name": "com.google.common.testing.NullPointerTester$Visibility$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1], [1]], "ids": ["339", "1567"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Running tests in a non-US locale might fail"], "name": "com.google.common.testing.NullPointerTester$Visibility$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1], [1]], "ids": ["339", "1567"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Running tests in a non-US locale might fail"], "name": "com.google.common.testing.NullPointerTester$Visibility$3", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1], [1]], "ids": ["339", "1567"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.Platform", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.RelationshipTester", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.RelationshipTester$Item", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.RelationshipTester$ItemReporter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.testing.SerializableTester", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.TearDown", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.TearDownAccepter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.TearDownStack", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "junit.framework.AssertionFailedError", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "org.junit.Test", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.util.concurrent.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.base.Supplier", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Throwables", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingObject", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Queues", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractCheckedFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractExecutionThreadService", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractExecutionThreadService$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractExecutionThreadService$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractExecutionThreadService$1$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractExecutionThreadService$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.AbstractFuture", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.AbstractFuture$Sync", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractIdleService", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractIdleService$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractIdleService$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractIdleService$2$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractIdleService$2$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractIdleService$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": ["Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()", "Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()"], "name": "com.google.common.util.concurrent.AbstractScheduledService", "version": "v18.0", "bodys": ["(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n", "(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n"], "labels": [[1], [1]], "ids": ["2072", "2072"], "change": 0, "size": 1}, {"titles": ["Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()", "Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()"], "name": "com.google.common.util.concurrent.AbstractScheduledService$1", "version": "v18.0", "bodys": ["(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n", "(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n"], "labels": [[1], [1]], "ids": ["2072", "2072"], "change": 0, "size": 1}, {"titles": ["Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()", "Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()"], "name": "com.google.common.util.concurrent.AbstractScheduledService$1$1", "version": "v18.0", "bodys": ["(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n", "(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n"], "labels": [[1], [1]], "ids": ["2072", "2072"], "change": 5, "size": 1}, {"titles": ["Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()", "Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()"], "name": "com.google.common.util.concurrent.AbstractScheduledService$1$2", "version": "v18.0", "bodys": ["(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n", "(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n"], "labels": [[1], [1]], "ids": ["2072", "2072"], "change": 5, "size": 1}, {"titles": ["Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()", "Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()"], "name": "com.google.common.util.concurrent.AbstractScheduledService$1$3", "version": "v18.0", "bodys": ["(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n", "(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n"], "labels": [[1], [1]], "ids": ["2072", "2072"], "change": 5, "size": 1}, {"titles": ["Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()", "Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()"], "name": "com.google.common.util.concurrent.AbstractScheduledService$1$4", "version": "v18.0", "bodys": ["(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n", "(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n"], "labels": [[1], [1]], "ids": ["2072", "2072"], "change": 5, "size": 1}, {"titles": ["Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()", "Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()"], "name": "com.google.common.util.concurrent.AbstractScheduledService$2", "version": "v18.0", "bodys": ["(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n", "(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n"], "labels": [[1], [1]], "ids": ["2072", "2072"], "change": 5, "size": 1}, {"titles": ["Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()", "Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()"], "name": "com.google.common.util.concurrent.AbstractScheduledService$3", "version": "v18.0", "bodys": ["(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n", "(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n"], "labels": [[1], [1]], "ids": ["2072", "2072"], "change": 5, "size": 1}, {"titles": ["Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()", "Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()"], "name": "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler", "version": "v18.0", "bodys": ["(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n", "(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n"], "labels": [[1], [1]], "ids": ["2072", "2072"], "change": 0, "size": 1}, {"titles": ["Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()", "Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()"], "name": "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable", "version": "v18.0", "bodys": ["(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n", "(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n"], "labels": [[1], [1]], "ids": ["2072", "2072"], "change": 0, "size": 1}, {"titles": ["Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()", "Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()"], "name": "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule", "version": "v18.0", "bodys": ["(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n", "(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n"], "labels": [[1], [1]], "ids": ["2072", "2072"], "change": 0, "size": 1}, {"titles": ["Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()", "Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()"], "name": "com.google.common.util.concurrent.AbstractScheduledService$Scheduler", "version": "v18.0", "bodys": ["(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n", "(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n"], "labels": [[1], [1]], "ids": ["2072", "2072"], "change": 0, "size": 1}, {"titles": ["Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()", "Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()"], "name": "com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1", "version": "v18.0", "bodys": ["(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n", "(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n"], "labels": [[1], [1]], "ids": ["2072", "2072"], "change": 0, "size": 1}, {"titles": ["Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()", "Deadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()"], "name": "com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2", "version": "v18.0", "bodys": ["(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n", "(Source attached below which demonstrates the issue).\nI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \nThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\n\nI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\n\n``` java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\n        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\n        System.out.println(\"starting service\");\n        service.startAsync();\n        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\n        System.out.println(\"Stopping service\");\n        service.stopAsync();\n        System.out.println(\"Bye\");\n      }\n}\n```\n\n``` java\npublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\n    private long blockTime;\n\n    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\n        this.blockTime = blockTime;\n    }\n\n    @Override\n    protected void runOneIteration() throws Exception {\n        System.out.println(\"runOneIteration()\");\n    }\n\n    @Override\n    protected Scheduler scheduler() {\n        return new CustomScheduler() {\n            @Override\n            protected Schedule getNextSchedule() throws Exception {\n                System.out.println(\"getNextSchedule()...\");\n                Thread.sleep(blockTime);\n                if (state() == State.STOPPING) {\n                    System.out.println(\"getNextSchedule() - not running anymore so don't return scheduler\");\n                    throw new Exception(\"not running anymore so don't return scheduler\");\n                }\n                System.out.println(\"...getNextSchedule()\");\n                return new Schedule(0, TimeUnit.NANOSECONDS);\n            }\n        };\n    }\n\n    @Override\n    protected void startUp() throws Exception {\n        System.out.println(\"startUp()\");\n    }\n\n    @Override\n    protected void shutDown() throws Exception {\n        System.out.println(\"shutDown()\");\n    }\n}\n```\n\n``` java\npublic class ServiceStateMonitor {\n    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\n        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\n    }\n\n    private class PrintOutNewStateServiceListener extends Service.Listener {\n        @Override\n        public void starting() {\n            System.out.println(\"SERVICE LISTENER : Starting\");\n        }\n\n        @Override\n        public void running() {\n            System.out.println(\"SERVICE LISTENER : Running\");\n        }\n\n        @Override\n        public void stopping(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Stopping\");\n        }\n\n        @Override\n        public void terminated(final Service.State from) {\n            System.out.println(\"SERVICE LISTENER : Terminated\");\n        }\n\n        @Override\n        public void failed(final Service.State from, final Throwable failure) {\n            System.out.println(\"SERVICE LISTENER : Failed\");\n        }\n    }\n}\n```\n\nThe Standard Ouput from running the main()\n\n```\nstarting service\nSERVICE LISTENER : Starting\nstartUp()\ngetNextSchedule()...\n...getNextSchedule()\nSERVICE LISTENER : Running\nrunOneIteration()\ngetNextSchedule()...\nStopping service\ngetNextSchedule() - not running anymore so don't return scheduler\n```\n\nnotice that there is no \"shutDown()\" or \"Bye\" output line.\n"], "labels": [[1], [1]], "ids": ["2072", "2072"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$10", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$5", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$6", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$7", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$8", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$9", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$StateSnapshot", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AsyncFunction", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AsyncSettableFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AsyncSettableFuture$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AsyncSettableFuture$NestedFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AtomicLongMap", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AtomicLongMap$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Callables", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Callables$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Callables$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Callables$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CheckedFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$3", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$Policy", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap", "Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1], [1]], "ids": ["339", "339"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ExecutionError", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ExecutionList", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingCheckedFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingCheckedFuture$SimpleForwardingCheckedFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingExecutorService", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingListeningExecutorService", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FutureCallback", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FutureFallback", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$5", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$6", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$7", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$8", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$ChainingListenableFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$ChainingListenableFuture$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$CombinedFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$CombinedFuture$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$CombinedFuture$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$CombinerFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$FallbackFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$FallbackFuture$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$FallbackFuture$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$FutureCombiner", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$ImmediateCancelledFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$ImmediateFailedCheckedFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$ImmediateFailedFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$ImmediateFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$ImmediateSuccessfulCheckedFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$ImmediateSuccessfulFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$MappingCheckedFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$WrappedCombiner", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.JdkFutureAdapters", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListenableFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListenableFutureTask", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListenerCallQueue", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListenerCallQueue$Callback", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListeningExecutorService", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.Monitor", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["Concurrency bug in AbstractMultimap"], "name": "com.google.common.util.concurrent.Monitor$Guard", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\n\n---\n\nMultiple concurrent reads of HashMultimap result in null pointer exception.\n\nUsing Google collections version 1.0\n\nProblem\ncom.google.common.collect.AbstractMultimap.AsMap.entrySet()\ncan return null when called by multiple threads.\n\n1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\n1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\n1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\n1314    }\n1. thread 1 executes line 1312\n2. thread 2 executes 1312 and 1313\n3. thread 1 executes 1313.\n\nThread 1 will return null.\n\nFix by\n1313      return (result == null) ? entrySet = new AsMapEntries() : result;\n"], "labels": [[1]], "ids": ["339"], "change": 0, "size": 1}, {"titles": ["BUG: ScheduledListeningDecorator schedule(Callable<V>....) delegates to schedule(Runnable"], "name": "com.google.common.util.concurrent.MoreExecutors", "version": "v18.0", "bodys": ["`MoreExecutors.java:541`\n\n``` java\n    @Override\n    public <V> ListenableScheduledFuture<V> schedule(\n        Callable<V> callable, long delay, TimeUnit unit) {\n      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\n      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\n      return new ListenableScheduledTask<V>(task, scheduled);\n    }\n```\n\n`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\n"], "labels": [[2]], "ids": ["2133"], "change": 0, "size": 1}, {"titles": ["BUG: ScheduledListeningDecorator schedule(Callable<V>....) delegates to schedule(Runnable"], "name": "com.google.common.util.concurrent.MoreExecutors$1", "version": "v18.0", "bodys": ["`MoreExecutors.java:541`\n\n``` java\n    @Override\n    public <V> ListenableScheduledFuture<V> schedule(\n        Callable<V> callable, long delay, TimeUnit unit) {\n      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\n      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\n      return new ListenableScheduledTask<V>(task, scheduled);\n    }\n```\n\n`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\n"], "labels": [[2]], "ids": ["2133"], "change": 0, "size": 1}, {"titles": ["BUG: ScheduledListeningDecorator schedule(Callable<V>....) delegates to schedule(Runnable"], "name": "com.google.common.util.concurrent.MoreExecutors$2", "version": "v18.0", "bodys": ["`MoreExecutors.java:541`\n\n``` java\n    @Override\n    public <V> ListenableScheduledFuture<V> schedule(\n        Callable<V> callable, long delay, TimeUnit unit) {\n      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\n      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\n      return new ListenableScheduledTask<V>(task, scheduled);\n    }\n```\n\n`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\n"], "labels": [[2]], "ids": ["2133"], "change": 0, "size": 1}, {"titles": ["BUG: ScheduledListeningDecorator schedule(Callable<V>....) delegates to schedule(Runnable"], "name": "com.google.common.util.concurrent.MoreExecutors$3", "version": "v18.0", "bodys": ["`MoreExecutors.java:541`\n\n``` java\n    @Override\n    public <V> ListenableScheduledFuture<V> schedule(\n        Callable<V> callable, long delay, TimeUnit unit) {\n      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\n      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\n      return new ListenableScheduledTask<V>(task, scheduled);\n    }\n```\n\n`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\n"], "labels": [[2]], "ids": ["2133"], "change": 0, "size": 1}, {"titles": ["BUG: ScheduledListeningDecorator schedule(Callable<V>....) delegates to schedule(Runnable"], "name": "com.google.common.util.concurrent.MoreExecutors$4", "version": "v18.0", "bodys": ["`MoreExecutors.java:541`\n\n``` java\n    @Override\n    public <V> ListenableScheduledFuture<V> schedule(\n        Callable<V> callable, long delay, TimeUnit unit) {\n      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\n      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\n      return new ListenableScheduledTask<V>(task, scheduled);\n    }\n```\n\n`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\n"], "labels": [[2]], "ids": ["2133"], "change": 0, "size": 1}, {"titles": ["BUG: ScheduledListeningDecorator schedule(Callable<V>....) delegates to schedule(Runnable"], "name": "com.google.common.util.concurrent.MoreExecutors$Application", "version": "v18.0", "bodys": ["`MoreExecutors.java:541`\n\n``` java\n    @Override\n    public <V> ListenableScheduledFuture<V> schedule(\n        Callable<V> callable, long delay, TimeUnit unit) {\n      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\n      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\n      return new ListenableScheduledTask<V>(task, scheduled);\n    }\n```\n\n`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\n"], "labels": [[2]], "ids": ["2133"], "change": 0, "size": 1}, {"titles": ["BUG: ScheduledListeningDecorator schedule(Callable<V>....) delegates to schedule(Runnable"], "name": "com.google.common.util.concurrent.MoreExecutors$Application$1", "version": "v18.0", "bodys": ["`MoreExecutors.java:541`\n\n``` java\n    @Override\n    public <V> ListenableScheduledFuture<V> schedule(\n        Callable<V> callable, long delay, TimeUnit unit) {\n      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\n      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\n      return new ListenableScheduledTask<V>(task, scheduled);\n    }\n```\n\n`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\n"], "labels": [[2]], "ids": ["2133"], "change": 0, "size": 1}, {"titles": ["BUG: ScheduledListeningDecorator schedule(Callable<V>....) delegates to schedule(Runnable"], "name": "com.google.common.util.concurrent.MoreExecutors$DirectExecutor", "version": "v18.0", "bodys": ["`MoreExecutors.java:541`\n\n``` java\n    @Override\n    public <V> ListenableScheduledFuture<V> schedule(\n        Callable<V> callable, long delay, TimeUnit unit) {\n      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\n      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\n      return new ListenableScheduledTask<V>(task, scheduled);\n    }\n```\n\n`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\n"], "labels": [[2]], "ids": ["2133"], "change": 0, "size": 1}, {"titles": ["BUG: ScheduledListeningDecorator schedule(Callable<V>....) delegates to schedule(Runnable"], "name": "com.google.common.util.concurrent.MoreExecutors$DirectExecutorService", "version": "v18.0", "bodys": ["`MoreExecutors.java:541`\n\n``` java\n    @Override\n    public <V> ListenableScheduledFuture<V> schedule(\n        Callable<V> callable, long delay, TimeUnit unit) {\n      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\n      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\n      return new ListenableScheduledTask<V>(task, scheduled);\n    }\n```\n\n`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\n"], "labels": [[2]], "ids": ["2133"], "change": 0, "size": 1}, {"titles": ["BUG: ScheduledListeningDecorator schedule(Callable<V>....) delegates to schedule(Runnable"], "name": "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator", "version": "v18.0", "bodys": ["`MoreExecutors.java:541`\n\n``` java\n    @Override\n    public <V> ListenableScheduledFuture<V> schedule(\n        Callable<V> callable, long delay, TimeUnit unit) {\n      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\n      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\n      return new ListenableScheduledTask<V>(task, scheduled);\n    }\n```\n\n`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\n"], "labels": [[2]], "ids": ["2133"], "change": 0, "size": 1}, {"titles": ["BUG: ScheduledListeningDecorator schedule(Callable<V>....) delegates to schedule(Runnable"], "name": "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator", "version": "v18.0", "bodys": ["`MoreExecutors.java:541`\n\n``` java\n    @Override\n    public <V> ListenableScheduledFuture<V> schedule(\n        Callable<V> callable, long delay, TimeUnit unit) {\n      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\n      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\n      return new ListenableScheduledTask<V>(task, scheduled);\n    }\n```\n\n`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\n"], "labels": [[2]], "ids": ["2133"], "change": 0, "size": 1}, {"titles": ["BUG: ScheduledListeningDecorator schedule(Callable<V>....) delegates to schedule(Runnable"], "name": "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask", "version": "v18.0", "bodys": ["`MoreExecutors.java:541`\n\n``` java\n    @Override\n    public <V> ListenableScheduledFuture<V> schedule(\n        Callable<V> callable, long delay, TimeUnit unit) {\n      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\n      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\n      return new ListenableScheduledTask<V>(task, scheduled);\n    }\n```\n\n`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\n"], "labels": [[2]], "ids": ["2133"], "change": 0, "size": 1}, {"titles": ["BUG: ScheduledListeningDecorator schedule(Callable<V>....) delegates to schedule(Runnable"], "name": "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask", "version": "v18.0", "bodys": ["`MoreExecutors.java:541`\n\n``` java\n    @Override\n    public <V> ListenableScheduledFuture<V> schedule(\n        Callable<V> callable, long delay, TimeUnit unit) {\n      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\n      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\n      return new ListenableScheduledTask<V>(task, scheduled);\n    }\n```\n\n`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\n"], "labels": [[2]], "ids": ["2133"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail", "Running tests in a non-US locale might fail"], "name": "com.google.common.util.concurrent.RateLimiter", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1], [1]], "ids": ["1567", "1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail", "Running tests in a non-US locale might fail"], "name": "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1], [1]], "ids": ["1567", "1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail", "Running tests in a non-US locale might fail"], "name": "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1], [1]], "ids": ["1567", "1567"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Runnables", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Runnables$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SerializingExecutor", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SerializingExecutor$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SerializingExecutor$TaskRunner", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.util.concurrent.Service", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.util.concurrent.Service$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.util.concurrent.Service$Listener", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.util.concurrent.Service$State", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.util.concurrent.Service$State$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.util.concurrent.Service$State$2", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.util.concurrent.Service$State$3", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.util.concurrent.Service$State$4", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.util.concurrent.Service$State$5", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.util.concurrent.Service$State$6", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$EmptyServiceManagerWarning", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$Listener", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$NoOpService", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$ServiceListener", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$5", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SimpleTimeLimiter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SimpleTimeLimiter$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SimpleTimeLimiter$1$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SmoothRateLimiter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SmoothRateLimiter$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$5", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$CompactStriped", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$LargeLazyStriped", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$PaddedLock", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$PaddedSemaphore", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$PowerOfTwoStriped", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$SmallLazyStriped", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail", "Running tests in a non-US locale might fail"], "name": "com.google.common.util.concurrent.ThreadFactoryBuilder", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1], [1]], "ids": ["1567", "1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail", "Running tests in a non-US locale might fail"], "name": "com.google.common.util.concurrent.ThreadFactoryBuilder$1", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1], [1]], "ids": ["1567", "1567"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.TimeLimiter", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.util.concurrent.UncaughtExceptionHandlers", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": ["Running tests in a non-US locale might fail"], "name": "com.google.common.util.concurrent.UncaughtExceptionHandlers$Exiter", "version": "v18.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\n\n---\n\nFailed tests: \n&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\n&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\n&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\n&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\n&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\n&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\n&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\n&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\n&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\n&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\n&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\n\n@@\n\nInstead of:\n\nString.format(\"%.4g %s\", value, abbreviate(unit));\n\nyou might want to use:\n\nString.format(Locale.ROOT, \"%.4g %s\", value, abbreviate(unit));\n\n@@\n\nYou might want to check the entire codebase for usages of String.format without an explicit Locale.\n"], "labels": [[1]], "ids": ["1567"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.UncheckedExecutionException", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.UncheckedTimeoutException", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Uninterruptibles", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.WrappingExecutorService", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.WrappingExecutorService$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.WrappingScheduledExecutorService", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.util.concurrent.testing.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.util.concurrent.AbstractListeningExecutorService", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingListenableFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListenableScheduledFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListeningScheduledExecutorService", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractCheckedFutureTest", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractCheckedFutureTest$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractCheckedFutureTest$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractCheckedFutureTest$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest$2", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest$3", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest$4", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest$5", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest$6", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService$ImmediateScheduledFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.TestingExecutors", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.TestingExecutors$1", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService$NeverScheduledFuture", "version": "v18.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}]}, {"clusters": ["com.google.common.base.ss", "com.google.common.cache.ss", "com.google.common.collect.ss", "com.google.common.collect.testing.features.ss", "com.google.common.collect.testing.google.ss", "com.google.common.collect.testing.ss", "com.google.common.collect.testing.testers.ss", "com.google.common.escape.ss", "com.google.common.eventbus.ss", "com.google.common.hash.ss", "com.google.common.io.ss", "com.google.common.math.ss", "com.google.common.net.ss", "com.google.common.primitives.ss", "com.google.common.reflect.ss", "com.google.common.ss", "com.google.common.testing.ss", "com.google.common.util.concurrent.ss", "com.google.common.util.concurrent.testing.ss", "dummy", "dummy"], "package_level": 4, "name": "v19.0", "children": [{"name": "com.google.common.base.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.annotations.GwtIncompatible", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.AbstractIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.AbstractIterator$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.AbstractIterator$State", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Ascii", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat$StringConverter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 0, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$1", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 0, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$And", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 0, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$Any", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$AnyOf", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$Ascii", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$BitSetMatcher", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 0, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$BreakingWhitespace", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$Digit", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$FastMatcher", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 0, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$ForPredicate", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$InRange", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$Invisible", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$Is", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$IsEither", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$IsNot", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$JavaDigit", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$JavaIsoControl", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$JavaLetter", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$JavaLetterOrDigit", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$JavaLowerCase", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$JavaUpperCase", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$NamedFastMatcher", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$Negated", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$NegatedFastMatcher", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 0, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$None", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$Or", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 0, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$RangesMatcher", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 0, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$SingleWidth", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": ["CharMatcher.matchesNoneOf JavaDoc is incorrect"], "name": "com.google.common.base.CharMatcher$Whitespace", "version": "v19.0", "bodys": ["The second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: \"The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached.\"  This should be \"until this returns true or the end is reached\".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\n\nSimilarly, the \"returns\" section currently says: \"true if this matcher matches every character in the sequence, including when the sequence is empty\" (same as `matchesAllOf`). It should say something like \"true if this matches matches no character in the sequence, including when the sequence is empty\".\n"], "labels": [[2]], "ids": ["2410"], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.base.Converter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Converter$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Converter$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Converter$ConverterComposition", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Converter$FunctionBasedConverter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Converter$IdentityConverter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Converter$ReverseConverter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Enums", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Enums$StringConverter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Equivalence", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Equivalence$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Equivalence$Equals", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Equivalence$EquivalentToPredicate", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Equivalence$Identity", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Equivalence$Wrapper", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizablePhantomReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableReferenceQueue", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableReferenceQueue$DecoupledLoader", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableReferenceQueue$DirectLoader", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableReferenceQueue$FinalizerLoader", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableReferenceQueue$SystemLoader", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableSoftReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableWeakReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Function", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FunctionalEquivalence", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$ConstantFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$ForMapWithDefault", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$FunctionComposition", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$FunctionForMapNoDefault", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$IdentityFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$PredicateFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$SupplierFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$ToStringFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.GwtSerializationDependencies", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.GwtSerializationDependencies$OptionalDependencies", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Joiner", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Joiner$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Joiner$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Joiner$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Joiner$MapJoiner", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.MoreObjects", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.MoreObjects$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.MoreObjects$ToStringHelper", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.MoreObjects$ToStringHelper$ValueHolder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Objects", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Objects$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Objects$ToStringHelper", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Objects$ToStringHelper$ValueHolder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Optional$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Optional$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.PairwiseEquivalence", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Implement Stopwatch.toString() under GWT", "Implement Stopwatch.toString() under GWT"], "name": "com.google.common.base.Platform", "version": "v19.0", "bodys": ["Not a high priority. I just feel a little bad that users there would get something like \"com.google.common.base.Stopwatch@0xdeadbeef\".\n", "Not a high priority. I just feel a little bad that users there would get something like \"com.google.common.base.Stopwatch@0xdeadbeef\".\n"], "labels": [[1], [1]], "ids": ["2365", "2365"], "change": 0, "size": 1}, {"titles": ["Predicates.assignableFrom is named backward, and its doc is backward, too", "Predicates.assignableFrom is named backward, and its doc is backward, too"], "name": "com.google.common.base.Predicate", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n"], "labels": [[1], [1]], "ids": ["1444", "1444"], "change": 0, "size": 1}, {"titles": ["Predicates.assignableFrom is named backward, and its doc is backward, too", "Predicates.assignableFrom is named backward, and its doc is backward, too"], "name": "com.google.common.base.Predicates", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n"], "labels": [[1], [1]], "ids": ["1444", "1444"], "change": 0, "size": 1}, {"titles": ["Predicates.assignableFrom is named backward, and its doc is backward, too", "Predicates.assignableFrom is named backward, and its doc is backward, too"], "name": "com.google.common.base.Predicates$1", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n"], "labels": [[1], [1]], "ids": ["1444", "1444"], "change": 0, "size": 1}, {"titles": ["Predicates.assignableFrom is named backward, and its doc is backward, too", "Predicates.assignableFrom is named backward, and its doc is backward, too"], "name": "com.google.common.base.Predicates$AndPredicate", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n"], "labels": [[1], [1]], "ids": ["1444", "1444"], "change": 0, "size": 1}, {"titles": ["Predicates.assignableFrom is named backward, and its doc is backward, too", "Predicates.assignableFrom is named backward, and its doc is backward, too"], "name": "com.google.common.base.Predicates$AssignableFromPredicate", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n"], "labels": [[1], [1]], "ids": ["1444", "1444"], "change": 5, "size": 1}, {"titles": ["Predicates.assignableFrom is named backward, and its doc is backward, too", "Predicates.assignableFrom is named backward, and its doc is backward, too"], "name": "com.google.common.base.Predicates$CompositionPredicate", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n"], "labels": [[1], [1]], "ids": ["1444", "1444"], "change": 0, "size": 1}, {"titles": ["Predicates.assignableFrom is named backward, and its doc is backward, too", "Predicates.assignableFrom is named backward, and its doc is backward, too"], "name": "com.google.common.base.Predicates$ContainsPatternFromStringPredicate", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n"], "labels": [[1], [1]], "ids": ["1444", "1444"], "change": 0, "size": 1}, {"titles": ["Predicates.assignableFrom is named backward, and its doc is backward, too", "Predicates.assignableFrom is named backward, and its doc is backward, too"], "name": "com.google.common.base.Predicates$ContainsPatternPredicate", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n"], "labels": [[1], [1]], "ids": ["1444", "1444"], "change": 0, "size": 1}, {"titles": ["Predicates.assignableFrom is named backward, and its doc is backward, too", "Predicates.assignableFrom is named backward, and its doc is backward, too"], "name": "com.google.common.base.Predicates$InPredicate", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n"], "labels": [[1], [1]], "ids": ["1444", "1444"], "change": 0, "size": 1}, {"titles": ["Predicates.assignableFrom is named backward, and its doc is backward, too", "Predicates.assignableFrom is named backward, and its doc is backward, too"], "name": "com.google.common.base.Predicates$InstanceOfPredicate", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n"], "labels": [[1], [1]], "ids": ["1444", "1444"], "change": 0, "size": 1}, {"titles": ["Predicates.assignableFrom is named backward, and its doc is backward, too", "Predicates.assignableFrom is named backward, and its doc is backward, too"], "name": "com.google.common.base.Predicates$IsEqualToPredicate", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n"], "labels": [[1], [1]], "ids": ["1444", "1444"], "change": 0, "size": 1}, {"titles": ["Predicates.assignableFrom is named backward, and its doc is backward, too", "Predicates.assignableFrom is named backward, and its doc is backward, too"], "name": "com.google.common.base.Predicates$NotPredicate", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n"], "labels": [[1], [1]], "ids": ["1444", "1444"], "change": 0, "size": 1}, {"titles": ["Predicates.assignableFrom is named backward, and its doc is backward, too", "Predicates.assignableFrom is named backward, and its doc is backward, too"], "name": "com.google.common.base.Predicates$ObjectPredicate", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n"], "labels": [[1], [1]], "ids": ["1444", "1444"], "change": 0, "size": 1}, {"titles": ["Predicates.assignableFrom is named backward, and its doc is backward, too", "Predicates.assignableFrom is named backward, and its doc is backward, too"], "name": "com.google.common.base.Predicates$ObjectPredicate$1", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n"], "labels": [[1], [1]], "ids": ["1444", "1444"], "change": 0, "size": 1}, {"titles": ["Predicates.assignableFrom is named backward, and its doc is backward, too", "Predicates.assignableFrom is named backward, and its doc is backward, too"], "name": "com.google.common.base.Predicates$ObjectPredicate$2", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n"], "labels": [[1], [1]], "ids": ["1444", "1444"], "change": 0, "size": 1}, {"titles": ["Predicates.assignableFrom is named backward, and its doc is backward, too", "Predicates.assignableFrom is named backward, and its doc is backward, too"], "name": "com.google.common.base.Predicates$ObjectPredicate$3", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n"], "labels": [[1], [1]], "ids": ["1444", "1444"], "change": 0, "size": 1}, {"titles": ["Predicates.assignableFrom is named backward, and its doc is backward, too", "Predicates.assignableFrom is named backward, and its doc is backward, too"], "name": "com.google.common.base.Predicates$ObjectPredicate$4", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n"], "labels": [[1], [1]], "ids": ["1444", "1444"], "change": 0, "size": 1}, {"titles": ["Predicates.assignableFrom is named backward, and its doc is backward, too", "Predicates.assignableFrom is named backward, and its doc is backward, too"], "name": "com.google.common.base.Predicates$OrPredicate", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\n\n---\n\nJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\n\nAnd the doc says: \"true if the class being tested is assignable from the given class\"\ufeff\nhttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\n\nBut it's the other way around.\n"], "labels": [[1], [1]], "ids": ["1444", "1444"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.SmallCharMatcher", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$2$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$3$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$4$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$MapSplitter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$SplittingIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$Strategy", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.StandardSystemProperty", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Implement Stopwatch.toString() under GWT", "Implement Stopwatch.toString() under GWT", "Implement Stopwatch.toString() under GWT"], "name": "com.google.common.base.Stopwatch", "version": "v19.0", "bodys": ["Not a high priority. I just feel a little bad that users there would get something like \"com.google.common.base.Stopwatch@0xdeadbeef\".\n", "Not a high priority. I just feel a little bad that users there would get something like \"com.google.common.base.Stopwatch@0xdeadbeef\".\n", "Not a high priority. I just feel a little bad that users there would get something like \"com.google.common.base.Stopwatch@0xdeadbeef\".\n"], "labels": [[1], [1], [1]], "ids": ["2365", "2365", "2365"], "change": 0, "size": 1}, {"titles": ["Implement Stopwatch.toString() under GWT", "Implement Stopwatch.toString() under GWT", "Implement Stopwatch.toString() under GWT"], "name": "com.google.common.base.Stopwatch$1", "version": "v19.0", "bodys": ["Not a high priority. I just feel a little bad that users there would get something like \"com.google.common.base.Stopwatch@0xdeadbeef\".\n", "Not a high priority. I just feel a little bad that users there would get something like \"com.google.common.base.Stopwatch@0xdeadbeef\".\n", "Not a high priority. I just feel a little bad that users there would get something like \"com.google.common.base.Stopwatch@0xdeadbeef\".\n"], "labels": [[1], [1], [1]], "ids": ["2365", "2365", "2365"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$ExpiringMemoizingSupplier", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$MemoizingSupplier", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$SupplierComposition", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$SupplierFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$SupplierFunctionImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$SupplierOfInstance", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$ThreadSafeSupplier", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Emulate Throwables in GWT", "Emulate Throwables in GWT", "Emulate Throwables in GWT"], "name": "com.google.common.base.Throwables", "version": "v19.0", "bodys": ["", "", ""], "labels": [[0], [0], [0]], "ids": ["2457", "2457", "2457"], "change": 4, "size": 1}, {"titles": ["Emulate Throwables in GWT", "Emulate Throwables in GWT", "Emulate Throwables in GWT"], "name": "com.google.common.base.Throwables$1", "version": "v19.0", "bodys": ["", "", ""], "labels": [[0], [0], [0]], "ids": ["2457", "2457", "2457"], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.base.Ticker", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Ticker$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Verify", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.VerifyException", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.cache.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.base.Preconditions", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Utf8", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.AbstractCache", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.AbstractCache$SimpleStatsCounter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.AbstractCache$StatsCounter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.Cache", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilder$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilder$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilder$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilder$NullListener", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilder$OneWeigher", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$AccessDurationParser", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$ConcurrencyLevelParser", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$DurationParser", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$InitialCapacityParser", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$IntegerParser", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$KeyStrengthParser", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$LongParser", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$MaximumSizeParser", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$MaximumWeightParser", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$RecordStatsParser", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$RefreshDurationParser", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$ValueParser", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$ValueStrengthParser", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$WriteDurationParser", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader$FunctionToCacheLoader", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader$InvalidCacheLoadException", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader$SupplierToCacheLoader", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader$UnsupportedLoadingOperationException", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheStats", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.ForwardingCache", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.ForwardingCache$SimpleForwardingCache", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.ForwardingLoadingCache", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LoadingCache", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$AbstractCacheSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$AbstractReferenceEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$AccessQueue", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$AccessQueue$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$AccessQueue$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryFactory", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryFactory$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryFactory$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryFactory$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryFactory$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryFactory$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryFactory$6", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryFactory$7", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryFactory$8", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$HashIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$KeyIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$KeySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$LoadingSerializationProxy", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$LoadingValueReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$LoadingValueReference$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$LocalLoadingCache", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$LocalManualCache", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$LocalManualCache$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$ManualSerializationProxy", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$NullEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$ReferenceEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$Segment", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$Segment$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$SoftValueReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$Strength", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$Strength$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$Strength$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$Strength$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$StrongAccessEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$StrongAccessWriteEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$StrongEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$StrongValueReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$StrongWriteEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$ValueIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$ValueReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$Values", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WeakAccessEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WeakAccessWriteEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WeakEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WeakValueReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WeakWriteEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WeightedSoftValueReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WeightedStrongValueReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WeightedWeakValueReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WriteQueue", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WriteQueue$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WriteQueue$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WriteThroughEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LongAddable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LongAddables", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LongAddables$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LongAddables$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LongAddables$PureJavaLongAddable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LongAdder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalCause", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalCause$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalCause$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalCause$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalCause$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalCause$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalListener", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalListeners", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalListeners$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalListeners$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalNotification", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.Striped64", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.Striped64$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.Striped64$Cell", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.Weigher", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.ArrayBasedUnicodeEscaper", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashingInputStream", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashingOutputStream", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CountingInputStream", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.io.CountingOutputStream", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.io.PatternFilenameFilter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FakeTicker", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FakeTimeLimiter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListenableFutureTask", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "sun.misc.Unsafe", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}]}, {"name": "com.google.common.collect.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.annotations.Beta", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.annotations.VisibleForTesting", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Absent", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Absent_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.base.Optional", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.PairwiseEquivalence_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.base.Present", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Present_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.AbstractLoadingCache", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$EntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$EntrySet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$EntrySet$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$Inverse", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$KeySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$ValueSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractIndexedListIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractIterator$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractIterator$State", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractListMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$AsMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$Itr", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$KeySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$KeySet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultiset$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultiset$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultimap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultimap$Entries", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultimap$EntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultimap$Values", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultiset$ElementSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultiset$EntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractNavigableMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractNavigableMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractNavigableMap$DescendingMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractRangeSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractSequentialIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractSetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractSortedKeySortedSetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractSortedMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractSortedMultiset$1DescendingMultisetImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractSortedSetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractTable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractTable$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractTable$CellSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractTable$Values", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AllEqualOrdering", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AllEqualOrdering_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayListMultimap_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$ArrayMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$ArrayMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$ArrayMap$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$Column", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$ColumnMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$Row", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$RowMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser$InOrderIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser$PostOrderIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser$PreOrderIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BoundType", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BoundType$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BoundType$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ByFunctionOrdering", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ByFunctionOrdering_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.CartesianList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.CartesianList$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.CollectPreconditions", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$FilteredCollection", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$OrderedPermutationCollection", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$OrderedPermutationIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$PermutationCollection", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$PermutationIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$TransformedCollection", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComparatorOrdering", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComparatorOrdering_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComparisonChain", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComparisonChain$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComparisonChain$InactiveComparisonChain", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.CompoundOrdering", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.CompoundOrdering_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComputationException", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComputingConcurrentHashMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComputingConcurrentHashMap$ComputedReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComputingConcurrentHashMap$ComputingSerializationProxy", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConcurrentHashMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConcurrentHashMultiset$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConcurrentHashMultiset$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConcurrentHashMultiset$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConcurrentHashMultiset$EntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConcurrentHashMultiset$FieldSettersHolder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraint", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints$ConstrainedCollection", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints$ConstrainedList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints$ConstrainedListIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints$ConstrainedRandomAccessList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints$ConstrainedSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints$ConstrainedSortedSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConsumingQueueIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.Count", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Cut", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Cut$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Cut$AboveAll", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Cut$AboveValue", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Cut$BelowAll", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Cut$BelowValue", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$Column", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$ColumnMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$Row", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$RowMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DescendingImmutableSortedMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DescendingImmutableSortedSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DescendingMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DescendingMultiset$1EntrySetImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.DiscreteDomain", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DiscreteDomain$BigIntegerDomain", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DiscreteDomain$IntegerDomain", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DiscreteDomain$LongDomain", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyContiguousSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyContiguousSet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyContiguousSet$SerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyImmutableListMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyImmutableListMultimap_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyImmutableSetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyImmutableSetMultimap_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EnumBiMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EnumHashBiMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EvictingQueue", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ExplicitOrdering", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ExplicitOrdering_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$AsMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$AsMap$1KeySetImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$AsMap$1ValuesImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$Keys", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$Keys$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$Keys$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$ValuePredicate", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntrySetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeyListMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeyMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeyMultimap$AddRejectingList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeyMultimap$AddRejectingSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeyMultimap$Entries", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeySetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeySetMultimap$EntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredMultimapValues", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredSetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FluentIterable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FluentIterable$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FluentIterable$FromIterableFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingBlockingDeque", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingCollection", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingConcurrentMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingDeque", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingListIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMap$StandardEntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMap$StandardKeySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMap$StandardValues", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMultiset$StandardElementSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingNavigableMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingNavigableSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingNavigableSet$StandardDescendingSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingQueue", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedMap$StandardKeySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedMultiset$StandardElementSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedSetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingTable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GeneralRange", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GenericMapMaker", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.GenericMapMaker$NullListener", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$HashBasedTableDependencies", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$ImmutableListMultimapDependencies", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$ImmutableSetMultimapDependencies", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$ImmutableTableDependencies", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$LinkedListMultimapDependencies", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$TreeBasedTableDependencies", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$TreeMultimapDependencies", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtTransient", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBasedTable_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$1$MapEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$1.MapEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$BiEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse$1$1$InverseEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse$1$1.InverseEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse$InverseKeySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse$InverseKeySet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$InverseSerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Itr", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$KeySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$KeySet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashMultimap_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashMultiset_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.Hashing", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableAsList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableAsList$SerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableBiMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableBiMap$Builder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableBiMap$SerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEntry_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumMap$EnumSerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumMap_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumSet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumSet$EnumSerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumSet_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableList$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableList$ReverseImmutableList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableList$SerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableList$SubList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableListMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableListMultimap$Builder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableListMultimap_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap$1EntrySetImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableBiMapEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapEntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapKeySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapValues", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapValues$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapValues$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapValues$SerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$Builder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$EntryCollection", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$FieldSettersHolder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$Itr", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$Keys", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$Values", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultiset$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultiset$Builder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultiset$EntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultiset$SerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Mutable operations on ImmutableRangeSet should be deprecated"], "name": "com.google.common.collect.ImmutableRangeMap", "version": "v19.0", "bodys": ["Mutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\n"], "labels": [[2]], "ids": ["2258"], "change": 0, "size": 1}, {"titles": ["Mutable operations on ImmutableRangeSet should be deprecated"], "name": "com.google.common.collect.ImmutableRangeMap$1", "version": "v19.0", "bodys": ["Mutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\n"], "labels": [[2]], "ids": ["2258"], "change": 0, "size": 1}, {"titles": ["Mutable operations on ImmutableRangeSet should be deprecated"], "name": "com.google.common.collect.ImmutableRangeMap$2", "version": "v19.0", "bodys": ["Mutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\n"], "labels": [[2]], "ids": ["2258"], "change": 0, "size": 1}, {"titles": ["Mutable operations on ImmutableRangeSet should be deprecated"], "name": "com.google.common.collect.ImmutableRangeMap$Builder", "version": "v19.0", "bodys": ["Mutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\n"], "labels": [[2]], "ids": ["2258"], "change": 0, "size": 1}, {"titles": ["Mutable operations on ImmutableRangeSet should be deprecated"], "name": "com.google.common.collect.ImmutableRangeMap$SerializedForm", "version": "v19.0", "bodys": ["Mutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\n"], "labels": [[2]], "ids": ["2258"], "change": 4, "size": 1}, {"titles": ["Mutable operations on ImmutableRangeSet should be deprecated"], "name": "com.google.common.collect.ImmutableRangeSet", "version": "v19.0", "bodys": ["Mutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\n"], "labels": [[2]], "ids": ["2258"], "change": 0, "size": 1}, {"titles": ["Mutable operations on ImmutableRangeSet should be deprecated"], "name": "com.google.common.collect.ImmutableRangeSet$1", "version": "v19.0", "bodys": ["Mutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\n"], "labels": [[2]], "ids": ["2258"], "change": 0, "size": 1}, {"titles": ["Mutable operations on ImmutableRangeSet should be deprecated"], "name": "com.google.common.collect.ImmutableRangeSet$AsSet", "version": "v19.0", "bodys": ["Mutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\n"], "labels": [[2]], "ids": ["2258"], "change": 0, "size": 1}, {"titles": ["Mutable operations on ImmutableRangeSet should be deprecated"], "name": "com.google.common.collect.ImmutableRangeSet$AsSet$1", "version": "v19.0", "bodys": ["Mutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\n"], "labels": [[2]], "ids": ["2258"], "change": 0, "size": 1}, {"titles": ["Mutable operations on ImmutableRangeSet should be deprecated"], "name": "com.google.common.collect.ImmutableRangeSet$AsSet$2", "version": "v19.0", "bodys": ["Mutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\n"], "labels": [[2]], "ids": ["2258"], "change": 0, "size": 1}, {"titles": ["Mutable operations on ImmutableRangeSet should be deprecated"], "name": "com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm", "version": "v19.0", "bodys": ["Mutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\n"], "labels": [[2]], "ids": ["2258"], "change": 0, "size": 1}, {"titles": ["Mutable operations on ImmutableRangeSet should be deprecated"], "name": "com.google.common.collect.ImmutableRangeSet$Builder", "version": "v19.0", "bodys": ["Mutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\n"], "labels": [[2]], "ids": ["2258"], "change": 0, "size": 1}, {"titles": ["Mutable operations on ImmutableRangeSet should be deprecated"], "name": "com.google.common.collect.ImmutableRangeSet$ComplementRanges", "version": "v19.0", "bodys": ["Mutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\n"], "labels": [[2]], "ids": ["2258"], "change": 0, "size": 1}, {"titles": ["Mutable operations on ImmutableRangeSet should be deprecated"], "name": "com.google.common.collect.ImmutableRangeSet$SerializedForm", "version": "v19.0", "bodys": ["Mutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\n"], "labels": [[2]], "ids": ["2258"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSet$Indexed", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSet$Indexed$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSet$SerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSetMultimap$Builder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSetMultimap$EntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSetMultimap_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedAsList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMap$1EntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMap$1EntrySet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMap$Builder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMap$SerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMapFauxverideShim", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMap_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMap_CustomFieldSerializerBase", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMultiset$Builder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMultiset$SerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMultisetFauxverideShim", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedSet$SerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedSetFauxverideShim", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableTable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableTable$Builder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableTable_CustomFieldSerializerBase", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Interner", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Interners", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Interners$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Interners$InternerFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Interners$WeakInterner", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Interners$WeakInterner$Dummy", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$10", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$10$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$11", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$12", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$13", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$14", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$15", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$6", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$7", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$8", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$9", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$UnmodifiableIterable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$10", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$11", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$12", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$13", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$14", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$6", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$7", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$8", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$9", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$MergingIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$MergingIterator$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$PeekingImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LexicographicalOrdering", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LexicographicalOrdering_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap$ValueEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap$ValueSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap$ValueSet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap$ValueSetLink", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultiset_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$1EntriesImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$1KeySetImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$1ValuesImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$1ValuesImpl$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$KeyList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$Node", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$NodeIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$AbstractListWrapper", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$CharSequenceAsList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$OnePlusArrayList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$Partition", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$RandomAccessListWrapper", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$RandomAccessPartition", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$RandomAccessReverseList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$ReverseList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$ReverseList$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$StringAsImmutableList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$TransformingRandomAccessList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$TransformingRandomAccessList$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$TransformingSequentialList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$TransformingSequentialList$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$TwoPlusArrayList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraint", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$2$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedAsMapEntries", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedAsMapEntries$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedAsMapValues", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedAsMapValues$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedBiMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedEntries", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedEntries$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedEntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedListMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedMultimap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedMultimap$1AsMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedSetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$InverseConstraint", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$NotNullMapConstraint", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapDifference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapDifference$ValueDifference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMaker", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMaker$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMaker$ComputingMapAdapter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMaker$NullComputingConcurrentMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMaker$NullConcurrentMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMaker$RemovalCause", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMaker$RemovalCause$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMaker$RemovalCause$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMaker$RemovalCause$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMaker$RemovalCause$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMaker$RemovalCause$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMaker$RemovalListener", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMaker$RemovalNotification", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$CleanupMapTask", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryFactory", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryFactory$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryFactory$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryFactory$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryFactory$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryFactory$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryFactory$6", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryFactory$7", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryFactory$8", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EvictionQueue", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EvictionQueue$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EvictionQueue$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$ExpirationQueue", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$ExpirationQueue$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$HashIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$KeyIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$KeySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$NullEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$ReferenceEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$SafeToArraySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$Segment", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$SerializationProxy", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$SoftEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$SoftEvictableEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$SoftExpirableEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$SoftValueReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$Strength", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$Strength$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$Strength$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$Strength$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$StrongEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$StrongEvictableEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$StrongValueReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$ValueIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$ValueReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$Values", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WeakEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WeakEvictableEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WeakValueReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WriteThroughEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$10", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$11", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$6", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$7", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$8", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$9", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$AbstractFilteredMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$AsMapView", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$AsMapView$1EntrySetImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$BiMapConverter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$DescendingMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$DescendingMap$1EntrySetImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$EntryFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$EntryFunction$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$EntryFunction$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$EntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$EntryTransformer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntryBiMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntryBiMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntryMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntryMap$EntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntryMap$KeySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntryNavigableMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntryNavigableMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntrySortedMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredKeyMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredMapValues", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$IteratorBasedAbstractMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$IteratorBasedAbstractMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$KeySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$MapDifferenceImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$NavigableAsMapView", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$NavigableKeySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$SortedAsMapView", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$SortedKeySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$SortedMapDifferenceImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$TransformedEntriesMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$TransformedEntriesNavigableMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$TransformedEntriesSortedMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$UnmodifiableBiMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$UnmodifiableEntries", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$UnmodifiableEntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$UnmodifiableNavigableMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$ValueDifferenceImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$Values", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$ViewCachingAbstractMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MinMaxPriorityQueue", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MinMaxPriorityQueue$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MinMaxPriorityQueue$Builder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MinMaxPriorityQueue$Heap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MinMaxPriorityQueue$MoveDesc", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MinMaxPriorityQueue$QueueIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$ArrayListSupplier", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$EnumSetSupplier", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$HashSetSupplier", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$LinkedListSupplier", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$ListMultimapBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$SetMultimapBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$TreeSetSupplier", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimap_CustomFieldSerializerBase", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$AsMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$AsMap$EntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$AsMap$EntrySet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$CustomListMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$CustomMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$CustomSetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$CustomSortedSetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$Entries", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$Keys", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$Keys$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$Keys$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$Keys$KeysEntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$MapMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$MapMultimap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$MapMultimap$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$TransformedEntriesListMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$TransformedEntriesMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$TransformedEntriesMultimap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$UnmodifiableListMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$UnmodifiableMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$UnmodifiableMultimap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$UnmodifiableSetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multiset_CustomFieldSerializerBase", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$2$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$3$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$4$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$AbstractEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$ElementSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$ElementSet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$EntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$FilteredMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$FilteredMultiset$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$ImmutableEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$MultisetIteratorImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$UnmodifiableMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MutableClassToInstanceMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MutableClassToInstanceMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.NaturalOrdering", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.NaturalOrdering_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.NullsFirstOrdering", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.NullsFirstOrdering_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.NullsLastOrdering", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.NullsLastOrdering_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Typo in the javadoc of Ordering's explicit(List<T>) method"], "name": "com.google.common.collect.Ordering", "version": "v19.0", "bodys": ["The [snapshot Javadoc of Ordering#explicit(java.util.List)](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/Ordering.html#explicit%28java.util.List%29)  contains the sentnece:\n\n> The returned comparator throws **an ClassCastException** when it receives an input parameter that isn't among the provided values.\n\ninstead of\n\n> The returned comparator throws **a ClassCastException** when it receives an input parameter that isn't among the provided values.\n"], "labels": [[2]], "ids": ["2525"], "change": 0, "size": 1}, {"titles": ["Typo in the javadoc of Ordering's explicit(List<T>) method"], "name": "com.google.common.collect.Ordering$ArbitraryOrdering", "version": "v19.0", "bodys": ["The [snapshot Javadoc of Ordering#explicit(java.util.List)](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/Ordering.html#explicit%28java.util.List%29)  contains the sentnece:\n\n> The returned comparator throws **an ClassCastException** when it receives an input parameter that isn't among the provided values.\n\ninstead of\n\n> The returned comparator throws **a ClassCastException** when it receives an input parameter that isn't among the provided values.\n"], "labels": [[2]], "ids": ["2525"], "change": 0, "size": 1}, {"titles": ["Typo in the javadoc of Ordering's explicit(List<T>) method"], "name": "com.google.common.collect.Ordering$ArbitraryOrdering$1", "version": "v19.0", "bodys": ["The [snapshot Javadoc of Ordering#explicit(java.util.List)](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/Ordering.html#explicit%28java.util.List%29)  contains the sentnece:\n\n> The returned comparator throws **an ClassCastException** when it receives an input parameter that isn't among the provided values.\n\ninstead of\n\n> The returned comparator throws **a ClassCastException** when it receives an input parameter that isn't among the provided values.\n"], "labels": [[2]], "ids": ["2525"], "change": 5, "size": 1}, {"titles": ["Typo in the javadoc of Ordering's explicit(List<T>) method"], "name": "com.google.common.collect.Ordering$ArbitraryOrderingHolder", "version": "v19.0", "bodys": ["The [snapshot Javadoc of Ordering#explicit(java.util.List)](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/Ordering.html#explicit%28java.util.List%29)  contains the sentnece:\n\n> The returned comparator throws **an ClassCastException** when it receives an input parameter that isn't among the provided values.\n\ninstead of\n\n> The returned comparator throws **a ClassCastException** when it receives an input parameter that isn't among the provided values.\n"], "labels": [[2]], "ids": ["2525"], "change": 0, "size": 1}, {"titles": ["Typo in the javadoc of Ordering's explicit(List<T>) method"], "name": "com.google.common.collect.Ordering$IncomparableValueException", "version": "v19.0", "bodys": ["The [snapshot Javadoc of Ordering#explicit(java.util.List)](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/Ordering.html#explicit%28java.util.List%29)  contains the sentnece:\n\n> The returned comparator throws **an ClassCastException** when it receives an input parameter that isn't among the provided values.\n\ninstead of\n\n> The returned comparator throws **a ClassCastException** when it receives an input parameter that isn't among the provided values.\n"], "labels": [[2]], "ids": ["2525"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.PeekingIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Platform", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Consider replacing unicode character in Range.toString()", "Consider replacing unicode character in Range.toString()", "Consider replacing unicode character in Range.toString()", "Consider replacing unicode character in Range.toString()"], "name": "com.google.common.collect.Range", "version": "v19.0", "bodys": ["`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n", "`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n", "`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n", "`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n"], "labels": [[1], [1], [1], [1]], "ids": ["2376", "2376", "2376", "2376"], "change": 0, "size": 1}, {"titles": ["Consider replacing unicode character in Range.toString()", "Consider replacing unicode character in Range.toString()", "Consider replacing unicode character in Range.toString()", "Consider replacing unicode character in Range.toString()"], "name": "com.google.common.collect.Range$1", "version": "v19.0", "bodys": ["`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n", "`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n", "`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n", "`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n"], "labels": [[1], [1], [1], [1]], "ids": ["2376", "2376", "2376", "2376"], "change": 0, "size": 1}, {"titles": ["Consider replacing unicode character in Range.toString()", "Consider replacing unicode character in Range.toString()", "Consider replacing unicode character in Range.toString()", "Consider replacing unicode character in Range.toString()"], "name": "com.google.common.collect.Range$2", "version": "v19.0", "bodys": ["`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n", "`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n", "`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n", "`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n"], "labels": [[1], [1], [1], [1]], "ids": ["2376", "2376", "2376", "2376"], "change": 0, "size": 1}, {"titles": ["Consider replacing unicode character in Range.toString()", "Consider replacing unicode character in Range.toString()", "Consider replacing unicode character in Range.toString()", "Consider replacing unicode character in Range.toString()"], "name": "com.google.common.collect.Range$3", "version": "v19.0", "bodys": ["`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n", "`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n", "`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n", "`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n"], "labels": [[1], [1], [1], [1]], "ids": ["2376", "2376", "2376", "2376"], "change": 0, "size": 1}, {"titles": ["Consider replacing unicode character in Range.toString()", "Consider replacing unicode character in Range.toString()", "Consider replacing unicode character in Range.toString()", "Consider replacing unicode character in Range.toString()"], "name": "com.google.common.collect.Range$RangeLexOrdering", "version": "v19.0", "bodys": ["`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n", "`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n", "`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n", "`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n"], "labels": [[1], [1], [1], [1]], "ids": ["2376", "2376", "2376", "2376"], "change": 4, "size": 1}, {"titles": ["Consider replacing unicode character in Range.toString()"], "name": "com.google.common.collect.RangeMap", "version": "v19.0", "bodys": ["`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n"], "labels": [[1]], "ids": ["2376"], "change": 0, "size": 1}, {"titles": ["Consider replacing unicode character in Range.toString()"], "name": "com.google.common.collect.RangeSet", "version": "v19.0", "bodys": ["`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\n\nConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\n"], "labels": [[1]], "ids": ["2376"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularContiguousSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularContiguousSet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularContiguousSet$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularContiguousSet$SerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableAsList_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap$Inverse", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableList_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMap_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMultiset$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMultiset$ElementSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMultiset$NonTerminalEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSet_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSortedMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSortedSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSortedSet_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableTable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableTable$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableTable$CellSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableTable$Values", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ReverseNaturalOrdering", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ReverseNaturalOrdering_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ReverseOrdering", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ReverseOrdering_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RowSortedTable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Serialization", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Serialization$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Serialization$FieldSetter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$4$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$CartesianSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$CartesianSet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$DescendingSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$FilteredNavigableSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$FilteredSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$FilteredSortedSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$ImprovedAbstractSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$PowerSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$PowerSet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$SetView", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$SubSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$SubSet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$UnmodifiableNavigableSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableBiMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableBiMap_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableList_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableSet_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableTable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableTable_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedIterable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedIterables", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyAbsentBehavior", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyAbsentBehavior$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyAbsentBehavior$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyAbsentBehavior$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyPresentBehavior", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyPresentBehavior$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyPresentBehavior$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyPresentBehavior$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyPresentBehavior$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyPresentBehavior$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedMapDifference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedMultisetBridge", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedMultisets", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedMultisets$ElementSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedMultisets$NavigableElementSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedSetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SparseImmutableTable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SparseImmutableTable_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardRowSortedTable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardRowSortedTable$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardRowSortedTable$RowSortedMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$CellIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Column", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Column$EntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Column$EntrySetIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Column$EntrySetIterator$1EntryImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Column$KeySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Column$Values", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$ColumnKeyIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$ColumnKeySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$ColumnMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Row", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Row$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Row$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$RowMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$RowMap$EntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$RowMap$EntrySet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$TableSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedAsMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedAsMapEntries", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedAsMapValues", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedAsMapValues$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedBiMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedCollection", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedDeque", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedListMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedNavigableMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedNavigableSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedObject", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedQueue", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedRandomAccessList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedSetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedSortedMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedSortedSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Table", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Table$Cell", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Table_CustomFieldSerializerBase", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$AbstractCell", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$ImmutableCell", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$TransformedTable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$TransformedTable$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$TransformedTable$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$TransformedTable$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$TransposeTable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$TransposeTable$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$UnmodifiableRowSortedMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$UnmodifiableTable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TransformedIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TransformedListIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeBasedTable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeBasedTable$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeBasedTable$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeBasedTable$Factory", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeBasedTable$TreeRow", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeBasedTable_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultimap_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$Aggregate", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$Aggregate$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$Aggregate$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$AvlNode", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$Reference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$AsMapOfRanges", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$RangeMapEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$AsRanges", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$Complement", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$RangesByUpperBound", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$RangesByUpperBound$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$RangesByUpperBound$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$SubRangeSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$BreadthFirstIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$PostOrderIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$PostOrderNode", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$PreOrderIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.UnmodifiableIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.UnmodifiableListIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.UnmodifiableSortedMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.UsingToStringOrdering", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.UsingToStringOrdering_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.WellBehavedMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.WellBehavedMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.WellBehavedMap$EntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.WellBehavedMap$EntrySet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.WellBehavedMap$EntrySet$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Flushables", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedLong_CustomFieldSerializer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingBlockingQueue", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.gwt.user.client.rpc.SerializationException", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.gwt.user.client.rpc.SerializationStreamReader", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.gwt.user.client.rpc.SerializationStreamWriter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.gwt.user.client.rpc.core.java.util.Collection_CustomFieldSerializerBase", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.gwt.user.client.rpc.core.java.util.Map_CustomFieldSerializerBase", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.j2objc.annotations.Weak", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}]}, {"name": "com.google.common.collect.testing.features.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.collect.testing.features.SetFeature", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.SetFeature$Require", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.collect.testing.google.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.annotations.GwtCompatible", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.BiMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ContiguousSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EnumMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingImmutableCollection", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingImmutableList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingImmutableMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingImmutableSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingListMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtPlatform", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashMultiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableCollection", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableCollection$Builder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMap$Builder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMap$SerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedSet$Builder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ListMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multiset", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multiset$Entry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableAsList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$KnownOrder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AnEnum", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.IteratorFeature", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.IteratorTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MinimalIterable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Chars", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Collider", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Colliders", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Enums", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Ints", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Strings", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Unhashables", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SortedMapInterfaceTest", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestCharacterListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestCollectionGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestCollidingSetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Test suites incorrectly call TestSetGenerator.order"], "name": "com.google.common.collect.testing.TestContainerGenerator", "version": "v19.0", "bodys": ["The [javadoc for TestContainerGenerator.order](https://github.com/google/guava/blob/master/guava-testlib/src/com/google/common/collect/testing/TestContainerGenerator.java#L66) states:\n\n> This method runs only when CollectionFeature#KNOWN_ORDER is specified when creating the test suite. It should never run when testing containers such as HashSet, which have a non-deterministic iteration order.\n\nHowever, 74 tests (out of 450) fail with the code below which (as described by the documentation) expects TestContainerGenerator.order not to be called and throws an UnsupportedOperationException for it:\n\n``` java\npublic final class JavaUtilCollectionsTests {\n  public static Test suite() {\n    TestSuite suite = new TestSuite(\"HashSet\");\n    suite.addTest(SetTestSuiteBuilder.<Integer>using(new TestSetGenerator<Integer>() {\n      @Override\n      public SampleElements<Integer> samples() {\n        return new SampleElements<Integer>(-7, 0, Integer.MIN_VALUE, 42, Integer.MAX_VALUE);\n      }\n\n      @Override\n      public Integer[] createArray(int length) {\n        return new Integer[length];\n      }\n\n      @Override\n      public Iterable<Integer> order(List<Integer> insertionOrder) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public Set<Integer> create(Object... elements) {\n        List<Integer> values =\n            Arrays.stream(elements).map(o -> (Integer) o).collect(Collectors.toList());\n        return new HashSet<>(values);\n      }\n    }).named(\"HashSet\")\n        .withFeatures(CollectionSize.ANY, CollectionFeature.GENERAL_PURPOSE,\n            CollectionFeature.ALLOWS_NULL_VALUES, CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS)\n        .createTestSuite());\n    return suite;\n  }\n}\n```\n\nThe expected result would be for all the tests to pass.\n"], "labels": [[1]], "ids": ["2349"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestEnumMapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestMapEntrySetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestMapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringCollectionGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringSortedSetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestSubjectGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestUnhashableCollectionGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.UnhashableObject", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.CollectionSize", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.CollectionSize$Require", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.MapFeature", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.MapFeature$Require", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.TesterAnnotation", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.AbstractBiMapTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.AbstractListMultimapTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.AbstractMultimapTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.AbstractMultisetSetCountTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.AbstractMultisetTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapClearTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapGenerators", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapGenerators$ImmutableBiMapCopyOfEntriesGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapGenerators$ImmutableBiMapCopyOfGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapGenerators$ImmutableBiMapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapInverseTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapInverseTester$BiMapPair", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapPutTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapRemoveTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapTestSuiteBuilder$NoRecurse", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators$BiMapValueSetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators$InverseBiMapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators$MapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.GoogleHelpers", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$BuilderAddAllListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$BuilderAddListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$BuilderReversedListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$CharactersOfCharSequenceGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$CharactersOfStringGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$ImmutableListHeadSubListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$ImmutableListMiddleSubListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$ImmutableListOfGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$ImmutableListTailSubListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$TestUnhashableListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$UnhashableElementsImmutableListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapAsMapTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapEqualsTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapPutAllTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapPutTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapRemoveTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapReplaceValuesTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapTestSuiteBuilder$MultimapAsMapGetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapTestSuiteBuilder$MultimapGetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableEnumMapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfEntriesGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfEnumMapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfEnumMapGenerator$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapEntryListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapKeyListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapUnhashableValuesGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapValueListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapAsMapGetTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapAsMapTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapClearTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapContainsEntryTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapContainsKeyTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapContainsValueTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapEntriesTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapEqualsTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapFeature", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapFeature$Require", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapGetTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapKeySetTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapKeysTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutAllMultimapTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutIterableTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutIterableTester$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutIterableTester$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutIterableTester$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutIterableTester$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapRemoveAllTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapRemoveEntryTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapReplaceValuesTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapSizeTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$AsMapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$EntriesGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$MultimapAsMapGetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$MultimapGetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$ReserializedMultimapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$ValuesGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Map tests assert on .toString even when CollectionFeature.NON_STANDARD_TOSTRING is specified"], "name": "com.google.common.collect.testing.google.MultimapToStringTester", "version": "v19.0", "bodys": ["See a unit test demonstrating the issue here: https://github.com/gpanther/fastutil-guava-tests/blob/master/src/test/java/net/greypanther/guava/tests/tests/CustomToStringTest.java\n\nIt shows a HashMap subclass which overrides toString and as a result fails tests, even if CollectionFeature.NON_STANDARD_TOSTRING passed to MapTestSuiteBuilder.\n\nI believe that methods like https://github.com/google/guava/blob/2cd4d629a2b6f1a462643b248e0972f44c5133b7/guava-testlib/src/com/google/common/collect/testing/testers/MapToStringTester.java#L45 should be marked with `@CollectionFeature.Require(absent = NON_STANDARD_TOSTRING)`.\n"], "labels": [[1]], "ids": ["2418"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapValuesTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetAddTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetContainsTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetCountTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetElementSetTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetEntrySetTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetEqualsTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetFeature", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetFeature$Require", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetIteratorTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetIteratorTester$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetIteratorTester$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetIteratorTester$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetIteratorTester$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetNavigationTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetNavigationTester$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetReadsTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetRemoveTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetSerializationTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetSetCountConditionallyTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetSetCountUnconditionallyTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetTestSuiteBuilder$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetTestSuiteBuilder$ElementSetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetTestSuiteBuilder$NoRecurse", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetTestSuiteBuilder$ReserializedMultisetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$AbstractContiguousSetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ContiguousSetDescendingGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ContiguousSetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ContiguousSetHeadsetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ContiguousSetSubsetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ContiguousSetTailsetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$DegeneratedImmutableSetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSetAsListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSetCopyOfGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSetWithBadHashesGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetAsListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetAsListSubListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetCopyOfGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetDescendingAsListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetDescendingGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetExplicitComparator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetExplicitSuperclassComparatorGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetHeadsetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetReversedOrderGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetSubsetAsListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetSubsetAsListSubListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetSubsetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetTailsetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetUnhashableGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$TestUnhashableSetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapAsMapTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapEqualsTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapPutAllTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapPutTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapReplaceValuesTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder$EntriesGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder$MultimapAsMapGetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder$MultimapGetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapCopyOfEntriesGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapEntryListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapEntryListGenerator$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapKeyListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapValueListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$Bound", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$ForwardingTestMultisetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$NoRecurse", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedSetMultimapAsMapTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedSetMultimapGetTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedSetMultimapTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestBiMapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestEnumMultisetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestListMultimapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestMultimapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestMultisetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestSetMultimapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestStringBiMapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestStringListMultimapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestStringMultisetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestStringSetMultimapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.UnmodifiableCollectionTests", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.UnmodifiableCollectionTests$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SetCreationTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Add a constant for X-Forwarded-Host and X-Forwarded-Port to HttpHeaders"], "name": "com.google.common.net.HttpHeaders", "version": "v19.0", "bodys": ["As they are [common headers](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Common_non-standard_request_fields) (at least the `X-Forwarded-Host`) it would be nice if they are defined in the class `HttpHeaders`. The `X-Forwared-Port` is used for example in [AWS](http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/x-forwarded-headers.html).\n"], "labels": [[5]], "ids": ["2430"], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.testing.SloppyTearDown", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.testing.TestLogHandler", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "junit.framework.TestSuite", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.collect.testing.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.collect.testing.AbstractCollectionTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractCollectionTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractContainerTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractContainerTester$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractContainerTester$ArrayWithDuplicate", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$10", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$11", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$12", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$13", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$14", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$6", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$7", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$8", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$9", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$Stimulus", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$UnknownElementException", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractMapTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.BaseComparable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.CollectionTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.CollectionTestSuiteBuilder$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.CollectionTestSuiteBuilder$ReserializedCollectionGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ConcurrentMapTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ConcurrentNavigableMapTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$Bound", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$ForwardingTestMapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$MapEntrySetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$MapKeySetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$MapSortedKeySetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$SortedMapSubmapTestMapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$SortedSetSubsetTestSetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedComparable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedIteratorTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedTestIteratorGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ExampleIteratorTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$6", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$GwtTransient", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$NullsBefore", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$NullsBeforeB", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$NullsBeforeTwo", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.IteratorTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ListTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ListTestSuiteBuilder$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ListTestSuiteBuilder$ReserializedListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MapInterfaceTest", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MapInterfaceTest$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MapInterfaceTest$IncompatibleKeyType", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MapTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MapTestSuiteBuilder$ReserializedMapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MinimalCollection", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MinimalSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.NavigableMapTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.NavigableMapTestSuiteBuilder$DescendingTestMapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.NavigableMapTestSuiteBuilder$NavigableMapSubmapTestMapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.NavigableSetTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.NavigableSetTestSuiteBuilder$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.NavigableSetTestSuiteBuilder$NavigableSetSubsetTestSetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.OneSizeGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.OneSizeTestContainerGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.PerCollectionSizeTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.PerCollectionSizeTestSuiteBuilder$OneSizeTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Platform", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.QueueTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ReserializingTestCollectionGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ReserializingTestSetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SafeTreeMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SafeTreeMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SafeTreeMap$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SafeTreeSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SafeTreeSet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SetTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SetTestSuiteBuilder$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SetTestSuiteBuilder$ReserializedSetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SortedMapTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SortedMapTestSuiteBuilder$NoRecurse", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SortedSetTestSuiteBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestEnumSetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestIntegerSetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestIntegerSortedSetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestIteratorGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestQueueGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestSetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestSortedMapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestSortedSetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringListGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringMapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringQueueGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringSetGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringSortedMapGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$10", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$10$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$6", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$7", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$8", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$9", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$9$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$10", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$6", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$7", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$8", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$9", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$NullFriendlyComparator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil$6", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$10", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$11", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$11$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$12", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$13", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$14", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$6", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$7", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$8", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$9", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$NullFriendlyComparator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.WrongType", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.CollectionFeature", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.CollectionFeature$Require", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.ConflictingRequirementsException", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.Feature", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.FeatureUtil", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.ListFeature", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.ListFeature$Require", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.TesterRequirements", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.AbstractListIndexOfTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.AbstractListTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.AbstractQueueTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.AbstractSetTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionAddAllTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionAddTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionClearTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionContainsAllTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionContainsTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionCreationTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionEqualsTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionIsEmptyTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionRemoveAllTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionRemoveTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionSerializationEqualTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionSerializationTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionSizeTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionToArrayTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionToStringTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ConcurrentMapPutIfAbsentTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ConcurrentMapRemoveTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ConcurrentMapReplaceEntryTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ConcurrentMapReplaceTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListAddAllAtIndexTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListAddAllTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListAddAtIndexTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListAddTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListCreationTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListEqualsTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListGetTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListHashCodeTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListIndexOfTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListLastIndexOfTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListRemoveAllTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListRemoveAtIndexTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListRemoveTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListRetainAllTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListSetTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListSubListTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListToArrayTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapClearTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapContainsKeyTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapContainsValueTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapCreationTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapEqualsTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapGetTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapHashCodeTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapIsEmptyTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapPutAllTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapPutTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapRemoveTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapSerializationTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapSizeTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Map tests assert on .toString even when CollectionFeature.NON_STANDARD_TOSTRING is specified"], "name": "com.google.common.collect.testing.testers.MapToStringTester", "version": "v19.0", "bodys": ["See a unit test demonstrating the issue here: https://github.com/gpanther/fastutil-guava-tests/blob/master/src/test/java/net/greypanther/guava/tests/tests/CustomToStringTest.java\n\nIt shows a HashMap subclass which overrides toString and as a result fails tests, even if CollectionFeature.NON_STANDARD_TOSTRING passed to MapTestSuiteBuilder.\n\nI believe that methods like https://github.com/google/guava/blob/2cd4d629a2b6f1a462643b248e0972f44c5133b7/guava-testlib/src/com/google/common/collect/testing/testers/MapToStringTester.java#L45 should be marked with `@CollectionFeature.Require(absent = NON_STANDARD_TOSTRING)`.\n"], "labels": [[1]], "ids": ["2418"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.NavigableMapNavigationTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.NavigableSetNavigationTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.Platform", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.QueueElementTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.QueueOfferTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.QueuePeekTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.QueuePollTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.QueueRemoveTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SetAddAllTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SetAddTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SetEqualsTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SetHashCodeTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SetRemoveTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SortedSetNavigationTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.MockFutureListener", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "junit.framework.Assert", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "junit.framework.Test", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "junit.framework.TestCase", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.collect.testing.testers.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.collect.testing.ListIteratorTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionIteratorTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionIteratorTester$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionRetainAllTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionRetainAllTester$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionRetainAllTester$Target", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListListIteratorTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListListIteratorTester$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapEntrySetTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapEntrySetTester$IncomparableType", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SortedMapNavigationTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SortedMapNavigationTester$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.escape.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.escape.ArrayBasedCharEscaper", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.ArrayBasedEscaperMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.CharEscaper", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.CharEscaperBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.CharEscaperBuilder$CharArrayDecorator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escaper", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escaper$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escapers", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escapers$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escapers$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escapers$Builder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escapers$Builder$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Platform", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Platform$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.UnicodeEscaper", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.testing.EscaperAsserts", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.html.HtmlEscapers", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.xml.XmlEscapers", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.eventbus.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.eventbus.AllowConcurrentEvents", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.AsyncEventBus", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.DeadEvent", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Dispatcher", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Dispatcher$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Dispatcher$ImmediateDispatcher", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher$EventWithSubscriber", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$Event", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.EventBus", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.EventBus$LoggingHandler", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Subscribe", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Subscriber", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Subscriber$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Subscriber$SynchronizedSubscriber", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.SubscriberExceptionContext", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.SubscriberExceptionHandler", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.SubscriberRegistry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.SubscriberRegistry$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.SubscriberRegistry$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.SubscriberRegistry$MethodIdentifier", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$ClassSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}]}, {"name": "com.google.common.hash.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.hash.AbstractByteHasher", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractCompositeHashFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractCompositeHashFunction$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractHasher", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractNonStreamingHashFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractStreamingHashFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilter$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilter$SerialForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilter$Strategy", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilterStrategies", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilterStrategies$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilterStrategies$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilterStrategies$BitArray", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.ChecksumHashFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.ChecksumHashFunction$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.ChecksumHashFunction$ChecksumHasher", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Crc32cHashFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Crc32cHashFunction$Crc32cHasher", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnel", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$ByteArrayFunnel", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$IntegerFunnel", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$LongFunnel", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$SequentialFunnel", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$SinkAsStream", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$StringCharsetFunnel", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$UnencodedCharsFunnel", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashCode", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashCode$BytesHashCode", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashCode$IntHashCode", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashCode$LongHashCode", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hasher", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Adler32Holder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$ChecksumType", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$ChecksumType$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$ChecksumType$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$ConcatenatedHashFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Crc32Holder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Crc32cHolder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$LinearCongruentialGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Md5Holder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Murmur3_128Holder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Murmur3_32Holder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Sha1Holder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Sha256Holder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Sha384Holder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Sha512Holder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$SipHash24Holder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.MessageDigestHashFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.MessageDigestHashFunction$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.MessageDigestHashFunction$SerializedForm", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Murmur3_128HashFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Murmur3_32HashFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.PrimitiveSink", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.SipHashFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.SipHashFunction$SipHasher", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.io.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.io.AppendableWriter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Use String.getBytes(Charset) and other Charset utilities once GWT supports them"], "name": "com.google.common.io.BaseEncoding", "version": "v19.0", "bodys": ["The next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\n\nThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\n"], "labels": [[0]], "ids": ["2124"], "change": 0, "size": 1}, {"titles": ["Use String.getBytes(Charset) and other Charset utilities once GWT supports them"], "name": "com.google.common.io.BaseEncoding$1", "version": "v19.0", "bodys": ["The next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\n\nThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\n"], "labels": [[0]], "ids": ["2124"], "change": 0, "size": 1}, {"titles": ["Use String.getBytes(Charset) and other Charset utilities once GWT supports them"], "name": "com.google.common.io.BaseEncoding$2", "version": "v19.0", "bodys": ["The next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\n\nThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\n"], "labels": [[0]], "ids": ["2124"], "change": 0, "size": 1}, {"titles": ["Use String.getBytes(Charset) and other Charset utilities once GWT supports them"], "name": "com.google.common.io.BaseEncoding$3", "version": "v19.0", "bodys": ["The next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\n\nThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\n"], "labels": [[0]], "ids": ["2124"], "change": 0, "size": 1}, {"titles": ["Use String.getBytes(Charset) and other Charset utilities once GWT supports them"], "name": "com.google.common.io.BaseEncoding$4", "version": "v19.0", "bodys": ["The next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\n\nThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\n"], "labels": [[0]], "ids": ["2124"], "change": 0, "size": 1}, {"titles": ["Use String.getBytes(Charset) and other Charset utilities once GWT supports them"], "name": "com.google.common.io.BaseEncoding$5", "version": "v19.0", "bodys": ["The next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\n\nThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\n"], "labels": [[0]], "ids": ["2124"], "change": 4, "size": 1}, {"titles": ["Use String.getBytes(Charset) and other Charset utilities once GWT supports them"], "name": "com.google.common.io.BaseEncoding$Alphabet", "version": "v19.0", "bodys": ["The next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\n\nThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\n"], "labels": [[0]], "ids": ["2124"], "change": 0, "size": 1}, {"titles": ["Use String.getBytes(Charset) and other Charset utilities once GWT supports them"], "name": "com.google.common.io.BaseEncoding$Base16Encoding", "version": "v19.0", "bodys": ["The next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\n\nThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\n"], "labels": [[0]], "ids": ["2124"], "change": 4, "size": 1}, {"titles": ["Use String.getBytes(Charset) and other Charset utilities once GWT supports them"], "name": "com.google.common.io.BaseEncoding$Base64Encoding", "version": "v19.0", "bodys": ["The next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\n\nThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\n"], "labels": [[0]], "ids": ["2124"], "change": 4, "size": 1}, {"titles": ["Use String.getBytes(Charset) and other Charset utilities once GWT supports them"], "name": "com.google.common.io.BaseEncoding$DecodingException", "version": "v19.0", "bodys": ["The next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\n\nThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\n"], "labels": [[0]], "ids": ["2124"], "change": 0, "size": 1}, {"titles": ["Use String.getBytes(Charset) and other Charset utilities once GWT supports them"], "name": "com.google.common.io.BaseEncoding$SeparatedBaseEncoding", "version": "v19.0", "bodys": ["The next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\n\nThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\n"], "labels": [[0]], "ids": ["2124"], "change": 0, "size": 1}, {"titles": ["Use String.getBytes(Charset) and other Charset utilities once GWT supports them"], "name": "com.google.common.io.BaseEncoding$StandardBaseEncoding", "version": "v19.0", "bodys": ["The next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\n\nThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\n"], "labels": [[0]], "ids": ["2124"], "change": 0, "size": 1}, {"titles": ["Use String.getBytes(Charset) and other Charset utilities once GWT supports them"], "name": "com.google.common.io.BaseEncoding$StandardBaseEncoding$1", "version": "v19.0", "bodys": ["The next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\n\nThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\n"], "labels": [[0]], "ids": ["2124"], "change": 0, "size": 1}, {"titles": ["Use String.getBytes(Charset) and other Charset utilities once GWT supports them"], "name": "com.google.common.io.BaseEncoding$StandardBaseEncoding$2", "version": "v19.0", "bodys": ["The next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\n\nThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\n"], "labels": [[0]], "ids": ["2124"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteArrayDataInput", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteArrayDataOutput", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteProcessor", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteSink", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteSink$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteSink$AsCharSink", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteSource", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteSource$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteSource$AsCharSource", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteSource$ByteArrayByteSource", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteSource$ConcatenatedByteSource", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteSource$EmptyByteSource", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteSource$SlicedByteSource", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteStreams", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteStreams$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteStreams$ByteArrayDataInputStream", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteStreams$ByteArrayDataOutputStream", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteStreams$FastByteArrayOutputStream", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteStreams$LimitedInputStream", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharSequenceReader", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharSink", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharSource", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharSource$CharSequenceCharSource", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharSource$CharSequenceCharSource$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharSource$CharSequenceCharSource$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharSource$ConcatenatedCharSource", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharSource$EmptyCharSource", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharStreams", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharStreams$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.io.CharStreams$NullWriter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Closeables", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Closer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Closer$LoggingSuppressor", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Closer$SuppressingSuppressor", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Closer$Suppressor", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.FileBackedOutputStream", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.FileBackedOutputStream$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.FileBackedOutputStream$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.FileBackedOutputStream$MemoryOutput", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.FileWriteMode", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$FileByteSink", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$FileByteSource", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$FilePredicate", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$FilePredicate$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$FilePredicate$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.LineBuffer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.LineProcessor", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.LineReader", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.LineReader$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.MultiInputStream", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.MultiReader", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Resources", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Resources$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Resources$UrlByteSource", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.math.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.math.BigIntegerMath", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.BigIntegerMath$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.DoubleMath", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.DoubleMath$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.DoubleUtils", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.IntMath", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.IntMath$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.LongMath", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.LongMath$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.LongMath$MillerRabinTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.math.LongMath$MillerRabinTester$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.math.LongMath$MillerRabinTester$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.math.MathPreconditions", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.net.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.base.Strings", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.HostAndPort", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.HostSpecifier", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.InetAddresses", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.InetAddresses$TeredoInfo", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.InternetDomainName", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Add video MediaTypes"], "name": "com.google.common.net.MediaType", "version": "v19.0", "bodys": ["Missed several video MimeTypes in MediaType class:\n\n```\nvideo/x-flv\nvideo/3gpp\nvideo/3gpp2\n```\n\nand some audio types:\n\n```\naudio/basic\naudio/L24\naudio/aac\naudio/vorbis\naudio/x-ms-wma\naudio/x-ms-wax\naudio/vnd.rn-realaudio\naudio/vnd.wave\n```\n"], "labels": [[5]], "ids": ["2132"], "change": 0, "size": 1}, {"titles": ["Add video MediaTypes"], "name": "com.google.common.net.MediaType$1", "version": "v19.0", "bodys": ["Missed several video MimeTypes in MediaType class:\n\n```\nvideo/x-flv\nvideo/3gpp\nvideo/3gpp2\n```\n\nand some audio types:\n\n```\naudio/basic\naudio/L24\naudio/aac\naudio/vorbis\naudio/x-ms-wma\naudio/x-ms-wax\naudio/vnd.rn-realaudio\naudio/vnd.wave\n```\n"], "labels": [[5]], "ids": ["2132"], "change": 0, "size": 1}, {"titles": ["Add video MediaTypes"], "name": "com.google.common.net.MediaType$2", "version": "v19.0", "bodys": ["Missed several video MimeTypes in MediaType class:\n\n```\nvideo/x-flv\nvideo/3gpp\nvideo/3gpp2\n```\n\nand some audio types:\n\n```\naudio/basic\naudio/L24\naudio/aac\naudio/vorbis\naudio/x-ms-wma\naudio/x-ms-wax\naudio/vnd.rn-realaudio\naudio/vnd.wave\n```\n"], "labels": [[5]], "ids": ["2132"], "change": 0, "size": 1}, {"titles": ["Add video MediaTypes"], "name": "com.google.common.net.MediaType$Tokenizer", "version": "v19.0", "bodys": ["Missed several video MimeTypes in MediaType class:\n\n```\nvideo/x-flv\nvideo/3gpp\nvideo/3gpp2\n```\n\nand some audio types:\n\n```\naudio/basic\naudio/L24\naudio/aac\naudio/vorbis\naudio/x-ms-wma\naudio/x-ms-wax\naudio/vnd.rn-realaudio\naudio/vnd.wave\n```\n"], "labels": [[5]], "ids": ["2132"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.PercentEscaper", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.UrlEscapers", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.thirdparty.publicsuffix.PublicSuffixPatterns", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.thirdparty.publicsuffix.PublicSuffixType", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.thirdparty.publicsuffix.TrieParser", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}]}, {"name": "com.google.common.primitives.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.io.LittleEndianDataInputStream", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.LittleEndianDataOutputStream", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Booleans", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Booleans$BooleanArrayAsList", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Booleans$LexicographicalComparator", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Bytes", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Bytes$ByteArrayAsList", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Chars", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Chars$CharArrayAsList", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Chars$LexicographicalComparator", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Doubles", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Doubles$DoubleArrayAsList", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Doubles$DoubleConverter", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Doubles$LexicographicalComparator", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Floats", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Floats$FloatArrayAsList", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Floats$FloatConverter", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Floats$LexicographicalComparator", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Ints", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Ints$IntArrayAsList", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Ints$IntConverter", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Ints$LexicographicalComparator", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Longs", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Longs$LexicographicalComparator", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Longs$LongArrayAsList", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Longs$LongConverter", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.ParseRequest", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Shorts", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Shorts$LexicographicalComparator", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Shorts$ShortArrayAsList", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": ["Line comment on requiring Java 6"], "name": "com.google.common.primitives.Shorts$ShortConverter", "version": "v19.0", "bodys": ["Please see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\n\nIsn't Java 6 available?\nIf it is, should that comment be removed?\nShould the method be removed? (It is private and only used in a single place).\n"], "labels": [[6]], "ids": ["1942"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.SignedBytes", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.SignedBytes$LexicographicalComparator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedBytes", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedInts", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedInts$LexicographicalComparator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedLongs", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedLongs$LexicographicalComparator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.reflect.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.collect.ForwardingMapEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSet$Builder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Add ClassPath.ResourceInfo.asByteSource()", "Add ClassPath.ResourceInfo.asByteSource()"], "name": "com.google.common.reflect.ClassPath", "version": "v19.0", "bodys": ["If I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\n\nA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\n", "If I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\n\nA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\n"], "labels": [[5], [5]], "ids": ["2228", "2228"], "change": 0, "size": 1}, {"titles": ["Add ClassPath.ResourceInfo.asByteSource()", "Add ClassPath.ResourceInfo.asByteSource()"], "name": "com.google.common.reflect.ClassPath$1", "version": "v19.0", "bodys": ["If I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\n\nA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\n", "If I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\n\nA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\n"], "labels": [[5], [5]], "ids": ["2228", "2228"], "change": 0, "size": 1}, {"titles": ["Add ClassPath.ResourceInfo.asByteSource()", "Add ClassPath.ResourceInfo.asByteSource()"], "name": "com.google.common.reflect.ClassPath$ClassInfo", "version": "v19.0", "bodys": ["If I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\n\nA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\n", "If I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\n\nA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\n"], "labels": [[5], [5]], "ids": ["2228", "2228"], "change": 0, "size": 1}, {"titles": ["Add ClassPath.ResourceInfo.asByteSource()", "Add ClassPath.ResourceInfo.asByteSource()"], "name": "com.google.common.reflect.ClassPath$DefaultScanner", "version": "v19.0", "bodys": ["If I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\n\nA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\n", "If I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\n\nA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\n"], "labels": [[5], [5]], "ids": ["2228", "2228"], "change": 4, "size": 1}, {"titles": ["Add ClassPath.ResourceInfo.asByteSource()", "Add ClassPath.ResourceInfo.asByteSource()"], "name": "com.google.common.reflect.ClassPath$ResourceInfo", "version": "v19.0", "bodys": ["If I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\n\nA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\n", "If I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\n\nA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\n"], "labels": [[5], [5]], "ids": ["2228", "2228"], "change": 0, "size": 1}, {"titles": ["Add ClassPath.ResourceInfo.asByteSource()", "Add ClassPath.ResourceInfo.asByteSource()"], "name": "com.google.common.reflect.ClassPath$Scanner", "version": "v19.0", "bodys": ["If I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\n\nA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\n", "If I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\n\nA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\n"], "labels": [[5], [5]], "ids": ["2228", "2228"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Element", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ImmutableTypeToInstanceMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ImmutableTypeToInstanceMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ImmutableTypeToInstanceMap$Builder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Invokable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Invokable$ConstructorInvokable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Invokable$MethodInvokable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.MutableTypeToInstanceMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.MutableTypeToInstanceMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeCapture", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeParameter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeResolver", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeResolver$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeResolver$TypeMappingIntrospector", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeResolver$TypeTable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeResolver$TypeTable$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeResolver$TypeVariableKey", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeResolver$WildcardCapturer", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToInstanceMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$Bounds", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$InterfaceSet", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$InterfaceSet$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$SimpleTypeToken", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeCollector", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeCollector$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeCollector$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeCollector$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeCollector$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeFilter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeFilter$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeFilter$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeVisitor", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$ClassOwnership", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$ClassOwnership$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$ClassOwnership$1LocalClass", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$ClassOwnership$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$ClassOwnership$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$GenericArrayTypeImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$JavaVersion", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$JavaVersion$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$JavaVersion$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$JavaVersion$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$JavaVersion$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$NativeTypeVariableEquals", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$ParameterizedTypeImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$TypeVariableImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$TypeVariableInvocationHandler", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$WildcardTypeImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.ForceGuavaCompilationEntryPoint", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.gwt.core.client.EntryPoint", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.testing.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.base.Charsets", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Defaults", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayListMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ClassToInstanceMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBasedTable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBasedTable$Factory", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashMultimap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableClassToInstanceMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableClassToInstanceMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableClassToInstanceMap$Builder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableList$Builder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Primitives", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedInteger", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedLong", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.AbstractInvocationHandler", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Parameter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Reflection", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.AbstractPackageSanityTests", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.AbstractPackageSanityTests$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.AbstractPackageSanityTests$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.testing.AbstractPackageSanityTests$Chopper", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.AbstractPackageSanityTests$Chopper$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.AbstractPackageSanityTests$Chopper$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$AlwaysEqual", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$ByToString", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$Dummies", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$Dummies$DeterministicRandom", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$Dummies$DummyCountDownLatch", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$Dummies$DummyExecutor", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$Dummies$DummyRunnable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$Dummies$DummyScheduledThreadPoolExecutor", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$Dummies$DummyThreadFactory", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$Dummies$InMemoryPrintStream", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$Dummies$InMemoryPrintWriter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$NullByteSink", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$ParameterHasNoDistinctValueException", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$SerializableDummyProxy", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClusterException", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.DummyProxy", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.DummyProxy$DummyHandler", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.EqualsTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.EqualsTester$NotAnInstance", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.EquivalenceTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ForwardingWrapperTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ForwardingWrapperTester$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ForwardingWrapperTester$InteractionTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$Empty", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$FreshInvocationHandler", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$Generates", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.GcFinalization", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.GcFinalization$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.GcFinalization$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.GcFinalization$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.GcFinalization$FinalizationPredicate", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["NullPointerTester should not require @Nullable on the param of an equals() override", "NullPointerTester should not require @Nullable on the param of an equals() override"], "name": "com.google.common.testing.NullPointerTester", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n"], "labels": [[1], [1]], "ids": ["1819", "1819"], "change": 0, "size": 1}, {"titles": ["NullPointerTester should not require @Nullable on the param of an equals() override", "NullPointerTester should not require @Nullable on the param of an equals() override"], "name": "com.google.common.testing.NullPointerTester$1", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n"], "labels": [[1], [1]], "ids": ["1819", "1819"], "change": 0, "size": 1}, {"titles": ["NullPointerTester should not require @Nullable on the param of an equals() override", "NullPointerTester should not require @Nullable on the param of an equals() override"], "name": "com.google.common.testing.NullPointerTester$2", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n"], "labels": [[1], [1]], "ids": ["1819", "1819"], "change": 0, "size": 1}, {"titles": ["NullPointerTester should not require @Nullable on the param of an equals() override", "NullPointerTester should not require @Nullable on the param of an equals() override"], "name": "com.google.common.testing.NullPointerTester$ExceptionTypePolicy", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n"], "labels": [[1], [1]], "ids": ["1819", "1819"], "change": 0, "size": 1}, {"titles": ["NullPointerTester should not require @Nullable on the param of an equals() override", "NullPointerTester should not require @Nullable on the param of an equals() override"], "name": "com.google.common.testing.NullPointerTester$ExceptionTypePolicy$1", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n"], "labels": [[1], [1]], "ids": ["1819", "1819"], "change": 0, "size": 1}, {"titles": ["NullPointerTester should not require @Nullable on the param of an equals() override", "NullPointerTester should not require @Nullable on the param of an equals() override"], "name": "com.google.common.testing.NullPointerTester$ExceptionTypePolicy$2", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n"], "labels": [[1], [1]], "ids": ["1819", "1819"], "change": 0, "size": 1}, {"titles": ["NullPointerTester should not require @Nullable on the param of an equals() override", "NullPointerTester should not require @Nullable on the param of an equals() override"], "name": "com.google.common.testing.NullPointerTester$Signature", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n"], "labels": [[1], [1]], "ids": ["1819", "1819"], "change": 0, "size": 1}, {"titles": ["NullPointerTester should not require @Nullable on the param of an equals() override", "NullPointerTester should not require @Nullable on the param of an equals() override"], "name": "com.google.common.testing.NullPointerTester$Visibility", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n"], "labels": [[1], [1]], "ids": ["1819", "1819"], "change": 0, "size": 1}, {"titles": ["NullPointerTester should not require @Nullable on the param of an equals() override", "NullPointerTester should not require @Nullable on the param of an equals() override"], "name": "com.google.common.testing.NullPointerTester$Visibility$1", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n"], "labels": [[1], [1]], "ids": ["1819", "1819"], "change": 0, "size": 1}, {"titles": ["NullPointerTester should not require @Nullable on the param of an equals() override", "NullPointerTester should not require @Nullable on the param of an equals() override"], "name": "com.google.common.testing.NullPointerTester$Visibility$2", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n"], "labels": [[1], [1]], "ids": ["1819", "1819"], "change": 0, "size": 1}, {"titles": ["NullPointerTester should not require @Nullable on the param of an equals() override", "NullPointerTester should not require @Nullable on the param of an equals() override"], "name": "com.google.common.testing.NullPointerTester$Visibility$3", "version": "v19.0", "bodys": ["_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n", "_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\n\n---\n\nWhen I call the following, the test case fails (see full test case in attachment).\n\n&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\n\nI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\n\nClearly, this indicates that it expects a call to \"equals(Object)\" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \n\nPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\n\nOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\n"], "labels": [[1], [1]], "ids": ["1819", "1819"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.Platform", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.RelationshipTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.RelationshipTester$Item", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.RelationshipTester$ItemReporter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.SerializableTester", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.TearDown", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.TearDownAccepter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.TearDownStack", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "junit.framework.AssertionFailedError", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "org.junit.Test", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.util.concurrent.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.base.Supplier", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingObject", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ObjectArrays", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.Queues", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractCheckedFuture", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractExecutionThreadService", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractExecutionThreadService$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractExecutionThreadService$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractExecutionThreadService$1$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractExecutionThreadService$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?"], "name": "com.google.common.util.concurrent.AbstractFuture", "version": "v19.0", "bodys": ["On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n"], "labels": [[0]], "ids": ["1961"], "change": 0, "size": 1}, {"titles": ["Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?"], "name": "com.google.common.util.concurrent.AbstractFuture$1", "version": "v19.0", "bodys": ["On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n"], "labels": [[0]], "ids": ["1961"], "change": 4, "size": 1}, {"titles": ["Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?"], "name": "com.google.common.util.concurrent.AbstractFuture$AtomicHelper", "version": "v19.0", "bodys": ["On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n"], "labels": [[0]], "ids": ["1961"], "change": 4, "size": 1}, {"titles": ["Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?"], "name": "com.google.common.util.concurrent.AbstractFuture$Cancellation", "version": "v19.0", "bodys": ["On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n"], "labels": [[0]], "ids": ["1961"], "change": 4, "size": 1}, {"titles": ["Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?"], "name": "com.google.common.util.concurrent.AbstractFuture$Failure", "version": "v19.0", "bodys": ["On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n"], "labels": [[0]], "ids": ["1961"], "change": 4, "size": 1}, {"titles": ["Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?"], "name": "com.google.common.util.concurrent.AbstractFuture$Failure$1", "version": "v19.0", "bodys": ["On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n"], "labels": [[0]], "ids": ["1961"], "change": 4, "size": 1}, {"titles": ["Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?"], "name": "com.google.common.util.concurrent.AbstractFuture$Listener", "version": "v19.0", "bodys": ["On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n"], "labels": [[0]], "ids": ["1961"], "change": 4, "size": 1}, {"titles": ["Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?"], "name": "com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper", "version": "v19.0", "bodys": ["On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n"], "labels": [[0]], "ids": ["1961"], "change": 4, "size": 1}, {"titles": ["Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?"], "name": "com.google.common.util.concurrent.AbstractFuture$SetFuture", "version": "v19.0", "bodys": ["On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n"], "labels": [[0]], "ids": ["1961"], "change": 4, "size": 1}, {"titles": ["Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?"], "name": "com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper", "version": "v19.0", "bodys": ["On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n"], "labels": [[0]], "ids": ["1961"], "change": 4, "size": 1}, {"titles": ["Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?"], "name": "com.google.common.util.concurrent.AbstractFuture$TrustedFuture", "version": "v19.0", "bodys": ["On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n"], "labels": [[0]], "ids": ["1961"], "change": 4, "size": 1}, {"titles": ["Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?"], "name": "com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper", "version": "v19.0", "bodys": ["On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n"], "labels": [[0]], "ids": ["1961"], "change": 4, "size": 1}, {"titles": ["Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?"], "name": "com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1", "version": "v19.0", "bodys": ["On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n"], "labels": [[0]], "ids": ["1961"], "change": 4, "size": 1}, {"titles": ["Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?"], "name": "com.google.common.util.concurrent.AbstractFuture$Waiter", "version": "v19.0", "bodys": ["On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n"], "labels": [[0]], "ids": ["1961"], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractIdleService", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractIdleService$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractIdleService$DelegateService", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractIdleService$DelegateService$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractIdleService$DelegateService$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$1ThreadFactoryImpl", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$Scheduler", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$Task", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$6", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$HasReachedRunningGuard", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$IsStartableGuard", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$IsStoppableGuard", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$IsStoppedGuard", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$StateSnapshot", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask"], "name": "com.google.common.util.concurrent.AggregateFuture", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "We already do in `AbstractFuture`.\n"], "labels": [[1], [1]], "ids": ["2463", "2463"], "change": 4, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask"], "name": "com.google.common.util.concurrent.AggregateFuture$RunningState", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "We already do in `AbstractFuture`.\n"], "labels": [[1], [1]], "ids": ["2463", "2463"], "change": 4, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask"], "name": "com.google.common.util.concurrent.AggregateFuture$RunningState$1", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "We already do in `AbstractFuture`.\n"], "labels": [[1], [1]], "ids": ["2463", "2463"], "change": 4, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask"], "name": "com.google.common.util.concurrent.AggregateFutureState", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "We already do in `AbstractFuture`.\n"], "labels": [[1], [1]], "ids": ["2463", "2463"], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AsyncFunction", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AtomicLongMap", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AtomicLongMap$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Callables", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Callables$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Callables$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Callables$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CheckedFuture", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CollectionFuture", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CollectionFuture$CollectionFutureRunningState", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$Policy", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ExecutionError", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ExecutionList", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingCheckedFuture", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingCheckedFuture$SimpleForwardingCheckedFuture", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingExecutorService", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingFuture", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingListeningExecutorService", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FutureCallback", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FutureFallback", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 5, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 0, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$1", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 0, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$2", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 0, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$2$1", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 5, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$3", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 0, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$4", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 0, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$5", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 5, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$6", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 5, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$AbstractCatchingFuture", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 5, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$AbstractChainingFuture", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 5, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$AsyncCatchingFuture", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 5, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$AsyncChainingFuture", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 5, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$CatchingFuture", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 5, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$ChainingFuture", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 5, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$ImmediateCancelledFuture", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 5, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$ImmediateFailedCheckedFuture", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 5, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$ImmediateFailedFuture", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 5, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$ImmediateFuture", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 5, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$ImmediateSuccessfulCheckedFuture", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 5, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$ImmediateSuccessfulFuture", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 5, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$ListFuture", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 5, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$ListFuture$ListFutureRunningState", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 5, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$MappingCheckedFuture", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 0, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 0, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture$1", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 0, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$TimeoutFuture", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 5, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Make immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?", "Release a Guava that supports+requires GWT 2.8.0 upon GWT release", "Better documentation of Futures.catching GWT availability", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever", "Nesting Futures.transform() eats StackOverflowError and causes the Future to hang forever"], "name": "com.google.common.util.concurrent.Futures$TimeoutFuture$Fire", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "On the theory that most things should be a `TrustedFuture` :)\n\nWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\n\nBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters (\"would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding),\" per Luke).\n\nWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\n\nAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\n", "- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\n- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\n- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\n- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\n\nGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\n", "Previously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\n\nFurthermore, even _with_ the reason, I saw multiple people who were confused.\n\nThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n", "Hey!\nI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \n\n``` java\n  static final int REPS = 10000;\n  @Test\n  public void hangs() throws InterruptedException, TimeoutException {\n    SettableFuture<Integer> settableFuture = SettableFuture.create();\n    ListenableFuture<Integer> chained = settableFuture;\n    for (int i = 0; i < REPS; ++i) {\n      chained = Futures.transform(chained, Functions.<Integer>identity());\n    }\n    settableFuture.set(0);\n\n    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\n  }\n```\n\nBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\n\nMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\n"], "labels": [[1], [0], [0], [7], [2], [1], [1]], "ids": ["2463", "1961", "1961", "1999", "2379", "2254", "2254"], "change": 5, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FuturesGetChecked", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FuturesGetChecked$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.GwtFuturesCatchingSpecialization", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": ["Work around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask"], "name": "com.google.common.util.concurrent.InterruptibleTask", "version": "v19.0", "bodys": ["We already do in `AbstractFuture`.\n"], "labels": [[1]], "ids": ["2463"], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.JdkFutureAdapters", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListenableFuture", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListenerCallQueue", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListenerCallQueue$Callback", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListeningExecutorService", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Monitor", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Monitor$Guard", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$Application", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$Application$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$DirectExecutor", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$DirectExecutorService", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Platform", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.RateLimiter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Runnables", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Runnables$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SerializingExecutor", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SerializingExecutor$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SerializingExecutor$QueueWorker", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service$Listener", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service$State", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service$State$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service$State$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service$State$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service$State$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service$State$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service$State$6", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$EmptyServiceManagerWarning", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$Listener", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$NoOpService", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$ServiceListener", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$AwaitHealthGuard", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$StoppedGuard", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SettableFuture", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SimpleTimeLimiter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SimpleTimeLimiter$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SimpleTimeLimiter$1$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SmoothRateLimiter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SmoothRateLimiter$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$CompactStriped", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$LargeLazyStriped", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$PaddedLock", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$PaddedSemaphore", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$PowerOfTwoStriped", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$SmallLazyStriped", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ThreadFactoryBuilder", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ThreadFactoryBuilder$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.TimeLimiter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.TrustedListenableFutureTask", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.UncaughtExceptionHandlers", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.UncaughtExceptionHandlers$Exiter", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.UncheckedExecutionException", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.UncheckedTimeoutException", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Uninterruptibles", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.WrappingExecutorService", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.WrappingExecutorService$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.WrappingScheduledExecutorService", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "istFutureRunningState", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}]}, {"name": "com.google.common.util.concurrent.testing.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.util.concurrent.AbstractListeningExecutorService", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingListenableFuture", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListenableScheduledFuture", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListeningScheduledExecutorService", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractCheckedFutureTest", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractCheckedFutureTest$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractCheckedFutureTest$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractCheckedFutureTest$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest$2", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest$3", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest$4", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest$5", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest$6", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService$ImmediateScheduledFuture", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.TestingExecutors", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.TestingExecutors$1", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService$NeverScheduledFuture", "version": "v19.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "dummy", "change": 0, "children": []}, {"name": "dummy", "change": 0, "children": []}]}, {"clusters": ["com.google.common.base.ss", "com.google.common.cache.ss", "com.google.common.collect.ss", "com.google.common.collect.testing.features.ss", "com.google.common.collect.testing.google.ss", "com.google.common.collect.testing.ss", "com.google.common.collect.testing.testers.ss", "com.google.common.escape.ss", "com.google.common.eventbus.ss", "com.google.common.graph.ss", "com.google.common.hash.ss", "com.google.common.io.ss", "com.google.common.math.ss", "com.google.common.net.ss", "com.google.common.primitives.ss", "com.google.common.reflect.ss", "com.google.common.ss", "com.google.common.testing.ss", "com.google.common.util.concurrent.ss", "com.google.common.util.concurrent.testing.ss", "com.google.thirdparty.publicsuffix.ss"], "package_level": 4, "name": "20.0", "children": [{"name": "com.google.common.base.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.annotations.GwtIncompatible", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.AbstractIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.AbstractIterator$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.AbstractIterator$State", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Ascii", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CaseFormat$StringConverter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$And", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$Any", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$AnyOf", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$Ascii", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$BitSetMatcher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$BreakingWhitespace", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$Digit", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$FastMatcher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$ForPredicate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$InRange", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$Invisible", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$Is", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$IsEither", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$IsNot", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$JavaDigit", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$JavaIsoControl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$JavaLetter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$JavaLetterOrDigit", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$JavaLowerCase", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$JavaUpperCase", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$NamedFastMatcher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$Negated", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$NegatedFastMatcher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$None", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$Or", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$RangesMatcher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$SingleWidth", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CharMatcher$Whitespace", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.CommonMatcher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.base.CommonPattern", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.base.Converter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Converter$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Converter$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Converter$ConverterComposition", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Converter$FunctionBasedConverter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Converter$IdentityConverter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Converter$ReverseConverter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Enums", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Enums$StringConverter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Equivalence", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Equivalence$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Equivalence$Equals", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Equivalence$EquivalentToPredicate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Equivalence$Identity", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Equivalence$Wrapper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.ExtraObjectsMethodsForWeb", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizablePhantomReference", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableReference", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableReferenceQueue", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableReferenceQueue$DecoupledLoader", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableReferenceQueue$DirectLoader", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableReferenceQueue$FinalizerLoader", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableReferenceQueue$SystemLoader", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableSoftReference", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FinalizableWeakReference", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Function", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.FunctionalEquivalence", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$ConstantFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$ForMapWithDefault", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$FunctionComposition", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$FunctionForMapNoDefault", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$IdentityFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$PredicateFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$SupplierFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Functions$ToStringFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.GwtSerializationDependencies", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.GwtSerializationDependencies$OptionalDependencies", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.JdkPattern", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.base.JdkPattern$JdkMatcher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.base.Joiner", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Joiner$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Joiner$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Joiner$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Joiner$MapJoiner", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.MoreObjects", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.MoreObjects$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.MoreObjects$ToStringHelper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.MoreObjects$ToStringHelper$ValueHolder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Objects", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Objects$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Objects$ToStringHelper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Objects$ToStringHelper$ValueHolder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Optional$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Optional$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.PairwiseEquivalence", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.PatternCompiler", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.base.Platform", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Platform$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.base.Platform$JdkPatternCompiler", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$AndPredicate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$CompositionPredicate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$ContainsPatternFromStringPredicate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$ContainsPatternPredicate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$InPredicate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$InstanceOfPredicate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$IsEqualToPredicate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$NotPredicate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$ObjectPredicate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$ObjectPredicate$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$ObjectPredicate$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$ObjectPredicate$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$ObjectPredicate$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$OrPredicate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Predicates$SubtypeOfPredicate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.base.SmallCharMatcher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$2$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$3$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$4$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$MapSplitter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$SplittingIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Splitter$Strategy", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.StandardSystemProperty", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Stopwatch", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Stopwatch$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$ExpiringMemoizingSupplier", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$MemoizingSupplier", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$SupplierComposition", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$SupplierFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$SupplierFunctionImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$SupplierOfInstance", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Suppliers$ThreadSafeSupplier", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Make Throwables.getCausalChain and Throwables.getRootCause cyclic reference safe", "Make Throwables.getCausalChain and Throwables.getRootCause cyclic reference safe", "Make Throwables.getCausalChain and Throwables.getRootCause cyclic reference safe", "Make Throwables.getCausalChain and Throwables.getRootCause cyclic reference safe", "Make Throwables.getCausalChain and Throwables.getRootCause cyclic reference safe"], "name": "com.google.common.base.Throwables", "version": "20.0", "bodys": ["Exception cause can be set by initCause method which can lead to a circular reference:\r\n```java\r\nException cause = new Exception();\r\nException exception = new Exception(cause);\r\ncause.initCause(exception);\r\n```\r\nCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\r\n\r\nIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. ", "Exception cause can be set by initCause method which can lead to a circular reference:\r\n```java\r\nException cause = new Exception();\r\nException exception = new Exception(cause);\r\ncause.initCause(exception);\r\n```\r\nCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\r\n\r\nIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. ", "Exception cause can be set by initCause method which can lead to a circular reference:\r\n```java\r\nException cause = new Exception();\r\nException exception = new Exception(cause);\r\ncause.initCause(exception);\r\n```\r\nCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\r\n\r\nIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. ", "Exception cause can be set by initCause method which can lead to a circular reference:\r\n```java\r\nException cause = new Exception();\r\nException exception = new Exception(cause);\r\ncause.initCause(exception);\r\n```\r\nCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\r\n\r\nIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. ", "Exception cause can be set by initCause method which can lead to a circular reference:\r\n```java\r\nException cause = new Exception();\r\nException exception = new Exception(cause);\r\ncause.initCause(exception);\r\n```\r\nCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\r\n\r\nIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. "], "labels": [[0], [0], [0], [0], [0]], "ids": ["2866", "2866", "2866", "2866", "2866"], "change": 0, "size": 1}, {"titles": ["Make Throwables.getCausalChain and Throwables.getRootCause cyclic reference safe", "Make Throwables.getCausalChain and Throwables.getRootCause cyclic reference safe", "Make Throwables.getCausalChain and Throwables.getRootCause cyclic reference safe", "Make Throwables.getCausalChain and Throwables.getRootCause cyclic reference safe", "Make Throwables.getCausalChain and Throwables.getRootCause cyclic reference safe"], "name": "com.google.common.base.Throwables$1", "version": "20.0", "bodys": ["Exception cause can be set by initCause method which can lead to a circular reference:\r\n```java\r\nException cause = new Exception();\r\nException exception = new Exception(cause);\r\ncause.initCause(exception);\r\n```\r\nCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\r\n\r\nIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. ", "Exception cause can be set by initCause method which can lead to a circular reference:\r\n```java\r\nException cause = new Exception();\r\nException exception = new Exception(cause);\r\ncause.initCause(exception);\r\n```\r\nCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\r\n\r\nIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. ", "Exception cause can be set by initCause method which can lead to a circular reference:\r\n```java\r\nException cause = new Exception();\r\nException exception = new Exception(cause);\r\ncause.initCause(exception);\r\n```\r\nCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\r\n\r\nIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. ", "Exception cause can be set by initCause method which can lead to a circular reference:\r\n```java\r\nException cause = new Exception();\r\nException exception = new Exception(cause);\r\ncause.initCause(exception);\r\n```\r\nCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\r\n\r\nIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. ", "Exception cause can be set by initCause method which can lead to a circular reference:\r\n```java\r\nException cause = new Exception();\r\nException exception = new Exception(cause);\r\ncause.initCause(exception);\r\n```\r\nCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\r\n\r\nIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. "], "labels": [[0], [0], [0], [0], [0]], "ids": ["2866", "2866", "2866", "2866", "2866"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Ticker", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Ticker$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Verify", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.VerifyException", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Flushables", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AtomicDouble", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AtomicDoubleArray", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Atomics", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingBlockingQueue", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}]}, {"name": "com.google.common.cache.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.base.Preconditions", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Utf8", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.AbstractCache", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.AbstractCache$SimpleStatsCounter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.AbstractCache$StatsCounter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.Cache", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilder$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilder$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilder$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilder$NullListener", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilder$OneWeigher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$AccessDurationParser", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$ConcurrencyLevelParser", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$DurationParser", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$InitialCapacityParser", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$IntegerParser", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$KeyStrengthParser", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$LongParser", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$MaximumSizeParser", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$MaximumWeightParser", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$RecordStatsParser", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$RefreshDurationParser", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$ValueParser", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$ValueStrengthParser", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheBuilderSpec$WriteDurationParser", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader$FunctionToCacheLoader", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader$InvalidCacheLoadException", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader$SupplierToCacheLoader", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheLoader$UnsupportedLoadingOperationException", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.CacheStats", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.ForwardingCache", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.ForwardingCache$SimpleForwardingCache", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.ForwardingLoadingCache", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LoadingCache", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$AbstractCacheSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$AbstractReferenceEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$AccessQueue", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$AccessQueue$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$AccessQueue$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryFactory", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryFactory$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryFactory$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryFactory$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryFactory$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryFactory$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryFactory$6", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryFactory$7", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryFactory$8", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntryIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$EntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$HashIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$KeyIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$KeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$LoadingSerializationProxy", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$LoadingValueReference", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$LoadingValueReference$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$LocalLoadingCache", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$LocalManualCache", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$LocalManualCache$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$ManualSerializationProxy", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$NullEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$ReferenceEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$Segment", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$Segment$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$SoftValueReference", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$Strength", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$Strength$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$Strength$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$Strength$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$StrongAccessEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$StrongAccessWriteEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$StrongEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$StrongValueReference", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$StrongWriteEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$ValueIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$ValueReference", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$Values", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WeakAccessEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WeakAccessWriteEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WeakEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WeakValueReference", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WeakWriteEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WeightedSoftValueReference", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WeightedStrongValueReference", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WeightedWeakValueReference", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WriteQueue", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WriteQueue$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WriteQueue$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LocalCache$WriteThroughEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LongAddable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LongAddables", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LongAddables$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LongAddables$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LongAddables$PureJavaLongAddable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.LongAdder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalCause", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalCause$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalCause$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalCause$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalCause$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalCause$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalListener", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalListeners", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalListeners$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalListeners$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.RemovalNotification", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.Striped64", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.Striped64$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.Striped64$Cell", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.Weigher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.ArrayBasedUnicodeEscaper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashingInputStream", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashingOutputStream", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CountingInputStream", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CountingOutputStream", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.PatternFilenameFilter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FakeTicker", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FakeTimeLimiter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListenableFutureTask", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.collect.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.annotations.VisibleForTesting", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Absent", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Absent_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Optional", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.PairwiseEquivalence_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Present", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Present_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.cache.AbstractLoadingCache", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$BiMapEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$EntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$Inverse", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$KeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractBiMap$ValueSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractIndexedListIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractIterator$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractIterator$State", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractListMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$AsMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$Itr", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$KeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$KeySet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultiset$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultiset$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMapEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultimap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultimap$Entries", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultimap$EntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultimap$Values", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultiset$ElementSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractMultiset$EntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractNavigableMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractNavigableMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractNavigableMap$DescendingMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractRangeSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractSequentialIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractSetMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractSortedKeySortedSetMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractSortedMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractSortedMultiset$1DescendingMultisetImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractSortedSetMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractTable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractTable$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractTable$CellSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AbstractTable$Values", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AllEqualOrdering", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.AllEqualOrdering_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayListMultimap_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$ArrayMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$ArrayMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$ArrayMap$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$Column", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$ColumnMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$Row", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayTable$RowMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser$InOrderIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser$PostOrderIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BinaryTreeTraverser$PreOrderIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BoundType", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BoundType$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BoundType$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ByFunctionOrdering", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ByFunctionOrdering_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.CartesianList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.CartesianList$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.CollectPreconditions", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$FilteredCollection", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$OrderedPermutationCollection", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$OrderedPermutationIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$PermutationCollection", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$PermutationIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Collections2$TransformedCollection", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComparatorOrdering", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComparatorOrdering_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComparisonChain", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComparisonChain$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComparisonChain$InactiveComparisonChain", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.CompoundOrdering", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.CompoundOrdering_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConcurrentHashMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConcurrentHashMultiset$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConcurrentHashMultiset$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConcurrentHashMultiset$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConcurrentHashMultiset$EntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConcurrentHashMultiset$FieldSettersHolder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraint", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints$ConstrainedCollection", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints$ConstrainedList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints$ConstrainedListIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints$ConstrainedRandomAccessList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints$ConstrainedSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Constraints$ConstrainedSortedSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ConsumingQueueIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Count", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Cut", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Cut$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Cut$AboveAll", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Cut$AboveValue", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Cut$BelowAll", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Cut$BelowValue", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$Column", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$ColumnMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$Row", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable$RowMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DenseImmutableTable_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DescendingImmutableSortedMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DescendingImmutableSortedSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DescendingMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DescendingMultiset$1EntrySetImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DiscreteDomain", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DiscreteDomain$BigIntegerDomain", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DiscreteDomain$IntegerDomain", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.DiscreteDomain$LongDomain", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyContiguousSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyContiguousSet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyContiguousSet$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyImmutableListMultimap_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyImmutableSetMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyImmutableSetMultimap_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EnumBiMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EnumHashBiMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EvictingQueue", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ExplicitOrdering", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ExplicitOrdering_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$AsMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$AsMap$1KeySetImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$AsMap$1ValuesImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$Keys", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$Keys$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$Keys$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntryMultimap$ValuePredicate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredEntrySetMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeyListMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeyMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeyMultimap$AddRejectingList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeyMultimap$AddRejectingSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeyMultimap$Entries", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeySetMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredKeySetMultimap$EntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredMultimapValues", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FilteredSetMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FluentIterable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FluentIterable$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.FluentIterable$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.FluentIterable$FromIterableFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingBlockingDeque", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingCollection", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingConcurrentMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingDeque", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingListIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMap$StandardEntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMap$StandardKeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMap$StandardValues", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingMultiset$StandardElementSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingNavigableMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingNavigableSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingNavigableSet$StandardDescendingSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingQueue", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSetMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedMap$StandardKeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedMultiset$StandardElementSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingSortedSetMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingTable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GeneralRange", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$HashBasedTableDependencies", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$ImmutableListMultimapDependencies", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$ImmutableSetMultimapDependencies", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$ImmutableTableDependencies", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$LinkedListMultimapDependencies", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$TreeBasedTableDependencies", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtSerializationDependencies$TreeMultimapDependencies", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.GwtTransient", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBasedTable_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$1$MapEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$1.MapEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$BiEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse$1$1$InverseEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse$1$1.InverseEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse$InverseKeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Inverse$InverseKeySet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$InverseSerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$Itr", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$KeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBiMap$KeySet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashMultimap_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashMultiset_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Hashing", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableAsList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableAsList$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableBiMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableBiMap$Builder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableBiMap$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEntry_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumMap$EnumSerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumMap_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumSet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumSet$EnumSerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableEnumSet_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableList$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableList$ReverseImmutableList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableList$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableList$SubList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableListMultimap_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap$1EntrySetImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableBiMapEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapEntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapKeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapValues", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapValues$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapValues$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapValues$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$EntryCollection", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$FieldSettersHolder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$Itr", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$Keys", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$Values", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultiset$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultiset$Builder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultiset$EntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultiset$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeMap$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeMap$Builder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeMap$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeSet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeSet$AsSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeSet$AsSet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeSet$AsSet$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeSet$Builder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeSet$ComplementRanges", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableRangeSet$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSet$Indexed", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSet$Indexed$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSet$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSetMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSetMultimap$Builder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSetMultimap$EntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSetMultimap_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedAsList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMap$1EntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMap$1EntrySet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMap$Builder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMap$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMapFauxverideShim", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMap_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMap_CustomFieldSerializerBase", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMultiset$Builder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMultiset$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedMultisetFauxverideShim", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedSet$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedSetFauxverideShim", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableTable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableTable$Builder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableTable$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableTable_CustomFieldSerializerBase", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Interner", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Interners", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Interners$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Interners$InternerFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Interners$WeakInterner", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Interners$WeakInterner$Dummy", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$10", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$11", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$12", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$13", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$6", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$7", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$8", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$8$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$9", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterables$UnmodifiableIterable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$10", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$11", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$12", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$13", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$6", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$7", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$8", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$9", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$ConcatenatedIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$ConcatenatedIterator$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$MergingIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$MergingIterator$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Iterators$PeekingImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LexicographicalOrdering", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LexicographicalOrdering_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap$ValueEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap$ValueSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap$ValueSet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap$ValueSetLink", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultimap_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedHashMultiset_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$1EntriesImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$1KeySetImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$1ValuesImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$1ValuesImpl$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$KeyList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$Node", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$NodeIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.LinkedListMultimap_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$AbstractListWrapper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$CharSequenceAsList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$OnePlusArrayList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$Partition", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$RandomAccessListWrapper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$RandomAccessPartition", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$RandomAccessReverseList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$ReverseList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$ReverseList$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$StringAsImmutableList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$TransformingRandomAccessList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$TransformingRandomAccessList$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$TransformingSequentialList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$TransformingSequentialList$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Lists$TwoPlusArrayList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraint", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$2$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedAsMapEntries", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedAsMapEntries$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedAsMapValues", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedAsMapValues$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedEntries", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedEntries$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedEntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedListMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedMultimap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapConstraints$ConstrainedMultimap$1AsMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapDifference", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapDifference$ValueDifference", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMaker", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$CleanupMapTask", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$DummyInternalEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntryIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$EntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$HashIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$InternalEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$InternalEntryHelper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$KeyIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$KeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$SafeToArraySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$Segment", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$SerializationProxy", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$Strength", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$Strength$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$Strength$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$StrongValueEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$ValueIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$Values", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WeakValueEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WeakValueReference", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WeakValueReferenceImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MapMakerInternalMap$WriteThroughEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$10", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$11", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$6", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$7", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$8", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$9", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$AbstractFilteredMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$AsMapView", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$AsMapView$1EntrySetImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$BiMapConverter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$DescendingMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$DescendingMap$1EntrySetImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$EntryFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$EntryFunction$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$EntryFunction$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$EntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$EntryTransformer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntryBiMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntryBiMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntryMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntryMap$EntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntryMap$KeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntryNavigableMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntryNavigableMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntrySortedMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredKeyMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$FilteredMapValues", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$IteratorBasedAbstractMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$IteratorBasedAbstractMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$KeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$MapDifferenceImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$NavigableAsMapView", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$NavigableKeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$SortedAsMapView", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$SortedKeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$SortedMapDifferenceImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$TransformedEntriesMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$TransformedEntriesNavigableMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$TransformedEntriesSortedMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$UnmodifiableBiMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$UnmodifiableEntries", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$UnmodifiableEntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$UnmodifiableNavigableMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$ValueDifferenceImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$Values", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Maps$ViewCachingAbstractMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["remove() in MinMaxPriorityQueue<Double> not removing the correct object", "remove() in MinMaxPriorityQueue<Double> not removing the correct object", "remove() in MinMaxPriorityQueue<Double> not removing the correct object"], "name": "com.google.common.collect.MinMaxPriorityQueue", "version": "20.0", "bodys": ["A MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\r\n\r\n> [5.6, 6.0, 5.7, 5.9]\r\nTry to remove 5.7 :\r\n[5.6, 6.0, 5.7]\r\n\r\nObtained from :\r\n\r\n> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.remove(6.2);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.remove(5.4);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(5.5);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tSystem.out.println(values);\r\n\t\t\tSystem.out.println(\"Try to remove 5.7 :\");\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tSystem.out.println(values);", "A MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\r\n\r\n> [5.6, 6.0, 5.7, 5.9]\r\nTry to remove 5.7 :\r\n[5.6, 6.0, 5.7]\r\n\r\nObtained from :\r\n\r\n> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.remove(6.2);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.remove(5.4);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(5.5);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tSystem.out.println(values);\r\n\t\t\tSystem.out.println(\"Try to remove 5.7 :\");\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tSystem.out.println(values);", "A MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\r\n\r\n> [5.6, 6.0, 5.7, 5.9]\r\nTry to remove 5.7 :\r\n[5.6, 6.0, 5.7]\r\n\r\nObtained from :\r\n\r\n> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.remove(6.2);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.remove(5.4);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(5.5);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tSystem.out.println(values);\r\n\t\t\tSystem.out.println(\"Try to remove 5.7 :\");\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tSystem.out.println(values);"], "labels": [[1], [1], [1]], "ids": ["2658", "2658", "2658"], "change": 0, "size": 1}, {"titles": ["remove() in MinMaxPriorityQueue<Double> not removing the correct object", "remove() in MinMaxPriorityQueue<Double> not removing the correct object", "remove() in MinMaxPriorityQueue<Double> not removing the correct object"], "name": "com.google.common.collect.MinMaxPriorityQueue$1", "version": "20.0", "bodys": ["A MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\r\n\r\n> [5.6, 6.0, 5.7, 5.9]\r\nTry to remove 5.7 :\r\n[5.6, 6.0, 5.7]\r\n\r\nObtained from :\r\n\r\n> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.remove(6.2);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.remove(5.4);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(5.5);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tSystem.out.println(values);\r\n\t\t\tSystem.out.println(\"Try to remove 5.7 :\");\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tSystem.out.println(values);", "A MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\r\n\r\n> [5.6, 6.0, 5.7, 5.9]\r\nTry to remove 5.7 :\r\n[5.6, 6.0, 5.7]\r\n\r\nObtained from :\r\n\r\n> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.remove(6.2);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.remove(5.4);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(5.5);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tSystem.out.println(values);\r\n\t\t\tSystem.out.println(\"Try to remove 5.7 :\");\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tSystem.out.println(values);", "A MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\r\n\r\n> [5.6, 6.0, 5.7, 5.9]\r\nTry to remove 5.7 :\r\n[5.6, 6.0, 5.7]\r\n\r\nObtained from :\r\n\r\n> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.remove(6.2);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.remove(5.4);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(5.5);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tSystem.out.println(values);\r\n\t\t\tSystem.out.println(\"Try to remove 5.7 :\");\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tSystem.out.println(values);"], "labels": [[1], [1], [1]], "ids": ["2658", "2658", "2658"], "change": 0, "size": 1}, {"titles": ["remove() in MinMaxPriorityQueue<Double> not removing the correct object", "remove() in MinMaxPriorityQueue<Double> not removing the correct object", "remove() in MinMaxPriorityQueue<Double> not removing the correct object"], "name": "com.google.common.collect.MinMaxPriorityQueue$Builder", "version": "20.0", "bodys": ["A MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\r\n\r\n> [5.6, 6.0, 5.7, 5.9]\r\nTry to remove 5.7 :\r\n[5.6, 6.0, 5.7]\r\n\r\nObtained from :\r\n\r\n> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.remove(6.2);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.remove(5.4);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(5.5);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tSystem.out.println(values);\r\n\t\t\tSystem.out.println(\"Try to remove 5.7 :\");\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tSystem.out.println(values);", "A MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\r\n\r\n> [5.6, 6.0, 5.7, 5.9]\r\nTry to remove 5.7 :\r\n[5.6, 6.0, 5.7]\r\n\r\nObtained from :\r\n\r\n> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.remove(6.2);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.remove(5.4);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(5.5);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tSystem.out.println(values);\r\n\t\t\tSystem.out.println(\"Try to remove 5.7 :\");\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tSystem.out.println(values);", "A MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\r\n\r\n> [5.6, 6.0, 5.7, 5.9]\r\nTry to remove 5.7 :\r\n[5.6, 6.0, 5.7]\r\n\r\nObtained from :\r\n\r\n> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.remove(6.2);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.remove(5.4);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(5.5);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tSystem.out.println(values);\r\n\t\t\tSystem.out.println(\"Try to remove 5.7 :\");\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tSystem.out.println(values);"], "labels": [[1], [1], [1]], "ids": ["2658", "2658", "2658"], "change": 0, "size": 1}, {"titles": ["remove() in MinMaxPriorityQueue<Double> not removing the correct object", "remove() in MinMaxPriorityQueue<Double> not removing the correct object", "remove() in MinMaxPriorityQueue<Double> not removing the correct object"], "name": "com.google.common.collect.MinMaxPriorityQueue$Heap", "version": "20.0", "bodys": ["A MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\r\n\r\n> [5.6, 6.0, 5.7, 5.9]\r\nTry to remove 5.7 :\r\n[5.6, 6.0, 5.7]\r\n\r\nObtained from :\r\n\r\n> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.remove(6.2);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.remove(5.4);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(5.5);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tSystem.out.println(values);\r\n\t\t\tSystem.out.println(\"Try to remove 5.7 :\");\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tSystem.out.println(values);", "A MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\r\n\r\n> [5.6, 6.0, 5.7, 5.9]\r\nTry to remove 5.7 :\r\n[5.6, 6.0, 5.7]\r\n\r\nObtained from :\r\n\r\n> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.remove(6.2);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.remove(5.4);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(5.5);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tSystem.out.println(values);\r\n\t\t\tSystem.out.println(\"Try to remove 5.7 :\");\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tSystem.out.println(values);", "A MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\r\n\r\n> [5.6, 6.0, 5.7, 5.9]\r\nTry to remove 5.7 :\r\n[5.6, 6.0, 5.7]\r\n\r\nObtained from :\r\n\r\n> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.remove(6.2);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.remove(5.4);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(5.5);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tSystem.out.println(values);\r\n\t\t\tSystem.out.println(\"Try to remove 5.7 :\");\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tSystem.out.println(values);"], "labels": [[1], [1], [1]], "ids": ["2658", "2658", "2658"], "change": 0, "size": 1}, {"titles": ["remove() in MinMaxPriorityQueue<Double> not removing the correct object", "remove() in MinMaxPriorityQueue<Double> not removing the correct object", "remove() in MinMaxPriorityQueue<Double> not removing the correct object"], "name": "com.google.common.collect.MinMaxPriorityQueue$MoveDesc", "version": "20.0", "bodys": ["A MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\r\n\r\n> [5.6, 6.0, 5.7, 5.9]\r\nTry to remove 5.7 :\r\n[5.6, 6.0, 5.7]\r\n\r\nObtained from :\r\n\r\n> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.remove(6.2);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.remove(5.4);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(5.5);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tSystem.out.println(values);\r\n\t\t\tSystem.out.println(\"Try to remove 5.7 :\");\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tSystem.out.println(values);", "A MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\r\n\r\n> [5.6, 6.0, 5.7, 5.9]\r\nTry to remove 5.7 :\r\n[5.6, 6.0, 5.7]\r\n\r\nObtained from :\r\n\r\n> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.remove(6.2);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.remove(5.4);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(5.5);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tSystem.out.println(values);\r\n\t\t\tSystem.out.println(\"Try to remove 5.7 :\");\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tSystem.out.println(values);", "A MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\r\n\r\n> [5.6, 6.0, 5.7, 5.9]\r\nTry to remove 5.7 :\r\n[5.6, 6.0, 5.7]\r\n\r\nObtained from :\r\n\r\n> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.remove(6.2);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.remove(5.4);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(5.5);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tSystem.out.println(values);\r\n\t\t\tSystem.out.println(\"Try to remove 5.7 :\");\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tSystem.out.println(values);"], "labels": [[1], [1], [1]], "ids": ["2658", "2658", "2658"], "change": 0, "size": 1}, {"titles": ["remove() in MinMaxPriorityQueue<Double> not removing the correct object", "remove() in MinMaxPriorityQueue<Double> not removing the correct object", "remove() in MinMaxPriorityQueue<Double> not removing the correct object"], "name": "com.google.common.collect.MinMaxPriorityQueue$QueueIterator", "version": "20.0", "bodys": ["A MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\r\n\r\n> [5.6, 6.0, 5.7, 5.9]\r\nTry to remove 5.7 :\r\n[5.6, 6.0, 5.7]\r\n\r\nObtained from :\r\n\r\n> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.remove(6.2);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.remove(5.4);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(5.5);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tSystem.out.println(values);\r\n\t\t\tSystem.out.println(\"Try to remove 5.7 :\");\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tSystem.out.println(values);", "A MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\r\n\r\n> [5.6, 6.0, 5.7, 5.9]\r\nTry to remove 5.7 :\r\n[5.6, 6.0, 5.7]\r\n\r\nObtained from :\r\n\r\n> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.remove(6.2);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.remove(5.4);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(5.5);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tSystem.out.println(values);\r\n\t\t\tSystem.out.println(\"Try to remove 5.7 :\");\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tSystem.out.println(values);", "A MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\r\n\r\n> [5.6, 6.0, 5.7, 5.9]\r\nTry to remove 5.7 :\r\n[5.6, 6.0, 5.7]\r\n\r\nObtained from :\r\n\r\n> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.2);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.remove(6.2);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(6.4);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.3);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.5);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.remove(5.4);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.4);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(5.5);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.8);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.8);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.remove(6.1);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.add(6.0);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.9);\r\n\t\t\tvalues.remove(6.0);\r\n\t\t\tvalues.add(5.7);\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tvalues.add(6.1);\r\n\t\t\tvalues.pollFirst();\r\n\t\t\tvalues.add(5.6);\r\n\t\t\tvalues.pollLast();\r\n\t\t\tSystem.out.println(values);\r\n\t\t\tSystem.out.println(\"Try to remove 5.7 :\");\r\n\t\t\tvalues.remove(5.7);\r\n\t\t\tSystem.out.println(values);"], "labels": [[1], [1], [1]], "ids": ["2658", "2658", "2658"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$ArrayListSupplier", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$EnumSetSupplier", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$HashSetSupplier", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$LinkedListSupplier", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$ListMultimapBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$SetMultimapBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultimapBuilder$TreeSetSupplier", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimap_CustomFieldSerializerBase", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$AsMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$AsMap$EntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$AsMap$EntrySet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$CustomListMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$CustomMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$CustomSetMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$CustomSortedSetMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$Entries", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$Keys", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$Keys$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$Keys$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$Keys$KeysEntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$MapMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$MapMultimap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$MapMultimap$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$TransformedEntriesListMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$TransformedEntriesMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$TransformedEntriesMultimap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$UnmodifiableListMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$UnmodifiableMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$UnmodifiableMultimap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$UnmodifiableSetMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multiset_CustomFieldSerializerBase", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$2$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$3$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$4$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$AbstractEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$ElementSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$ElementSet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$EntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$FilteredMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$FilteredMultiset$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$ImmutableEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$MultisetIteratorImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multisets$UnmodifiableMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MultitransformedIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.MutableClassToInstanceMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MutableClassToInstanceMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.MutableClassToInstanceMap$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.NaturalOrdering", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.NaturalOrdering_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.NullsFirstOrdering", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.NullsFirstOrdering_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.NullsLastOrdering", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.NullsLastOrdering_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Ordering", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Ordering$ArbitraryOrdering", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Ordering$ArbitraryOrderingHolder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Ordering$IncomparableValueException", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.PeekingIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Platform", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Range", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Range$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Range$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Range$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Range$RangeLexOrdering", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RangeMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RangeSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularContiguousSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularContiguousSet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularContiguousSet$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularContiguousSet$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableAsList_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap$Inverse", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableBiMap_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableList_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMap$KeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMap$KeySet$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMap$Values", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMap$Values$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMap_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMultiset$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMultiset$ElementSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMultiset$NonTerminalEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSet_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSortedMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSortedSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableSortedSet_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableTable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableTable$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableTable$CellSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableTable$Values", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ReverseNaturalOrdering", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ReverseNaturalOrdering_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ReverseOrdering", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ReverseOrdering_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RowSortedTable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Serialization", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Serialization$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Serialization$FieldSetter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SetMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$4$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$CartesianSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$CartesianSet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$DescendingSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$FilteredNavigableSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$FilteredSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$FilteredSortedSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$ImprovedAbstractSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$PowerSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$PowerSet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$SetView", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$SubSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$SubSet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Sets$UnmodifiableNavigableSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableBiMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableBiMap_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableList_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableSet_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableTable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SingletonImmutableTable_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedIterable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedIterables", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyAbsentBehavior", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyAbsentBehavior$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyAbsentBehavior$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyAbsentBehavior$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyPresentBehavior", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyPresentBehavior$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyPresentBehavior$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyPresentBehavior$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyPresentBehavior$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedLists$KeyPresentBehavior$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedMapDifference", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedMultisetBridge", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedMultisets", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedMultisets$ElementSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedMultisets$NavigableElementSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SortedSetMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SparseImmutableTable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.SparseImmutableTable_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardRowSortedTable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardRowSortedTable$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardRowSortedTable$RowSortedMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$CellIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Column", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Column$EntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Column$EntrySetIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Column$EntrySetIterator$1EntryImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Column$KeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Column$Values", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$ColumnKeyIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$ColumnKeySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$ColumnMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Row", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Row$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$Row$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$RowMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$RowMap$EntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$RowMap$EntrySet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.StandardTable$TableSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedAsMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedAsMapEntries", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedAsMapValues", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedAsMapValues$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedBiMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedCollection", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedDeque", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedListMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedNavigableMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedNavigableSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedObject", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedQueue", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedRandomAccessList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedSetMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedSortedMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedSortedSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Table", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Table$Cell", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Table_CustomFieldSerializerBase", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$AbstractCell", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$ImmutableCell", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$TransformedTable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$TransformedTable$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$TransformedTable$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$TransformedTable$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$TransposeTable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$TransposeTable$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$UnmodifiableRowSortedMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Tables$UnmodifiableTable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TopKSelector", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.TransformedIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TransformedListIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeBasedTable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeBasedTable$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeBasedTable$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeBasedTable$Factory", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeBasedTable$TreeRow", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeBasedTable_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultimap_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$Aggregate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$Aggregate$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$Aggregate$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$AvlNode", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeMultiset$Reference", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$AsMapOfRanges", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$RangeMapEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$AsRanges", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$Complement", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$RangesByUpperBound", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$RangesByUpperBound$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$RangesByUpperBound$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$SubRangeSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$BreadthFirstIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$PostOrderIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$PostOrderNode", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.TreeTraverser$PreOrderIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.UnmodifiableIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.UnmodifiableListIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.UnmodifiableSortedMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.UsingToStringOrdering", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.UsingToStringOrdering_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.WellBehavedMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.WellBehavedMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.WellBehavedMap$EntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.WellBehavedMap$EntrySet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.WellBehavedMap$EntrySet$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedLong_CustomFieldSerializer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.errorprone.annotations.CanIgnoreReturnValue", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.gwt.user.client.rpc.SerializationException", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.gwt.user.client.rpc.SerializationStreamReader", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.gwt.user.client.rpc.SerializationStreamWriter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.gwt.user.client.rpc.core.java.util.Collection_CustomFieldSerializerBase", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.gwt.user.client.rpc.core.java.util.Map_CustomFieldSerializerBase", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.j2objc.annotations.RetainedWith", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.j2objc.annotations.Weak", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.collect.testing.features.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.collect.testing.features.SetFeature", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.SetFeature$Require", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.collect.testing.google.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.annotations.GwtCompatible", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.BiMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ComputationException", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ContiguousSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EnumMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingImmutableCollection", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingImmutableList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingImmutableMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingImmutableSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingListMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashMultiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableCollection", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableCollection$Builder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMap$Builder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMap$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableMultimap$Builder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSortedSet$Builder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ListMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multiset", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Multiset$Entry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableAsList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.RegularImmutableMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$KnownOrder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AnEnum", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.IteratorFeature", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.IteratorTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MinimalIterable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Chars", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Collider", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Colliders", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Enums", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Ints", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Strings", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SampleElements$Unhashables", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SortedMapInterfaceTest", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestCharacterListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestCollectionGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestCollidingSetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestContainerGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestEnumMapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestMapEntrySetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestMapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringCollectionGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestSubjectGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestUnhashableCollectionGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.UnhashableObject", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.CollectionSize", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.CollectionSize$Require", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.Feature", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.MapFeature", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.MapFeature$Require", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.TesterAnnotation", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.AbstractBiMapTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.AbstractListMultimapTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.AbstractMultimapTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.AbstractMultisetSetCountTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.AbstractMultisetTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapClearTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapGenerators", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapGenerators$ImmutableBiMapCopyOfEntriesGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapGenerators$ImmutableBiMapCopyOfGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapGenerators$ImmutableBiMapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapInverseTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapInverseTester$BiMapPair", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapPutTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapRemoveTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.BiMapTestSuiteBuilder$NoRecurse", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators$BiMapValueSetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators$InverseBiMapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators$MapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.GoogleHelpers", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$BuilderAddAllListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$BuilderAddListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$BuilderReversedListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$CharactersOfCharSequenceGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$CharactersOfStringGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$ImmutableListHeadSubListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$ImmutableListMiddleSubListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$ImmutableListOfGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$ImmutableListTailSubListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$TestUnhashableListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListGenerators$UnhashableElementsImmutableListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapAsMapTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapEqualsTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapPutAllTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapPutTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapRemoveTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapReplaceValuesTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapTestSuiteBuilder$MultimapAsMapGetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.ListMultimapTestSuiteBuilder$MultimapGetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableEnumMapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfEntriesGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfEnumMapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfEnumMapGenerator$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapEntryListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapKeyListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapUnhashableValuesGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MapGenerators$ImmutableMapValueListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapAsMapGetTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapAsMapTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapClearTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapContainsEntryTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapContainsKeyTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapContainsValueTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapEntriesTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapEqualsTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapFeature", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapFeature$Require", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapGetTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapKeySetTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapKeysTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutAllMultimapTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutIterableTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutIterableTester$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutIterableTester$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutIterableTester$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutIterableTester$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapPutTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapRemoveAllTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapRemoveEntryTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapReplaceValuesTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapSizeTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$AsMapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$EntriesGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$MultimapAsMapGetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$MultimapGetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$ReserializedMultimapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapTestSuiteBuilder$ValuesGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapToStringTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultimapValuesTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetAddTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetContainsTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetCountTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetElementSetTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetEntrySetTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetEqualsTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetFeature", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetFeature$Require", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetIteratorTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetIteratorTester$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetIteratorTester$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetIteratorTester$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetIteratorTester$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetNavigationTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetNavigationTester$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetReadsTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetRemoveTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetSerializationTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetSetCountConditionallyTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetSetCountUnconditionallyTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetTestSuiteBuilder$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetTestSuiteBuilder$ElementSetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetTestSuiteBuilder$NoRecurse", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.MultisetTestSuiteBuilder$ReserializedMultisetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$AbstractContiguousSetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ContiguousSetDescendingGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ContiguousSetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ContiguousSetHeadsetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ContiguousSetSubsetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ContiguousSetTailsetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$DegeneratedImmutableSetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSetAsListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSetCopyOfGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSetWithBadHashesGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetAsListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetAsListSubListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetCopyOfGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetDescendingAsListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetDescendingGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetExplicitComparator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetExplicitSuperclassComparatorGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetHeadsetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetReversedOrderGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetSubsetAsListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetSubsetAsListSubListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetSubsetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetTailsetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetUnhashableGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetGenerators$TestUnhashableSetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapAsMapTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapEqualsTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapPutAllTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapPutTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapReplaceValuesTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder$EntriesGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder$MultimapAsMapGetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder$MultimapGetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapCopyOfEntriesGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapEntryListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapEntryListGenerator$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapKeyListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapValueListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$Bound", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$ForwardingTestMultisetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$NoRecurse", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedSetMultimapAsMapTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedSetMultimapGetTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.SortedSetMultimapTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestBiMapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestEnumMultisetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestListMultimapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestMultimapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestMultisetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestSetMultimapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestStringBiMapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestStringListMultimapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestStringMultisetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.TestStringSetMultimapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.UnmodifiableCollectionTests", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.google.UnmodifiableCollectionTests$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SetCreationTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.HttpHeaders", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.SloppyTearDown", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.TestLogHandler", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "junit.framework.TestSuite", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.collect.testing.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.collect.testing.AbstractCollectionTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractCollectionTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractContainerTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractContainerTester$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractContainerTester$ArrayWithDuplicate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$10", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$11", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$12", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$13", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$14", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$6", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$7", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$8", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$9", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$Stimulus", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractIteratorTester$UnknownElementException", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractMapTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.AbstractTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.BaseComparable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.CollectionTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.CollectionTestSuiteBuilder$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.CollectionTestSuiteBuilder$ReserializedCollectionGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ConcurrentMapTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ConcurrentNavigableMapTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$Bound", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$ForwardingTestMapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$MapEntrySetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$MapKeySetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$MapSortedKeySetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$SortedMapSubmapTestMapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedCollectionGenerators$SortedSetSubsetTestSetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedComparable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedIteratorTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.DerivedTestIteratorGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ExampleIteratorTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$6", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$GwtTransient", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$NullsBefore", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$NullsBeforeB", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Helpers$NullsBeforeTwo", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.IteratorTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ListTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ListTestSuiteBuilder$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ListTestSuiteBuilder$ReserializedListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MapInterfaceTest", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MapInterfaceTest$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MapInterfaceTest$IncompatibleKeyType", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MapTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MapTestSuiteBuilder$ReserializedMapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MinimalCollection", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.MinimalSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.NavigableMapTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.NavigableMapTestSuiteBuilder$DescendingTestMapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.NavigableMapTestSuiteBuilder$NavigableMapSubmapTestMapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.NavigableSetTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.NavigableSetTestSuiteBuilder$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.NavigableSetTestSuiteBuilder$NavigableSetSubsetTestSetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.OneSizeGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.OneSizeTestContainerGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.PerCollectionSizeTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.PerCollectionSizeTestSuiteBuilder$OneSizeTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.Platform", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.QueueTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ReserializingTestCollectionGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.ReserializingTestSetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SafeTreeMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SafeTreeMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SafeTreeMap$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SafeTreeSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SafeTreeSet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SetTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SetTestSuiteBuilder$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SetTestSuiteBuilder$ReserializedSetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SortedMapTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SortedMapTestSuiteBuilder$NoRecurse", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.SortedSetTestSuiteBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestEnumSetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestIntegerSetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestIntegerSortedSetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestIteratorGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestQueueGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestSetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestSortedMapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestSortedSetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringListGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringMapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringQueueGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringSetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringSortedMapGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestStringSortedSetGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$10", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$10$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$11", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$6", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$7", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$8", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$9", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForListsInJavaUtil$9$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$10", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$11", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$12", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$13", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$14", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$15", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$6", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$7", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$8", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$9", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForMapsInJavaUtil$NullFriendlyComparator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForQueuesInJavaUtil$6", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$10", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$11", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$12", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$12$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$13", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$14", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$15", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$6", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$7", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$8", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$9", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.TestsForSetsInJavaUtil$NullFriendlyComparator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.WrongType", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.CollectionFeature", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.CollectionFeature$Require", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.ConflictingRequirementsException", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.FeatureUtil", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.ListFeature", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.ListFeature$Require", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.features.TesterRequirements", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.AbstractListIndexOfTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.AbstractListTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.AbstractQueueTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.AbstractSetTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionAddAllTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionAddTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionClearTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionContainsAllTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionContainsTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionCreationTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionEqualsTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionIsEmptyTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionRemoveAllTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionRemoveTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionSerializationEqualTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionSerializationTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionSizeTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionToArrayTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionToStringTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ConcurrentMapPutIfAbsentTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ConcurrentMapRemoveTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ConcurrentMapReplaceEntryTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ConcurrentMapReplaceTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListAddAllAtIndexTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListAddAllTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListAddAtIndexTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListAddTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListCreationTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListEqualsTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListGetTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListHashCodeTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListIndexOfTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListLastIndexOfTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListRemoveAllTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListRemoveAtIndexTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListRemoveTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListRetainAllTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListSetTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListSubListTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListToArrayTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapClearTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapContainsKeyTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapContainsValueTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapCreationTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapEqualsTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapGetTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapHashCodeTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapIsEmptyTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapPutAllTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapPutTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapRemoveTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapSerializationTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapSizeTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapToStringTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.NavigableMapNavigationTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.NavigableSetNavigationTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.Platform", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.QueueElementTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.QueueOfferTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.QueuePeekTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.QueuePollTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.QueueRemoveTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SetAddAllTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SetAddTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SetEqualsTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SetHashCodeTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SetRemoveTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SortedSetNavigationTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.MockFutureListener", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "junit.framework.Assert", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "junit.framework.Test", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "junit.framework.TestCase", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.collect.testing.testers.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.collect.testing.ListIteratorTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionIteratorTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionIteratorTester$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionRetainAllTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionRetainAllTester$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.CollectionRetainAllTester$Target", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListListIteratorTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.ListListIteratorTester$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapEntrySetTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.MapEntrySetTester$IncomparableType", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SortedMapNavigationTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.testing.testers.SortedMapNavigationTester$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.escape.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.escape.ArrayBasedCharEscaper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.ArrayBasedEscaperMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.CharEscaper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.CharEscaperBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.CharEscaperBuilder$CharArrayDecorator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escaper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escaper$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escapers", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escapers$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escapers$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escapers$Builder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Escapers$Builder$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Platform", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.Platform$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.UnicodeEscaper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.escape.testing.EscaperAsserts", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.html.HtmlEscapers", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.xml.XmlEscapers", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.eventbus.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.eventbus.AllowConcurrentEvents", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.AsyncEventBus", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.DeadEvent", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Dispatcher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Dispatcher$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Dispatcher$ImmediateDispatcher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher$EventWithSubscriber", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$Event", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.EventBus", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.EventBus$LoggingHandler", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Subscribe", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Subscriber", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Subscriber$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.Subscriber$SynchronizedSubscriber", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.SubscriberExceptionContext", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.SubscriberExceptionHandler", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.SubscriberRegistry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.SubscriberRegistry$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.SubscriberRegistry$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.eventbus.SubscriberRegistry$MethodIdentifier", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$ClassSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.graph.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.graph.AbstractDirectedNetworkConnections", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.AbstractDirectedNetworkConnections$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.AbstractGraph", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.AbstractGraph$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.AbstractGraphBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.AbstractNetwork", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.AbstractNetwork$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.AbstractNetwork$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.AbstractNetwork$1$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.AbstractNetwork$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.AbstractUndirectedNetworkConnections", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.AbstractValueGraph", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.AbstractValueGraph$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ConfigurableMutableGraph", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ConfigurableMutableNetwork", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ConfigurableMutableValueGraph", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ConfigurableNetwork", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ConfigurableValueGraph", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.DirectedGraphConnections", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.DirectedGraphConnections$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.DirectedGraphConnections$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.DirectedGraphConnections$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.DirectedGraphConnections$2$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.DirectedGraphConnections$PredAndSucc", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.DirectedMultiNetworkConnections", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.DirectedMultiNetworkConnections$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.DirectedNetworkConnections", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.EdgesConnecting", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ElementOrder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ElementOrder$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ElementOrder$Type", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.EndpointPair", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.EndpointPair$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.EndpointPair$Ordered", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.EndpointPair$Unordered", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.EndpointPairIterator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.EndpointPairIterator$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.EndpointPairIterator$Directed", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.EndpointPairIterator$Undirected", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ForwardingGraph", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.Graph", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.GraphBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.GraphConnections", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.GraphConstants", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.GraphConstants$Presence", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.Graphs", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.Graphs$NodeVisitState", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.Graphs$TransposedGraph", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.Graphs$TransposedNetwork", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.Graphs$TransposedValueGraph", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ImmutableGraph", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ImmutableGraph$ValueBackedImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ImmutableNetwork", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ImmutableNetwork$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ImmutableNetwork$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ImmutableNetwork$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ImmutableNetwork$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ImmutableValueGraph", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ImmutableValueGraph$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.MapIteratorCache", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.MapIteratorCache$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.MapIteratorCache$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.MapRetrievalCache", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.MapRetrievalCache$CacheEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.MultiEdgesConnecting", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.MultiEdgesConnecting$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.MutableGraph", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.MutableNetwork", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.MutableValueGraph", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.Network", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.NetworkBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.NetworkConnections", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.UndirectedGraphConnections", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.UndirectedMultiNetworkConnections", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.UndirectedMultiNetworkConnections$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.UndirectedNetworkConnections", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ValueGraph", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.graph.ValueGraphBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}]}, {"name": "com.google.common.hash.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.hash.AbstractByteHasher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractCompositeHashFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractCompositeHashFunction$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractHasher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractNonStreamingHashFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractStreamingHashFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilter$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilter$SerialForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilter$Strategy", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilterStrategies", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilterStrategies$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilterStrategies$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.BloomFilterStrategies$BitArray", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.ChecksumHashFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.ChecksumHashFunction$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.ChecksumHashFunction$ChecksumHasher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Crc32cHashFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Crc32cHashFunction$Crc32cHasher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.FarmHashFingerprint64", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnel", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$ByteArrayFunnel", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$IntegerFunnel", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$LongFunnel", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$SequentialFunnel", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$SinkAsStream", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$StringCharsetFunnel", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Funnels$UnencodedCharsFunnel", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashCode", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashCode$BytesHashCode", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashCode$IntHashCode", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashCode$LongHashCode", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.HashFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hasher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Adler32Holder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$ChecksumType", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$ChecksumType$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$ChecksumType$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$ConcatenatedHashFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Crc32Holder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Crc32cHolder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$FarmHashFingerprint64Holder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$LinearCongruentialGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Md5Holder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Murmur3_128Holder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Murmur3_32Holder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Sha1Holder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Sha256Holder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Sha384Holder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$Sha512Holder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Hashing$SipHash24Holder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.LittleEndianByteArray", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.hash.LittleEndianByteArray$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.hash.LittleEndianByteArray$LittleEndianBytes", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.hash.LittleEndianByteArray$UnsafeByteArray", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.hash.MacHashFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.hash.MacHashFunction$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.hash.MacHashFunction$MacHasher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.hash.MessageDigestHashFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.MessageDigestHashFunction$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.MessageDigestHashFunction$SerializedForm", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Murmur3_128HashFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Murmur3_32HashFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.PrimitiveSink", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.SipHashFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.hash.SipHashFunction$SipHasher", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "sun.misc.Unsafe", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}]}, {"name": "com.google.common.io.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.io.AppendableWriter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.BaseEncoding", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.BaseEncoding$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.BaseEncoding$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.BaseEncoding$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.BaseEncoding$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.BaseEncoding$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.BaseEncoding$Alphabet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.BaseEncoding$Base16Encoding", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.BaseEncoding$Base64Encoding", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.BaseEncoding$DecodingException", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.BaseEncoding$SeparatedBaseEncoding", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.BaseEncoding$StandardBaseEncoding", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.BaseEncoding$StandardBaseEncoding$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.BaseEncoding$StandardBaseEncoding$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteArrayDataInput", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteArrayDataOutput", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteProcessor", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Add Stream<String> lines() to CharSource"], "name": "com.google.common.io.ByteSink", "version": "20.0", "bodys": ["Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)"], "labels": [[5]], "ids": ["2693"], "change": 0, "size": 1}, {"titles": ["Add Stream<String> lines() to CharSource"], "name": "com.google.common.io.ByteSink$1", "version": "20.0", "bodys": ["Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)"], "labels": [[5]], "ids": ["2693"], "change": 0, "size": 1}, {"titles": ["Add Stream<String> lines() to CharSource"], "name": "com.google.common.io.ByteSink$AsCharSink", "version": "20.0", "bodys": ["Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)"], "labels": [[5]], "ids": ["2693"], "change": 0, "size": 1}, {"titles": ["Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Add Stream<String> lines() to CharSource"], "name": "com.google.common.io.ByteSource", "version": "20.0", "bodys": ["The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)"], "labels": [[0], [0], [5]], "ids": ["2843", "2843", "2693"], "change": 0, "size": 1}, {"titles": ["Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Add Stream<String> lines() to CharSource"], "name": "com.google.common.io.ByteSource$AsCharSource", "version": "20.0", "bodys": ["The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)"], "labels": [[0], [0], [5]], "ids": ["2843", "2843", "2693"], "change": 0, "size": 1}, {"titles": ["Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Add Stream<String> lines() to CharSource"], "name": "com.google.common.io.ByteSource$ByteArrayByteSource", "version": "20.0", "bodys": ["The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)"], "labels": [[0], [0], [5]], "ids": ["2843", "2843", "2693"], "change": 0, "size": 1}, {"titles": ["Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Add Stream<String> lines() to CharSource"], "name": "com.google.common.io.ByteSource$ConcatenatedByteSource", "version": "20.0", "bodys": ["The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)"], "labels": [[0], [0], [5]], "ids": ["2843", "2843", "2693"], "change": 0, "size": 1}, {"titles": ["Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Add Stream<String> lines() to CharSource"], "name": "com.google.common.io.ByteSource$EmptyByteSource", "version": "20.0", "bodys": ["The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)"], "labels": [[0], [0], [5]], "ids": ["2843", "2843", "2693"], "change": 0, "size": 1}, {"titles": ["Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Add Stream<String> lines() to CharSource"], "name": "com.google.common.io.ByteSource$SlicedByteSource", "version": "20.0", "bodys": ["The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)"], "labels": [[0], [0], [5]], "ids": ["2843", "2843", "2693"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteStreams", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteStreams$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteStreams$ByteArrayDataInputStream", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteStreams$ByteArrayDataOutputStream", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteStreams$FastByteArrayOutputStream", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ByteStreams$LimitedInputStream", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharSequenceReader", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["Add Stream<String> lines() to CharSource"], "name": "com.google.common.io.CharSink", "version": "20.0", "bodys": ["Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)"], "labels": [[5]], "ids": ["2693"], "change": 0, "size": 1}, {"titles": ["Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Add Stream<String> lines() to CharSource", "Add Stream<String> lines() to CharSource", "Add Stream<String> lines() to CharSource"], "name": "com.google.common.io.CharSource", "version": "20.0", "bodys": ["The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)"], "labels": [[0], [0], [5], [5], [5]], "ids": ["2843", "2843", "2693", "2693", "2693"], "change": 0, "size": 1}, {"titles": ["Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Add Stream<String> lines() to CharSource", "Add Stream<String> lines() to CharSource", "Add Stream<String> lines() to CharSource"], "name": "com.google.common.io.CharSource$AsByteSource", "version": "20.0", "bodys": ["The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)"], "labels": [[0], [0], [5], [5], [5]], "ids": ["2843", "2843", "2693", "2693", "2693"], "change": 4, "size": 1}, {"titles": ["Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Add Stream<String> lines() to CharSource", "Add Stream<String> lines() to CharSource", "Add Stream<String> lines() to CharSource"], "name": "com.google.common.io.CharSource$CharSequenceCharSource", "version": "20.0", "bodys": ["The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)"], "labels": [[0], [0], [5], [5], [5]], "ids": ["2843", "2843", "2693", "2693", "2693"], "change": 0, "size": 1}, {"titles": ["Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Add Stream<String> lines() to CharSource", "Add Stream<String> lines() to CharSource", "Add Stream<String> lines() to CharSource"], "name": "com.google.common.io.CharSource$CharSequenceCharSource$1", "version": "20.0", "bodys": ["The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)"], "labels": [[0], [0], [5], [5], [5]], "ids": ["2843", "2843", "2693", "2693", "2693"], "change": 0, "size": 1}, {"titles": ["Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Add Stream<String> lines() to CharSource", "Add Stream<String> lines() to CharSource", "Add Stream<String> lines() to CharSource"], "name": "com.google.common.io.CharSource$CharSequenceCharSource$1$1", "version": "20.0", "bodys": ["The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)"], "labels": [[0], [0], [5], [5], [5]], "ids": ["2843", "2843", "2693", "2693", "2693"], "change": 0, "size": 1}, {"titles": ["Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Add Stream<String> lines() to CharSource", "Add Stream<String> lines() to CharSource", "Add Stream<String> lines() to CharSource"], "name": "com.google.common.io.CharSource$ConcatenatedCharSource", "version": "20.0", "bodys": ["The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)"], "labels": [[0], [0], [5], [5], [5]], "ids": ["2843", "2843", "2693", "2693", "2693"], "change": 0, "size": 1}, {"titles": ["Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Optimize {Byte,Char}Source.isEmpty() for known-non-empty sources", "Add Stream<String> lines() to CharSource", "Add Stream<String> lines() to CharSource", "Add Stream<String> lines() to CharSource"], "name": "com.google.common.io.CharSource$EmptyCharSource", "version": "20.0", "bodys": ["The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "The default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\r\n\r\nHere is what `ByteSource` does now:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\r\n    return true;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nI feel like it should do this instead:\r\n\r\n```java\r\npublic boolean isEmpty() throws IOException {\r\n  Optional<Long> sizeIfKnown = sizeIfKnown();\r\n  if (sizeIfKnown.isPresent()) {\r\n    return sizeIfKnown.get() == 0L;\r\n  }\r\n  // Fall back to reading a byte from the input stream...\r\n```\r\n\r\nThat way it avoids reading the input stream when the size is known to be non-zero.\r\n\r\nI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)", "Just like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\r\n\r\nOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\r\n\r\nBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\r\n\r\nFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\r\n\r\nAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\r\n\r\nPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)"], "labels": [[0], [0], [5], [5], [5]], "ids": ["2843", "2843", "2693", "2693", "2693"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharStreams", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.CharStreams$NullWriter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Closeables", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Closer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Closer$LoggingSuppressor", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Closer$SuppressingSuppressor", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Closer$Suppressor", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.FileBackedOutputStream", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.FileBackedOutputStream$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.FileBackedOutputStream$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.FileBackedOutputStream$MemoryOutput", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.FileWriteMode", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$FileByteSink", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$FileByteSource", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$FilePredicate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$FilePredicate$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Files$FilePredicate$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.LineBuffer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.LineProcessor", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.LineReader", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.LineReader$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": ["MultiInputStream produces stack overflow", "MultiInputStream produces stack overflow", "MultiInputStream produces stack overflow", "MultiInputStream produces stack overflow"], "name": "com.google.common.io.MultiInputStream", "version": "20.0", "bodys": ["Using `guava-23.0` (and earlier versions), `com.google.common.io.MultiInputStream` produces a stack overflow when it is given sufficiently many empty `ByteSource` instances.\r\n\r\nTest cases that reproduce the behavior:\r\n\r\n```java\r\nimport java.io.InputStream;\r\nimport java.util.List;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport com.google.common.collect.Lists;\r\nimport com.google.common.io.ByteSource;\r\n\r\npublic class MultiInputStreamTest {\r\n\r\n  /** Adjust this according to the thread stack size. */\r\n  private static final int LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE = 1000000;\r\n\r\n  private ByteSource       concatenated;\r\n\r\n  public @Before void setup() throws Exception {\r\n    final List<ByteSource> emptySources = Lists.newArrayList();\r\n    for (int i = 0; i < LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE; i++) {\r\n      emptySources.add(ByteSource.empty());\r\n    }\r\n    // produce a ConcatenatedByteSource which in turn produces\r\n    // a MultiInputStream\r\n    concatenated = ByteSource.concat(emptySources);\r\n  }\r\n\r\n  public @Test void stackOverflowErrorOnEmptySources1() throws Exception {\r\n    try (InputStream in = concatenated.openStream()) {\r\n      in.read();\r\n    }\r\n  }\r\n\r\n  public @Test void stackOverflowErrorOnEmptySources2() throws Exception {\r\n    try (InputStream in = concatenated.openStream()) {\r\n      in.read(new byte[1], 0, 1);\r\n    }\r\n  }\r\n\r\n}\r\n```\r\n\r\nThe condensed exception stack traces produced by the respective test case (which appear to be truncated):\r\n\r\n```\r\n$ uniq -c stack1\r\n   1 java.lang.StackOverflowError\r\n   1 \tat com.google.common.io.ByteSource$ByteArrayByteSource.openStream(ByteSource.java:574)\r\n   1 \tat com.google.common.io.MultiInputStream.advance(MultiInputStream.java:65)\r\n   1 \tat com.google.common.io.MultiInputStream.read(MultiInputStream.java:89)\r\n1021 \tat com.google.common.io.MultiInputStream.read(MultiInputStream.java:90)\r\n```\r\n\r\n```\r\n$ uniq -c stack2\r\n   1 java.lang.StackOverflowError\r\n   1 \tat com.google.common.io.MultiInputStream.close(MultiInputStream.java:52)\r\n   1 \tat com.google.common.io.MultiInputStream.advance(MultiInputStream.java:63)\r\n   1 \tat com.google.common.io.MultiInputStream.read(MultiInputStream.java:102)\r\n1021 \tat com.google.common.io.MultiInputStream.read(MultiInputStream.java:103)\r\n```", "Using `guava-23.0` (and earlier versions), `com.google.common.io.MultiInputStream` produces a stack overflow when it is given sufficiently many empty `ByteSource` instances.\r\n\r\nTest cases that reproduce the behavior:\r\n\r\n```java\r\nimport java.io.InputStream;\r\nimport java.util.List;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport com.google.common.collect.Lists;\r\nimport com.google.common.io.ByteSource;\r\n\r\npublic class MultiInputStreamTest {\r\n\r\n  /** Adjust this according to the thread stack size. */\r\n  private static final int LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE = 1000000;\r\n\r\n  private ByteSource       concatenated;\r\n\r\n  public @Before void setup() throws Exception {\r\n    final List<ByteSource> emptySources = Lists.newArrayList();\r\n    for (int i = 0; i < LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE; i++) {\r\n      emptySources.add(ByteSource.empty());\r\n    }\r\n    // produce a ConcatenatedByteSource which in turn produces\r\n    // a MultiInputStream\r\n    concatenated = ByteSource.concat(emptySources);\r\n  }\r\n\r\n  public @Test void stackOverflowErrorOnEmptySources1() throws Exception {\r\n    try (InputStream in = concatenated.openStream()) {\r\n      in.read();\r\n    }\r\n  }\r\n\r\n  public @Test void stackOverflowErrorOnEmptySources2() throws Exception {\r\n    try (InputStream in = concatenated.openStream()) {\r\n      in.read(new byte[1], 0, 1);\r\n    }\r\n  }\r\n\r\n}\r\n```\r\n\r\nThe condensed exception stack traces produced by the respective test case (which appear to be truncated):\r\n\r\n```\r\n$ uniq -c stack1\r\n   1 java.lang.StackOverflowError\r\n   1 \tat com.google.common.io.ByteSource$ByteArrayByteSource.openStream(ByteSource.java:574)\r\n   1 \tat com.google.common.io.MultiInputStream.advance(MultiInputStream.java:65)\r\n   1 \tat com.google.common.io.MultiInputStream.read(MultiInputStream.java:89)\r\n1021 \tat com.google.common.io.MultiInputStream.read(MultiInputStream.java:90)\r\n```\r\n\r\n```\r\n$ uniq -c stack2\r\n   1 java.lang.StackOverflowError\r\n   1 \tat com.google.common.io.MultiInputStream.close(MultiInputStream.java:52)\r\n   1 \tat com.google.common.io.MultiInputStream.advance(MultiInputStream.java:63)\r\n   1 \tat com.google.common.io.MultiInputStream.read(MultiInputStream.java:102)\r\n1021 \tat com.google.common.io.MultiInputStream.read(MultiInputStream.java:103)\r\n```", "Using `guava-23.0` (and earlier versions), `com.google.common.io.MultiInputStream` produces a stack overflow when it is given sufficiently many empty `ByteSource` instances.\r\n\r\nTest cases that reproduce the behavior:\r\n\r\n```java\r\nimport java.io.InputStream;\r\nimport java.util.List;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport com.google.common.collect.Lists;\r\nimport com.google.common.io.ByteSource;\r\n\r\npublic class MultiInputStreamTest {\r\n\r\n  /** Adjust this according to the thread stack size. */\r\n  private static final int LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE = 1000000;\r\n\r\n  private ByteSource       concatenated;\r\n\r\n  public @Before void setup() throws Exception {\r\n    final List<ByteSource> emptySources = Lists.newArrayList();\r\n    for (int i = 0; i < LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE; i++) {\r\n      emptySources.add(ByteSource.empty());\r\n    }\r\n    // produce a ConcatenatedByteSource which in turn produces\r\n    // a MultiInputStream\r\n    concatenated = ByteSource.concat(emptySources);\r\n  }\r\n\r\n  public @Test void stackOverflowErrorOnEmptySources1() throws Exception {\r\n    try (InputStream in = concatenated.openStream()) {\r\n      in.read();\r\n    }\r\n  }\r\n\r\n  public @Test void stackOverflowErrorOnEmptySources2() throws Exception {\r\n    try (InputStream in = concatenated.openStream()) {\r\n      in.read(new byte[1], 0, 1);\r\n    }\r\n  }\r\n\r\n}\r\n```\r\n\r\nThe condensed exception stack traces produced by the respective test case (which appear to be truncated):\r\n\r\n```\r\n$ uniq -c stack1\r\n   1 java.lang.StackOverflowError\r\n   1 \tat com.google.common.io.ByteSource$ByteArrayByteSource.openStream(ByteSource.java:574)\r\n   1 \tat com.google.common.io.MultiInputStream.advance(MultiInputStream.java:65)\r\n   1 \tat com.google.common.io.MultiInputStream.read(MultiInputStream.java:89)\r\n1021 \tat com.google.common.io.MultiInputStream.read(MultiInputStream.java:90)\r\n```\r\n\r\n```\r\n$ uniq -c stack2\r\n   1 java.lang.StackOverflowError\r\n   1 \tat com.google.common.io.MultiInputStream.close(MultiInputStream.java:52)\r\n   1 \tat com.google.common.io.MultiInputStream.advance(MultiInputStream.java:63)\r\n   1 \tat com.google.common.io.MultiInputStream.read(MultiInputStream.java:102)\r\n1021 \tat com.google.common.io.MultiInputStream.read(MultiInputStream.java:103)\r\n```", "Using `guava-23.0` (and earlier versions), `com.google.common.io.MultiInputStream` produces a stack overflow when it is given sufficiently many empty `ByteSource` instances.\r\n\r\nTest cases that reproduce the behavior:\r\n\r\n```java\r\nimport java.io.InputStream;\r\nimport java.util.List;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport com.google.common.collect.Lists;\r\nimport com.google.common.io.ByteSource;\r\n\r\npublic class MultiInputStreamTest {\r\n\r\n  /** Adjust this according to the thread stack size. */\r\n  private static final int LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE = 1000000;\r\n\r\n  private ByteSource       concatenated;\r\n\r\n  public @Before void setup() throws Exception {\r\n    final List<ByteSource> emptySources = Lists.newArrayList();\r\n    for (int i = 0; i < LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE; i++) {\r\n      emptySources.add(ByteSource.empty());\r\n    }\r\n    // produce a ConcatenatedByteSource which in turn produces\r\n    // a MultiInputStream\r\n    concatenated = ByteSource.concat(emptySources);\r\n  }\r\n\r\n  public @Test void stackOverflowErrorOnEmptySources1() throws Exception {\r\n    try (InputStream in = concatenated.openStream()) {\r\n      in.read();\r\n    }\r\n  }\r\n\r\n  public @Test void stackOverflowErrorOnEmptySources2() throws Exception {\r\n    try (InputStream in = concatenated.openStream()) {\r\n      in.read(new byte[1], 0, 1);\r\n    }\r\n  }\r\n\r\n}\r\n```\r\n\r\nThe condensed exception stack traces produced by the respective test case (which appear to be truncated):\r\n\r\n```\r\n$ uniq -c stack1\r\n   1 java.lang.StackOverflowError\r\n   1 \tat com.google.common.io.ByteSource$ByteArrayByteSource.openStream(ByteSource.java:574)\r\n   1 \tat com.google.common.io.MultiInputStream.advance(MultiInputStream.java:65)\r\n   1 \tat com.google.common.io.MultiInputStream.read(MultiInputStream.java:89)\r\n1021 \tat com.google.common.io.MultiInputStream.read(MultiInputStream.java:90)\r\n```\r\n\r\n```\r\n$ uniq -c stack2\r\n   1 java.lang.StackOverflowError\r\n   1 \tat com.google.common.io.MultiInputStream.close(MultiInputStream.java:52)\r\n   1 \tat com.google.common.io.MultiInputStream.advance(MultiInputStream.java:63)\r\n   1 \tat com.google.common.io.MultiInputStream.read(MultiInputStream.java:102)\r\n1021 \tat com.google.common.io.MultiInputStream.read(MultiInputStream.java:103)\r\n```"], "labels": [[7], [7], [7], [7]], "ids": ["2996", "2996", "2996", "2996"], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.MultiReader", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.ReaderInputStream", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.io.Resources", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Resources$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.Resources$UrlByteSource", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.math.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.annotations.Beta", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.math.BigIntegerMath", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.BigIntegerMath$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.DoubleMath", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.DoubleMath$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.DoubleUtils", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.IntMath", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.IntMath$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.LinearTransformation", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.math.LinearTransformation$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.math.LinearTransformation$LinearTransformationBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.math.LinearTransformation$NaNLinearTransformation", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.math.LinearTransformation$RegularLinearTransformation", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.math.LinearTransformation$VerticalLinearTransformation", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.math.LongMath", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.LongMath$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.LongMath$MillerRabinTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.LongMath$MillerRabinTester$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.LongMath$MillerRabinTester$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.MathPreconditions", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.math.PairedStats", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.math.PairedStatsAccumulator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.math.Quantiles", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.math.Quantiles$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.math.Quantiles$Scale", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.math.Quantiles$ScaleAndIndex", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.math.Quantiles$ScaleAndIndexes", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.math.Stats", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.math.StatsAccumulator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}]}, {"name": "com.google.common.net.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.base.Strings", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.EmptyImmutableListMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableListMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableListMultimap$Builder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.net.HostAndPort", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.HostSpecifier", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.InetAddresses", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.InetAddresses$TeredoInfo", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.InternetDomainName", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.MediaType", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.MediaType$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.MediaType$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.MediaType$Tokenizer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.PercentEscaper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.net.UrlEscapers", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.errorprone.annotations.concurrent.LazyInit", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}]}, {"name": "com.google.common.primitives.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.io.LittleEndianDataInputStream", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.io.LittleEndianDataOutputStream", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Booleans", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Booleans$BooleanArrayAsList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Booleans$LexicographicalComparator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Bytes", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Bytes$ByteArrayAsList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Chars", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Chars$CharArrayAsList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Chars$LexicographicalComparator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Doubles", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Doubles$DoubleArrayAsList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Doubles$DoubleConverter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Doubles$LexicographicalComparator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Floats", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Floats$FloatArrayAsList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Floats$FloatConverter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Floats$LexicographicalComparator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Ints", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Ints$IntArrayAsList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Ints$IntConverter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Ints$LexicographicalComparator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Longs", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Longs$LexicographicalComparator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Longs$LongArrayAsList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Longs$LongConverter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.ParseRequest", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Shorts", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Shorts$LexicographicalComparator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Shorts$ShortArrayAsList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Shorts$ShortConverter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.SignedBytes", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.SignedBytes$LexicographicalComparator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedBytes", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedInts", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedInts$LexicographicalComparator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedLongs", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedLongs$LexicographicalComparator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.reflect.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.collect.ForwardingMapEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableSet$Builder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ClassPath", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ClassPath$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ClassPath$ClassInfo", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ClassPath$DefaultScanner", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ClassPath$ResourceInfo", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ClassPath$Scanner", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Element", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ImmutableTypeToInstanceMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ImmutableTypeToInstanceMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.ImmutableTypeToInstanceMap$Builder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Invokable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Invokable$ConstructorInvokable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Invokable$MethodInvokable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.MutableTypeToInstanceMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.MutableTypeToInstanceMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeCapture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeParameter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeResolver", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeResolver$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeResolver$TypeMappingIntrospector", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeResolver$TypeTable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeResolver$TypeTable$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeResolver$TypeVariableKey", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeResolver$WildcardCapturer", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToInstanceMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$Bounds", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$InterfaceSet", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$InterfaceSet$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$SimpleTypeToken", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeCollector", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeCollector$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeCollector$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeCollector$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeCollector$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeFilter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeFilter$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeToken$TypeFilter$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.TypeVisitor", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$ClassOwnership", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$ClassOwnership$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$ClassOwnership$1LocalClass", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$ClassOwnership$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$ClassOwnership$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$GenericArrayTypeImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$JavaVersion", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$JavaVersion$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$JavaVersion$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$JavaVersion$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$JavaVersion$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$NativeTypeVariableEquals", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$ParameterizedTypeImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$TypeVariableImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$TypeVariableInvocationHandler", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Types$WildcardTypeImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.ForceGuavaCompilationEntryPoint", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.gwt.core.client.EntryPoint", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.testing.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.base.Charsets", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.base.Defaults", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ArrayListMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ClassToInstanceMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBasedTable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashBasedTable$Factory", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.HashMultimap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableClassToInstanceMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableClassToInstanceMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableClassToInstanceMap$Builder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ImmutableList$Builder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.Primitives", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedInteger", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.primitives.UnsignedLong", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.AbstractInvocationHandler", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Parameter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.reflect.Reflection", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.AbstractPackageSanityTests", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.AbstractPackageSanityTests$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.AbstractPackageSanityTests$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.AbstractPackageSanityTests$Chopper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.AbstractPackageSanityTests$Chopper$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.AbstractPackageSanityTests$Chopper$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$AlwaysEqual", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$ByToString", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$Dummies", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$Dummies$DeterministicRandom", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$Dummies$DummyCountDownLatch", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$Dummies$DummyExecutor", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$Dummies$DummyRunnable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$Dummies$DummyScheduledThreadPoolExecutor", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$Dummies$DummyThreadFactory", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$Dummies$InMemoryPrintStream", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$Dummies$InMemoryPrintWriter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ArbitraryInstances$NullByteSink", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$ParameterHasNoDistinctValueException", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClassSanityTester$SerializableDummyProxy", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ClusterException", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.DummyProxy", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.DummyProxy$DummyHandler", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.EqualsTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.EqualsTester$NotAnInstance", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.EquivalenceTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ForwardingWrapperTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ForwardingWrapperTester$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.ForwardingWrapperTester$InteractionTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$Empty", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$FreshInvocationHandler", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.FreshValueGenerator$Generates", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.GcFinalization", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.GcFinalization$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.GcFinalization$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.GcFinalization$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.GcFinalization$FinalizationPredicate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.NullPointerTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.NullPointerTester$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.NullPointerTester$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.NullPointerTester$ExceptionTypePolicy", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.NullPointerTester$ExceptionTypePolicy$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.NullPointerTester$ExceptionTypePolicy$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.NullPointerTester$Signature", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.NullPointerTester$Visibility", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.NullPointerTester$Visibility$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.NullPointerTester$Visibility$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.NullPointerTester$Visibility$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.Platform", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.RelationshipTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.RelationshipTester$Item", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.RelationshipTester$ItemReporter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.SerializableTester", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.TearDown", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.TearDownAccepter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.testing.TearDownStack", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "junit.framework.AssertionFailedError", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "org.junit.Test", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.util.concurrent.ss", "change": 3, "children": [{"titles": [], "name": "com.google.common.base.Supplier", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ForwardingObject", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.ObjectArrays", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.collect.Queues", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractCatchingFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractCheckedFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractExecutionThreadService", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractExecutionThreadService$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractExecutionThreadService$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractExecutionThreadService$1$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractExecutionThreadService$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractFuture$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractFuture$AtomicHelper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractFuture$Cancellation", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractFuture$Failure", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractFuture$Failure$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractFuture$Listener", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractFuture$SetFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractFuture$TrustedFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractFuture$Waiter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractIdleService", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractIdleService$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractIdleService$DelegateService", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractIdleService$DelegateService$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractIdleService$DelegateService$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$1ThreadFactoryImpl", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$Scheduler", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$Task", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$6", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$HasReachedRunningGuard", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$IsStartableGuard", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$IsStoppableGuard", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$IsStoppedGuard", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractService$StateSnapshot", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractTransformFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AggregateFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AggregateFuture$RunningState", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AggregateFuture$RunningState$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AggregateFutureState", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AggregateFutureState$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AggregateFutureState$AtomicHelper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AsyncCallable", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AsyncFunction", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AtomicLongMap", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.AtomicLongMap$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Callables", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Callables$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Callables$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Callables$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Callables$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CheckedFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CollectionFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CollectionFuture$CollectionFutureRunningState", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CollectionFuture$ListFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CollectionFuture$ListFuture$ListFutureRunningState", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CombinedFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CombinedFuture$CombinedFutureRunningState", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$Policy", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ExecutionError", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ExecutionList", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingCheckedFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingCheckedFuture$SimpleForwardingCheckedFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingExecutorService", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingListeningExecutorService", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FutureCallback", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$FutureCombiner", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$MappingCheckedFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FuturesGetChecked", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FuturesGetChecked$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.GwtFuturesCatchingSpecialization", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ImmediateFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ImmediateFuture$ImmediateCancelledFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedCheckedFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulCheckedFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.InterruptibleTask", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.InterruptibleTask$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.InterruptibleTask$AtomicHelper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.InterruptibleTask$SafeAtomicHelper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.InterruptibleTask$SynchronizedAtomicHelper", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.JdkFutureAdapters", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListenableFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListenerCallQueue", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListenerCallQueue$Callback", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListeningExecutorService", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Monitor", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Monitor$Guard", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$5$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$Application", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$Application$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$DirectExecutor", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$DirectExecutorService", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Partially", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Partially$GwtIncompatible", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Platform", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.RateLimiter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Runnables", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Runnables$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SerializingExecutor", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SerializingExecutor$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SerializingExecutor$QueueWorker", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service$Listener", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service$State", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service$State$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service$State$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service$State$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service$State$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service$State$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Service$State$6", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$EmptyServiceManagerWarning", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$Listener", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$NoOpService", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$ServiceListener", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$AwaitHealthGuard", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$StoppedGuard", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SettableFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SimpleTimeLimiter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SimpleTimeLimiter$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SimpleTimeLimiter$1$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SmoothRateLimiter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SmoothRateLimiter$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$CompactStriped", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$LargeLazyStriped", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$PaddedLock", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$PaddedSemaphore", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$PowerOfTwoStriped", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$SmallLazyStriped", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ThreadFactoryBuilder", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ThreadFactoryBuilder$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.TimeLimiter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.TimeoutFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.TimeoutFuture$Fire", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.TrustedListenableFutureTask", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.UncaughtExceptionHandlers", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.UncaughtExceptionHandlers$Exiter", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.UncheckedExecutionException", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.UncheckedTimeoutException", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.Uninterruptibles", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.WrappingExecutorService", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.WrappingExecutorService$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.WrappingScheduledExecutorService", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.errorprone.annotations.ForOverride", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "istFutureRunningState", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.common.util.concurrent.testing.ss", "change": 0, "children": [{"titles": [], "name": "com.google.common.util.concurrent.AbstractListeningExecutorService", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingListenableFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListenableScheduledFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.ListeningScheduledExecutorService", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractCheckedFutureTest", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractCheckedFutureTest$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractCheckedFutureTest$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractCheckedFutureTest$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest$2", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest$3", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest$4", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest$5", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.AbstractListenableFutureTest$6", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService$ImmediateScheduledFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.TestingExecutors", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.TestingExecutors$1", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}, {"titles": [], "name": "com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService$NeverScheduledFuture", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 0, "size": 1}]}, {"name": "com.google.thirdparty.publicsuffix.ss", "change": 3, "children": [{"titles": [], "name": "com.google.thirdparty.publicsuffix.PublicSuffixPatterns", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.thirdparty.publicsuffix.PublicSuffixType", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}, {"titles": [], "name": "com.google.thirdparty.publicsuffix.TrieParser", "version": "20.0", "bodys": [], "labels": [], "ids": [], "change": 4, "size": 1}]}]}]}