(lp0
(iArchitecture
Architecture
p1
(dp2
S'clusters'
p3
(lp4
(iArchitecture
Cluster
p5
(dp6
S'entities'
p7
(lp8
(iArchitecture
Entity
p9
(dp10
S'issue_ids'
p11
(lp12
V339
p13
aV2410
p14
asS'name'
p15
S'com.google.common.base.CharMatcher'
p16
sS'descs'
p17
(lp18
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p19
aVThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p20
asS'labels'
p21
(lp22
(lp23
I1
aa(lp24
I2
aasS'titles'
p25
(lp26
VConcurrency bug in AbstractMultimap
p27
aVCharMatcher.matchesNoneOf JavaDoc is incorrect
p28
asS'change'
p29
I0
sba(iArchitecture
Entity
p30
(dp31
g11
(lp32
g13
asg15
S'com.google.common.base.Equivalence'
p33
sg17
(lp34
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p35
asg21
(lp36
g23
asg25
(lp37
g27
asg29
I0
sba(iArchitecture
Entity
p38
(dp39
g11
(lp40
sg15
S'com.google.common.base.Functions'
p41
sg17
(lp42
sg21
(lp43
sg25
(lp44
sg29
I0
sba(iArchitecture
Entity
p45
(dp46
g11
(lp47
sg15
S'com.google.common.base.PairwiseEquivalence'
p48
sg17
(lp49
sg21
(lp50
sg25
(lp51
sg29
I0
sba(iArchitecture
Entity
p52
(dp53
g11
(lp54
sg15
S'com.google.common.base.Preconditions'
p55
sg17
(lp56
sg21
(lp57
sg25
(lp58
sg29
I0
sba(iArchitecture
Entity
p59
(dp60
g11
(lp61
V1444
p62
ag62
asg15
S'com.google.common.base.Predicates'
p63
sg17
(lp64
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p65
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p66
asg21
(lp67
(lp68
I1
aag68
asg25
(lp69
VPredicates.assignableFrom is named backward, and its doc is backward, too
p70
ag70
asg29
I0
sba(iArchitecture
Entity
p71
(dp72
g11
(lp73
sg15
S'com.google.common.base.SmallCharMatcher'
p74
sg17
(lp75
sg21
(lp76
sg25
(lp77
sg29
I0
sba(iArchitecture
Entity
p78
(dp79
g11
(lp80
sg15
S'com.google.common.base.Splitter'
p81
sg17
(lp82
sg21
(lp83
sg25
(lp84
sg29
I0
sba(iArchitecture
Entity
p85
(dp86
g11
(lp87
sg15
S'com.google.common.base.Strings'
p88
sg17
(lp89
sg21
(lp90
sg25
(lp91
sg29
I0
sba(iArchitecture
Entity
p92
(dp93
g11
(lp94
V1567
p95
asg15
S'com.google.common.cache.CacheBuilderSpec'
p96
sg17
(lp97
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p98
asg21
(lp99
(lp100
I1
aasg25
(lp101
VRunning tests in a non-US locale might fail
p102
asg29
I0
sba(iArchitecture
Entity
p103
(dp104
g11
(lp105
V2108
p106
aV2101
p107
asg15
S'com.google.common.cache.LocalCache'
p108
sg17
(lp109
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p110
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p111
asg21
(lp112
(lp113
I1
aa(lp114
I1
aasg25
(lp115
VCache.asMap().size() may return a negative value
p116
aVWrong RemovalCause published on cache.invaldateAll()
p117
asg29
I0
sba(iArchitecture
Entity
p118
(dp119
g11
(lp120
sg15
S'com.google.common.cache.LongAdder'
p121
sg17
(lp122
sg21
(lp123
sg25
(lp124
sg29
I0
sba(iArchitecture
Entity
p125
(dp126
g11
(lp127
sg15
S'com.google.common.collect.AbstractIndexedListIterator'
p128
sg17
(lp129
sg21
(lp130
sg25
(lp131
sg29
I0
sba(iArchitecture
Entity
p132
(dp133
g11
(lp134
g13
asg15
S'com.google.common.collect.AbstractMapBasedMultimap'
p135
sg17
(lp136
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p137
asg21
(lp138
g23
asg25
(lp139
g27
asg29
I0
sba(iArchitecture
Entity
p140
(dp141
g11
(lp142
g13
asg15
S'com.google.common.collect.AbstractMapBasedMultiset'
p143
sg17
(lp144
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p145
asg21
(lp146
g23
asg25
(lp147
g27
asg29
I0
sba(iArchitecture
Entity
p148
(dp149
g11
(lp150
sg15
S'com.google.common.collect.AbstractMultimap'
p151
sg17
(lp152
sg21
(lp153
sg25
(lp154
sg29
I0
sba(iArchitecture
Entity
p155
(dp156
g11
(lp157
sg15
S'com.google.common.collect.AbstractMultiset'
p158
sg17
(lp159
sg21
(lp160
sg25
(lp161
sg29
I0
sba(iArchitecture
Entity
p162
(dp163
g11
(lp164
sg15
S'com.google.common.collect.AbstractNavigableMap'
p165
sg17
(lp166
sg21
(lp167
sg25
(lp168
sg29
I0
sba(iArchitecture
Entity
p169
(dp170
g11
(lp171
sg15
S'com.google.common.collect.AbstractRangeSet'
p172
sg17
(lp173
sg21
(lp174
sg25
(lp175
sg29
I0
sba(iArchitecture
Entity
p176
(dp177
g11
(lp178
sg15
S'com.google.common.collect.AbstractTable'
p179
sg17
(lp180
sg21
(lp181
sg25
(lp182
sg29
I0
sba(iArchitecture
Entity
p183
(dp184
g11
(lp185
sg15
S'com.google.common.collect.CartesianList'
p186
sg17
(lp187
sg21
(lp188
sg25
(lp189
sg29
I0
sba(iArchitecture
Entity
p190
(dp191
g11
(lp192
sg15
S'com.google.common.collect.Collections2'
p193
sg17
(lp194
sg21
(lp195
sg25
(lp196
sg29
I0
sba(iArchitecture
Entity
p197
(dp198
g11
(lp199
sg15
S'com.google.common.collect.ComparisonChain'
p200
sg17
(lp201
sg21
(lp202
sg25
(lp203
sg29
I0
sba(iArchitecture
Entity
p204
(dp205
g11
(lp206
sg15
S'com.google.common.collect.CompoundOrdering'
p207
sg17
(lp208
sg21
(lp209
sg25
(lp210
sg29
I0
sba(iArchitecture
Entity
p211
(dp212
g11
(lp213
g13
asg15
S'com.google.common.collect.ComputingConcurrentHashMap'
p214
sg17
(lp215
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p216
asg21
(lp217
g23
asg25
(lp218
g27
asg29
I0
sba(iArchitecture
Entity
p219
(dp220
g11
(lp221
sg15
S'com.google.common.collect.ConcurrentHashMultiset'
p222
sg17
(lp223
sg21
(lp224
sg25
(lp225
sg29
I0
sba(iArchitecture
Entity
p226
(dp227
g11
(lp228
V2196
p229
asg15
S'com.google.common.collect.ContiguousSet'
p230
sg17
(lp231
VLet a < x < b:\u000a- [x].intersection([x]) should return [x], returns [],\u000a- [x].intersection([a..b]) should return [x], returns [],\u000a- [a..b].intersection([x]) should return [x], returns [],\u000a- [a..x].intersection([x..b]) should return [x], returns [].\u000a\u000aI'll create a PR in a minute.\u000a
p232
asg21
(lp233
(lp234
I1
aasg25
(lp235
VContiguousSet.intersection doesn't handle singleton results.
p236
asg29
I0
sba(iArchitecture
Entity
p237
(dp238
g11
(lp239
sg15
S'com.google.common.collect.Count'
p240
sg17
(lp241
sg21
(lp242
sg25
(lp243
sg29
I0
sba(iArchitecture
Entity
p244
(dp245
g11
(lp246
sg15
S'com.google.common.collect.DenseImmutableTable'
p247
sg17
(lp248
sg21
(lp249
sg25
(lp250
sg29
I0
sba(iArchitecture
Entity
p251
(dp252
g11
(lp253
sg15
S'com.google.common.collect.DescendingImmutableSortedMultiset'
p254
sg17
(lp255
sg21
(lp256
sg25
(lp257
sg29
I0
sba(iArchitecture
Entity
p258
(dp259
g11
(lp260
sg15
S'com.google.common.collect.DescendingImmutableSortedSet'
p261
sg17
(lp262
sg21
(lp263
sg25
(lp264
sg29
I0
sba(iArchitecture
Entity
p265
(dp266
g11
(lp267
sg15
S'com.google.common.collect.DescendingMultiset'
p268
sg17
(lp269
sg21
(lp270
sg25
(lp271
sg29
I0
sba(iArchitecture
Entity
p272
(dp273
g11
(lp274
sg15
S'com.google.common.collect.EmptyContiguousSet'
p275
sg17
(lp276
sg21
(lp277
sg25
(lp278
sg29
I0
sba(iArchitecture
Entity
p279
(dp280
g11
(lp281
sg15
S'com.google.common.collect.EmptyImmutableBiMap'
p282
sg17
(lp283
sg21
(lp284
sg25
(lp285
sg29
I0
sba(iArchitecture
Entity
p286
(dp287
g11
(lp288
g13
asg15
S'com.google.common.collect.EmptyImmutableSet'
p289
sg17
(lp290
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p291
asg21
(lp292
g23
asg25
(lp293
g27
asg29
I0
sba(iArchitecture
Entity
p294
(dp295
g11
(lp296
sg15
S'com.google.common.collect.EmptyImmutableSortedMap'
p297
sg17
(lp298
sg21
(lp299
sg25
(lp300
sg29
I0
sba(iArchitecture
Entity
p301
(dp302
g11
(lp303
sg15
S'com.google.common.collect.EmptyImmutableSortedMultiset'
p304
sg17
(lp305
sg21
(lp306
sg25
(lp307
sg29
I0
sba(iArchitecture
Entity
p308
(dp309
g11
(lp310
sg15
S'com.google.common.collect.EmptyImmutableSortedSet'
p311
sg17
(lp312
sg21
(lp313
sg25
(lp314
sg29
I0
sba(iArchitecture
Entity
p315
(dp316
g11
(lp317
sg15
S'com.google.common.collect.ExplicitOrdering'
p318
sg17
(lp319
sg21
(lp320
sg25
(lp321
sg29
I0
sba(iArchitecture
Entity
p322
(dp323
g11
(lp324
sg15
S'com.google.common.collect.FilteredEntryMultimap'
p325
sg17
(lp326
sg21
(lp327
sg25
(lp328
sg29
I0
sba(iArchitecture
Entity
p329
(dp330
g11
(lp331
V1963
p332
ag332
asg15
S'com.google.common.collect.FluentIterable'
p333
sg17
(lp334
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p335
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p336
asg21
(lp337
(lp338
I0
aag338
asg25
(lp339
VDe-@Beta Maps.asMap and toMap
p340
ag340
asg29
I0
sba(iArchitecture
Entity
p341
(dp342
g11
(lp343
sg15
S'com.google.common.collect.ForwardingBlockingDeque'
p344
sg17
(lp345
sg21
(lp346
sg25
(lp347
sg29
I0
sba(iArchitecture
Entity
p348
(dp349
g11
(lp350
sg15
S'com.google.common.collect.ForwardingDeque'
p351
sg17
(lp352
sg21
(lp353
sg25
(lp354
sg29
I0
sba(iArchitecture
Entity
p355
(dp356
g11
(lp357
sg15
S'com.google.common.collect.ForwardingList'
p358
sg17
(lp359
sg21
(lp360
sg25
(lp361
sg29
I0
sba(iArchitecture
Entity
p362
(dp363
g11
(lp364
sg15
S'com.google.common.collect.ForwardingMultimap'
p365
sg17
(lp366
sg21
(lp367
sg25
(lp368
sg29
I0
sba(iArchitecture
Entity
p369
(dp370
g11
(lp371
sg15
S'com.google.common.collect.ForwardingTable'
p372
sg17
(lp373
sg21
(lp374
sg25
(lp375
sg29
I0
sba(iArchitecture
Entity
p376
(dp377
g11
(lp378
sg15
S'com.google.common.collect.GeneralRange'
p379
sg17
(lp380
sg21
(lp381
sg25
(lp382
sg29
I0
sba(iArchitecture
Entity
p383
(dp384
g11
(lp385
sg15
S'com.google.common.collect.HashBiMap'
p386
sg17
(lp387
sg21
(lp388
sg25
(lp389
sg29
I0
sba(iArchitecture
Entity
p390
(dp391
g11
(lp392
sg15
S'com.google.common.collect.Hashing'
p393
sg17
(lp394
sg21
(lp395
sg25
(lp396
sg29
I0
sba(iArchitecture
Entity
p397
(dp398
g11
(lp399
sg15
S'com.google.common.collect.ImmutableCollection'
p400
sg17
(lp401
sg21
(lp402
sg25
(lp403
sg29
I0
sba(iArchitecture
Entity
p404
(dp405
g11
(lp406
g13
aV1977
p407
asg15
S'com.google.common.collect.ImmutableList'
p408
sg17
(lp409
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p410
aVImmutableList contains following code since version 15.0\u000a\u000a private static final ImmutableList<Object> EMPTY =\u000a      new RegularImmutableList<Object>(ObjectArrays.EMPTY_ARRAY);\u000a
p411
asg21
(lp412
g23
a(lp413
I1
aasg25
(lp414
g27
aVPossible deadlock in ImmutableList 
p415
asg29
I0
sba(iArchitecture
Entity
p416
(dp417
g11
(lp418
sg15
S'com.google.common.collect.ImmutableMultimap'
p419
sg17
(lp420
sg21
(lp421
sg25
(lp422
sg29
I0
sba(iArchitecture
Entity
p423
(dp424
g11
(lp425
sg15
S'com.google.common.collect.ImmutableMultiset'
p426
sg17
(lp427
sg21
(lp428
sg25
(lp429
sg29
I0
sba(iArchitecture
Entity
p430
(dp431
g11
(lp432
V2258
p433
asg15
S'com.google.common.collect.ImmutableRangeMap'
p434
sg17
(lp435
VMutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\u000a
p436
asg21
(lp437
(lp438
I2
aasg25
(lp439
VMutable operations on ImmutableRangeSet should be deprecated
p440
asg29
I0
sba(iArchitecture
Entity
p441
(dp442
g11
(lp443
g433
asg15
S'com.google.common.collect.ImmutableRangeSet'
p444
sg17
(lp445
VMutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\u000a
p446
asg21
(lp447
g438
asg25
(lp448
g440
asg29
I0
sba(iArchitecture
Entity
p449
(dp450
g11
(lp451
sg15
S'com.google.common.collect.ImmutableSet'
p452
sg17
(lp453
sg21
(lp454
sg25
(lp455
sg29
I0
sba(iArchitecture
Entity
p456
(dp457
g11
(lp458
sg15
S'com.google.common.collect.ImmutableSortedMultiset'
p459
sg17
(lp460
sg21
(lp461
sg25
(lp462
sg29
I0
sba(iArchitecture
Entity
p463
(dp464
g11
(lp465
g13
asg15
S'com.google.common.collect.ImmutableSortedSet'
p466
sg17
(lp467
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p468
asg21
(lp469
g23
asg25
(lp470
g27
asg29
I0
sba(iArchitecture
Entity
p471
(dp472
g11
(lp473
V1596
p474
ag474
ag474
aV2008
p475
ag475
aV1543
p476
ag476
aV1558
p477
ag477
asg15
S'com.google.common.collect.Iterables'
p478
sg17
(lp479
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p480
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p481
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p482
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p483
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p484
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p485
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p486
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p487
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p488
asg21
(lp489
(lp490
I1
aag490
ag490
a(lp491
I1
aag491
a(lp492
I2
aag492
a(lp493
I1
aag493
asg25
(lp494
VIterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates
p495
ag495
ag495
aVIterators.concat is not gc friendly
p496
ag496
aVIterables.removeIf wrong items removed when ArrayList is used
p497
ag497
aVIterables.toArray broken in case of concurrent modifications
p498
ag498
asg29
I0
sba(iArchitecture
Entity
p499
(dp500
g11
(lp501
g475
ag475
asg15
S'com.google.common.collect.Iterators'
p502
sg17
(lp503
VI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p504
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p505
asg21
(lp506
g491
ag491
asg25
(lp507
g496
ag496
asg29
I0
sba(iArchitecture
Entity
p508
(dp509
g11
(lp510
sg15
S'com.google.common.collect.LexicographicalOrdering'
p511
sg17
(lp512
sg21
(lp513
sg25
(lp514
sg29
I0
sba(iArchitecture
Entity
p515
(dp516
g11
(lp517
sg15
S'com.google.common.collect.LinkedListMultimap'
p518
sg17
(lp519
sg21
(lp520
sg25
(lp521
sg29
I0
sba(iArchitecture
Entity
p522
(dp523
g11
(lp524
sg15
S'com.google.common.collect.Lists'
p525
sg17
(lp526
sg21
(lp527
sg25
(lp528
sg29
I0
sba(iArchitecture
Entity
p529
(dp530
g11
(lp531
sg15
S'com.google.common.collect.MapMakerInternalMap'
p532
sg17
(lp533
sg21
(lp534
sg25
(lp535
sg29
I0
sba(iArchitecture
Entity
p536
(dp537
g11
(lp538
g13
asg15
S'com.google.common.collect.MinMaxPriorityQueue'
p539
sg17
(lp540
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p541
asg21
(lp542
g23
asg25
(lp543
g27
asg29
I0
sba(iArchitecture
Entity
p544
(dp545
g11
(lp546
sg15
S'com.google.common.collect.Multisets'
p547
sg17
(lp548
sg21
(lp549
sg25
(lp550
sg29
I0
sba(iArchitecture
Entity
p551
(dp552
g11
(lp553
sg15
S'com.google.common.collect.NullsFirstOrdering'
p554
sg17
(lp555
sg21
(lp556
sg25
(lp557
sg29
I0
sba(iArchitecture
Entity
p558
(dp559
g11
(lp560
sg15
S'com.google.common.collect.NullsLastOrdering'
p561
sg17
(lp562
sg21
(lp563
sg25
(lp564
sg29
I0
sba(iArchitecture
Entity
p565
(dp566
g11
(lp567
sg15
S'com.google.common.collect.ObjectArrays'
p568
sg17
(lp569
sg21
(lp570
sg25
(lp571
sg29
I0
sba(iArchitecture
Entity
p572
(dp573
g11
(lp574
V2525
p575
aV1342
p576
ag576
ag576
asg15
S'com.google.common.collect.Ordering'
p577
sg17
(lp578
VThe [snapshot Javadoc of Ordering#explicit(java.util.List)](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/Ordering.html#explicit%28java.util.List%29)  contains the sentnece:\u000a\u000a> The returned comparator throws **an ClassCastException** when it receives an input parameter that isn't among the provided values.\u000a\u000ainstead of\u000a\u000a> The returned comparator throws **a ClassCastException** when it receives an input parameter that isn't among the provided values.\u000a
p579
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\u000a\u000a---\u000a\u000aIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\u000a\u000aWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\u000a
p580
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\u000a\u000a---\u000a\u000aIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\u000a\u000aWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\u000a
p581
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\u000a\u000a---\u000a\u000aIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\u000a\u000aWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\u000a
p582
asg21
(lp583
(lp584
I2
aa(lp585
I2
aag585
ag585
asg25
(lp586
VTypo in the javadoc of Ordering's explicit(List<T>) method
p587
aVAdd docs to Ordering to give guidance how to parse and understand long chains of calls
p588
ag588
ag588
asg29
I0
sba(iArchitecture
Entity
p589
(dp590
g11
(lp591
V2376
p592
ag592
ag592
ag592
asg15
S'com.google.common.collect.Range'
p593
sg17
(lp594
V`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p595
aV`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p596
aV`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p597
aV`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p598
asg21
(lp599
(lp600
I1
aag600
ag600
ag600
asg25
(lp601
VConsider replacing unicode character in Range.toString()
p602
ag602
ag602
ag602
asg29
I0
sba(iArchitecture
Entity
p603
(dp604
g11
(lp605
g229
asg15
S'com.google.common.collect.RegularContiguousSet'
p606
sg17
(lp607
VLet a < x < b:\u000a- [x].intersection([x]) should return [x], returns [],\u000a- [x].intersection([a..b]) should return [x], returns [],\u000a- [a..b].intersection([x]) should return [x], returns [],\u000a- [a..x].intersection([x..b]) should return [x], returns [].\u000a\u000aI'll create a PR in a minute.\u000a
p608
asg21
(lp609
g234
asg25
(lp610
g236
asg29
I0
sba(iArchitecture
Entity
p611
(dp612
g11
(lp613
sg15
S'com.google.common.collect.RegularImmutableBiMap'
p614
sg17
(lp615
sg21
(lp616
sg25
(lp617
sg29
I0
sba(iArchitecture
Entity
p618
(dp619
g11
(lp620
g407
asg15
S'com.google.common.collect.RegularImmutableList'
p621
sg17
(lp622
VImmutableList contains following code since version 15.0\u000a\u000a private static final ImmutableList<Object> EMPTY =\u000a      new RegularImmutableList<Object>(ObjectArrays.EMPTY_ARRAY);\u000a
p623
asg21
(lp624
g413
asg25
(lp625
g415
asg29
I0
sba(iArchitecture
Entity
p626
(dp627
g11
(lp628
sg15
S'com.google.common.collect.RegularImmutableMultiset'
p629
sg17
(lp630
sg21
(lp631
sg25
(lp632
sg29
I0
sba(iArchitecture
Entity
p633
(dp634
g11
(lp635
sg15
S'com.google.common.collect.RegularImmutableSet'
p636
sg17
(lp637
sg21
(lp638
sg25
(lp639
sg29
I0
sba(iArchitecture
Entity
p640
(dp641
g11
(lp642
sg15
S'com.google.common.collect.RegularImmutableSortedMap'
p643
sg17
(lp644
sg21
(lp645
sg25
(lp646
sg29
I0
sba(iArchitecture
Entity
p647
(dp648
g11
(lp649
sg15
S'com.google.common.collect.RegularImmutableSortedMultiset'
p650
sg17
(lp651
sg21
(lp652
sg25
(lp653
sg29
I0
sba(iArchitecture
Entity
p654
(dp655
g11
(lp656
sg15
S'com.google.common.collect.RegularImmutableSortedSet'
p657
sg17
(lp658
sg21
(lp659
sg25
(lp660
sg29
I0
sba(iArchitecture
Entity
p661
(dp662
g11
(lp663
sg15
S'com.google.common.collect.RegularImmutableTable'
p664
sg17
(lp665
sg21
(lp666
sg25
(lp667
sg29
I0
sba(iArchitecture
Entity
p668
(dp669
g11
(lp670
sg15
S'com.google.common.collect.ReverseOrdering'
p671
sg17
(lp672
sg21
(lp673
sg25
(lp674
sg29
I0
sba(iArchitecture
Entity
p675
(dp676
g11
(lp677
sg15
S'com.google.common.collect.SingletonImmutableList'
p678
sg17
(lp679
sg21
(lp680
sg25
(lp681
sg29
I0
sba(iArchitecture
Entity
p682
(dp683
g11
(lp684
sg15
S'com.google.common.collect.SingletonImmutableSet'
p685
sg17
(lp686
sg21
(lp687
sg25
(lp688
sg29
I0
sba(iArchitecture
Entity
p689
(dp690
g11
(lp691
sg15
S'com.google.common.collect.StandardTable'
p692
sg17
(lp693
sg21
(lp694
sg25
(lp695
sg29
I0
sba(iArchitecture
Entity
p696
(dp697
g11
(lp698
sg15
S'com.google.common.collect.Synchronized'
p699
sg17
(lp700
sg21
(lp701
sg25
(lp702
sg29
I0
sba(iArchitecture
Entity
p703
(dp704
g11
(lp705
sg15
S'com.google.common.collect.TransformedListIterator'
p706
sg17
(lp707
sg21
(lp708
sg25
(lp709
sg29
I0
sba(iArchitecture
Entity
p710
(dp711
g11
(lp712
sg15
S'com.google.common.collect.TreeMultiset'
p713
sg17
(lp714
sg21
(lp715
sg25
(lp716
sg29
I0
sba(iArchitecture
Entity
p717
(dp718
g11
(lp719
g13
asg15
S'com.google.common.collect.TreeRangeMap'
p720
sg17
(lp721
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p722
asg21
(lp723
g23
asg25
(lp724
g27
asg29
I0
sba(iArchitecture
Entity
p725
(dp726
g11
(lp727
sg15
S'com.google.common.collect.TreeRangeSet'
p728
sg17
(lp729
sg21
(lp730
sg25
(lp731
sg29
I0
sba(iArchitecture
Entity
p732
(dp733
g11
(lp734
sg15
S'com.google.common.escape.CharEscaper'
p735
sg17
(lp736
sg21
(lp737
sg25
(lp738
sg29
I0
sba(iArchitecture
Entity
p739
(dp740
g11
(lp741
sg15
S'com.google.common.escape.CharEscaperBuilder'
p742
sg17
(lp743
sg21
(lp744
sg25
(lp745
sg29
I0
sba(iArchitecture
Entity
p746
(dp747
g11
(lp748
g13
asg15
S'com.google.common.escape.UnicodeEscaper'
p749
sg17
(lp750
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p751
asg21
(lp752
g23
asg25
(lp753
g27
asg29
I0
sba(iArchitecture
Entity
p754
(dp755
g11
(lp756
sg15
S'com.google.common.eventbus.EventSubscriber'
p757
sg17
(lp758
sg21
(lp759
sg25
(lp760
sg29
I0
sba(iArchitecture
Entity
p761
(dp762
g11
(lp763
sg15
S'com.google.common.hash.AbstractCompositeHashFunction'
p764
sg17
(lp765
sg21
(lp766
sg25
(lp767
sg29
I0
sba(iArchitecture
Entity
p768
(dp769
g11
(lp770
sg15
S'com.google.common.hash.BloomFilterStrategies'
p771
sg17
(lp772
sg21
(lp773
sg25
(lp774
sg29
I0
sba(iArchitecture
Entity
p775
(dp776
g11
(lp777
sg15
S'com.google.common.hash.ChecksumHashFunction'
p778
sg17
(lp779
sg21
(lp780
sg25
(lp781
sg29
I0
sba(iArchitecture
Entity
p782
(dp783
g11
(lp784
sg15
S'com.google.common.hash.Crc32cHashFunction'
p785
sg17
(lp786
sg21
(lp787
sg25
(lp788
sg29
I0
sba(iArchitecture
Entity
p789
(dp790
g11
(lp791
sg15
S'com.google.common.hash.HashCode'
p792
sg17
(lp793
sg21
(lp794
sg25
(lp795
sg29
I0
sba(iArchitecture
Entity
p796
(dp797
g11
(lp798
g95
asg15
S'com.google.common.hash.Hashing'
p799
sg17
(lp800
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p801
asg21
(lp802
g100
asg25
(lp803
g102
asg29
I0
sba(iArchitecture
Entity
p804
(dp805
g11
(lp806
sg15
S'com.google.common.hash.Murmur3_128HashFunction'
p807
sg17
(lp808
sg21
(lp809
sg25
(lp810
sg29
I0
sba(iArchitecture
Entity
p811
(dp812
g11
(lp813
sg15
S'com.google.common.hash.Murmur3_32HashFunction'
p814
sg17
(lp815
sg21
(lp816
sg25
(lp817
sg29
I0
sba(iArchitecture
Entity
p818
(dp819
g11
(lp820
sg15
S'com.google.common.hash.SipHashFunction'
p821
sg17
(lp822
sg21
(lp823
sg25
(lp824
sg29
I0
sba(iArchitecture
Entity
p825
(dp826
g11
(lp827
sg15
S'com.google.common.io.ByteArrayDataOutput'
p828
sg17
(lp829
sg21
(lp830
sg25
(lp831
sg29
I0
sba(iArchitecture
Entity
p832
(dp833
g11
(lp834
sg15
S'com.google.common.io.CharSequenceReader'
p835
sg17
(lp836
sg21
(lp837
sg25
(lp838
sg29
I0
sba(iArchitecture
Entity
p839
(dp840
g11
(lp841
sg15
S'com.google.common.io.MultiReader'
p842
sg17
(lp843
sg21
(lp844
sg25
(lp845
sg29
I0
sba(iArchitecture
Entity
p846
(dp847
g11
(lp848
sg15
S'com.google.common.math.BigIntegerMath'
p849
sg17
(lp850
sg21
(lp851
sg25
(lp852
sg29
I0
sba(iArchitecture
Entity
p853
(dp854
g11
(lp855
sg15
S'com.google.common.math.DoubleMath'
p856
sg17
(lp857
sg21
(lp858
sg25
(lp859
sg29
I0
sba(iArchitecture
Entity
p860
(dp861
g11
(lp862
sg15
S'com.google.common.math.IntMath'
p863
sg17
(lp864
sg21
(lp865
sg25
(lp866
sg29
I0
sba(iArchitecture
Entity
p867
(dp868
g11
(lp869
sg15
S'com.google.common.net.PercentEscaper'
p870
sg17
(lp871
sg21
(lp872
sg25
(lp873
sg29
I0
sba(iArchitecture
Entity
p874
(dp875
g11
(lp876
V1942
p877
asg15
S'com.google.common.primitives.Booleans'
p878
sg17
(lp879
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p880
asg21
(lp881
(lp882
I6
aasg25
(lp883
VLine comment on requiring Java 6
p884
asg29
I0
sba(iArchitecture
Entity
p885
(dp886
g11
(lp887
g877
asg15
S'com.google.common.primitives.Bytes'
p888
sg17
(lp889
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p890
asg21
(lp891
g882
asg25
(lp892
g884
asg29
I0
sba(iArchitecture
Entity
p893
(dp894
g11
(lp895
g877
ag95
asg15
S'com.google.common.primitives.Chars'
p896
sg17
(lp897
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p898
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p899
asg21
(lp900
g882
ag100
asg25
(lp901
g884
ag102
asg29
I0
sba(iArchitecture
Entity
p902
(dp903
g11
(lp904
g13
ag13
ag877
asg15
S'com.google.common.primitives.Doubles'
p905
sg17
(lp906
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p907
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p908
aVPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p909
asg21
(lp910
g23
ag23
ag882
asg25
(lp911
g27
ag27
ag884
asg29
I0
sba(iArchitecture
Entity
p912
(dp913
g11
(lp914
g13
ag13
ag877
asg15
S'com.google.common.primitives.Floats'
p915
sg17
(lp916
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p917
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p918
aVPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p919
asg21
(lp920
g23
ag23
ag882
asg25
(lp921
g27
ag27
ag884
asg29
I0
sba(iArchitecture
Entity
p922
(dp923
g11
(lp924
g13
ag13
ag877
asg15
S'com.google.common.primitives.Ints'
p925
sg17
(lp926
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p927
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p928
aVPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p929
asg21
(lp930
g23
ag23
ag882
asg25
(lp931
g27
ag27
ag884
asg29
I0
sba(iArchitecture
Entity
p932
(dp933
g11
(lp934
g13
ag877
asg15
S'com.google.common.primitives.Longs'
p935
sg17
(lp936
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p937
aVPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p938
asg21
(lp939
g23
ag882
asg25
(lp940
g27
ag884
asg29
I0
sba(iArchitecture
Entity
p941
(dp942
g11
(lp943
g13
ag13
ag877
asg15
S'com.google.common.primitives.Shorts'
p944
sg17
(lp945
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p946
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p947
aVPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p948
asg21
(lp949
g23
ag23
ag882
asg25
(lp950
g27
ag27
ag884
asg29
I0
sba(iArchitecture
Entity
p951
(dp952
g11
(lp953
sg15
S'com.google.common.primitives.SignedBytes'
p954
sg17
(lp955
sg21
(lp956
sg25
(lp957
sg29
I0
sba(iArchitecture
Entity
p958
(dp959
g11
(lp960
sg15
S'com.google.common.primitives.UnsignedBytes'
p961
sg17
(lp962
sg21
(lp963
sg25
(lp964
sg29
I0
sba(iArchitecture
Entity
p965
(dp966
g11
(lp967
sg15
S'com.google.common.primitives.UnsignedInteger'
p968
sg17
(lp969
sg21
(lp970
sg25
(lp971
sg29
I0
sba(iArchitecture
Entity
p972
(dp973
g11
(lp974
sg15
S'com.google.common.primitives.UnsignedInts'
p975
sg17
(lp976
sg21
(lp977
sg25
(lp978
sg29
I0
sba(iArchitecture
Entity
p979
(dp980
g11
(lp981
sg15
S'com.google.common.primitives.UnsignedLong'
p982
sg17
(lp983
sg21
(lp984
sg25
(lp985
sg29
I0
sba(iArchitecture
Entity
p986
(dp987
g11
(lp988
sg15
S'com.google.common.primitives.UnsignedLongs'
p989
sg17
(lp990
sg21
(lp991
sg25
(lp992
sg29
I0
sba(iArchitecture
Entity
p993
(dp994
g11
(lp995
g13
asg15
S'com.google.common.reflect.Element'
p996
sg17
(lp997
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p998
asg21
(lp999
g23
asg25
(lp1000
g27
asg29
I0
sba(iArchitecture
Entity
p1001
(dp1002
g11
(lp1003
g13
asg15
S'com.google.common.reflect.Invokable'
p1004
sg17
(lp1005
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p1006
asg21
(lp1007
g23
asg25
(lp1008
g27
asg29
I0
sba(iArchitecture
Entity
p1009
(dp1010
g11
(lp1011
g13
asg15
S'com.google.common.reflect.Parameter'
p1012
sg17
(lp1013
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p1014
asg21
(lp1015
g23
asg25
(lp1016
g27
asg29
I0
sba(iArchitecture
Entity
p1017
(dp1018
g11
(lp1019
sg15
S'com.google.common.util.concurrent.AbstractIdleService'
p1020
sg17
(lp1021
sg21
(lp1022
sg25
(lp1023
sg29
I0
sba(iArchitecture
Entity
p1024
(dp1025
g11
(lp1026
sg15
S'com.google.common.util.concurrent.AtomicDouble'
p1027
sg17
(lp1028
sg21
(lp1029
sg25
(lp1030
sg29
I0
sba(iArchitecture
Entity
p1031
(dp1032
g11
(lp1033
sg15
S'com.google.common.util.concurrent.AtomicDoubleArray'
p1034
sg17
(lp1035
sg21
(lp1036
sg25
(lp1037
sg29
I0
sba(iArchitecture
Entity
p1038
(dp1039
g11
(lp1040
g13
asg15
S'com.google.common.util.concurrent.Monitor'
p1041
sg17
(lp1042
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p1043
asg21
(lp1044
g23
asg25
(lp1045
g27
asg29
I0
sba(iArchitecture
Entity
p1046
(dp1047
g11
(lp1048
sg15
S'com.google.common.util.concurrent.Striped'
p1049
sg17
(lp1050
sg21
(lp1051
sg25
(lp1052
sg29
I0
sbasS'classes'
p1053
(lp1054
g16
ag33
ag41
ag48
ag55
ag63
ag74
ag81
ag88
ag96
ag108
ag121
ag128
ag135
ag143
ag151
ag158
ag165
ag172
ag179
ag186
ag193
ag200
ag207
ag214
ag222
ag230
ag240
ag247
ag254
ag261
ag268
ag275
ag282
ag289
ag297
ag304
ag311
ag318
ag325
ag333
ag344
ag351
ag358
ag365
ag372
ag379
ag386
ag393
ag400
ag408
ag419
ag426
ag434
ag444
ag452
ag459
ag466
ag478
ag502
ag511
ag518
ag525
ag532
ag539
ag547
ag554
ag561
ag568
ag577
ag593
ag606
ag614
ag621
ag629
ag636
ag643
ag650
ag657
ag664
ag671
ag678
ag685
ag692
ag699
ag706
ag713
ag720
ag728
ag735
ag742
ag749
ag757
ag764
ag771
ag778
ag785
ag792
ag799
ag807
ag814
ag821
ag828
ag835
ag842
ag849
ag856
ag863
ag870
ag878
ag888
ag896
ag905
ag915
ag925
ag935
ag944
ag954
ag961
ag968
ag975
ag982
ag989
ag996
ag1004
ag1012
ag1020
ag1027
ag1034
ag1041
ag1049
asg29
I0
sS'label'
p1055
S'graphics'
p1056
sba(iArchitecture
Cluster
p1057
(dp1058
g7
(lp1059
(iArchitecture
Entity
p1060
(dp1061
g11
(lp1062
sg15
S'com.google.common.base.Ascii'
p1063
sg17
(lp1064
sg21
(lp1065
sg25
(lp1066
sg29
I0
sba(iArchitecture
Entity
p1067
(dp1068
g11
(lp1069
sg15
S'com.google.common.base.CaseFormat'
p1070
sg17
(lp1071
sg21
(lp1072
sg25
(lp1073
sg29
I0
sba(iArchitecture
Entity
p1074
(dp1075
g11
(lp1076
sg15
S'com.google.common.base.Charsets'
p1077
sg17
(lp1078
sg21
(lp1079
sg25
(lp1080
sg29
I0
sba(iArchitecture
Entity
p1081
(dp1082
g11
(lp1083
sg15
S'com.google.common.base.FunctionalEquivalence'
p1084
sg17
(lp1085
sg21
(lp1086
sg25
(lp1087
sg29
I0
sba(iArchitecture
Entity
p1088
(dp1089
g11
(lp1090
V1125
p1091
asg15
S'com.google.common.base.MoreObjects'
p1092
sg17
(lp1093
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1125) created by **adrianshum** on 2012-08-29 at 03:06 AM_\u000a\u000a---\u000a\u000aCurrently there is no handling for arrays in helpers in Objects, e.g. toStringHelper and Object.equal.\u000a\u000aThat means, I cannot do\u000aObjects.toStringHelper(getClass())\u000a&nbsp;&nbsp;&nbsp;&nbsp;.add("foo", this.foo)\u000a&nbsp;&nbsp;&nbsp;&nbsp;.add("anArray", this.anArray)\u000a&nbsp;&nbsp;&nbsp;&nbsp;.toString();\u000a\u000a(I know I can change it to add("anArray", Arrays.toString(this.anArray)) but it looks bad)\u000a\u000aSame for Objects.equal, when I am overriding equals(), I cannot do:\u000areturn Objects.equal("foo", other.foo) \u000a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&& Objects.equals("anArray", other.anArray);\u000a\u000aI believe adding corresponding overloads should not be difficult, and it makes the API much easier to use.\u000a
p1094
asg21
(lp1095
(lp1096
I0
aasg25
(lp1097
VArray handling in Objects#toStringHelper
p1098
asg29
I0
sba(iArchitecture
Entity
p1099
(dp1100
g11
(lp1101
sg15
S'com.google.common.base.Objects'
p1102
sg17
(lp1103
sg21
(lp1104
sg25
(lp1105
sg29
I0
sba(iArchitecture
Entity
p1106
(dp1107
g11
(lp1108
sg15
S'com.google.common.base.Utf8'
p1109
sg17
(lp1110
sg21
(lp1111
sg25
(lp1112
sg29
I0
sba(iArchitecture
Entity
p1113
(dp1114
g11
(lp1115
g13
asg15
S'com.google.common.collect.AllEqualOrdering'
p1116
sg17
(lp1117
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p1118
asg21
(lp1119
g23
asg25
(lp1120
g27
asg29
I0
sba(iArchitecture
Entity
p1121
(dp1122
g11
(lp1123
sg15
S'com.google.common.collect.ArrayListMultimap'
p1124
sg17
(lp1125
sg21
(lp1126
sg25
(lp1127
sg29
I0
sba(iArchitecture
Entity
p1128
(dp1129
g11
(lp1130
sg15
S'com.google.common.collect.ByFunctionOrdering'
p1131
sg17
(lp1132
sg21
(lp1133
sg25
(lp1134
sg29
I0
sba(iArchitecture
Entity
p1135
(dp1136
g11
(lp1137
sg15
S'com.google.common.collect.ComparatorOrdering'
p1138
sg17
(lp1139
sg21
(lp1140
sg25
(lp1141
sg29
I0
sba(iArchitecture
Entity
p1142
(dp1143
g11
(lp1144
sg15
S'com.google.common.collect.HashMultimap'
p1145
sg17
(lp1146
sg21
(lp1147
sg25
(lp1148
sg29
I0
sba(iArchitecture
Entity
p1149
(dp1150
g11
(lp1151
sg15
S'com.google.common.collect.HashMultiset'
p1152
sg17
(lp1153
sg21
(lp1154
sg25
(lp1155
sg29
I0
sba(iArchitecture
Entity
p1156
(dp1157
g11
(lp1158
g13
asg15
S'com.google.common.collect.ImmutableAsList'
p1159
sg17
(lp1160
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p1161
asg21
(lp1162
g23
asg25
(lp1163
g27
asg29
I0
sba(iArchitecture
Entity
p1164
(dp1165
g11
(lp1166
sg15
S'com.google.common.collect.ImmutableEntry'
p1167
sg17
(lp1168
sg21
(lp1169
sg25
(lp1170
sg29
I0
sba(iArchitecture
Entity
p1171
(dp1172
g11
(lp1173
sg15
S'com.google.common.collect.ImmutableListMultimap'
p1174
sg17
(lp1175
sg21
(lp1176
sg25
(lp1177
sg29
I0
sba(iArchitecture
Entity
p1178
(dp1179
g11
(lp1180
sg15
S'com.google.common.collect.LinkedHashMultiset'
p1181
sg17
(lp1182
sg21
(lp1183
sg25
(lp1184
sg29
I0
sba(iArchitecture
Entity
p1185
(dp1186
g11
(lp1187
g13
aV1451
p1188
asg15
S'com.google.common.collect.NaturalOrdering'
p1189
sg17
(lp1190
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p1191
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1451) created by **drothmaler** on 2013-06-18 at 01:46 PM_\u000a\u000a---\u000a\u000aI think it would be good to extend the NaturalOrdering and ReverseNaturalOrdering implementations, to hold instances of their nullsFirst() and nullsLast() versions too.\u000aThis is because things like Ordering.natural().nullsFirst() are frequently used and currently there will be created a NullsFirstOrdering/NullsLastOrdering instance each time, you access it. \u000a\u000aIn many cases this will not be a problem, but if you use it inside a compareTo or compare method (e.g. in combination with the ComparisonChain as suggested in Issue 500 & Issue 556), it really makes a difference whether you use a share instance, or not.\u000a
p1192
asg21
(lp1193
g23
a(lp1194
I3
aasg25
(lp1195
g27
aVUse Singleton instances for nullable natural Orderings
p1196
asg29
I0
sba(iArchitecture
Entity
p1197
(dp1198
g11
(lp1199
g13
asg15
S'com.google.common.collect.ReverseNaturalOrdering'
p1200
sg17
(lp1201
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p1202
asg21
(lp1203
g23
asg25
(lp1204
g27
asg29
I0
sba(iArchitecture
Entity
p1205
(dp1206
g11
(lp1207
sg15
S'com.google.common.collect.Serialization'
p1208
sg17
(lp1209
sg21
(lp1210
sg25
(lp1211
sg29
I0
sba(iArchitecture
Entity
p1212
(dp1213
g11
(lp1214
sg15
S'com.google.common.collect.TransformedIterator'
p1215
sg17
(lp1216
sg21
(lp1217
sg25
(lp1218
sg29
I0
sba(iArchitecture
Entity
p1219
(dp1220
g11
(lp1221
sg15
S'com.google.common.collect.UnmodifiableIterator'
p1222
sg17
(lp1223
sg21
(lp1224
sg25
(lp1225
sg29
I0
sba(iArchitecture
Entity
p1226
(dp1227
g11
(lp1228
g13
asg15
S'com.google.common.collect.UsingToStringOrdering'
p1229
sg17
(lp1230
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p1231
asg21
(lp1232
g23
asg25
(lp1233
g27
asg29
I0
sba(iArchitecture
Entity
p1234
(dp1235
g11
(lp1236
sg15
S'com.google.common.escape.ArrayBasedCharEscaper'
p1237
sg17
(lp1238
sg21
(lp1239
sg25
(lp1240
sg29
I0
sba(iArchitecture
Entity
p1241
(dp1242
g11
(lp1243
sg15
S'com.google.common.escape.ArrayBasedEscaperMap'
p1244
sg17
(lp1245
sg21
(lp1246
sg25
(lp1247
sg29
I0
sba(iArchitecture
Entity
p1248
(dp1249
g11
(lp1250
sg15
S'com.google.common.escape.ArrayBasedUnicodeEscaper'
p1251
sg17
(lp1252
sg21
(lp1253
sg25
(lp1254
sg29
I0
sba(iArchitecture
Entity
p1255
(dp1256
g11
(lp1257
sg15
S'com.google.common.escape.Escaper'
p1258
sg17
(lp1259
sg21
(lp1260
sg25
(lp1261
sg29
I0
sba(iArchitecture
Entity
p1262
(dp1263
g11
(lp1264
sg15
S'com.google.common.escape.Escapers'
p1265
sg17
(lp1266
sg21
(lp1267
sg25
(lp1268
sg29
I0
sba(iArchitecture
Entity
p1269
(dp1270
g11
(lp1271
sg15
S'com.google.common.escape.Platform'
p1272
sg17
(lp1273
sg21
(lp1274
sg25
(lp1275
sg29
I0
sba(iArchitecture
Entity
p1276
(dp1277
g11
(lp1278
sg15
S'com.google.common.hash.AbstractByteHasher'
p1279
sg17
(lp1280
sg21
(lp1281
sg25
(lp1282
sg29
I0
sba(iArchitecture
Entity
p1283
(dp1284
g11
(lp1285
sg15
S'com.google.common.hash.AbstractHasher'
p1286
sg17
(lp1287
sg21
(lp1288
sg25
(lp1289
sg29
I0
sba(iArchitecture
Entity
p1290
(dp1291
g11
(lp1292
sg15
S'com.google.common.hash.AbstractNonStreamingHashFunction'
p1293
sg17
(lp1294
sg21
(lp1295
sg25
(lp1296
sg29
I0
sba(iArchitecture
Entity
p1297
(dp1298
g11
(lp1299
sg15
S'com.google.common.hash.AbstractStreamingHashFunction'
p1300
sg17
(lp1301
sg21
(lp1302
sg25
(lp1303
sg29
I0
sba(iArchitecture
Entity
p1304
(dp1305
g11
(lp1306
sg15
S'com.google.common.hash.BloomFilter'
p1307
sg17
(lp1308
sg21
(lp1309
sg25
(lp1310
sg29
I0
sba(iArchitecture
Entity
p1311
(dp1312
g11
(lp1313
sg15
S'com.google.common.hash.Funnels'
p1314
sg17
(lp1315
sg21
(lp1316
sg25
(lp1317
sg29
I0
sba(iArchitecture
Entity
p1318
(dp1319
g11
(lp1320
sg15
S'com.google.common.hash.HashFunction'
p1321
sg17
(lp1322
sg21
(lp1323
sg25
(lp1324
sg29
I0
sba(iArchitecture
Entity
p1325
(dp1326
g11
(lp1327
sg15
S'com.google.common.hash.Hasher'
p1328
sg17
(lp1329
sg21
(lp1330
sg25
(lp1331
sg29
I0
sba(iArchitecture
Entity
p1332
(dp1333
g11
(lp1334
sg15
S'com.google.common.hash.HashingInputStream'
p1335
sg17
(lp1336
sg21
(lp1337
sg25
(lp1338
sg29
I0
sba(iArchitecture
Entity
p1339
(dp1340
g11
(lp1341
sg15
S'com.google.common.hash.HashingOutputStream'
p1342
sg17
(lp1343
sg21
(lp1344
sg25
(lp1345
sg29
I0
sba(iArchitecture
Entity
p1346
(dp1347
g11
(lp1348
sg15
S'com.google.common.hash.MessageDigestHashFunction'
p1349
sg17
(lp1350
sg21
(lp1351
sg25
(lp1352
sg29
I0
sba(iArchitecture
Entity
p1353
(dp1354
g11
(lp1355
sg15
S'com.google.common.hash.PrimitiveSink'
p1356
sg17
(lp1357
sg21
(lp1358
sg25
(lp1359
sg29
I0
sba(iArchitecture
Entity
p1360
(dp1361
g11
(lp1362
sg15
S'com.google.common.io.AppendableWriter'
p1363
sg17
(lp1364
sg21
(lp1365
sg25
(lp1366
sg29
I0
sba(iArchitecture
Entity
p1367
(dp1368
g11
(lp1369
V1947
p1370
ag1370
ag1370
ag1370
ag1370
aV2124
p1371
asg15
S'com.google.common.io.BaseEncoding'
p1372
sg17
(lp1373
VWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p1374
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p1375
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p1376
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p1377
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p1378
aVThe next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\u000a\u000aThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\u000a
p1379
asg21
(lp1380
(lp1381
I0
aag1381
ag1381
ag1381
ag1381
a(lp1382
I0
aasg25
(lp1383
VImprove invalid character exceptions from BaseEncoding
p1384
ag1384
ag1384
ag1384
ag1384
aVUse String.getBytes(Charset) and other Charset utilities once GWT supports them
p1385
asg29
I0
sba(iArchitecture
Entity
p1386
(dp1387
g11
(lp1388
sg15
S'com.google.common.io.ByteArrayDataInput'
p1389
sg17
(lp1390
sg21
(lp1391
sg25
(lp1392
sg29
I0
sba(iArchitecture
Entity
p1393
(dp1394
g11
(lp1395
sg15
S'com.google.common.io.ByteProcessor'
p1396
sg17
(lp1397
sg21
(lp1398
sg25
(lp1399
sg29
I0
sba(iArchitecture
Entity
p1400
(dp1401
g11
(lp1402
sg15
S'com.google.common.io.ByteSink'
p1403
sg17
(lp1404
sg21
(lp1405
sg25
(lp1406
sg29
I0
sba(iArchitecture
Entity
p1407
(dp1408
g11
(lp1409
V2127
p1410
ag1410
asg15
S'com.google.common.io.ByteSource'
p1411
sg17
(lp1412
VAn algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \u000aThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\u000a\u000aI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\u000a
p1413
aVAn algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \u000aThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\u000a\u000aI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\u000a
p1414
asg21
(lp1415
(lp1416
I1
aag1416
asg25
(lp1417
V19rc1 regression in sliced bytesource: offset + length may overflow for large length values
p1418
ag1418
asg29
I0
sba(iArchitecture
Entity
p1419
(dp1420
g11
(lp1421
sg15
S'com.google.common.io.ByteStreams'
p1422
sg17
(lp1423
sg21
(lp1424
sg25
(lp1425
sg29
I0
sba(iArchitecture
Entity
p1426
(dp1427
g11
(lp1428
sg15
S'com.google.common.io.CharSink'
p1429
sg17
(lp1430
sg21
(lp1431
sg25
(lp1432
sg29
I0
sba(iArchitecture
Entity
p1433
(dp1434
g11
(lp1435
sg15
S'com.google.common.io.CharSource'
p1436
sg17
(lp1437
sg21
(lp1438
sg25
(lp1439
sg29
I0
sba(iArchitecture
Entity
p1440
(dp1441
g11
(lp1442
sg15
S'com.google.common.io.CharStreams'
p1443
sg17
(lp1444
sg21
(lp1445
sg25
(lp1446
sg29
I0
sba(iArchitecture
Entity
p1447
(dp1448
g11
(lp1449
sg15
S'com.google.common.io.Closeables'
p1450
sg17
(lp1451
sg21
(lp1452
sg25
(lp1453
sg29
I0
sba(iArchitecture
Entity
p1454
(dp1455
g11
(lp1456
sg15
S'com.google.common.io.CountingInputStream'
p1457
sg17
(lp1458
sg21
(lp1459
sg25
(lp1460
sg29
I0
sba(iArchitecture
Entity
p1461
(dp1462
g11
(lp1463
sg15
S'com.google.common.io.CountingOutputStream'
p1464
sg17
(lp1465
sg21
(lp1466
sg25
(lp1467
sg29
I0
sba(iArchitecture
Entity
p1468
(dp1469
g11
(lp1470
sg15
S'com.google.common.io.FileBackedOutputStream'
p1471
sg17
(lp1472
sg21
(lp1473
sg25
(lp1474
sg29
I0
sba(iArchitecture
Entity
p1475
(dp1476
g11
(lp1477
sg15
S'com.google.common.io.FileWriteMode'
p1478
sg17
(lp1479
sg21
(lp1480
sg25
(lp1481
sg29
I0
sba(iArchitecture
Entity
p1482
(dp1483
g11
(lp1484
sg15
S'com.google.common.io.Files'
p1485
sg17
(lp1486
sg21
(lp1487
sg25
(lp1488
sg29
I0
sba(iArchitecture
Entity
p1489
(dp1490
g11
(lp1491
sg15
S'com.google.common.io.Flushables'
p1492
sg17
(lp1493
sg21
(lp1494
sg25
(lp1495
sg29
I0
sba(iArchitecture
Entity
p1496
(dp1497
g11
(lp1498
sg15
S'com.google.common.io.GwtWorkarounds'
p1499
sg17
(lp1500
sg21
(lp1501
sg25
(lp1502
sg29
I0
sba(iArchitecture
Entity
p1503
(dp1504
g11
(lp1505
sg15
S'com.google.common.io.LineBuffer'
p1506
sg17
(lp1507
sg21
(lp1508
sg25
(lp1509
sg29
I0
sba(iArchitecture
Entity
p1510
(dp1511
g11
(lp1512
sg15
S'com.google.common.io.LineProcessor'
p1513
sg17
(lp1514
sg21
(lp1515
sg25
(lp1516
sg29
I0
sba(iArchitecture
Entity
p1517
(dp1518
g11
(lp1519
sg15
S'com.google.common.io.LineReader'
p1520
sg17
(lp1521
sg21
(lp1522
sg25
(lp1523
sg29
I0
sba(iArchitecture
Entity
p1524
(dp1525
g11
(lp1526
sg15
S'com.google.common.io.LittleEndianDataInputStream'
p1527
sg17
(lp1528
sg21
(lp1529
sg25
(lp1530
sg29
I0
sba(iArchitecture
Entity
p1531
(dp1532
g11
(lp1533
sg15
S'com.google.common.io.LittleEndianDataOutputStream'
p1534
sg17
(lp1535
sg21
(lp1536
sg25
(lp1537
sg29
I0
sba(iArchitecture
Entity
p1538
(dp1539
g11
(lp1540
sg15
S'com.google.common.io.MultiInputStream'
p1541
sg17
(lp1542
sg21
(lp1543
sg25
(lp1544
sg29
I0
sba(iArchitecture
Entity
p1545
(dp1546
g11
(lp1547
sg15
S'com.google.common.io.OutputSupplier'
p1548
sg17
(lp1549
sg21
(lp1550
sg25
(lp1551
sg29
I0
sba(iArchitecture
Entity
p1552
(dp1553
g11
(lp1554
sg15
S'com.google.common.io.PatternFilenameFilter'
p1555
sg17
(lp1556
sg21
(lp1557
sg25
(lp1558
sg29
I0
sba(iArchitecture
Entity
p1559
(dp1560
g11
(lp1561
sg15
S'com.google.common.io.package-info'
p1562
sg17
(lp1563
sg21
(lp1564
sg25
(lp1565
sg29
I0
sba(iArchitecture
Entity
p1566
(dp1567
g11
(lp1568
sg15
S'com.google.common.util.concurrent.AsyncFunction'
p1569
sg17
(lp1570
sg21
(lp1571
sg25
(lp1572
sg29
I0
sba(iArchitecture
Entity
p1573
(dp1574
g11
(lp1575
V1961
p1576
ag1576
aV1999
p1577
aV2463
p1578
aV2379
p1579
aV2254
p1580
ag1580
asg15
S'com.google.common.util.concurrent.Futures'
p1581
sg17
(lp1582
VOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p1583
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p1584
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p1585
aVWe already do in `AbstractFuture`.\u000a
p1586
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p1587
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p1588
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p1589
asg21
(lp1590
(lp1591
I0
aag1591
a(lp1592
I7
aa(lp1593
I1
aa(lp1594
I2
aa(lp1595
I1
aag1595
asg25
(lp1596
VMake immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?
p1597
ag1597
aVRelease a Guava that supports+requires GWT 2.8.0 upon GWT release
p1598
aVWork around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask
p1599
aVBetter documentation of Futures.catching GWT availability
p1600
aVNesting Futures.transform() eats StackOverflowError and causes the Future to hang forever
p1601
ag1601
asg29
I0
sba(iArchitecture
Entity
p1602
(dp1603
g11
(lp1604
g95
asg15
S'com.google.common.util.concurrent.UncaughtExceptionHandlers'
p1605
sg17
(lp1606
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1607
asg21
(lp1608
g100
asg25
(lp1609
g102
asg29
I0
sba(iArchitecture
Entity
p1610
(dp1611
g11
(lp1612
sg15
S'com.google.common.xml.XmlEscapers'
p1613
sg17
(lp1614
sg21
(lp1615
sg25
(lp1616
sg29
I0
sba(iArchitecture
Entity
p1617
(dp1618
g11
(lp1619
sg15
S'com.google.thirdparty.publicsuffix.TrieParser'
p1620
sg17
(lp1621
sg21
(lp1622
sg25
(lp1623
sg29
I0
sbasg1053
(lp1624
g1063
ag1070
ag1077
ag1084
ag1092
ag1102
ag1109
ag1116
ag1124
ag1131
ag1138
ag1145
ag1152
ag1159
ag1167
ag1174
ag1181
ag1189
ag1200
ag1208
ag1215
ag1222
ag1229
ag1237
ag1244
ag1251
ag1258
ag1265
ag1272
ag1279
ag1286
ag1293
ag1300
ag1307
ag1314
ag1321
ag1328
ag1335
ag1342
ag1349
ag1356
ag1363
ag1372
ag1389
ag1396
ag1403
ag1411
ag1422
ag1429
ag1436
ag1443
ag1450
ag1457
ag1464
ag1471
ag1478
ag1485
ag1492
ag1499
ag1506
ag1513
ag1520
ag1527
ag1534
ag1541
ag1548
ag1555
ag1562
ag1569
ag1581
ag1605
ag1613
ag1620
asg29
I0
sg1055
S'io'
p1625
sba(iArchitecture
Cluster
p1626
(dp1627
g7
(lp1628
(iArchitecture
Entity
p1629
(dp1630
g11
(lp1631
sg15
S'com.google.common.base.AbstractIterator'
p1632
sg17
(lp1633
sg21
(lp1634
sg25
(lp1635
sg29
I0
sba(iArchitecture
Entity
p1636
(dp1637
g11
(lp1638
g13
asg15
S'com.google.common.base.Converter'
p1639
sg17
(lp1640
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p1641
asg21
(lp1642
g23
asg25
(lp1643
g27
asg29
I0
sba(iArchitecture
Entity
p1644
(dp1645
g11
(lp1646
sg15
S'com.google.common.base.FinalizableReferenceQueue'
p1647
sg17
(lp1648
sg21
(lp1649
sg25
(lp1650
sg29
I0
sba(iArchitecture
Entity
p1651
(dp1652
g11
(lp1653
sg15
S'com.google.common.base.Joiner'
p1654
sg17
(lp1655
sg21
(lp1656
sg25
(lp1657
sg29
I0
sba(iArchitecture
Entity
p1658
(dp1659
g11
(lp1660
V2457
p1661
ag1661
ag1661
asg15
S'com.google.common.base.Throwables'
p1662
sg17
(lp1663
V
p1664
ag1664
ag1664
asg21
(lp1665
(lp1666
I0
aag1666
ag1666
asg25
(lp1667
VEmulate Throwables in GWT
p1668
ag1668
ag1668
asg29
I0
sba(iArchitecture
Entity
p1669
(dp1670
g11
(lp1671
sg15
S'com.google.common.base.Ticker'
p1672
sg17
(lp1673
sg21
(lp1674
sg25
(lp1675
sg29
I0
sba(iArchitecture
Entity
p1676
(dp1677
g11
(lp1678
sg15
S'com.google.common.base.Verify'
p1679
sg17
(lp1680
sg21
(lp1681
sg25
(lp1682
sg29
I0
sba(iArchitecture
Entity
p1683
(dp1684
g11
(lp1685
sg15
S'com.google.common.base.VerifyException'
p1686
sg17
(lp1687
sg21
(lp1688
sg25
(lp1689
sg29
I0
sba(iArchitecture
Entity
p1690
(dp1691
g11
(lp1692
sg15
S'com.google.common.base.package-info'
p1693
sg17
(lp1694
sg21
(lp1695
sg25
(lp1696
sg29
I0
sba(iArchitecture
Entity
p1697
(dp1698
g11
(lp1699
sg15
S'com.google.common.cache.AbstractCache'
p1700
sg17
(lp1701
sg21
(lp1702
sg25
(lp1703
sg29
I0
sba(iArchitecture
Entity
p1704
(dp1705
g11
(lp1706
sg15
S'com.google.common.cache.AbstractLoadingCache'
p1707
sg17
(lp1708
sg21
(lp1709
sg25
(lp1710
sg29
I0
sba(iArchitecture
Entity
p1711
(dp1712
g11
(lp1713
g95
asg15
S'com.google.common.cache.CacheBuilder'
p1714
sg17
(lp1715
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1716
asg21
(lp1717
g100
asg25
(lp1718
g102
asg29
I0
sba(iArchitecture
Entity
p1719
(dp1720
g11
(lp1721
sg15
S'com.google.common.cache.CacheLoader'
p1722
sg17
(lp1723
sg21
(lp1724
sg25
(lp1725
sg29
I0
sba(iArchitecture
Entity
p1726
(dp1727
g11
(lp1728
sg15
S'com.google.common.cache.CacheStats'
p1729
sg17
(lp1730
sg21
(lp1731
sg25
(lp1732
sg29
I0
sba(iArchitecture
Entity
p1733
(dp1734
g11
(lp1735
sg15
S'com.google.common.cache.ForwardingCache'
p1736
sg17
(lp1737
sg21
(lp1738
sg25
(lp1739
sg29
I0
sba(iArchitecture
Entity
p1740
(dp1741
g11
(lp1742
sg15
S'com.google.common.cache.ForwardingLoadingCache'
p1743
sg17
(lp1744
sg21
(lp1745
sg25
(lp1746
sg29
I0
sba(iArchitecture
Entity
p1747
(dp1748
g11
(lp1749
sg15
S'com.google.common.cache.LoadingCache'
p1750
sg17
(lp1751
sg21
(lp1752
sg25
(lp1753
sg29
I0
sba(iArchitecture
Entity
p1754
(dp1755
g11
(lp1756
sg15
S'com.google.common.cache.LongAddables'
p1757
sg17
(lp1758
sg21
(lp1759
sg25
(lp1760
sg29
I0
sba(iArchitecture
Entity
p1761
(dp1762
g11
(lp1763
sg15
S'com.google.common.cache.RemovalCause'
p1764
sg17
(lp1765
sg21
(lp1766
sg25
(lp1767
sg29
I0
sba(iArchitecture
Entity
p1768
(dp1769
g11
(lp1770
sg15
S'com.google.common.cache.RemovalListener'
p1771
sg17
(lp1772
sg21
(lp1773
sg25
(lp1774
sg29
I0
sba(iArchitecture
Entity
p1775
(dp1776
g11
(lp1777
sg15
S'com.google.common.cache.RemovalListeners'
p1778
sg17
(lp1779
sg21
(lp1780
sg25
(lp1781
sg29
I0
sba(iArchitecture
Entity
p1782
(dp1783
g11
(lp1784
sg15
S'com.google.common.cache.RemovalNotification'
p1785
sg17
(lp1786
sg21
(lp1787
sg25
(lp1788
sg29
I0
sba(iArchitecture
Entity
p1789
(dp1790
g11
(lp1791
sg15
S'com.google.common.cache.Striped64'
p1792
sg17
(lp1793
sg21
(lp1794
sg25
(lp1795
sg29
I0
sba(iArchitecture
Entity
p1796
(dp1797
g11
(lp1798
sg15
S'com.google.common.cache.Weigher'
p1799
sg17
(lp1800
sg21
(lp1801
sg25
(lp1802
sg29
I0
sba(iArchitecture
Entity
p1803
(dp1804
g11
(lp1805
sg15
S'com.google.common.cache.package-info'
p1806
sg17
(lp1807
sg21
(lp1808
sg25
(lp1809
sg29
I0
sba(iArchitecture
Entity
p1810
(dp1811
g11
(lp1812
sg15
S'com.google.common.collect.AbstractIterator'
p1813
sg17
(lp1814
sg21
(lp1815
sg25
(lp1816
sg29
I0
sba(iArchitecture
Entity
p1817
(dp1818
g11
(lp1819
sg15
S'com.google.common.collect.AbstractMapEntry'
p1820
sg17
(lp1821
sg21
(lp1822
sg25
(lp1823
sg29
I0
sba(iArchitecture
Entity
p1824
(dp1825
g11
(lp1826
sg15
S'com.google.common.collect.AbstractSortedMultiset'
p1827
sg17
(lp1828
sg21
(lp1829
sg25
(lp1830
sg29
I0
sba(iArchitecture
Entity
p1831
(dp1832
g11
(lp1833
sg15
S'com.google.common.collect.BinaryTreeTraverser'
p1834
sg17
(lp1835
sg21
(lp1836
sg25
(lp1837
sg29
I0
sba(iArchitecture
Entity
p1838
(dp1839
g11
(lp1840
sg15
S'com.google.common.collect.CollectPreconditions'
p1841
sg17
(lp1842
sg21
(lp1843
sg25
(lp1844
sg29
I0
sba(iArchitecture
Entity
p1845
(dp1846
g11
(lp1847
sg15
S'com.google.common.collect.Constraint'
p1848
sg17
(lp1849
sg21
(lp1850
sg25
(lp1851
sg29
I0
sba(iArchitecture
Entity
p1852
(dp1853
g11
(lp1854
sg15
S'com.google.common.collect.Constraints'
p1855
sg17
(lp1856
sg21
(lp1857
sg25
(lp1858
sg29
I0
sba(iArchitecture
Entity
p1859
(dp1860
g11
(lp1861
g13
asg15
S'com.google.common.collect.Cut'
p1862
sg17
(lp1863
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p1864
asg21
(lp1865
g23
asg25
(lp1866
g27
asg29
I0
sba(iArchitecture
Entity
p1867
(dp1868
g11
(lp1869
g13
asg15
S'com.google.common.collect.DiscreteDomain'
p1870
sg17
(lp1871
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p1872
asg21
(lp1873
g23
asg25
(lp1874
g27
asg29
I0
sba(iArchitecture
Entity
p1875
(dp1876
g11
(lp1877
sg15
S'com.google.common.collect.FilteredKeyListMultimap'
p1878
sg17
(lp1879
sg21
(lp1880
sg25
(lp1881
sg29
I0
sba(iArchitecture
Entity
p1882
(dp1883
g11
(lp1884
sg15
S'com.google.common.collect.FilteredSetMultimap'
p1885
sg17
(lp1886
sg21
(lp1887
sg25
(lp1888
sg29
I0
sba(iArchitecture
Entity
p1889
(dp1890
g11
(lp1891
sg15
S'com.google.common.collect.ForwardingCollection'
p1892
sg17
(lp1893
sg21
(lp1894
sg25
(lp1895
sg29
I0
sba(iArchitecture
Entity
p1896
(dp1897
g11
(lp1898
sg15
S'com.google.common.collect.ForwardingConcurrentMap'
p1899
sg17
(lp1900
sg21
(lp1901
sg25
(lp1902
sg29
I0
sba(iArchitecture
Entity
p1903
(dp1904
g11
(lp1905
sg15
S'com.google.common.collect.ForwardingImmutableList'
p1906
sg17
(lp1907
sg21
(lp1908
sg25
(lp1909
sg29
I0
sba(iArchitecture
Entity
p1910
(dp1911
g11
(lp1912
sg15
S'com.google.common.collect.ForwardingImmutableMap'
p1913
sg17
(lp1914
sg21
(lp1915
sg25
(lp1916
sg29
I0
sba(iArchitecture
Entity
p1917
(dp1918
g11
(lp1919
sg15
S'com.google.common.collect.ForwardingImmutableSet'
p1920
sg17
(lp1921
sg21
(lp1922
sg25
(lp1923
sg29
I0
sba(iArchitecture
Entity
p1924
(dp1925
g11
(lp1926
sg15
S'com.google.common.collect.ForwardingIterator'
p1927
sg17
(lp1928
sg21
(lp1929
sg25
(lp1930
sg29
I0
sba(iArchitecture
Entity
p1931
(dp1932
g11
(lp1933
sg15
S'com.google.common.collect.ForwardingListIterator'
p1934
sg17
(lp1935
sg21
(lp1936
sg25
(lp1937
sg29
I0
sba(iArchitecture
Entity
p1938
(dp1939
g11
(lp1940
sg15
S'com.google.common.collect.ForwardingListMultimap'
p1941
sg17
(lp1942
sg21
(lp1943
sg25
(lp1944
sg29
I0
sba(iArchitecture
Entity
p1945
(dp1946
g11
(lp1947
sg15
S'com.google.common.collect.ForwardingMap'
p1948
sg17
(lp1949
sg21
(lp1950
sg25
(lp1951
sg29
I0
sba(iArchitecture
Entity
p1952
(dp1953
g11
(lp1954
sg15
S'com.google.common.collect.ForwardingMapEntry'
p1955
sg17
(lp1956
sg21
(lp1957
sg25
(lp1958
sg29
I0
sba(iArchitecture
Entity
p1959
(dp1960
g11
(lp1961
sg15
S'com.google.common.collect.ForwardingMultiset'
p1962
sg17
(lp1963
sg21
(lp1964
sg25
(lp1965
sg29
I0
sba(iArchitecture
Entity
p1966
(dp1967
g11
(lp1968
sg15
S'com.google.common.collect.ForwardingNavigableMap'
p1969
sg17
(lp1970
sg21
(lp1971
sg25
(lp1972
sg29
I0
sba(iArchitecture
Entity
p1973
(dp1974
g11
(lp1975
sg15
S'com.google.common.collect.ForwardingNavigableSet'
p1976
sg17
(lp1977
sg21
(lp1978
sg25
(lp1979
sg29
I0
sba(iArchitecture
Entity
p1980
(dp1981
g11
(lp1982
sg15
S'com.google.common.collect.ForwardingObject'
p1983
sg17
(lp1984
sg21
(lp1985
sg25
(lp1986
sg29
I0
sba(iArchitecture
Entity
p1987
(dp1988
g11
(lp1989
sg15
S'com.google.common.collect.ForwardingQueue'
p1990
sg17
(lp1991
sg21
(lp1992
sg25
(lp1993
sg29
I0
sba(iArchitecture
Entity
p1994
(dp1995
g11
(lp1996
sg15
S'com.google.common.collect.ForwardingSet'
p1997
sg17
(lp1998
sg21
(lp1999
sg25
(lp2000
sg29
I0
sba(iArchitecture
Entity
p2001
(dp2002
g11
(lp2003
sg15
S'com.google.common.collect.ForwardingSortedMap'
p2004
sg17
(lp2005
sg21
(lp2006
sg25
(lp2007
sg29
I0
sba(iArchitecture
Entity
p2008
(dp2009
g11
(lp2010
sg15
S'com.google.common.collect.ForwardingSortedMultiset'
p2011
sg17
(lp2012
sg21
(lp2013
sg25
(lp2014
sg29
I0
sba(iArchitecture
Entity
p2015
(dp2016
g11
(lp2017
sg15
S'com.google.common.collect.ForwardingSortedSet'
p2018
sg17
(lp2019
sg21
(lp2020
sg25
(lp2021
sg29
I0
sba(iArchitecture
Entity
p2022
(dp2023
g11
(lp2024
sg15
S'com.google.common.collect.GenericMapMaker'
p2025
sg17
(lp2026
sg21
(lp2027
sg25
(lp2028
sg29
I0
sba(iArchitecture
Entity
p2029
(dp2030
g11
(lp2031
sg15
S'com.google.common.collect.GwtTransient'
p2032
sg17
(lp2033
sg21
(lp2034
sg25
(lp2035
sg29
I0
sba(iArchitecture
Entity
p2036
(dp2037
g11
(lp2038
sg15
S'com.google.common.collect.ImmutableEnumMap'
p2039
sg17
(lp2040
sg21
(lp2041
sg25
(lp2042
sg29
I0
sba(iArchitecture
Entity
p2043
(dp2044
g11
(lp2045
sg15
S'com.google.common.collect.ImmutableEnumSet'
p2046
sg17
(lp2047
sg21
(lp2048
sg25
(lp2049
sg29
I0
sba(iArchitecture
Entity
p2050
(dp2051
g11
(lp2052
sg15
S'com.google.common.collect.ImmutableMapEntry'
p2053
sg17
(lp2054
sg21
(lp2055
sg25
(lp2056
sg29
I0
sba(iArchitecture
Entity
p2057
(dp2058
g11
(lp2059
sg15
S'com.google.common.collect.ImmutableMapEntrySet'
p2060
sg17
(lp2061
sg21
(lp2062
sg25
(lp2063
sg29
I0
sba(iArchitecture
Entity
p2064
(dp2065
g11
(lp2066
sg15
S'com.google.common.collect.ImmutableSortedAsList'
p2067
sg17
(lp2068
sg21
(lp2069
sg25
(lp2070
sg29
I0
sba(iArchitecture
Entity
p2071
(dp2072
g11
(lp2073
sg15
S'com.google.common.collect.Interners'
p2074
sg17
(lp2075
sg21
(lp2076
sg25
(lp2077
sg29
I0
sba(iArchitecture
Entity
p2078
(dp2079
g11
(lp2080
V1885
p2081
asg15
S'com.google.common.collect.MapMaker'
p2082
sg17
(lp2083
VMapMaker javadoc advertises "on-demand computation of values for keys not already present" but this doesn't appear to actually be possible.\u000a
p2084
asg21
(lp2085
(lp2086
I2
aasg25
(lp2087
VJavadoc error in MapMaker
p2088
asg29
I0
sba(iArchitecture
Entity
p2089
(dp2090
g11
(lp2091
sg15
S'com.google.common.collect.MultimapBuilder'
p2092
sg17
(lp2093
sg21
(lp2094
sg25
(lp2095
sg29
I0
sba(iArchitecture
Entity
p2096
(dp2097
g11
(lp2098
sg15
S'com.google.common.collect.Multiset'
p2099
sg17
(lp2100
sg21
(lp2101
sg25
(lp2102
sg29
I0
sba(iArchitecture
Entity
p2103
(dp2104
g11
(lp2105
sg15
S'com.google.common.collect.PeekingIterator'
p2106
sg17
(lp2107
sg21
(lp2108
sg25
(lp2109
sg29
I0
sba(iArchitecture
Entity
p2110
(dp2111
g11
(lp2112
sg15
S'com.google.common.collect.RegularImmutableAsList'
p2113
sg17
(lp2114
sg21
(lp2115
sg25
(lp2116
sg29
I0
sba(iArchitecture
Entity
p2117
(dp2118
g11
(lp2119
sg15
S'com.google.common.collect.SingletonImmutableTable'
p2120
sg17
(lp2121
sg21
(lp2122
sg25
(lp2123
sg29
I0
sba(iArchitecture
Entity
p2124
(dp2125
g11
(lp2126
sg15
S'com.google.common.collect.SortedLists'
p2127
sg17
(lp2128
sg21
(lp2129
sg25
(lp2130
sg29
I0
sba(iArchitecture
Entity
p2131
(dp2132
g11
(lp2133
sg15
S'com.google.common.collect.SortedMultiset'
p2134
sg17
(lp2135
sg21
(lp2136
sg25
(lp2137
sg29
I0
sba(iArchitecture
Entity
p2138
(dp2139
g11
(lp2140
sg15
S'com.google.common.collect.StandardRowSortedTable'
p2141
sg17
(lp2142
sg21
(lp2143
sg25
(lp2144
sg29
I0
sba(iArchitecture
Entity
p2145
(dp2146
g11
(lp2147
sg15
S'com.google.common.collect.TreeTraverser'
p2148
sg17
(lp2149
sg21
(lp2150
sg25
(lp2151
sg29
I0
sba(iArchitecture
Entity
p2152
(dp2153
g11
(lp2154
sg15
S'com.google.common.collect.UnmodifiableListIterator'
p2155
sg17
(lp2156
sg21
(lp2157
sg25
(lp2158
sg29
I0
sba(iArchitecture
Entity
p2159
(dp2160
g11
(lp2161
sg15
S'com.google.common.collect.UnmodifiableSortedMultiset'
p2162
sg17
(lp2163
sg21
(lp2164
sg25
(lp2165
sg29
I0
sba(iArchitecture
Entity
p2166
(dp2167
g11
(lp2168
sg15
S'com.google.common.collect.package-info'
p2169
sg17
(lp2170
sg21
(lp2171
sg25
(lp2172
sg29
I0
sba(iArchitecture
Entity
p2173
(dp2174
g11
(lp2175
sg15
S'com.google.common.escape.package-info'
p2176
sg17
(lp2177
sg21
(lp2178
sg25
(lp2179
sg29
I0
sba(iArchitecture
Entity
p2180
(dp2181
g11
(lp2182
sg15
S'com.google.common.eventbus.AsyncEventBus'
p2183
sg17
(lp2184
sg21
(lp2185
sg25
(lp2186
sg29
I0
sba(iArchitecture
Entity
p2187
(dp2188
g11
(lp2189
g95
asg15
S'com.google.common.eventbus.EventBus'
p2190
sg17
(lp2191
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p2192
asg21
(lp2193
g100
asg25
(lp2194
g102
asg29
I0
sba(iArchitecture
Entity
p2195
(dp2196
g11
(lp2197
sg15
S'com.google.common.html.HtmlEscapers'
p2198
sg17
(lp2199
sg21
(lp2200
sg25
(lp2201
sg29
I0
sba(iArchitecture
Entity
p2202
(dp2203
g11
(lp2204
sg15
S'com.google.common.io.Resources'
p2205
sg17
(lp2206
sg21
(lp2207
sg25
(lp2208
sg29
I0
sba(iArchitecture
Entity
p2209
(dp2210
g11
(lp2211
sg15
S'com.google.common.math.DoubleUtils'
p2212
sg17
(lp2213
sg21
(lp2214
sg25
(lp2215
sg29
I0
sba(iArchitecture
Entity
p2216
(dp2217
g11
(lp2218
sg15
S'com.google.common.math.LongMath'
p2219
sg17
(lp2220
sg21
(lp2221
sg25
(lp2222
sg29
I0
sba(iArchitecture
Entity
p2223
(dp2224
g11
(lp2225
sg15
S'com.google.common.math.MathPreconditions'
p2226
sg17
(lp2227
sg21
(lp2228
sg25
(lp2229
sg29
I0
sba(iArchitecture
Entity
p2230
(dp2231
g11
(lp2232
sg15
S'com.google.common.net.HostAndPort'
p2233
sg17
(lp2234
sg21
(lp2235
sg25
(lp2236
sg29
I0
sba(iArchitecture
Entity
p2237
(dp2238
g11
(lp2239
sg15
S'com.google.common.net.HostSpecifier'
p2240
sg17
(lp2241
sg21
(lp2242
sg25
(lp2243
sg29
I0
sba(iArchitecture
Entity
p2244
(dp2245
g11
(lp2246
V2430
p2247
asg15
S'com.google.common.net.HttpHeaders'
p2248
sg17
(lp2249
VAs they are [common headers](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Common_non-standard_request_fields) (at least the `X-Forwarded-Host`) it would be nice if they are defined in the class `HttpHeaders`. The `X-Forwared-Port` is used for example in [AWS](http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/x-forwarded-headers.html).\u000a
p2250
asg21
(lp2251
(lp2252
I5
aasg25
(lp2253
VAdd a constant for X-Forwarded-Host and X-Forwarded-Port to HttpHeaders
p2254
asg29
I0
sba(iArchitecture
Entity
p2255
(dp2256
g11
(lp2257
g95
asg15
S'com.google.common.net.InetAddresses'
p2258
sg17
(lp2259
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p2260
asg21
(lp2261
g100
asg25
(lp2262
g102
asg29
I0
sba(iArchitecture
Entity
p2263
(dp2264
g11
(lp2265
sg15
S'com.google.common.net.InternetDomainName'
p2266
sg17
(lp2267
sg21
(lp2268
sg25
(lp2269
sg29
I0
sba(iArchitecture
Entity
p2270
(dp2271
g11
(lp2272
sg15
S'com.google.common.net.UrlEscapers'
p2273
sg17
(lp2274
sg21
(lp2275
sg25
(lp2276
sg29
I0
sba(iArchitecture
Entity
p2277
(dp2278
g11
(lp2279
sg15
S'com.google.common.net.package-info'
p2280
sg17
(lp2281
sg21
(lp2282
sg25
(lp2283
sg29
I0
sba(iArchitecture
Entity
p2284
(dp2285
g11
(lp2286
sg15
S'com.google.common.primitives.ParseRequest'
p2287
sg17
(lp2288
sg21
(lp2289
sg25
(lp2290
sg29
I0
sba(iArchitecture
Entity
p2291
(dp2292
g11
(lp2293
sg15
S'com.google.common.primitives.package-info'
p2294
sg17
(lp2295
sg21
(lp2296
sg25
(lp2297
sg29
I0
sba(iArchitecture
Entity
p2298
(dp2299
g11
(lp2300
sg15
S'com.google.common.reflect.AbstractInvocationHandler'
p2301
sg17
(lp2302
sg21
(lp2303
sg25
(lp2304
sg29
I0
sba(iArchitecture
Entity
p2305
(dp2306
g11
(lp2307
V2228
p2308
ag2308
asg15
S'com.google.common.reflect.ClassPath'
p2309
sg17
(lp2310
VIf I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\u000a\u000aA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\u000a
p2311
aVIf I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\u000a\u000aA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\u000a
p2312
asg21
(lp2313
(lp2314
I5
aag2314
asg25
(lp2315
VAdd ClassPath.ResourceInfo.asByteSource()
p2316
ag2316
asg29
I0
sba(iArchitecture
Entity
p2317
(dp2318
g11
(lp2319
sg15
S'com.google.common.reflect.Reflection'
p2320
sg17
(lp2321
sg21
(lp2322
sg25
(lp2323
sg29
I0
sba(iArchitecture
Entity
p2324
(dp2325
g11
(lp2326
sg15
S'com.google.common.reflect.TypeCapture'
p2327
sg17
(lp2328
sg21
(lp2329
sg25
(lp2330
sg29
I0
sba(iArchitecture
Entity
p2331
(dp2332
g11
(lp2333
sg15
S'com.google.common.util.concurrent.AbstractCheckedFuture'
p2334
sg17
(lp2335
sg21
(lp2336
sg25
(lp2337
sg29
I0
sba(iArchitecture
Entity
p2338
(dp2339
g11
(lp2340
sg15
S'com.google.common.util.concurrent.AbstractExecutionThreadService'
p2341
sg17
(lp2342
sg21
(lp2343
sg25
(lp2344
sg29
I0
sba(iArchitecture
Entity
p2345
(dp2346
g11
(lp2347
g13
ag1576
asg15
S'com.google.common.util.concurrent.AbstractFuture'
p2348
sg17
(lp2349
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2350
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p2351
asg21
(lp2352
g23
ag1591
asg25
(lp2353
g27
ag1597
asg29
I0
sba(iArchitecture
Entity
p2354
(dp2355
g11
(lp2356
sg15
S'com.google.common.util.concurrent.AbstractListeningExecutorService'
p2357
sg17
(lp2358
sg21
(lp2359
sg25
(lp2360
sg29
I0
sba(iArchitecture
Entity
p2361
(dp2362
g11
(lp2363
V2072
p2364
ag2364
asg15
S'com.google.common.util.concurrent.AbstractScheduledService'
p2365
sg17
(lp2366
V(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p2367
aV(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p2368
asg21
(lp2369
(lp2370
I1
aag2370
asg25
(lp2371
VDeadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()
p2372
ag2372
asg29
I0
sba(iArchitecture
Entity
p2373
(dp2374
g11
(lp2375
sg15
S'com.google.common.util.concurrent.AbstractService'
p2376
sg17
(lp2377
sg21
(lp2378
sg25
(lp2379
sg29
I0
sba(iArchitecture
Entity
p2380
(dp2381
g11
(lp2382
sg15
S'com.google.common.util.concurrent.Callables'
p2383
sg17
(lp2384
sg21
(lp2385
sg25
(lp2386
sg29
I0
sba(iArchitecture
Entity
p2387
(dp2388
g11
(lp2389
g13
ag13
asg15
S'com.google.common.util.concurrent.CycleDetectingLockFactory'
p2390
sg17
(lp2391
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2392
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2393
asg21
(lp2394
g23
ag23
asg25
(lp2395
g27
ag27
asg29
I0
sba(iArchitecture
Entity
p2396
(dp2397
g11
(lp2398
sg15
S'com.google.common.util.concurrent.ExecutionError'
p2399
sg17
(lp2400
sg21
(lp2401
sg25
(lp2402
sg29
I0
sba(iArchitecture
Entity
p2403
(dp2404
g11
(lp2405
sg15
S'com.google.common.util.concurrent.ForwardingBlockingQueue'
p2406
sg17
(lp2407
sg21
(lp2408
sg25
(lp2409
sg29
I0
sba(iArchitecture
Entity
p2410
(dp2411
g11
(lp2412
sg15
S'com.google.common.util.concurrent.ForwardingCheckedFuture'
p2413
sg17
(lp2414
sg21
(lp2415
sg25
(lp2416
sg29
I0
sba(iArchitecture
Entity
p2417
(dp2418
g11
(lp2419
sg15
S'com.google.common.util.concurrent.ForwardingExecutorService'
p2420
sg17
(lp2421
sg21
(lp2422
sg25
(lp2423
sg29
I0
sba(iArchitecture
Entity
p2424
(dp2425
g11
(lp2426
sg15
S'com.google.common.util.concurrent.ForwardingFuture'
p2427
sg17
(lp2428
sg21
(lp2429
sg25
(lp2430
sg29
I0
sba(iArchitecture
Entity
p2431
(dp2432
g11
(lp2433
sg15
S'com.google.common.util.concurrent.ForwardingListenableFuture'
p2434
sg17
(lp2435
sg21
(lp2436
sg25
(lp2437
sg29
I0
sba(iArchitecture
Entity
p2438
(dp2439
g11
(lp2440
sg15
S'com.google.common.util.concurrent.ForwardingListeningExecutorService'
p2441
sg17
(lp2442
sg21
(lp2443
sg25
(lp2444
sg29
I0
sba(iArchitecture
Entity
p2445
(dp2446
g11
(lp2447
sg15
S'com.google.common.util.concurrent.JdkFutureAdapters'
p2448
sg17
(lp2449
sg21
(lp2450
sg25
(lp2451
sg29
I0
sba(iArchitecture
Entity
p2452
(dp2453
g11
(lp2454
sg15
S'com.google.common.util.concurrent.ListenerCallQueue'
p2455
sg17
(lp2456
sg21
(lp2457
sg25
(lp2458
sg29
I0
sba(iArchitecture
Entity
p2459
(dp2460
g11
(lp2461
sg15
S'com.google.common.util.concurrent.ListeningExecutorService'
p2462
sg17
(lp2463
sg21
(lp2464
sg25
(lp2465
sg29
I0
sba(iArchitecture
Entity
p2466
(dp2467
g11
(lp2468
g95
ag95
asg15
S'com.google.common.util.concurrent.RateLimiter'
p2469
sg17
(lp2470
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p2471
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p2472
asg21
(lp2473
g100
ag100
asg25
(lp2474
g102
ag102
asg29
I0
sba(iArchitecture
Entity
p2475
(dp2476
g11
(lp2477
sg15
S'com.google.common.util.concurrent.Runnables'
p2478
sg17
(lp2479
sg21
(lp2480
sg25
(lp2481
sg29
I0
sba(iArchitecture
Entity
p2482
(dp2483
g11
(lp2484
g95
asg15
S'com.google.common.util.concurrent.Service'
p2485
sg17
(lp2486
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p2487
asg21
(lp2488
g100
asg25
(lp2489
g102
asg29
I0
sba(iArchitecture
Entity
p2490
(dp2491
g11
(lp2492
sg15
S'com.google.common.util.concurrent.ServiceManager'
p2493
sg17
(lp2494
sg21
(lp2495
sg25
(lp2496
sg29
I0
sba(iArchitecture
Entity
p2497
(dp2498
g11
(lp2499
g95
ag95
asg15
S'com.google.common.util.concurrent.ThreadFactoryBuilder'
p2500
sg17
(lp2501
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p2502
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p2503
asg21
(lp2504
g100
ag100
asg25
(lp2505
g102
ag102
asg29
I0
sba(iArchitecture
Entity
p2506
(dp2507
g11
(lp2508
sg15
S'com.google.common.util.concurrent.UncheckedExecutionException'
p2509
sg17
(lp2510
sg21
(lp2511
sg25
(lp2512
sg29
I0
sba(iArchitecture
Entity
p2513
(dp2514
g11
(lp2515
sg15
S'com.google.common.util.concurrent.UncheckedTimeoutException'
p2516
sg17
(lp2517
sg21
(lp2518
sg25
(lp2519
sg29
I0
sba(iArchitecture
Entity
p2520
(dp2521
g11
(lp2522
sg15
S'com.google.common.util.concurrent.WrappingExecutorService'
p2523
sg17
(lp2524
sg21
(lp2525
sg25
(lp2526
sg29
I0
sba(iArchitecture
Entity
p2527
(dp2528
g11
(lp2529
sg15
S'com.google.common.util.concurrent.WrappingScheduledExecutorService'
p2530
sg17
(lp2531
sg21
(lp2532
sg25
(lp2533
sg29
I0
sba(iArchitecture
Entity
p2534
(dp2535
g11
(lp2536
sg15
S'com.google.thirdparty.publicsuffix.PublicSuffixPatterns'
p2537
sg17
(lp2538
sg21
(lp2539
sg25
(lp2540
sg29
I0
sba(iArchitecture
Entity
p2541
(dp2542
g11
(lp2543
sg15
S'com.google.thirdparty.publicsuffix.PublicSuffixType'
p2544
sg17
(lp2545
sg21
(lp2546
sg25
(lp2547
sg29
I0
sbasg1053
(lp2548
g1632
ag1639
ag1647
ag1654
ag1662
ag1672
ag1679
ag1686
ag1693
ag1700
ag1707
ag1714
ag1722
ag1729
ag1736
ag1743
ag1750
ag1757
ag1764
ag1771
ag1778
ag1785
ag1792
ag1799
ag1806
ag1813
ag1820
ag1827
ag1834
ag1841
ag1848
ag1855
ag1862
ag1870
ag1878
ag1885
ag1892
ag1899
ag1906
ag1913
ag1920
ag1927
ag1934
ag1941
ag1948
ag1955
ag1962
ag1969
ag1976
ag1983
ag1990
ag1997
ag2004
ag2011
ag2018
ag2025
ag2032
ag2039
ag2046
ag2053
ag2060
ag2067
ag2074
ag2082
ag2092
ag2099
ag2106
ag2113
ag2120
ag2127
ag2134
ag2141
ag2148
ag2155
ag2162
ag2169
ag2176
ag2183
ag2190
ag2198
ag2205
ag2212
ag2219
ag2226
ag2233
ag2240
ag2248
ag2258
ag2266
ag2273
ag2280
ag2287
ag2294
ag2301
ag2309
ag2320
ag2327
ag2334
ag2341
ag2348
ag2357
ag2365
ag2376
ag2383
ag2390
ag2399
ag2406
ag2413
ag2420
ag2427
ag2434
ag2441
ag2448
ag2455
ag2462
ag2469
ag2478
ag2485
ag2493
ag2500
ag2509
ag2516
ag2523
ag2530
ag2537
ag2544
asg29
I0
sg1055
S'networking'
p2549
sba(iArchitecture
Cluster
p2550
(dp2551
g7
(lp2552
(iArchitecture
Entity
p2553
(dp2554
g11
(lp2555
sg15
S'com.google.common.annotations.VisibleForTesting'
p2556
sg17
(lp2557
sg21
(lp2558
sg25
(lp2559
sg29
I0
sba(iArchitecture
Entity
p2560
(dp2561
g11
(lp2562
sg15
S'com.google.common.base.Enums'
p2563
sg17
(lp2564
sg21
(lp2565
sg25
(lp2566
sg29
I0
sba(iArchitecture
Entity
p2567
(dp2568
g11
(lp2569
sg15
S'com.google.common.base.FinalizablePhantomReference'
p2570
sg17
(lp2571
sg21
(lp2572
sg25
(lp2573
sg29
I0
sba(iArchitecture
Entity
p2574
(dp2575
g11
(lp2576
sg15
S'com.google.common.base.FinalizableReference'
p2577
sg17
(lp2578
sg21
(lp2579
sg25
(lp2580
sg29
I0
sba(iArchitecture
Entity
p2581
(dp2582
g11
(lp2583
sg15
S'com.google.common.base.FinalizableSoftReference'
p2584
sg17
(lp2585
sg21
(lp2586
sg25
(lp2587
sg29
I0
sba(iArchitecture
Entity
p2588
(dp2589
g11
(lp2590
sg15
S'com.google.common.base.FinalizableWeakReference'
p2591
sg17
(lp2592
sg21
(lp2593
sg25
(lp2594
sg29
I0
sba(iArchitecture
Entity
p2595
(dp2596
g11
(lp2597
sg15
S'com.google.common.cache.LongAddable'
p2598
sg17
(lp2599
sg21
(lp2600
sg25
(lp2601
sg29
I0
sba(iArchitecture
Entity
p2602
(dp2603
g11
(lp2604
sg15
S'com.google.common.collect.ComputationException'
p2605
sg17
(lp2606
sg21
(lp2607
sg25
(lp2608
sg29
I0
sba(iArchitecture
Entity
p2609
(dp2610
g11
(lp2611
sg15
S'com.google.common.collect.EvictingQueue'
p2612
sg17
(lp2613
sg21
(lp2614
sg25
(lp2615
sg29
I0
sba(iArchitecture
Entity
p2616
(dp2617
g11
(lp2618
sg15
S'com.google.common.collect.FilteredMultimapValues'
p2619
sg17
(lp2620
sg21
(lp2621
sg25
(lp2622
sg29
I0
sba(iArchitecture
Entity
p2623
(dp2624
g11
(lp2625
sg15
S'com.google.common.collect.ForwardingImmutableCollection'
p2626
sg17
(lp2627
sg21
(lp2628
sg25
(lp2629
sg29
I0
sba(iArchitecture
Entity
p2630
(dp2631
g11
(lp2632
sg15
S'com.google.common.collect.RegularImmutableMap'
p2633
sg17
(lp2634
sg21
(lp2635
sg25
(lp2636
sg29
I0
sba(iArchitecture
Entity
p2637
(dp2638
g11
(lp2639
sg15
S'com.google.common.collect.SingletonImmutableBiMap'
p2640
sg17
(lp2641
sg21
(lp2642
sg25
(lp2643
sg29
I0
sba(iArchitecture
Entity
p2644
(dp2645
g11
(lp2646
sg15
S'com.google.common.eventbus.SubscriberExceptionHandler'
p2647
sg17
(lp2648
sg21
(lp2649
sg25
(lp2650
sg29
I0
sba(iArchitecture
Entity
p2651
(dp2652
g11
(lp2653
sg15
S'com.google.common.hash.Funnel'
p2654
sg17
(lp2655
sg21
(lp2656
sg25
(lp2657
sg29
I0
sba(iArchitecture
Entity
p2658
(dp2659
g11
(lp2660
sg15
S'com.google.common.io.InputSupplier'
p2661
sg17
(lp2662
sg21
(lp2663
sg25
(lp2664
sg29
I0
sba(iArchitecture
Entity
p2665
(dp2666
g11
(lp2667
sg15
S'com.google.common.util.concurrent.SmoothRateLimiter'
p2668
sg17
(lp2669
sg21
(lp2670
sg25
(lp2671
sg29
I0
sba(iArchitecture
Entity
p2672
(dp2673
g11
(lp2674
sg15
S'com.google.common.util.concurrent.Uninterruptibles'
p2675
sg17
(lp2676
sg21
(lp2677
sg25
(lp2678
sg29
I0
sbasg1053
(lp2679
g2556
ag2563
ag2570
ag2577
ag2584
ag2591
ag2598
ag2605
ag2612
ag2619
ag2626
ag2633
ag2640
ag2647
ag2654
ag2661
ag2668
ag2675
asg29
I0
sg1055
S'no_match'
p2680
sba(iArchitecture
Cluster
p2681
(dp2682
g7
(lp2683
(iArchitecture
Entity
p2684
(dp2685
g11
(lp2686
sg15
S'com.google.common.annotations.Beta'
p2687
sg17
(lp2688
sg21
(lp2689
sg25
(lp2690
sg29
I0
sba(iArchitecture
Entity
p2691
(dp2692
g11
(lp2693
sg15
S'com.google.common.annotations.GwtCompatible'
p2694
sg17
(lp2695
sg21
(lp2696
sg25
(lp2697
sg29
I0
sba(iArchitecture
Entity
p2698
(dp2699
g11
(lp2700
sg15
S'com.google.common.annotations.GwtIncompatible'
p2701
sg17
(lp2702
sg21
(lp2703
sg25
(lp2704
sg29
I0
sba(iArchitecture
Entity
p2705
(dp2706
g11
(lp2707
sg15
S'com.google.common.annotations.package-info'
p2708
sg17
(lp2709
sg21
(lp2710
sg25
(lp2711
sg29
I0
sba(iArchitecture
Entity
p2712
(dp2713
g11
(lp2714
g13
aV2037
p2715
asg15
S'com.google.common.base.Absent'
p2716
sg17
(lp2717
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2718
aVUncorrect hashCode() implementation at com.google.common.base.Absent and com.google.common.base.Present - for example if hashCode() of reference at Present return 0 then it hashCode() equal Absent.\u000a\u000aexample: Optional.absent() has same hash code as Optional.of(0.0) or Optional.of(0)\u000a
p2719
asg21
(lp2720
g23
a(lp2721
I0
aasg25
(lp2722
g27
aVOptional.hashCode()
p2723
asg29
I0
sba(iArchitecture
Entity
p2724
(dp2725
g11
(lp2726
sg15
S'com.google.common.base.Defaults'
p2727
sg17
(lp2728
sg21
(lp2729
sg25
(lp2730
sg29
I0
sba(iArchitecture
Entity
p2731
(dp2732
g11
(lp2733
sg15
S'com.google.common.base.Function'
p2734
sg17
(lp2735
sg21
(lp2736
sg25
(lp2737
sg29
I0
sba(iArchitecture
Entity
p2738
(dp2739
g11
(lp2740
g2715
ag2715
asg15
S'com.google.common.base.Optional'
p2741
sg17
(lp2742
VUncorrect hashCode() implementation at com.google.common.base.Absent and com.google.common.base.Present - for example if hashCode() of reference at Present return 0 then it hashCode() equal Absent.\u000a\u000aexample: Optional.absent() has same hash code as Optional.of(0.0) or Optional.of(0)\u000a
p2743
aVUncorrect hashCode() implementation at com.google.common.base.Absent and com.google.common.base.Present - for example if hashCode() of reference at Present return 0 then it hashCode() equal Absent.\u000a\u000aexample: Optional.absent() has same hash code as Optional.of(0.0) or Optional.of(0)\u000a
p2744
asg21
(lp2745
g2721
ag2721
asg25
(lp2746
g2723
ag2723
asg29
I0
sba(iArchitecture
Entity
p2747
(dp2748
g11
(lp2749
V2365
p2750
ag2750
asg15
S'com.google.common.base.Platform'
p2751
sg17
(lp2752
VNot a high priority. I just feel a little bad that users there would get something like "com.google.common.base.Stopwatch@0xdeadbeef".\u000a
p2753
aVNot a high priority. I just feel a little bad that users there would get something like "com.google.common.base.Stopwatch@0xdeadbeef".\u000a
p2754
asg21
(lp2755
(lp2756
I1
aag2756
asg25
(lp2757
VImplement Stopwatch.toString() under GWT
p2758
ag2758
asg29
I0
sba(iArchitecture
Entity
p2759
(dp2760
g11
(lp2761
g62
ag62
asg15
S'com.google.common.base.Predicate'
p2762
sg17
(lp2763
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p2764
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p2765
asg21
(lp2766
g68
ag68
asg25
(lp2767
g70
ag70
asg29
I0
sba(iArchitecture
Entity
p2768
(dp2769
g11
(lp2770
sg15
S'com.google.common.base.Present'
p2771
sg17
(lp2772
sg21
(lp2773
sg25
(lp2774
sg29
I0
sba(iArchitecture
Entity
p2775
(dp2776
g11
(lp2777
sg15
S'com.google.common.base.StandardSystemProperty'
p2778
sg17
(lp2779
sg21
(lp2780
sg25
(lp2781
sg29
I0
sba(iArchitecture
Entity
p2782
(dp2783
g11
(lp2784
g2750
ag2750
ag2750
aV2039
p2785
ag2785
ag2785
ag95
aV1312
p2786
ag2786
asg15
S'com.google.common.base.Stopwatch'
p2787
sg17
(lp2788
VNot a high priority. I just feel a little bad that users there would get something like "com.google.common.base.Stopwatch@0xdeadbeef".\u000a
p2789
aVNot a high priority. I just feel a little bad that users there would get something like "com.google.common.base.Stopwatch@0xdeadbeef".\u000a
p2790
aVNot a high priority. I just feel a little bad that users there would get something like "com.google.common.base.Stopwatch@0xdeadbeef".\u000a
p2791
aVHello, I was reading through the set of tests at https://github.com/google/guava/blob/master/guava-tests/test/com/google/common/base/StopwatchTest.java , and I noticed there are two tests that appear to do the same thing - testElapsed_millis() and testElapsedMillis(). Is this expected? Could one test perhaps be an old test under a different naming convention? From the history it looks like they were added independently.\u000a\u000aThe contribution guide recommends creating an issue as the first step, so I thought I would ask.\u000a\u000aGitHub suggests that both functions are only called from guava-gwt/test/com/google/common/base/StopwatchTest_gwt.java . Would it be appropriate to create a pull request to remove one of the tests? (Or of course, feel free to simply remove one yourself if the workflow is easier; I just wanted to ask)\u000a\u000aCheers!\u000a
p2792
aVHello, I was reading through the set of tests at https://github.com/google/guava/blob/master/guava-tests/test/com/google/common/base/StopwatchTest.java , and I noticed there are two tests that appear to do the same thing - testElapsed_millis() and testElapsedMillis(). Is this expected? Could one test perhaps be an old test under a different naming convention? From the history it looks like they were added independently.\u000a\u000aThe contribution guide recommends creating an issue as the first step, so I thought I would ask.\u000a\u000aGitHub suggests that both functions are only called from guava-gwt/test/com/google/common/base/StopwatchTest_gwt.java . Would it be appropriate to create a pull request to remove one of the tests? (Or of course, feel free to simply remove one yourself if the workflow is easier; I just wanted to ask)\u000a\u000aCheers!\u000a
p2793
aVHello, I was reading through the set of tests at https://github.com/google/guava/blob/master/guava-tests/test/com/google/common/base/StopwatchTest.java , and I noticed there are two tests that appear to do the same thing - testElapsed_millis() and testElapsedMillis(). Is this expected? Could one test perhaps be an old test under a different naming convention? From the history it looks like they were added independently.\u000a\u000aThe contribution guide recommends creating an issue as the first step, so I thought I would ask.\u000a\u000aGitHub suggests that both functions are only called from guava-gwt/test/com/google/common/base/StopwatchTest_gwt.java . Would it be appropriate to create a pull request to remove one of the tests? (Or of course, feel free to simply remove one yourself if the workflow is easier; I just wanted to ask)\u000a\u000aCheers!\u000a
p2794
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p2795
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1312) created by **vgal...@tennaxia.com** on 2013-02-28 at 01:05 PM_\u000a\u000a---\u000a\u000aHello,\u000a\u000aIt would be great if Stopwatch could be promoted in next release.\u000a\u000aThank you\u000a\u000avictor\u000a
p2796
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1312) created by **vgal...@tennaxia.com** on 2013-02-28 at 01:05 PM_\u000a\u000a---\u000a\u000aHello,\u000a\u000aIt would be great if Stopwatch could be promoted in next release.\u000a\u000aThank you\u000a\u000avictor\u000a
p2797
asg21
(lp2798
g2756
ag2756
ag2756
a(lp2799
I6
aag2799
ag2799
ag100
a(lp2800
I7
aag2800
asg25
(lp2801
g2758
ag2758
ag2758
aVPossible duplicate tests? - testElapsed_millis() and testElapsedMillis()
p2802
ag2802
ag2802
ag102
aVDe-@Beta Stopwatch
p2803
ag2803
asg29
I0
sba(iArchitecture
Entity
p2804
(dp2805
g11
(lp2806
sg15
S'com.google.common.base.Supplier'
p2807
sg17
(lp2808
sg21
(lp2809
sg25
(lp2810
sg29
I0
sba(iArchitecture
Entity
p2811
(dp2812
g11
(lp2813
sg15
S'com.google.common.base.Suppliers'
p2814
sg17
(lp2815
sg21
(lp2816
sg25
(lp2817
sg29
I0
sba(iArchitecture
Entity
p2818
(dp2819
g11
(lp2820
sg15
S'com.google.common.base.internal.Finalizer'
p2821
sg17
(lp2822
sg21
(lp2823
sg25
(lp2824
sg29
I0
sba(iArchitecture
Entity
p2825
(dp2826
g11
(lp2827
g13
ag13
ag95
aV2178
p2828
ag107
asg15
S'com.google.common.cache.Cache'
p2829
sg17
(lp2830
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2831
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2832
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p2833
aVAs a novice of using Cache I think its statistic activation should be documented in the API of stats().\u000a\u000aFirst: recordStats() is to be isssued.\u000aSecond: stats() can not be instantiated because it is a factory for a final statistic.\u000a
p2834
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p2835
asg21
(lp2836
g23
ag23
ag100
a(lp2837
I2
aag114
asg25
(lp2838
g27
ag27
ag102
aVCache.stats usage should be documented better
p2839
ag117
asg29
I0
sba(iArchitecture
Entity
p2840
(dp2841
g11
(lp2842
sg15
S'com.google.common.collect.AbstractBiMap'
p2843
sg17
(lp2844
sg21
(lp2845
sg25
(lp2846
sg29
I0
sba(iArchitecture
Entity
p2847
(dp2848
g11
(lp2849
sg15
S'com.google.common.collect.AbstractListMultimap'
p2850
sg17
(lp2851
sg21
(lp2852
sg25
(lp2853
sg29
I0
sba(iArchitecture
Entity
p2854
(dp2855
g11
(lp2856
sg15
S'com.google.common.collect.AbstractSequentialIterator'
p2857
sg17
(lp2858
sg21
(lp2859
sg25
(lp2860
sg29
I0
sba(iArchitecture
Entity
p2861
(dp2862
g11
(lp2863
sg15
S'com.google.common.collect.AbstractSetMultimap'
p2864
sg17
(lp2865
sg21
(lp2866
sg25
(lp2867
sg29
I0
sba(iArchitecture
Entity
p2868
(dp2869
g11
(lp2870
sg15
S'com.google.common.collect.AbstractSortedKeySortedSetMultimap'
p2871
sg17
(lp2872
sg21
(lp2873
sg25
(lp2874
sg29
I0
sba(iArchitecture
Entity
p2875
(dp2876
g11
(lp2877
sg15
S'com.google.common.collect.AbstractSortedSetMultimap'
p2878
sg17
(lp2879
sg21
(lp2880
sg25
(lp2881
sg29
I0
sba(iArchitecture
Entity
p2882
(dp2883
g11
(lp2884
sg15
S'com.google.common.collect.ArrayTable'
p2885
sg17
(lp2886
sg21
(lp2887
sg25
(lp2888
sg29
I0
sba(iArchitecture
Entity
p2889
(dp2890
g11
(lp2891
sg15
S'com.google.common.collect.BiMap'
p2892
sg17
(lp2893
sg21
(lp2894
sg25
(lp2895
sg29
I0
sba(iArchitecture
Entity
p2896
(dp2897
g11
(lp2898
sg15
S'com.google.common.collect.BoundType'
p2899
sg17
(lp2900
sg21
(lp2901
sg25
(lp2902
sg29
I0
sba(iArchitecture
Entity
p2903
(dp2904
g11
(lp2905
sg15
S'com.google.common.collect.ClassToInstanceMap'
p2906
sg17
(lp2907
sg21
(lp2908
sg25
(lp2909
sg29
I0
sba(iArchitecture
Entity
p2910
(dp2911
g11
(lp2912
g13
asg15
S'com.google.common.collect.EmptyImmutableListMultimap'
p2913
sg17
(lp2914
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2915
asg21
(lp2916
g23
asg25
(lp2917
g27
asg29
I0
sba(iArchitecture
Entity
p2918
(dp2919
g11
(lp2920
g13
asg15
S'com.google.common.collect.EmptyImmutableSetMultimap'
p2921
sg17
(lp2922
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2923
asg21
(lp2924
g23
asg25
(lp2925
g27
asg29
I0
sba(iArchitecture
Entity
p2926
(dp2927
g11
(lp2928
sg15
S'com.google.common.collect.EnumBiMap'
p2929
sg17
(lp2930
sg21
(lp2931
sg25
(lp2932
sg29
I0
sba(iArchitecture
Entity
p2933
(dp2934
g11
(lp2935
sg15
S'com.google.common.collect.EnumHashBiMap'
p2936
sg17
(lp2937
sg21
(lp2938
sg25
(lp2939
sg29
I0
sba(iArchitecture
Entity
p2940
(dp2941
g11
(lp2942
sg15
S'com.google.common.collect.EnumMultiset'
p2943
sg17
(lp2944
sg21
(lp2945
sg25
(lp2946
sg29
I0
sba(iArchitecture
Entity
p2947
(dp2948
g11
(lp2949
sg15
S'com.google.common.collect.FilteredEntrySetMultimap'
p2950
sg17
(lp2951
sg21
(lp2952
sg25
(lp2953
sg29
I0
sba(iArchitecture
Entity
p2954
(dp2955
g11
(lp2956
sg15
S'com.google.common.collect.FilteredKeyMultimap'
p2957
sg17
(lp2958
sg21
(lp2959
sg25
(lp2960
sg29
I0
sba(iArchitecture
Entity
p2961
(dp2962
g11
(lp2963
sg15
S'com.google.common.collect.FilteredKeySetMultimap'
p2964
sg17
(lp2965
sg21
(lp2966
sg25
(lp2967
sg29
I0
sba(iArchitecture
Entity
p2968
(dp2969
g11
(lp2970
sg15
S'com.google.common.collect.FilteredMultimap'
p2971
sg17
(lp2972
sg21
(lp2973
sg25
(lp2974
sg29
I0
sba(iArchitecture
Entity
p2975
(dp2976
g11
(lp2977
sg15
S'com.google.common.collect.ForwardingSetMultimap'
p2978
sg17
(lp2979
sg21
(lp2980
sg25
(lp2981
sg29
I0
sba(iArchitecture
Entity
p2982
(dp2983
g11
(lp2984
sg15
S'com.google.common.collect.ForwardingSortedSetMultimap'
p2985
sg17
(lp2986
sg21
(lp2987
sg25
(lp2988
sg29
I0
sba(iArchitecture
Entity
p2989
(dp2990
g11
(lp2991
sg15
S'com.google.common.collect.HashBasedTable'
p2992
sg17
(lp2993
sg21
(lp2994
sg25
(lp2995
sg29
I0
sba(iArchitecture
Entity
p2996
(dp2997
g11
(lp2998
sg15
S'com.google.common.collect.ImmutableBiMap'
p2999
sg17
(lp3000
sg21
(lp3001
sg25
(lp3002
sg29
I0
sba(iArchitecture
Entity
p3003
(dp3004
g11
(lp3005
sg15
S'com.google.common.collect.ImmutableClassToInstanceMap'
p3006
sg17
(lp3007
sg21
(lp3008
sg25
(lp3009
sg29
I0
sba(iArchitecture
Entity
p3010
(dp3011
g11
(lp3012
V2082
p3013
asg15
S'com.google.common.collect.ImmutableMap'
p3014
sg17
(lp3015
VI'm a [Spoon](https://github.com/INRIA/spoon) contributor, an open source project to analyse and transform Java source code. This project have a dependency to [JDT](https://eclipse.org/jdt/) to compile target source code. Recently, I tried to analyse Guava with Spoon but JDT can't compile our project.\u000a\u000aWhat is the problem?\u000a\u000aIn [`ImmutableMap`](https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableMap.java) class, we have these methods:\u000a\u000a``` java\u000a// If the map is an EnumMap, it must have key type K for some <K extends Enum<K>>.\u000a@SuppressWarnings({"unchecked", "rawtypes"})\u000aprivate static <K, V> ImmutableMap<K, V> copyOfEnumMapUnsafe(Map<? extends K, ? extends V> map) {\u000a    return copyOfEnumMap((EnumMap) map);\u000a}\u000a\u000aprivate static <K extends Enum<K>, V> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\u000a    EnumMap<K, V> copy = new EnumMap<K, V>(original);\u000a    for (Map.Entry<?, ?> entry : copy.entrySet()) {\u000a        checkEntryNotNull(entry.getKey(), entry.getValue());\u000a    }\u000a    return ImmutableEnumMap.asImmutable(copy);\u000a}\u000a```\u000a\u000aThis code is valid but there is an error from JDT:\u000a\u000a> Type mismatch: cannot convert from `<Enum<Enum<K>>>` to `<K>`\u000a\u000aBefore the creation of this issue, I reported the bug in the bugtracker of JDT (issue [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404)). In 2 words, the conclusion was that: "Yes, JDT don't support this usage of Java but there is a better practice". This better practice is explained [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404#c3):\u000a\u000a``` java\u000aprivate static <K extends Enum<K>> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\u000a    return copyOfEnumMap((EnumMap<K,?>) map);\u000a}\u000a```\u000a\u000aI tried some tricky solutions but, unfortunately, this solution can't be applied in your project. So I come to notify you that your project can't be compiled by JDT.\u000a
p3016
asg21
(lp3017
(lp3018
asg25
(lp3019
VGuava can't be compiled by JDT
p3020
asg29
I0
sba(iArchitecture
Entity
p3021
(dp3022
g11
(lp3023
sg15
S'com.google.common.collect.ImmutableMapKeySet'
p3024
sg17
(lp3025
sg21
(lp3026
sg25
(lp3027
sg29
I0
sba(iArchitecture
Entity
p3028
(dp3029
g11
(lp3030
sg15
S'com.google.common.collect.ImmutableMapValues'
p3031
sg17
(lp3032
sg21
(lp3033
sg25
(lp3034
sg29
I0
sba(iArchitecture
Entity
p3035
(dp3036
g11
(lp3037
sg15
S'com.google.common.collect.ImmutableSetMultimap'
p3038
sg17
(lp3039
sg21
(lp3040
sg25
(lp3041
sg29
I0
sba(iArchitecture
Entity
p3042
(dp3043
g11
(lp3044
sg15
S'com.google.common.collect.ImmutableSortedMap'
p3045
sg17
(lp3046
sg21
(lp3047
sg25
(lp3048
sg29
I0
sba(iArchitecture
Entity
p3049
(dp3050
g11
(lp3051
sg15
S'com.google.common.collect.ImmutableSortedMapFauxverideShim'
p3052
sg17
(lp3053
sg21
(lp3054
sg25
(lp3055
sg29
I0
sba(iArchitecture
Entity
p3056
(dp3057
g11
(lp3058
sg15
S'com.google.common.collect.ImmutableSortedMultisetFauxverideShim'
p3059
sg17
(lp3060
sg21
(lp3061
sg25
(lp3062
sg29
I0
sba(iArchitecture
Entity
p3063
(dp3064
g11
(lp3065
sg15
S'com.google.common.collect.ImmutableSortedSetFauxverideShim'
p3066
sg17
(lp3067
sg21
(lp3068
sg25
(lp3069
sg29
I0
sba(iArchitecture
Entity
p3070
(dp3071
g11
(lp3072
sg15
S'com.google.common.collect.ImmutableTable'
p3073
sg17
(lp3074
sg21
(lp3075
sg25
(lp3076
sg29
I0
sba(iArchitecture
Entity
p3077
(dp3078
g11
(lp3079
sg15
S'com.google.common.collect.Interner'
p3080
sg17
(lp3081
sg21
(lp3082
sg25
(lp3083
sg29
I0
sba(iArchitecture
Entity
p3084
(dp3085
g11
(lp3086
sg15
S'com.google.common.collect.LinkedHashMultimap'
p3087
sg17
(lp3088
sg21
(lp3089
sg25
(lp3090
sg29
I0
sba(iArchitecture
Entity
p3091
(dp3092
g11
(lp3093
sg15
S'com.google.common.collect.ListMultimap'
p3094
sg17
(lp3095
sg21
(lp3096
sg25
(lp3097
sg29
I0
sba(iArchitecture
Entity
p3098
(dp3099
g11
(lp3100
sg15
S'com.google.common.collect.MapConstraint'
p3101
sg17
(lp3102
sg21
(lp3103
sg25
(lp3104
sg29
I0
sba(iArchitecture
Entity
p3105
(dp3106
g11
(lp3107
sg15
S'com.google.common.collect.MapConstraints'
p3108
sg17
(lp3109
sg21
(lp3110
sg25
(lp3111
sg29
I0
sba(iArchitecture
Entity
p3112
(dp3113
g11
(lp3114
sg15
S'com.google.common.collect.MapDifference'
p3115
sg17
(lp3116
sg21
(lp3117
sg25
(lp3118
sg29
I0
sba(iArchitecture
Entity
p3119
(dp3120
g11
(lp3121
g332
ag332
asg15
S'com.google.common.collect.Maps'
p3122
sg17
(lp3123
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p3124
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p3125
asg21
(lp3126
g338
ag338
asg25
(lp3127
g340
ag340
asg29
I0
sba(iArchitecture
Entity
p3128
(dp3129
g11
(lp3130
sg15
S'com.google.common.collect.Multimap'
p3131
sg17
(lp3132
sg21
(lp3133
sg25
(lp3134
sg29
I0
sba(iArchitecture
Entity
p3135
(dp3136
g11
(lp3137
sg15
S'com.google.common.collect.Multimaps'
p3138
sg17
(lp3139
sg21
(lp3140
sg25
(lp3141
sg29
I0
sba(iArchitecture
Entity
p3142
(dp3143
g11
(lp3144
V1437
p3145
ag3145
asg15
S'com.google.common.collect.MutableClassToInstanceMap'
p3146
sg17
(lp3147
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1437) created by **mike.rumpf** on 2013-05-31 at 06:11 AM_\u000a\u000a---\u000a\u000aMutableClassToInstanceMap defines a serialVersionUID but itself does not implement Serializable. This is inconsistent to other guava collection types.\u000a
p3148
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1437) created by **mike.rumpf** on 2013-05-31 at 06:11 AM_\u000a\u000a---\u000a\u000aMutableClassToInstanceMap defines a serialVersionUID but itself does not implement Serializable. This is inconsistent to other guava collection types.\u000a
p3149
asg21
(lp3150
(lp3151
I0
aag3151
asg25
(lp3152
VMutableClassToInstanceMap should implement Serializable
p3153
ag3153
asg29
I0
sba(iArchitecture
Entity
p3154
(dp3155
g11
(lp3156
V1328
p3157
asg15
S'com.google.common.collect.Platform'
p3158
sg17
(lp3159
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1328) created by **gokhanoner** on 2013-03-11 at 03:23 PM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aprivate static final ImmutableSet&lt;String> ISLEM_EB_FIELDS = ImmutableSet.of("ISLBLG");\u000a\u000aFor above desc, a singletonImmutableSet is created. When I try\u000a\u000aISLEM_EB_FIELDS.toArray(new String[0])\u000a\u000aon V13.0.1, ist OK but in v14, it throw class not found exception for\u000a\u000acom.google.common.collect.GwtPlatform.java\u000a\u000aI tried it on a GWT application.\u000a
p3160
asg21
(lp3161
(lp3162
I1
aasg25
(lp3163
VImmutableSet.toArray issue on singletonImmutableSet for v14
p3164
asg29
I0
sba(iArchitecture
Entity
p3165
(dp3166
g11
(lp3167
sg15
S'com.google.common.collect.Queues'
p3168
sg17
(lp3169
sg21
(lp3170
sg25
(lp3171
sg29
I0
sba(iArchitecture
Entity
p3172
(dp3173
g11
(lp3174
g592
asg15
S'com.google.common.collect.RangeMap'
p3175
sg17
(lp3176
V`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p3177
asg21
(lp3178
g600
asg25
(lp3179
g602
asg29
I0
sba(iArchitecture
Entity
p3180
(dp3181
g11
(lp3182
g592
asg15
S'com.google.common.collect.RangeSet'
p3183
sg17
(lp3184
V`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p3185
asg21
(lp3186
g600
asg25
(lp3187
g602
asg29
I0
sba(iArchitecture
Entity
p3188
(dp3189
g11
(lp3190
sg15
S'com.google.common.collect.RowSortedTable'
p3191
sg17
(lp3192
sg21
(lp3193
sg25
(lp3194
sg29
I0
sba(iArchitecture
Entity
p3195
(dp3196
g11
(lp3197
sg15
S'com.google.common.collect.SetMultimap'
p3198
sg17
(lp3199
sg21
(lp3200
sg25
(lp3201
sg29
I0
sba(iArchitecture
Entity
p3202
(dp3203
g11
(lp3204
V1001
p3205
ag3205
asg15
S'com.google.common.collect.Sets'
p3206
sg17
(lp3207
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p3208
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p3209
asg21
(lp3210
(lp3211
I0
aag3211
asg25
(lp3212
VReimplement and deprecate Sets.newSetFromMap (but no removing it)
p3213
ag3213
asg29
I0
sba(iArchitecture
Entity
p3214
(dp3215
g11
(lp3216
sg15
S'com.google.common.collect.SortedIterable'
p3217
sg17
(lp3218
sg21
(lp3219
sg25
(lp3220
sg29
I0
sba(iArchitecture
Entity
p3221
(dp3222
g11
(lp3223
sg15
S'com.google.common.collect.SortedIterables'
p3224
sg17
(lp3225
sg21
(lp3226
sg25
(lp3227
sg29
I0
sba(iArchitecture
Entity
p3228
(dp3229
g11
(lp3230
sg15
S'com.google.common.collect.SortedMapDifference'
p3231
sg17
(lp3232
sg21
(lp3233
sg25
(lp3234
sg29
I0
sba(iArchitecture
Entity
p3235
(dp3236
g11
(lp3237
sg15
S'com.google.common.collect.SortedMultisetBridge'
p3238
sg17
(lp3239
sg21
(lp3240
sg25
(lp3241
sg29
I0
sba(iArchitecture
Entity
p3242
(dp3243
g11
(lp3244
sg15
S'com.google.common.collect.SortedMultisets'
p3245
sg17
(lp3246
sg21
(lp3247
sg25
(lp3248
sg29
I0
sba(iArchitecture
Entity
p3249
(dp3250
g11
(lp3251
sg15
S'com.google.common.collect.SortedSetMultimap'
p3252
sg17
(lp3253
sg21
(lp3254
sg25
(lp3255
sg29
I0
sba(iArchitecture
Entity
p3256
(dp3257
g11
(lp3258
sg15
S'com.google.common.collect.SparseImmutableTable'
p3259
sg17
(lp3260
sg21
(lp3261
sg25
(lp3262
sg29
I0
sba(iArchitecture
Entity
p3263
(dp3264
g11
(lp3265
sg15
S'com.google.common.collect.Table'
p3266
sg17
(lp3267
sg21
(lp3268
sg25
(lp3269
sg29
I0
sba(iArchitecture
Entity
p3270
(dp3271
g11
(lp3272
sg15
S'com.google.common.collect.Tables'
p3273
sg17
(lp3274
sg21
(lp3275
sg25
(lp3276
sg29
I0
sba(iArchitecture
Entity
p3277
(dp3278
g11
(lp3279
sg15
S'com.google.common.collect.TreeBasedTable'
p3280
sg17
(lp3281
sg21
(lp3282
sg25
(lp3283
sg29
I0
sba(iArchitecture
Entity
p3284
(dp3285
g11
(lp3286
sg15
S'com.google.common.collect.TreeMultimap'
p3287
sg17
(lp3288
sg21
(lp3289
sg25
(lp3290
sg29
I0
sba(iArchitecture
Entity
p3291
(dp3292
g11
(lp3293
sg15
S'com.google.common.collect.WellBehavedMap'
p3294
sg17
(lp3295
sg21
(lp3296
sg25
(lp3297
sg29
I0
sba(iArchitecture
Entity
p3298
(dp3299
g11
(lp3300
sg15
S'com.google.common.eventbus.AllowConcurrentEvents'
p3301
sg17
(lp3302
sg21
(lp3303
sg25
(lp3304
sg29
I0
sba(iArchitecture
Entity
p3305
(dp3306
g11
(lp3307
sg15
S'com.google.common.eventbus.AnnotatedSubscriberFinder'
p3308
sg17
(lp3309
sg21
(lp3310
sg25
(lp3311
sg29
I0
sba(iArchitecture
Entity
p3312
(dp3313
g11
(lp3314
sg15
S'com.google.common.eventbus.DeadEvent'
p3315
sg17
(lp3316
sg21
(lp3317
sg25
(lp3318
sg29
I0
sba(iArchitecture
Entity
p3319
(dp3320
g11
(lp3321
sg15
S'com.google.common.eventbus.Subscribe'
p3322
sg17
(lp3323
sg21
(lp3324
sg25
(lp3325
sg29
I0
sba(iArchitecture
Entity
p3326
(dp3327
g11
(lp3328
sg15
S'com.google.common.eventbus.SubscriberExceptionContext'
p3329
sg17
(lp3330
sg21
(lp3331
sg25
(lp3332
sg29
I0
sba(iArchitecture
Entity
p3333
(dp3334
g11
(lp3335
sg15
S'com.google.common.eventbus.SubscriberFindingStrategy'
p3336
sg17
(lp3337
sg21
(lp3338
sg25
(lp3339
sg29
I0
sba(iArchitecture
Entity
p3340
(dp3341
g11
(lp3342
sg15
S'com.google.common.eventbus.SynchronizedEventSubscriber'
p3343
sg17
(lp3344
sg21
(lp3345
sg25
(lp3346
sg29
I0
sba(iArchitecture
Entity
p3347
(dp3348
g11
(lp3349
sg15
S'com.google.common.eventbus.package-info'
p3350
sg17
(lp3351
sg21
(lp3352
sg25
(lp3353
sg29
I0
sba(iArchitecture
Entity
p3354
(dp3355
g11
(lp3356
sg15
S'com.google.common.hash.package-info'
p3357
sg17
(lp3358
sg21
(lp3359
sg25
(lp3360
sg29
I0
sba(iArchitecture
Entity
p3361
(dp3362
g11
(lp3363
sg15
S'com.google.common.html.package-info'
p3364
sg17
(lp3365
sg21
(lp3366
sg25
(lp3367
sg29
I0
sba(iArchitecture
Entity
p3368
(dp3369
g11
(lp3370
sg15
S'com.google.common.io.Closer'
p3371
sg17
(lp3372
sg21
(lp3373
sg25
(lp3374
sg29
I0
sba(iArchitecture
Entity
p3375
(dp3376
g11
(lp3377
sg15
S'com.google.common.math.package-info'
p3378
sg17
(lp3379
sg21
(lp3380
sg25
(lp3381
sg29
I0
sba(iArchitecture
Entity
p3382
(dp3383
g11
(lp3384
V2132
p3385
asg15
S'com.google.common.net.MediaType'
p3386
sg17
(lp3387
VMissed several video MimeTypes in MediaType class:\u000a\u000a```\u000avideo/x-flv\u000avideo/3gpp\u000avideo/3gpp2\u000a```\u000a\u000aand some audio types:\u000a\u000a```\u000aaudio/basic\u000aaudio/L24\u000aaudio/aac\u000aaudio/vorbis\u000aaudio/x-ms-wma\u000aaudio/x-ms-wax\u000aaudio/vnd.rn-realaudio\u000aaudio/vnd.wave\u000a```\u000a
p3388
asg21
(lp3389
(lp3390
I5
aasg25
(lp3391
VAdd video MediaTypes
p3392
asg29
I0
sba(iArchitecture
Entity
p3393
(dp3394
g11
(lp3395
sg15
S'com.google.common.primitives.Primitives'
p3396
sg17
(lp3397
sg21
(lp3398
sg25
(lp3399
sg29
I0
sba(iArchitecture
Entity
p3400
(dp3401
g11
(lp3402
sg15
S'com.google.common.reflect.ImmutableTypeToInstanceMap'
p3403
sg17
(lp3404
sg21
(lp3405
sg25
(lp3406
sg29
I0
sba(iArchitecture
Entity
p3407
(dp3408
g11
(lp3409
sg15
S'com.google.common.reflect.MutableTypeToInstanceMap'
p3410
sg17
(lp3411
sg21
(lp3412
sg25
(lp3413
sg29
I0
sba(iArchitecture
Entity
p3414
(dp3415
g11
(lp3416
sg15
S'com.google.common.reflect.TypeParameter'
p3417
sg17
(lp3418
sg21
(lp3419
sg25
(lp3420
sg29
I0
sba(iArchitecture
Entity
p3421
(dp3422
g11
(lp3423
V2158
p3424
asg15
S'com.google.common.reflect.TypeResolver'
p3425
sg17
(lp3426
VThe visitClass implementation in TypeResolver.populateTypeMappings has the following body:\u000a\u000a```\u000a  @Override void visitClass(Class<?> fromClass) {\u000a    // Can't map from a raw class to anything other than itself.\u000a    // You can't say "assuming String is Integer".\u000a    // And we don't support "assuming String is T"; user has to say "assuming T is String". \u000a    throw new IllegalArgumentException("No type mapping from " + fromClass);\u000a  }\u000a```\u000a\u000aIt would be great if the IllegalArgumentException message reported the type it's trying to convert to, as well as the one its converting from, for easier debugging should this exception be thrown.\u000a
p3427
asg21
(lp3428
(lp3429
I0
aasg25
(lp3430
VTypeVisitor.visitClass in TypeResolver.populateTypeMappings should report the to type as well as the from type
p3431
asg29
I0
sba(iArchitecture
Entity
p3432
(dp3433
g11
(lp3434
sg15
S'com.google.common.reflect.TypeToInstanceMap'
p3435
sg17
(lp3436
sg21
(lp3437
sg25
(lp3438
sg29
I0
sba(iArchitecture
Entity
p3439
(dp3440
g11
(lp3441
sg15
S'com.google.common.reflect.TypeToken'
p3442
sg17
(lp3443
sg21
(lp3444
sg25
(lp3445
sg29
I0
sba(iArchitecture
Entity
p3446
(dp3447
g11
(lp3448
sg15
S'com.google.common.reflect.TypeVisitor'
p3449
sg17
(lp3450
sg21
(lp3451
sg25
(lp3452
sg29
I0
sba(iArchitecture
Entity
p3453
(dp3454
g11
(lp3455
V1738
p3456
asg15
S'com.google.common.reflect.Types'
p3457
sg17
(lp3458
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p3459
asg21
(lp3460
(lp3461
I7
aasg25
(lp3462
VUnable to compile on Java 8
p3463
asg29
I0
sba(iArchitecture
Entity
p3464
(dp3465
g11
(lp3466
sg15
S'com.google.common.reflect.package-info'
p3467
sg17
(lp3468
sg21
(lp3469
sg25
(lp3470
sg29
I0
sba(iArchitecture
Entity
p3471
(dp3472
g11
(lp3473
sg15
S'com.google.common.util.concurrent.AsyncSettableFuture'
p3474
sg17
(lp3475
sg21
(lp3476
sg25
(lp3477
sg29
I0
sba(iArchitecture
Entity
p3478
(dp3479
g11
(lp3480
sg15
S'com.google.common.util.concurrent.AtomicLongMap'
p3481
sg17
(lp3482
sg21
(lp3483
sg25
(lp3484
sg29
I0
sba(iArchitecture
Entity
p3485
(dp3486
g11
(lp3487
sg15
S'com.google.common.util.concurrent.Atomics'
p3488
sg17
(lp3489
sg21
(lp3490
sg25
(lp3491
sg29
I0
sba(iArchitecture
Entity
p3492
(dp3493
g11
(lp3494
sg15
S'com.google.common.util.concurrent.CheckedFuture'
p3495
sg17
(lp3496
sg21
(lp3497
sg25
(lp3498
sg29
I0
sba(iArchitecture
Entity
p3499
(dp3500
g11
(lp3501
sg15
S'com.google.common.util.concurrent.ExecutionList'
p3502
sg17
(lp3503
sg21
(lp3504
sg25
(lp3505
sg29
I0
sba(iArchitecture
Entity
p3506
(dp3507
g11
(lp3508
sg15
S'com.google.common.util.concurrent.FakeTimeLimiter'
p3509
sg17
(lp3510
sg21
(lp3511
sg25
(lp3512
sg29
I0
sba(iArchitecture
Entity
p3513
(dp3514
g11
(lp3515
sg15
S'com.google.common.util.concurrent.FutureCallback'
p3516
sg17
(lp3517
sg21
(lp3518
sg25
(lp3519
sg29
I0
sba(iArchitecture
Entity
p3520
(dp3521
g11
(lp3522
sg15
S'com.google.common.util.concurrent.FutureFallback'
p3523
sg17
(lp3524
sg21
(lp3525
sg25
(lp3526
sg29
I0
sba(iArchitecture
Entity
p3527
(dp3528
g11
(lp3529
sg15
S'com.google.common.util.concurrent.ListenableFuture'
p3530
sg17
(lp3531
sg21
(lp3532
sg25
(lp3533
sg29
I0
sba(iArchitecture
Entity
p3534
(dp3535
g11
(lp3536
sg15
S'com.google.common.util.concurrent.ListenableFutureTask'
p3537
sg17
(lp3538
sg21
(lp3539
sg25
(lp3540
sg29
I0
sba(iArchitecture
Entity
p3541
(dp3542
g11
(lp3543
sg15
S'com.google.common.util.concurrent.ListenableScheduledFuture'
p3544
sg17
(lp3545
sg21
(lp3546
sg25
(lp3547
sg29
I0
sba(iArchitecture
Entity
p3548
(dp3549
g11
(lp3550
sg15
S'com.google.common.util.concurrent.ListeningScheduledExecutorService'
p3551
sg17
(lp3552
sg21
(lp3553
sg25
(lp3554
sg29
I0
sba(iArchitecture
Entity
p3555
(dp3556
g11
(lp3557
V2133
p3558
asg15
S'com.google.common.util.concurrent.MoreExecutors'
p3559
sg17
(lp3560
V`MoreExecutors.java:541`\u000a\u000a``` java\u000a    @Override\u000a    public <V> ListenableScheduledFuture<V> schedule(\u000a        Callable<V> callable, long delay, TimeUnit unit) {\u000a      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\u000a      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\u000a      return new ListenableScheduledTask<V>(task, scheduled);\u000a    }\u000a```\u000a\u000a`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\u000a
p3561
asg21
(lp3562
(lp3563
I2
aasg25
(lp3564
VBUG: ScheduledListeningDecorator schedule(Callable<V>....) delegates to schedule(Runnable
p3565
asg29
I0
sba(iArchitecture
Entity
p3566
(dp3567
g11
(lp3568
sg15
S'com.google.common.util.concurrent.SerializingExecutor'
p3569
sg17
(lp3570
sg21
(lp3571
sg25
(lp3572
sg29
I0
sba(iArchitecture
Entity
p3573
(dp3574
g11
(lp3575
sg15
S'com.google.common.util.concurrent.SettableFuture'
p3576
sg17
(lp3577
sg21
(lp3578
sg25
(lp3579
sg29
I0
sba(iArchitecture
Entity
p3580
(dp3581
g11
(lp3582
sg15
S'com.google.common.util.concurrent.SimpleTimeLimiter'
p3583
sg17
(lp3584
sg21
(lp3585
sg25
(lp3586
sg29
I0
sba(iArchitecture
Entity
p3587
(dp3588
g11
(lp3589
sg15
S'com.google.common.util.concurrent.TimeLimiter'
p3590
sg17
(lp3591
sg21
(lp3592
sg25
(lp3593
sg29
I0
sba(iArchitecture
Entity
p3594
(dp3595
g11
(lp3596
sg15
S'com.google.common.util.concurrent.package-info'
p3597
sg17
(lp3598
sg21
(lp3599
sg25
(lp3600
sg29
I0
sba(iArchitecture
Entity
p3601
(dp3602
g11
(lp3603
sg15
S'com.google.common.xml.package-info'
p3604
sg17
(lp3605
sg21
(lp3606
sg25
(lp3607
sg29
I0
sbasg1053
(lp3608
g2687
ag2694
ag2701
ag2708
ag2716
ag2727
ag2734
ag2741
ag2751
ag2762
ag2771
ag2778
ag2787
ag2807
ag2814
ag2821
ag2829
ag2843
ag2850
ag2857
ag2864
ag2871
ag2878
ag2885
ag2892
ag2899
ag2906
ag2913
ag2921
ag2929
ag2936
ag2943
ag2950
ag2957
ag2964
ag2971
ag2978
ag2985
ag2992
ag2999
ag3006
ag3014
ag3024
ag3031
ag3038
ag3045
ag3052
ag3059
ag3066
ag3073
ag3080
ag3087
ag3094
ag3101
ag3108
ag3115
ag3122
ag3131
ag3138
ag3146
ag3158
ag3168
ag3175
ag3183
ag3191
ag3198
ag3206
ag3217
ag3224
ag3231
ag3238
ag3245
ag3252
ag3259
ag3266
ag3273
ag3280
ag3287
ag3294
ag3301
ag3308
ag3315
ag3322
ag3329
ag3336
ag3343
ag3350
ag3357
ag3364
ag3371
ag3378
ag3386
ag3396
ag3403
ag3410
ag3417
ag3425
ag3435
ag3442
ag3449
ag3457
ag3467
ag3474
ag3481
ag3488
ag3495
ag3502
ag3509
ag3516
ag3523
ag3530
ag3537
ag3544
ag3551
ag3559
ag3569
ag3576
ag3583
ag3590
ag3597
ag3604
asg29
I0
sg1055
S'sql'
p3609
sbasS'target_sub'
p3610
S''
p3611
sg1053
(lp3612
sS'is_component_arch'
p3613
I00
sg1055
S'v18.0'
p3614
sba(iArchitecture
Architecture
p3615
(dp3616
g3
(lp3617
(iArchitecture
Cluster
p3618
(dp3619
g7
(lp3620
(iArchitecture
Entity
p3621
(dp3622
g11
(lp3623
sg15
S'com.google.common.base.CharMatcher'
p3624
sg17
(lp3625
sg21
(lp3626
sg25
(lp3627
sg29
I0
sba(iArchitecture
Entity
p3628
(dp3629
g11
(lp3630
sg15
S'com.google.common.base.Equivalence'
p3631
sg17
(lp3632
sg21
(lp3633
sg25
(lp3634
sg29
I0
sba(iArchitecture
Entity
p3635
(dp3636
g11
(lp3637
sg15
S'com.google.common.base.Functions'
p3638
sg17
(lp3639
sg21
(lp3640
sg25
(lp3641
sg29
I0
sba(iArchitecture
Entity
p3642
(dp3643
g11
(lp3644
sg15
S'com.google.common.base.JdkPattern'
p3645
sg17
(lp3646
sg21
(lp3647
sg25
(lp3648
sg29
I0
sba(iArchitecture
Entity
p3649
(dp3650
g11
(lp3651
sg15
S'com.google.common.base.PairwiseEquivalence'
p3652
sg17
(lp3653
sg21
(lp3654
sg25
(lp3655
sg29
I0
sba(iArchitecture
Entity
p3656
(dp3657
g11
(lp3658
sg15
S'com.google.common.base.Preconditions'
p3659
sg17
(lp3660
sg21
(lp3661
sg25
(lp3662
sg29
I0
sba(iArchitecture
Entity
p3663
(dp3664
g11
(lp3665
sg15
S'com.google.common.base.Predicates'
p3666
sg17
(lp3667
sg21
(lp3668
sg25
(lp3669
sg29
I0
sba(iArchitecture
Entity
p3670
(dp3671
g11
(lp3672
sg15
S'com.google.common.base.SmallCharMatcher'
p3673
sg17
(lp3674
sg21
(lp3675
sg25
(lp3676
sg29
I0
sba(iArchitecture
Entity
p3677
(dp3678
g11
(lp3679
sg15
S'com.google.common.base.Splitter'
p3680
sg17
(lp3681
sg21
(lp3682
sg25
(lp3683
sg29
I0
sba(iArchitecture
Entity
p3684
(dp3685
g11
(lp3686
sg15
S'com.google.common.base.Strings'
p3687
sg17
(lp3688
sg21
(lp3689
sg25
(lp3690
sg29
I0
sba(iArchitecture
Entity
p3691
(dp3692
g11
(lp3693
sg15
S'com.google.common.cache.CacheBuilderSpec'
p3694
sg17
(lp3695
sg21
(lp3696
sg25
(lp3697
sg29
I0
sba(iArchitecture
Entity
p3698
(dp3699
g11
(lp3700
sg15
S'com.google.common.cache.LocalCache'
p3701
sg17
(lp3702
sg21
(lp3703
sg25
(lp3704
sg29
I0
sba(iArchitecture
Entity
p3705
(dp3706
g11
(lp3707
sg15
S'com.google.common.cache.LongAdder'
p3708
sg17
(lp3709
sg21
(lp3710
sg25
(lp3711
sg29
I0
sba(iArchitecture
Entity
p3712
(dp3713
g11
(lp3714
sg15
S'com.google.common.collect.AbstractIndexedListIterator'
p3715
sg17
(lp3716
sg21
(lp3717
sg25
(lp3718
sg29
I0
sba(iArchitecture
Entity
p3719
(dp3720
g11
(lp3721
sg15
S'com.google.common.collect.AbstractMapBasedMultimap'
p3722
sg17
(lp3723
sg21
(lp3724
sg25
(lp3725
sg29
I0
sba(iArchitecture
Entity
p3726
(dp3727
g11
(lp3728
sg15
S'com.google.common.collect.AbstractMapBasedMultiset'
p3729
sg17
(lp3730
sg21
(lp3731
sg25
(lp3732
sg29
I0
sba(iArchitecture
Entity
p3733
(dp3734
g11
(lp3735
sg15
S'com.google.common.collect.AbstractMultimap'
p3736
sg17
(lp3737
sg21
(lp3738
sg25
(lp3739
sg29
I0
sba(iArchitecture
Entity
p3740
(dp3741
g11
(lp3742
sg15
S'com.google.common.collect.AbstractMultiset'
p3743
sg17
(lp3744
sg21
(lp3745
sg25
(lp3746
sg29
I0
sba(iArchitecture
Entity
p3747
(dp3748
g11
(lp3749
sg15
S'com.google.common.collect.AbstractNavigableMap'
p3750
sg17
(lp3751
sg21
(lp3752
sg25
(lp3753
sg29
I0
sba(iArchitecture
Entity
p3754
(dp3755
g11
(lp3756
sg15
S'com.google.common.collect.AbstractRangeSet'
p3757
sg17
(lp3758
sg21
(lp3759
sg25
(lp3760
sg29
I0
sba(iArchitecture
Entity
p3761
(dp3762
g11
(lp3763
sg15
S'com.google.common.collect.AbstractTable'
p3764
sg17
(lp3765
sg21
(lp3766
sg25
(lp3767
sg29
I0
sba(iArchitecture
Entity
p3768
(dp3769
g11
(lp3770
sg15
S'com.google.common.collect.CartesianList'
p3771
sg17
(lp3772
sg21
(lp3773
sg25
(lp3774
sg29
I0
sba(iArchitecture
Entity
p3775
(dp3776
g11
(lp3777
sg15
S'com.google.common.collect.Collections2'
p3778
sg17
(lp3779
sg21
(lp3780
sg25
(lp3781
sg29
I0
sba(iArchitecture
Entity
p3782
(dp3783
g11
(lp3784
sg15
S'com.google.common.collect.ComparisonChain'
p3785
sg17
(lp3786
sg21
(lp3787
sg25
(lp3788
sg29
I0
sba(iArchitecture
Entity
p3789
(dp3790
g11
(lp3791
sg15
S'com.google.common.collect.CompoundOrdering'
p3792
sg17
(lp3793
sg21
(lp3794
sg25
(lp3795
sg29
I0
sba(iArchitecture
Entity
p3796
(dp3797
g11
(lp3798
sg15
S'com.google.common.collect.ConcurrentHashMultiset'
p3799
sg17
(lp3800
sg21
(lp3801
sg25
(lp3802
sg29
I0
sba(iArchitecture
Entity
p3803
(dp3804
g11
(lp3805
sg15
S'com.google.common.collect.ContiguousSet'
p3806
sg17
(lp3807
sg21
(lp3808
sg25
(lp3809
sg29
I0
sba(iArchitecture
Entity
p3810
(dp3811
g11
(lp3812
sg15
S'com.google.common.collect.Count'
p3813
sg17
(lp3814
sg21
(lp3815
sg25
(lp3816
sg29
I0
sba(iArchitecture
Entity
p3817
(dp3818
g11
(lp3819
sg15
S'com.google.common.collect.DenseImmutableTable'
p3820
sg17
(lp3821
sg21
(lp3822
sg25
(lp3823
sg29
I0
sba(iArchitecture
Entity
p3824
(dp3825
g11
(lp3826
sg15
S'com.google.common.collect.DescendingImmutableSortedMultiset'
p3827
sg17
(lp3828
sg21
(lp3829
sg25
(lp3830
sg29
I0
sba(iArchitecture
Entity
p3831
(dp3832
g11
(lp3833
sg15
S'com.google.common.collect.DescendingImmutableSortedSet'
p3834
sg17
(lp3835
sg21
(lp3836
sg25
(lp3837
sg29
I0
sba(iArchitecture
Entity
p3838
(dp3839
g11
(lp3840
sg15
S'com.google.common.collect.DescendingMultiset'
p3841
sg17
(lp3842
sg21
(lp3843
sg25
(lp3844
sg29
I0
sba(iArchitecture
Entity
p3845
(dp3846
g11
(lp3847
sg15
S'com.google.common.collect.EmptyContiguousSet'
p3848
sg17
(lp3849
sg21
(lp3850
sg25
(lp3851
sg29
I0
sba(iArchitecture
Entity
p3852
(dp3853
g11
(lp3854
sg15
S'com.google.common.collect.EvictingQueue'
p3855
sg17
(lp3856
sg21
(lp3857
sg25
(lp3858
sg29
I0
sba(iArchitecture
Entity
p3859
(dp3860
g11
(lp3861
sg15
S'com.google.common.collect.ExplicitOrdering'
p3862
sg17
(lp3863
sg21
(lp3864
sg25
(lp3865
sg29
I0
sba(iArchitecture
Entity
p3866
(dp3867
g11
(lp3868
sg15
S'com.google.common.collect.FilteredEntryMultimap'
p3869
sg17
(lp3870
sg21
(lp3871
sg25
(lp3872
sg29
I0
sba(iArchitecture
Entity
p3873
(dp3874
g11
(lp3875
sg15
S'com.google.common.collect.ForwardingMultimap'
p3876
sg17
(lp3877
sg21
(lp3878
sg25
(lp3879
sg29
I0
sba(iArchitecture
Entity
p3880
(dp3881
g11
(lp3882
sg15
S'com.google.common.collect.ForwardingTable'
p3883
sg17
(lp3884
sg21
(lp3885
sg25
(lp3886
sg29
I0
sba(iArchitecture
Entity
p3887
(dp3888
g11
(lp3889
sg15
S'com.google.common.collect.GeneralRange'
p3890
sg17
(lp3891
sg21
(lp3892
sg25
(lp3893
sg29
I0
sba(iArchitecture
Entity
p3894
(dp3895
g11
(lp3896
sg15
S'com.google.common.collect.HashBiMap'
p3897
sg17
(lp3898
sg21
(lp3899
sg25
(lp3900
sg29
I0
sba(iArchitecture
Entity
p3901
(dp3902
g11
(lp3903
sg15
S'com.google.common.collect.Hashing'
p3904
sg17
(lp3905
sg21
(lp3906
sg25
(lp3907
sg29
I0
sba(iArchitecture
Entity
p3908
(dp3909
g11
(lp3910
sg15
S'com.google.common.collect.ImmutableList'
p3911
sg17
(lp3912
sg21
(lp3913
sg25
(lp3914
sg29
I0
sba(iArchitecture
Entity
p3915
(dp3916
g11
(lp3917
sg15
S'com.google.common.collect.ImmutableMap'
p3918
sg17
(lp3919
sg21
(lp3920
sg25
(lp3921
sg29
I0
sba(iArchitecture
Entity
p3922
(dp3923
g11
(lp3924
sg15
S'com.google.common.collect.ImmutableMultiset'
p3925
sg17
(lp3926
sg21
(lp3927
sg25
(lp3928
sg29
I0
sba(iArchitecture
Entity
p3929
(dp3930
g11
(lp3931
sg15
S'com.google.common.collect.ImmutableRangeMap'
p3932
sg17
(lp3933
sg21
(lp3934
sg25
(lp3935
sg29
I0
sba(iArchitecture
Entity
p3936
(dp3937
g11
(lp3938
sg15
S'com.google.common.collect.ImmutableRangeSet'
p3939
sg17
(lp3940
sg21
(lp3941
sg25
(lp3942
sg29
I0
sba(iArchitecture
Entity
p3943
(dp3944
g11
(lp3945
sg15
S'com.google.common.collect.ImmutableSet'
p3946
sg17
(lp3947
sg21
(lp3948
sg25
(lp3949
sg29
I0
sba(iArchitecture
Entity
p3950
(dp3951
g11
(lp3952
sg15
S'com.google.common.collect.ImmutableSortedMultiset'
p3953
sg17
(lp3954
sg21
(lp3955
sg25
(lp3956
sg29
I0
sba(iArchitecture
Entity
p3957
(dp3958
g11
(lp3959
sg15
S'com.google.common.collect.ImmutableSortedSet'
p3960
sg17
(lp3961
sg21
(lp3962
sg25
(lp3963
sg29
I0
sba(iArchitecture
Entity
p3964
(dp3965
g11
(lp3966
sg15
S'com.google.common.collect.Iterables'
p3967
sg17
(lp3968
sg21
(lp3969
sg25
(lp3970
sg29
I0
sba(iArchitecture
Entity
p3971
(dp3972
g11
(lp3973
sg15
S'com.google.common.collect.Iterators'
p3974
sg17
(lp3975
sg21
(lp3976
sg25
(lp3977
sg29
I0
sba(iArchitecture
Entity
p3978
(dp3979
g11
(lp3980
sg15
S'com.google.common.collect.LexicographicalOrdering'
p3981
sg17
(lp3982
sg21
(lp3983
sg25
(lp3984
sg29
I0
sba(iArchitecture
Entity
p3985
(dp3986
g11
(lp3987
sg15
S'com.google.common.collect.LinkedListMultimap'
p3988
sg17
(lp3989
sg21
(lp3990
sg25
(lp3991
sg29
I0
sba(iArchitecture
Entity
p3992
(dp3993
g11
(lp3994
sg15
S'com.google.common.collect.Lists'
p3995
sg17
(lp3996
sg21
(lp3997
sg25
(lp3998
sg29
I0
sba(iArchitecture
Entity
p3999
(dp4000
g11
(lp4001
sg15
S'com.google.common.collect.MapMakerInternalMap'
p4002
sg17
(lp4003
sg21
(lp4004
sg25
(lp4005
sg29
I0
sba(iArchitecture
Entity
p4006
(dp4007
g11
(lp4008
V2658
p4009
ag4009
ag4009
asg15
S'com.google.common.collect.MinMaxPriorityQueue'
p4010
sg17
(lp4011
VA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p4012
aVA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p4013
aVA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p4014
asg21
(lp4015
(lp4016
I1
aag4016
ag4016
asg25
(lp4017
Vremove() in MinMaxPriorityQueue<Double> not removing the correct object
p4018
ag4018
ag4018
asg29
I0
sba(iArchitecture
Entity
p4019
(dp4020
g11
(lp4021
sg15
S'com.google.common.collect.Multisets'
p4022
sg17
(lp4023
sg21
(lp4024
sg25
(lp4025
sg29
I0
sba(iArchitecture
Entity
p4026
(dp4027
g11
(lp4028
sg15
S'com.google.common.collect.MultitransformedIterator'
p4029
sg17
(lp4030
sg21
(lp4031
sg25
(lp4032
sg29
I0
sba(iArchitecture
Entity
p4033
(dp4034
g11
(lp4035
sg15
S'com.google.common.collect.NullsFirstOrdering'
p4036
sg17
(lp4037
sg21
(lp4038
sg25
(lp4039
sg29
I0
sba(iArchitecture
Entity
p4040
(dp4041
g11
(lp4042
sg15
S'com.google.common.collect.NullsLastOrdering'
p4043
sg17
(lp4044
sg21
(lp4045
sg25
(lp4046
sg29
I0
sba(iArchitecture
Entity
p4047
(dp4048
g11
(lp4049
sg15
S'com.google.common.collect.ObjectArrays'
p4050
sg17
(lp4051
sg21
(lp4052
sg25
(lp4053
sg29
I0
sba(iArchitecture
Entity
p4054
(dp4055
g11
(lp4056
sg15
S'com.google.common.collect.Range'
p4057
sg17
(lp4058
sg21
(lp4059
sg25
(lp4060
sg29
I0
sba(iArchitecture
Entity
p4061
(dp4062
g11
(lp4063
sg15
S'com.google.common.collect.RegularContiguousSet'
p4064
sg17
(lp4065
sg21
(lp4066
sg25
(lp4067
sg29
I0
sba(iArchitecture
Entity
p4068
(dp4069
g11
(lp4070
sg15
S'com.google.common.collect.RegularImmutableBiMap'
p4071
sg17
(lp4072
sg21
(lp4073
sg25
(lp4074
sg29
I0
sba(iArchitecture
Entity
p4075
(dp4076
g11
(lp4077
sg15
S'com.google.common.collect.RegularImmutableList'
p4078
sg17
(lp4079
sg21
(lp4080
sg25
(lp4081
sg29
I0
sba(iArchitecture
Entity
p4082
(dp4083
g11
(lp4084
sg15
S'com.google.common.collect.RegularImmutableMultiset'
p4085
sg17
(lp4086
sg21
(lp4087
sg25
(lp4088
sg29
I0
sba(iArchitecture
Entity
p4089
(dp4090
g11
(lp4091
sg15
S'com.google.common.collect.RegularImmutableSet'
p4092
sg17
(lp4093
sg21
(lp4094
sg25
(lp4095
sg29
I0
sba(iArchitecture
Entity
p4096
(dp4097
g11
(lp4098
sg15
S'com.google.common.collect.RegularImmutableSortedMultiset'
p4099
sg17
(lp4100
sg21
(lp4101
sg25
(lp4102
sg29
I0
sba(iArchitecture
Entity
p4103
(dp4104
g11
(lp4105
sg15
S'com.google.common.collect.RegularImmutableSortedSet'
p4106
sg17
(lp4107
sg21
(lp4108
sg25
(lp4109
sg29
I0
sba(iArchitecture
Entity
p4110
(dp4111
g11
(lp4112
sg15
S'com.google.common.collect.RegularImmutableTable'
p4113
sg17
(lp4114
sg21
(lp4115
sg25
(lp4116
sg29
I0
sba(iArchitecture
Entity
p4117
(dp4118
g11
(lp4119
sg15
S'com.google.common.collect.ReverseOrdering'
p4120
sg17
(lp4121
sg21
(lp4122
sg25
(lp4123
sg29
I0
sba(iArchitecture
Entity
p4124
(dp4125
g11
(lp4126
sg15
S'com.google.common.collect.Sets'
p4127
sg17
(lp4128
sg21
(lp4129
sg25
(lp4130
sg29
I0
sba(iArchitecture
Entity
p4131
(dp4132
g11
(lp4133
sg15
S'com.google.common.collect.SingletonImmutableBiMap'
p4134
sg17
(lp4135
sg21
(lp4136
sg25
(lp4137
sg29
I0
sba(iArchitecture
Entity
p4138
(dp4139
g11
(lp4140
sg15
S'com.google.common.collect.SingletonImmutableList'
p4141
sg17
(lp4142
sg21
(lp4143
sg25
(lp4144
sg29
I0
sba(iArchitecture
Entity
p4145
(dp4146
g11
(lp4147
sg15
S'com.google.common.collect.SingletonImmutableSet'
p4148
sg17
(lp4149
sg21
(lp4150
sg25
(lp4151
sg29
I0
sba(iArchitecture
Entity
p4152
(dp4153
g11
(lp4154
sg15
S'com.google.common.collect.StandardTable'
p4155
sg17
(lp4156
sg21
(lp4157
sg25
(lp4158
sg29
I0
sba(iArchitecture
Entity
p4159
(dp4160
g11
(lp4161
sg15
S'com.google.common.collect.Synchronized'
p4162
sg17
(lp4163
sg21
(lp4164
sg25
(lp4165
sg29
I0
sba(iArchitecture
Entity
p4166
(dp4167
g11
(lp4168
sg15
S'com.google.common.collect.TopKSelector'
p4169
sg17
(lp4170
sg21
(lp4171
sg25
(lp4172
sg29
I0
sba(iArchitecture
Entity
p4173
(dp4174
g11
(lp4175
sg15
S'com.google.common.collect.TransformedListIterator'
p4176
sg17
(lp4177
sg21
(lp4178
sg25
(lp4179
sg29
I0
sba(iArchitecture
Entity
p4180
(dp4181
g11
(lp4182
sg15
S'com.google.common.collect.TreeMultiset'
p4183
sg17
(lp4184
sg21
(lp4185
sg25
(lp4186
sg29
I0
sba(iArchitecture
Entity
p4187
(dp4188
g11
(lp4189
sg15
S'com.google.common.collect.TreeRangeMap'
p4190
sg17
(lp4191
sg21
(lp4192
sg25
(lp4193
sg29
I0
sba(iArchitecture
Entity
p4194
(dp4195
g11
(lp4196
sg15
S'com.google.common.collect.TreeRangeSet'
p4197
sg17
(lp4198
sg21
(lp4199
sg25
(lp4200
sg29
I0
sba(iArchitecture
Entity
p4201
(dp4202
g11
(lp4203
sg15
S'com.google.common.escape.CharEscaper'
p4204
sg17
(lp4205
sg21
(lp4206
sg25
(lp4207
sg29
I0
sba(iArchitecture
Entity
p4208
(dp4209
g11
(lp4210
sg15
S'com.google.common.escape.CharEscaperBuilder'
p4211
sg17
(lp4212
sg21
(lp4213
sg25
(lp4214
sg29
I0
sba(iArchitecture
Entity
p4215
(dp4216
g11
(lp4217
sg15
S'com.google.common.escape.UnicodeEscaper'
p4218
sg17
(lp4219
sg21
(lp4220
sg25
(lp4221
sg29
I0
sba(iArchitecture
Entity
p4222
(dp4223
g11
(lp4224
sg15
S'com.google.common.eventbus.Subscriber'
p4225
sg17
(lp4226
sg21
(lp4227
sg25
(lp4228
sg29
I0
sba(iArchitecture
Entity
p4229
(dp4230
g11
(lp4231
sg15
S'com.google.common.graph.AbstractDirectedNetworkConnections'
p4232
sg17
(lp4233
sg21
(lp4234
sg25
(lp4235
sg29
I0
sba(iArchitecture
Entity
p4236
(dp4237
g11
(lp4238
sg15
S'com.google.common.graph.AbstractGraph'
p4239
sg17
(lp4240
sg21
(lp4241
sg25
(lp4242
sg29
I0
sba(iArchitecture
Entity
p4243
(dp4244
g11
(lp4245
sg15
S'com.google.common.graph.AbstractNetwork'
p4246
sg17
(lp4247
sg21
(lp4248
sg25
(lp4249
sg29
I0
sba(iArchitecture
Entity
p4250
(dp4251
g11
(lp4252
sg15
S'com.google.common.graph.AbstractUndirectedNetworkConnections'
p4253
sg17
(lp4254
sg21
(lp4255
sg25
(lp4256
sg29
I0
sba(iArchitecture
Entity
p4257
(dp4258
g11
(lp4259
sg15
S'com.google.common.graph.DirectedGraphConnections'
p4260
sg17
(lp4261
sg21
(lp4262
sg25
(lp4263
sg29
I0
sba(iArchitecture
Entity
p4264
(dp4265
g11
(lp4266
sg15
S'com.google.common.graph.EndpointPair'
p4267
sg17
(lp4268
sg21
(lp4269
sg25
(lp4270
sg29
I0
sba(iArchitecture
Entity
p4271
(dp4272
g11
(lp4273
sg15
S'com.google.common.graph.ForwardingGraph'
p4274
sg17
(lp4275
sg21
(lp4276
sg25
(lp4277
sg29
I0
sba(iArchitecture
Entity
p4278
(dp4279
g11
(lp4280
sg15
S'com.google.common.hash.AbstractCompositeHashFunction'
p4281
sg17
(lp4282
sg21
(lp4283
sg25
(lp4284
sg29
I0
sba(iArchitecture
Entity
p4285
(dp4286
g11
(lp4287
sg15
S'com.google.common.hash.BloomFilterStrategies'
p4288
sg17
(lp4289
sg21
(lp4290
sg25
(lp4291
sg29
I0
sba(iArchitecture
Entity
p4292
(dp4293
g11
(lp4294
sg15
S'com.google.common.hash.ChecksumHashFunction'
p4295
sg17
(lp4296
sg21
(lp4297
sg25
(lp4298
sg29
I0
sba(iArchitecture
Entity
p4299
(dp4300
g11
(lp4301
sg15
S'com.google.common.hash.Crc32cHashFunction'
p4302
sg17
(lp4303
sg21
(lp4304
sg25
(lp4305
sg29
I0
sba(iArchitecture
Entity
p4306
(dp4307
g11
(lp4308
sg15
S'com.google.common.hash.FarmHashFingerprint64'
p4309
sg17
(lp4310
sg21
(lp4311
sg25
(lp4312
sg29
I0
sba(iArchitecture
Entity
p4313
(dp4314
g11
(lp4315
sg15
S'com.google.common.hash.HashCode'
p4316
sg17
(lp4317
sg21
(lp4318
sg25
(lp4319
sg29
I0
sba(iArchitecture
Entity
p4320
(dp4321
g11
(lp4322
sg15
S'com.google.common.hash.LittleEndianByteArray'
p4323
sg17
(lp4324
sg21
(lp4325
sg25
(lp4326
sg29
I0
sba(iArchitecture
Entity
p4327
(dp4328
g11
(lp4329
sg15
S'com.google.common.hash.MacHashFunction'
p4330
sg17
(lp4331
sg21
(lp4332
sg25
(lp4333
sg29
I0
sba(iArchitecture
Entity
p4334
(dp4335
g11
(lp4336
sg15
S'com.google.common.hash.Murmur3_128HashFunction'
p4337
sg17
(lp4338
sg21
(lp4339
sg25
(lp4340
sg29
I0
sba(iArchitecture
Entity
p4341
(dp4342
g11
(lp4343
sg15
S'com.google.common.hash.Murmur3_32HashFunction'
p4344
sg17
(lp4345
sg21
(lp4346
sg25
(lp4347
sg29
I0
sba(iArchitecture
Entity
p4348
(dp4349
g11
(lp4350
sg15
S'com.google.common.hash.SipHashFunction'
p4351
sg17
(lp4352
sg21
(lp4353
sg25
(lp4354
sg29
I0
sba(iArchitecture
Entity
p4355
(dp4356
g11
(lp4357
sg15
S'com.google.common.io.BaseEncoding'
p4358
sg17
(lp4359
sg21
(lp4360
sg25
(lp4361
sg29
I0
sba(iArchitecture
Entity
p4362
(dp4363
g11
(lp4364
sg15
S'com.google.common.io.ByteArrayDataOutput'
p4365
sg17
(lp4366
sg21
(lp4367
sg25
(lp4368
sg29
I0
sba(iArchitecture
Entity
p4369
(dp4370
g11
(lp4371
sg15
S'com.google.common.io.CharSequenceReader'
p4372
sg17
(lp4373
sg21
(lp4374
sg25
(lp4375
sg29
I0
sba(iArchitecture
Entity
p4376
(dp4377
g11
(lp4378
sg15
S'com.google.common.io.MultiReader'
p4379
sg17
(lp4380
sg21
(lp4381
sg25
(lp4382
sg29
I0
sba(iArchitecture
Entity
p4383
(dp4384
g11
(lp4385
sg15
S'com.google.common.math.BigIntegerMath'
p4386
sg17
(lp4387
sg21
(lp4388
sg25
(lp4389
sg29
I0
sba(iArchitecture
Entity
p4390
(dp4391
g11
(lp4392
sg15
S'com.google.common.math.IntMath'
p4393
sg17
(lp4394
sg21
(lp4395
sg25
(lp4396
sg29
I0
sba(iArchitecture
Entity
p4397
(dp4398
g11
(lp4399
sg15
S'com.google.common.math.LinearTransformation'
p4400
sg17
(lp4401
sg21
(lp4402
sg25
(lp4403
sg29
I0
sba(iArchitecture
Entity
p4404
(dp4405
g11
(lp4406
sg15
S'com.google.common.math.LongMath'
p4407
sg17
(lp4408
sg21
(lp4409
sg25
(lp4410
sg29
I0
sba(iArchitecture
Entity
p4411
(dp4412
g11
(lp4413
sg15
S'com.google.common.math.Quantiles'
p4414
sg17
(lp4415
sg21
(lp4416
sg25
(lp4417
sg29
I0
sba(iArchitecture
Entity
p4418
(dp4419
g11
(lp4420
sg15
S'com.google.common.net.PercentEscaper'
p4421
sg17
(lp4422
sg21
(lp4423
sg25
(lp4424
sg29
I0
sba(iArchitecture
Entity
p4425
(dp4426
g11
(lp4427
sg15
S'com.google.common.primitives.Booleans'
p4428
sg17
(lp4429
sg21
(lp4430
sg25
(lp4431
sg29
I0
sba(iArchitecture
Entity
p4432
(dp4433
g11
(lp4434
sg15
S'com.google.common.primitives.Bytes'
p4435
sg17
(lp4436
sg21
(lp4437
sg25
(lp4438
sg29
I0
sba(iArchitecture
Entity
p4439
(dp4440
g11
(lp4441
sg15
S'com.google.common.primitives.Chars'
p4442
sg17
(lp4443
sg21
(lp4444
sg25
(lp4445
sg29
I0
sba(iArchitecture
Entity
p4446
(dp4447
g11
(lp4448
sg15
S'com.google.common.primitives.Doubles'
p4449
sg17
(lp4450
sg21
(lp4451
sg25
(lp4452
sg29
I0
sba(iArchitecture
Entity
p4453
(dp4454
g11
(lp4455
sg15
S'com.google.common.primitives.Floats'
p4456
sg17
(lp4457
sg21
(lp4458
sg25
(lp4459
sg29
I0
sba(iArchitecture
Entity
p4460
(dp4461
g11
(lp4462
sg15
S'com.google.common.primitives.Ints'
p4463
sg17
(lp4464
sg21
(lp4465
sg25
(lp4466
sg29
I0
sba(iArchitecture
Entity
p4467
(dp4468
g11
(lp4469
sg15
S'com.google.common.primitives.Longs'
p4470
sg17
(lp4471
sg21
(lp4472
sg25
(lp4473
sg29
I0
sba(iArchitecture
Entity
p4474
(dp4475
g11
(lp4476
sg15
S'com.google.common.primitives.Shorts'
p4477
sg17
(lp4478
sg21
(lp4479
sg25
(lp4480
sg29
I0
sba(iArchitecture
Entity
p4481
(dp4482
g11
(lp4483
sg15
S'com.google.common.primitives.SignedBytes'
p4484
sg17
(lp4485
sg21
(lp4486
sg25
(lp4487
sg29
I0
sba(iArchitecture
Entity
p4488
(dp4489
g11
(lp4490
sg15
S'com.google.common.primitives.UnsignedBytes'
p4491
sg17
(lp4492
sg21
(lp4493
sg25
(lp4494
sg29
I0
sba(iArchitecture
Entity
p4495
(dp4496
g11
(lp4497
sg15
S'com.google.common.primitives.UnsignedInteger'
p4498
sg17
(lp4499
sg21
(lp4500
sg25
(lp4501
sg29
I0
sba(iArchitecture
Entity
p4502
(dp4503
g11
(lp4504
sg15
S'com.google.common.primitives.UnsignedInts'
p4505
sg17
(lp4506
sg21
(lp4507
sg25
(lp4508
sg29
I0
sba(iArchitecture
Entity
p4509
(dp4510
g11
(lp4511
sg15
S'com.google.common.primitives.UnsignedLong'
p4512
sg17
(lp4513
sg21
(lp4514
sg25
(lp4515
sg29
I0
sba(iArchitecture
Entity
p4516
(dp4517
g11
(lp4518
sg15
S'com.google.common.primitives.UnsignedLongs'
p4519
sg17
(lp4520
sg21
(lp4521
sg25
(lp4522
sg29
I0
sba(iArchitecture
Entity
p4523
(dp4524
g11
(lp4525
sg15
S'com.google.common.reflect.Element'
p4526
sg17
(lp4527
sg21
(lp4528
sg25
(lp4529
sg29
I0
sba(iArchitecture
Entity
p4530
(dp4531
g11
(lp4532
sg15
S'com.google.common.reflect.Invokable'
p4533
sg17
(lp4534
sg21
(lp4535
sg25
(lp4536
sg29
I0
sba(iArchitecture
Entity
p4537
(dp4538
g11
(lp4539
sg15
S'com.google.common.reflect.Parameter'
p4540
sg17
(lp4541
sg21
(lp4542
sg25
(lp4543
sg29
I0
sba(iArchitecture
Entity
p4544
(dp4545
g11
(lp4546
sg15
S'com.google.common.util.concurrent.AbstractIdleService'
p4547
sg17
(lp4548
sg21
(lp4549
sg25
(lp4550
sg29
I0
sba(iArchitecture
Entity
p4551
(dp4552
g11
(lp4553
sg15
S'com.google.common.util.concurrent.AtomicDouble'
p4554
sg17
(lp4555
sg21
(lp4556
sg25
(lp4557
sg29
I0
sba(iArchitecture
Entity
p4558
(dp4559
g11
(lp4560
sg15
S'com.google.common.util.concurrent.AtomicDoubleArray'
p4561
sg17
(lp4562
sg21
(lp4563
sg25
(lp4564
sg29
I0
sba(iArchitecture
Entity
p4565
(dp4566
g11
(lp4567
sg15
S'com.google.common.util.concurrent.CombinedFuture'
p4568
sg17
(lp4569
sg21
(lp4570
sg25
(lp4571
sg29
I0
sba(iArchitecture
Entity
p4572
(dp4573
g11
(lp4574
sg15
S'com.google.common.util.concurrent.Monitor'
p4575
sg17
(lp4576
sg21
(lp4577
sg25
(lp4578
sg29
I0
sba(iArchitecture
Entity
p4579
(dp4580
g11
(lp4581
sg15
S'com.google.common.util.concurrent.Striped'
p4582
sg17
(lp4583
sg21
(lp4584
sg25
(lp4585
sg29
I0
sbasg1053
(lp4586
g3624
ag3631
ag3638
ag3645
ag3652
ag3659
ag3666
ag3673
ag3680
ag3687
ag3694
ag3701
ag3708
ag3715
ag3722
ag3729
ag3736
ag3743
ag3750
ag3757
ag3764
ag3771
ag3778
ag3785
ag3792
ag3799
ag3806
ag3813
ag3820
ag3827
ag3834
ag3841
ag3848
ag3855
ag3862
ag3869
ag3876
ag3883
ag3890
ag3897
ag3904
ag3911
ag3918
ag3925
ag3932
ag3939
ag3946
ag3953
ag3960
ag3967
ag3974
ag3981
ag3988
ag3995
ag4002
ag4010
ag4022
ag4029
ag4036
ag4043
ag4050
ag4057
ag4064
ag4071
ag4078
ag4085
ag4092
ag4099
ag4106
ag4113
ag4120
ag4127
ag4134
ag4141
ag4148
ag4155
ag4162
ag4169
ag4176
ag4183
ag4190
ag4197
ag4204
ag4211
ag4218
ag4225
ag4232
ag4239
ag4246
ag4253
ag4260
ag4267
ag4274
ag4281
ag4288
ag4295
ag4302
ag4309
ag4316
ag4323
ag4330
ag4337
ag4344
ag4351
ag4358
ag4365
ag4372
ag4379
ag4386
ag4393
ag4400
ag4407
ag4414
ag4421
ag4428
ag4435
ag4442
ag4449
ag4456
ag4463
ag4470
ag4477
ag4484
ag4491
ag4498
ag4505
ag4512
ag4519
ag4526
ag4533
ag4540
ag4547
ag4554
ag4561
ag4568
ag4575
ag4582
asg29
I0
sg1055
S'graphics'
p4587
sba(iArchitecture
Cluster
p4588
(dp4589
g7
(lp4590
(iArchitecture
Entity
p4591
(dp4592
g11
(lp4593
sg15
S'com.google.common.base.Ascii'
p4594
sg17
(lp4595
sg21
(lp4596
sg25
(lp4597
sg29
I0
sba(iArchitecture
Entity
p4598
(dp4599
g11
(lp4600
sg15
S'com.google.common.base.CaseFormat'
p4601
sg17
(lp4602
sg21
(lp4603
sg25
(lp4604
sg29
I0
sba(iArchitecture
Entity
p4605
(dp4606
g11
(lp4607
sg15
S'com.google.common.base.Charsets'
p4608
sg17
(lp4609
sg21
(lp4610
sg25
(lp4611
sg29
I0
sba(iArchitecture
Entity
p4612
(dp4613
g11
(lp4614
sg15
S'com.google.common.base.FunctionalEquivalence'
p4615
sg17
(lp4616
sg21
(lp4617
sg25
(lp4618
sg29
I0
sba(iArchitecture
Entity
p4619
(dp4620
g11
(lp4621
sg15
S'com.google.common.base.MoreObjects'
p4622
sg17
(lp4623
sg21
(lp4624
sg25
(lp4625
sg29
I0
sba(iArchitecture
Entity
p4626
(dp4627
g11
(lp4628
sg15
S'com.google.common.base.Objects'
p4629
sg17
(lp4630
sg21
(lp4631
sg25
(lp4632
sg29
I0
sba(iArchitecture
Entity
p4633
(dp4634
g11
(lp4635
sg15
S'com.google.common.base.Utf8'
p4636
sg17
(lp4637
sg21
(lp4638
sg25
(lp4639
sg29
I0
sba(iArchitecture
Entity
p4640
(dp4641
g11
(lp4642
sg15
S'com.google.common.collect.AllEqualOrdering'
p4643
sg17
(lp4644
sg21
(lp4645
sg25
(lp4646
sg29
I0
sba(iArchitecture
Entity
p4647
(dp4648
g11
(lp4649
sg15
S'com.google.common.collect.ByFunctionOrdering'
p4650
sg17
(lp4651
sg21
(lp4652
sg25
(lp4653
sg29
I0
sba(iArchitecture
Entity
p4654
(dp4655
g11
(lp4656
sg15
S'com.google.common.collect.ComparatorOrdering'
p4657
sg17
(lp4658
sg21
(lp4659
sg25
(lp4660
sg29
I0
sba(iArchitecture
Entity
p4661
(dp4662
g11
(lp4663
sg15
S'com.google.common.collect.FluentIterable'
p4664
sg17
(lp4665
sg21
(lp4666
sg25
(lp4667
sg29
I0
sba(iArchitecture
Entity
p4668
(dp4669
g11
(lp4670
sg15
S'com.google.common.collect.HashMultimap'
p4671
sg17
(lp4672
sg21
(lp4673
sg25
(lp4674
sg29
I0
sba(iArchitecture
Entity
p4675
(dp4676
g11
(lp4677
sg15
S'com.google.common.collect.HashMultiset'
p4678
sg17
(lp4679
sg21
(lp4680
sg25
(lp4681
sg29
I0
sba(iArchitecture
Entity
p4682
(dp4683
g11
(lp4684
sg15
S'com.google.common.collect.ImmutableAsList'
p4685
sg17
(lp4686
sg21
(lp4687
sg25
(lp4688
sg29
I0
sba(iArchitecture
Entity
p4689
(dp4690
g11
(lp4691
sg15
S'com.google.common.collect.ImmutableEntry'
p4692
sg17
(lp4693
sg21
(lp4694
sg25
(lp4695
sg29
I0
sba(iArchitecture
Entity
p4696
(dp4697
g11
(lp4698
sg15
S'com.google.common.collect.ImmutableListMultimap'
p4699
sg17
(lp4700
sg21
(lp4701
sg25
(lp4702
sg29
I0
sba(iArchitecture
Entity
p4703
(dp4704
g11
(lp4705
sg15
S'com.google.common.collect.LinkedHashMultiset'
p4706
sg17
(lp4707
sg21
(lp4708
sg25
(lp4709
sg29
I0
sba(iArchitecture
Entity
p4710
(dp4711
g11
(lp4712
sg15
S'com.google.common.collect.NaturalOrdering'
p4713
sg17
(lp4714
sg21
(lp4715
sg25
(lp4716
sg29
I0
sba(iArchitecture
Entity
p4717
(dp4718
g11
(lp4719
sg15
S'com.google.common.collect.ReverseNaturalOrdering'
p4720
sg17
(lp4721
sg21
(lp4722
sg25
(lp4723
sg29
I0
sba(iArchitecture
Entity
p4724
(dp4725
g11
(lp4726
sg15
S'com.google.common.collect.Serialization'
p4727
sg17
(lp4728
sg21
(lp4729
sg25
(lp4730
sg29
I0
sba(iArchitecture
Entity
p4731
(dp4732
g11
(lp4733
sg15
S'com.google.common.collect.TransformedIterator'
p4734
sg17
(lp4735
sg21
(lp4736
sg25
(lp4737
sg29
I0
sba(iArchitecture
Entity
p4738
(dp4739
g11
(lp4740
sg15
S'com.google.common.collect.UsingToStringOrdering'
p4741
sg17
(lp4742
sg21
(lp4743
sg25
(lp4744
sg29
I0
sba(iArchitecture
Entity
p4745
(dp4746
g11
(lp4747
sg15
S'com.google.common.escape.ArrayBasedCharEscaper'
p4748
sg17
(lp4749
sg21
(lp4750
sg25
(lp4751
sg29
I0
sba(iArchitecture
Entity
p4752
(dp4753
g11
(lp4754
sg15
S'com.google.common.escape.ArrayBasedEscaperMap'
p4755
sg17
(lp4756
sg21
(lp4757
sg25
(lp4758
sg29
I0
sba(iArchitecture
Entity
p4759
(dp4760
g11
(lp4761
sg15
S'com.google.common.escape.ArrayBasedUnicodeEscaper'
p4762
sg17
(lp4763
sg21
(lp4764
sg25
(lp4765
sg29
I0
sba(iArchitecture
Entity
p4766
(dp4767
g11
(lp4768
sg15
S'com.google.common.escape.Escaper'
p4769
sg17
(lp4770
sg21
(lp4771
sg25
(lp4772
sg29
I0
sba(iArchitecture
Entity
p4773
(dp4774
g11
(lp4775
sg15
S'com.google.common.escape.Escapers'
p4776
sg17
(lp4777
sg21
(lp4778
sg25
(lp4779
sg29
I0
sba(iArchitecture
Entity
p4780
(dp4781
g11
(lp4782
sg15
S'com.google.common.escape.Platform'
p4783
sg17
(lp4784
sg21
(lp4785
sg25
(lp4786
sg29
I0
sba(iArchitecture
Entity
p4787
(dp4788
g11
(lp4789
sg15
S'com.google.common.eventbus.DeadEvent'
p4790
sg17
(lp4791
sg21
(lp4792
sg25
(lp4793
sg29
I0
sba(iArchitecture
Entity
p4794
(dp4795
g11
(lp4796
sg15
S'com.google.common.graph.GraphConstants'
p4797
sg17
(lp4798
sg21
(lp4799
sg25
(lp4800
sg29
I0
sba(iArchitecture
Entity
p4801
(dp4802
g11
(lp4803
sg15
S'com.google.common.graph.ImmutableGraph'
p4804
sg17
(lp4805
sg21
(lp4806
sg25
(lp4807
sg29
I0
sba(iArchitecture
Entity
p4808
(dp4809
g11
(lp4810
sg15
S'com.google.common.graph.ImmutableValueGraph'
p4811
sg17
(lp4812
sg21
(lp4813
sg25
(lp4814
sg29
I0
sba(iArchitecture
Entity
p4815
(dp4816
g11
(lp4817
sg15
S'com.google.common.hash.AbstractByteHasher'
p4818
sg17
(lp4819
sg21
(lp4820
sg25
(lp4821
sg29
I0
sba(iArchitecture
Entity
p4822
(dp4823
g11
(lp4824
sg15
S'com.google.common.hash.AbstractHasher'
p4825
sg17
(lp4826
sg21
(lp4827
sg25
(lp4828
sg29
I0
sba(iArchitecture
Entity
p4829
(dp4830
g11
(lp4831
sg15
S'com.google.common.hash.AbstractNonStreamingHashFunction'
p4832
sg17
(lp4833
sg21
(lp4834
sg25
(lp4835
sg29
I0
sba(iArchitecture
Entity
p4836
(dp4837
g11
(lp4838
sg15
S'com.google.common.hash.AbstractStreamingHashFunction'
p4839
sg17
(lp4840
sg21
(lp4841
sg25
(lp4842
sg29
I0
sba(iArchitecture
Entity
p4843
(dp4844
g11
(lp4845
sg15
S'com.google.common.hash.BloomFilter'
p4846
sg17
(lp4847
sg21
(lp4848
sg25
(lp4849
sg29
I0
sba(iArchitecture
Entity
p4850
(dp4851
g11
(lp4852
sg15
S'com.google.common.hash.Funnels'
p4853
sg17
(lp4854
sg21
(lp4855
sg25
(lp4856
sg29
I0
sba(iArchitecture
Entity
p4857
(dp4858
g11
(lp4859
sg15
S'com.google.common.hash.HashFunction'
p4860
sg17
(lp4861
sg21
(lp4862
sg25
(lp4863
sg29
I0
sba(iArchitecture
Entity
p4864
(dp4865
g11
(lp4866
sg15
S'com.google.common.hash.Hasher'
p4867
sg17
(lp4868
sg21
(lp4869
sg25
(lp4870
sg29
I0
sba(iArchitecture
Entity
p4871
(dp4872
g11
(lp4873
sg15
S'com.google.common.hash.HashingInputStream'
p4874
sg17
(lp4875
sg21
(lp4876
sg25
(lp4877
sg29
I0
sba(iArchitecture
Entity
p4878
(dp4879
g11
(lp4880
sg15
S'com.google.common.hash.HashingOutputStream'
p4881
sg17
(lp4882
sg21
(lp4883
sg25
(lp4884
sg29
I0
sba(iArchitecture
Entity
p4885
(dp4886
g11
(lp4887
sg15
S'com.google.common.hash.MessageDigestHashFunction'
p4888
sg17
(lp4889
sg21
(lp4890
sg25
(lp4891
sg29
I0
sba(iArchitecture
Entity
p4892
(dp4893
g11
(lp4894
sg15
S'com.google.common.hash.PrimitiveSink'
p4895
sg17
(lp4896
sg21
(lp4897
sg25
(lp4898
sg29
I0
sba(iArchitecture
Entity
p4899
(dp4900
g11
(lp4901
sg15
S'com.google.common.io.AppendableWriter'
p4902
sg17
(lp4903
sg21
(lp4904
sg25
(lp4905
sg29
I0
sba(iArchitecture
Entity
p4906
(dp4907
g11
(lp4908
sg15
S'com.google.common.io.ByteArrayDataInput'
p4909
sg17
(lp4910
sg21
(lp4911
sg25
(lp4912
sg29
I0
sba(iArchitecture
Entity
p4913
(dp4914
g11
(lp4915
sg15
S'com.google.common.io.ByteProcessor'
p4916
sg17
(lp4917
sg21
(lp4918
sg25
(lp4919
sg29
I0
sba(iArchitecture
Entity
p4920
(dp4921
g11
(lp4922
V2693
p4923
asg15
S'com.google.common.io.ByteSink'
p4924
sg17
(lp4925
VJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p4926
asg21
(lp4927
(lp4928
I5
aasg25
(lp4929
VAdd Stream<String> lines() to CharSource
p4930
asg29
I0
sba(iArchitecture
Entity
p4931
(dp4932
g11
(lp4933
g4923
asg15
S'com.google.common.io.ByteSource'
p4934
sg17
(lp4935
VJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p4936
asg21
(lp4937
g4928
asg25
(lp4938
g4930
asg29
I0
sba(iArchitecture
Entity
p4939
(dp4940
g11
(lp4941
sg15
S'com.google.common.io.ByteStreams'
p4942
sg17
(lp4943
sg21
(lp4944
sg25
(lp4945
sg29
I0
sba(iArchitecture
Entity
p4946
(dp4947
g11
(lp4948
g4923
asg15
S'com.google.common.io.CharSink'
p4949
sg17
(lp4950
VJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p4951
asg21
(lp4952
g4928
asg25
(lp4953
g4930
asg29
I0
sba(iArchitecture
Entity
p4954
(dp4955
g11
(lp4956
g4923
ag4923
ag4923
asg15
S'com.google.common.io.CharSource'
p4957
sg17
(lp4958
VJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p4959
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p4960
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p4961
asg21
(lp4962
g4928
ag4928
ag4928
asg25
(lp4963
g4930
ag4930
ag4930
asg29
I0
sba(iArchitecture
Entity
p4964
(dp4965
g11
(lp4966
sg15
S'com.google.common.io.CharStreams'
p4967
sg17
(lp4968
sg21
(lp4969
sg25
(lp4970
sg29
I0
sba(iArchitecture
Entity
p4971
(dp4972
g11
(lp4973
sg15
S'com.google.common.io.Closeables'
p4974
sg17
(lp4975
sg21
(lp4976
sg25
(lp4977
sg29
I0
sba(iArchitecture
Entity
p4978
(dp4979
g11
(lp4980
sg15
S'com.google.common.io.CountingInputStream'
p4981
sg17
(lp4982
sg21
(lp4983
sg25
(lp4984
sg29
I0
sba(iArchitecture
Entity
p4985
(dp4986
g11
(lp4987
sg15
S'com.google.common.io.CountingOutputStream'
p4988
sg17
(lp4989
sg21
(lp4990
sg25
(lp4991
sg29
I0
sba(iArchitecture
Entity
p4992
(dp4993
g11
(lp4994
sg15
S'com.google.common.io.FileBackedOutputStream'
p4995
sg17
(lp4996
sg21
(lp4997
sg25
(lp4998
sg29
I0
sba(iArchitecture
Entity
p4999
(dp5000
g11
(lp5001
sg15
S'com.google.common.io.FileWriteMode'
p5002
sg17
(lp5003
sg21
(lp5004
sg25
(lp5005
sg29
I0
sba(iArchitecture
Entity
p5006
(dp5007
g11
(lp5008
sg15
S'com.google.common.io.Files'
p5009
sg17
(lp5010
sg21
(lp5011
sg25
(lp5012
sg29
I0
sba(iArchitecture
Entity
p5013
(dp5014
g11
(lp5015
sg15
S'com.google.common.io.Flushables'
p5016
sg17
(lp5017
sg21
(lp5018
sg25
(lp5019
sg29
I0
sba(iArchitecture
Entity
p5020
(dp5021
g11
(lp5022
sg15
S'com.google.common.io.LineBuffer'
p5023
sg17
(lp5024
sg21
(lp5025
sg25
(lp5026
sg29
I0
sba(iArchitecture
Entity
p5027
(dp5028
g11
(lp5029
sg15
S'com.google.common.io.LineProcessor'
p5030
sg17
(lp5031
sg21
(lp5032
sg25
(lp5033
sg29
I0
sba(iArchitecture
Entity
p5034
(dp5035
g11
(lp5036
sg15
S'com.google.common.io.LineReader'
p5037
sg17
(lp5038
sg21
(lp5039
sg25
(lp5040
sg29
I0
sba(iArchitecture
Entity
p5041
(dp5042
g11
(lp5043
sg15
S'com.google.common.io.LittleEndianDataInputStream'
p5044
sg17
(lp5045
sg21
(lp5046
sg25
(lp5047
sg29
I0
sba(iArchitecture
Entity
p5048
(dp5049
g11
(lp5050
sg15
S'com.google.common.io.LittleEndianDataOutputStream'
p5051
sg17
(lp5052
sg21
(lp5053
sg25
(lp5054
sg29
I0
sba(iArchitecture
Entity
p5055
(dp5056
g11
(lp5057
sg15
S'com.google.common.io.MultiInputStream'
p5058
sg17
(lp5059
sg21
(lp5060
sg25
(lp5061
sg29
I0
sba(iArchitecture
Entity
p5062
(dp5063
g11
(lp5064
sg15
S'com.google.common.io.PatternFilenameFilter'
p5065
sg17
(lp5066
sg21
(lp5067
sg25
(lp5068
sg29
I0
sba(iArchitecture
Entity
p5069
(dp5070
g11
(lp5071
sg15
S'com.google.common.io.ReaderInputStream'
p5072
sg17
(lp5073
sg21
(lp5074
sg25
(lp5075
sg29
I0
sba(iArchitecture
Entity
p5076
(dp5077
g11
(lp5078
sg15
S'com.google.common.io.package-info'
p5079
sg17
(lp5080
sg21
(lp5081
sg25
(lp5082
sg29
I0
sba(iArchitecture
Entity
p5083
(dp5084
g11
(lp5085
sg15
S'com.google.common.math.PairedStats'
p5086
sg17
(lp5087
sg21
(lp5088
sg25
(lp5089
sg29
I0
sba(iArchitecture
Entity
p5090
(dp5091
g11
(lp5092
sg15
S'com.google.common.util.concurrent.AbstractCatchingFuture'
p5093
sg17
(lp5094
sg21
(lp5095
sg25
(lp5096
sg29
I0
sba(iArchitecture
Entity
p5097
(dp5098
g11
(lp5099
sg15
S'com.google.common.util.concurrent.AbstractTransformFuture'
p5100
sg17
(lp5101
sg21
(lp5102
sg25
(lp5103
sg29
I0
sba(iArchitecture
Entity
p5104
(dp5105
g11
(lp5106
sg15
S'com.google.common.util.concurrent.Futures'
p5107
sg17
(lp5108
sg21
(lp5109
sg25
(lp5110
sg29
I0
sba(iArchitecture
Entity
p5111
(dp5112
g11
(lp5113
sg15
S'com.google.common.util.concurrent.UncaughtExceptionHandlers'
p5114
sg17
(lp5115
sg21
(lp5116
sg25
(lp5117
sg29
I0
sba(iArchitecture
Entity
p5118
(dp5119
g11
(lp5120
sg15
S'com.google.common.xml.XmlEscapers'
p5121
sg17
(lp5122
sg21
(lp5123
sg25
(lp5124
sg29
I0
sbasg1053
(lp5125
g4594
ag4601
ag4608
ag4615
ag4622
ag4629
ag4636
ag4643
ag4650
ag4657
ag4664
ag4671
ag4678
ag4685
ag4692
ag4699
ag4706
ag4713
ag4720
ag4727
ag4734
ag4741
ag4748
ag4755
ag4762
ag4769
ag4776
ag4783
ag4790
ag4797
ag4804
ag4811
ag4818
ag4825
ag4832
ag4839
ag4846
ag4853
ag4860
ag4867
ag4874
ag4881
ag4888
ag4895
ag4902
ag4909
ag4916
ag4924
ag4934
ag4942
ag4949
ag4957
ag4967
ag4974
ag4981
ag4988
ag4995
ag5002
ag5009
ag5016
ag5023
ag5030
ag5037
ag5044
ag5051
ag5058
ag5065
ag5072
ag5079
ag5086
ag5093
ag5100
ag5107
ag5114
ag5121
asg29
I0
sg1055
S'io'
p5126
sba(iArchitecture
Cluster
p5127
(dp5128
g7
(lp5129
(iArchitecture
Entity
p5130
(dp5131
g11
(lp5132
sg15
S'com.google.common.base.AbstractIterator'
p5133
sg17
(lp5134
sg21
(lp5135
sg25
(lp5136
sg29
I0
sba(iArchitecture
Entity
p5137
(dp5138
g11
(lp5139
sg15
S'com.google.common.base.CommonPattern'
p5140
sg17
(lp5141
sg21
(lp5142
sg25
(lp5143
sg29
I0
sba(iArchitecture
Entity
p5144
(dp5145
g11
(lp5146
sg15
S'com.google.common.base.Converter'
p5147
sg17
(lp5148
sg21
(lp5149
sg25
(lp5150
sg29
I0
sba(iArchitecture
Entity
p5151
(dp5152
g11
(lp5153
sg15
S'com.google.common.base.ExtraObjectsMethodsForWeb'
p5154
sg17
(lp5155
sg21
(lp5156
sg25
(lp5157
sg29
I0
sba(iArchitecture
Entity
p5158
(dp5159
g11
(lp5160
sg15
S'com.google.common.base.FinalizablePhantomReference'
p5161
sg17
(lp5162
sg21
(lp5163
sg25
(lp5164
sg29
I0
sba(iArchitecture
Entity
p5165
(dp5166
g11
(lp5167
sg15
S'com.google.common.base.FinalizableReferenceQueue'
p5168
sg17
(lp5169
sg21
(lp5170
sg25
(lp5171
sg29
I0
sba(iArchitecture
Entity
p5172
(dp5173
g11
(lp5174
sg15
S'com.google.common.base.FinalizableSoftReference'
p5175
sg17
(lp5176
sg21
(lp5177
sg25
(lp5178
sg29
I0
sba(iArchitecture
Entity
p5179
(dp5180
g11
(lp5181
sg15
S'com.google.common.base.FinalizableWeakReference'
p5182
sg17
(lp5183
sg21
(lp5184
sg25
(lp5185
sg29
I0
sba(iArchitecture
Entity
p5186
(dp5187
g11
(lp5188
sg15
S'com.google.common.base.Joiner'
p5189
sg17
(lp5190
sg21
(lp5191
sg25
(lp5192
sg29
I0
sba(iArchitecture
Entity
p5193
(dp5194
g11
(lp5195
sg15
S'com.google.common.base.PatternCompiler'
p5196
sg17
(lp5197
sg21
(lp5198
sg25
(lp5199
sg29
I0
sba(iArchitecture
Entity
p5200
(dp5201
g11
(lp5202
sg15
S'com.google.common.base.Throwables'
p5203
sg17
(lp5204
sg21
(lp5205
sg25
(lp5206
sg29
I0
sba(iArchitecture
Entity
p5207
(dp5208
g11
(lp5209
sg15
S'com.google.common.base.Ticker'
p5210
sg17
(lp5211
sg21
(lp5212
sg25
(lp5213
sg29
I0
sba(iArchitecture
Entity
p5214
(dp5215
g11
(lp5216
sg15
S'com.google.common.base.Verify'
p5217
sg17
(lp5218
sg21
(lp5219
sg25
(lp5220
sg29
I0
sba(iArchitecture
Entity
p5221
(dp5222
g11
(lp5223
sg15
S'com.google.common.base.VerifyException'
p5224
sg17
(lp5225
sg21
(lp5226
sg25
(lp5227
sg29
I0
sba(iArchitecture
Entity
p5228
(dp5229
g11
(lp5230
sg15
S'com.google.common.base.package-info'
p5231
sg17
(lp5232
sg21
(lp5233
sg25
(lp5234
sg29
I0
sba(iArchitecture
Entity
p5235
(dp5236
g11
(lp5237
sg15
S'com.google.common.cache.AbstractCache'
p5238
sg17
(lp5239
sg21
(lp5240
sg25
(lp5241
sg29
I0
sba(iArchitecture
Entity
p5242
(dp5243
g11
(lp5244
sg15
S'com.google.common.cache.AbstractLoadingCache'
p5245
sg17
(lp5246
sg21
(lp5247
sg25
(lp5248
sg29
I0
sba(iArchitecture
Entity
p5249
(dp5250
g11
(lp5251
sg15
S'com.google.common.cache.CacheBuilder'
p5252
sg17
(lp5253
sg21
(lp5254
sg25
(lp5255
sg29
I0
sba(iArchitecture
Entity
p5256
(dp5257
g11
(lp5258
sg15
S'com.google.common.cache.CacheLoader'
p5259
sg17
(lp5260
sg21
(lp5261
sg25
(lp5262
sg29
I0
sba(iArchitecture
Entity
p5263
(dp5264
g11
(lp5265
sg15
S'com.google.common.cache.CacheStats'
p5266
sg17
(lp5267
sg21
(lp5268
sg25
(lp5269
sg29
I0
sba(iArchitecture
Entity
p5270
(dp5271
g11
(lp5272
sg15
S'com.google.common.cache.ForwardingCache'
p5273
sg17
(lp5274
sg21
(lp5275
sg25
(lp5276
sg29
I0
sba(iArchitecture
Entity
p5277
(dp5278
g11
(lp5279
sg15
S'com.google.common.cache.ForwardingLoadingCache'
p5280
sg17
(lp5281
sg21
(lp5282
sg25
(lp5283
sg29
I0
sba(iArchitecture
Entity
p5284
(dp5285
g11
(lp5286
sg15
S'com.google.common.cache.LoadingCache'
p5287
sg17
(lp5288
sg21
(lp5289
sg25
(lp5290
sg29
I0
sba(iArchitecture
Entity
p5291
(dp5292
g11
(lp5293
sg15
S'com.google.common.cache.LongAddables'
p5294
sg17
(lp5295
sg21
(lp5296
sg25
(lp5297
sg29
I0
sba(iArchitecture
Entity
p5298
(dp5299
g11
(lp5300
sg15
S'com.google.common.cache.RemovalCause'
p5301
sg17
(lp5302
sg21
(lp5303
sg25
(lp5304
sg29
I0
sba(iArchitecture
Entity
p5305
(dp5306
g11
(lp5307
sg15
S'com.google.common.cache.RemovalListeners'
p5308
sg17
(lp5309
sg21
(lp5310
sg25
(lp5311
sg29
I0
sba(iArchitecture
Entity
p5312
(dp5313
g11
(lp5314
sg15
S'com.google.common.cache.Striped64'
p5315
sg17
(lp5316
sg21
(lp5317
sg25
(lp5318
sg29
I0
sba(iArchitecture
Entity
p5319
(dp5320
g11
(lp5321
sg15
S'com.google.common.cache.Weigher'
p5322
sg17
(lp5323
sg21
(lp5324
sg25
(lp5325
sg29
I0
sba(iArchitecture
Entity
p5326
(dp5327
g11
(lp5328
sg15
S'com.google.common.cache.package-info'
p5329
sg17
(lp5330
sg21
(lp5331
sg25
(lp5332
sg29
I0
sba(iArchitecture
Entity
p5333
(dp5334
g11
(lp5335
sg15
S'com.google.common.collect.AbstractIterator'
p5336
sg17
(lp5337
sg21
(lp5338
sg25
(lp5339
sg29
I0
sba(iArchitecture
Entity
p5340
(dp5341
g11
(lp5342
sg15
S'com.google.common.collect.AbstractMapEntry'
p5343
sg17
(lp5344
sg21
(lp5345
sg25
(lp5346
sg29
I0
sba(iArchitecture
Entity
p5347
(dp5348
g11
(lp5349
sg15
S'com.google.common.collect.AbstractSortedMultiset'
p5350
sg17
(lp5351
sg21
(lp5352
sg25
(lp5353
sg29
I0
sba(iArchitecture
Entity
p5354
(dp5355
g11
(lp5356
sg15
S'com.google.common.collect.BinaryTreeTraverser'
p5357
sg17
(lp5358
sg21
(lp5359
sg25
(lp5360
sg29
I0
sba(iArchitecture
Entity
p5361
(dp5362
g11
(lp5363
sg15
S'com.google.common.collect.CollectPreconditions'
p5364
sg17
(lp5365
sg21
(lp5366
sg25
(lp5367
sg29
I0
sba(iArchitecture
Entity
p5368
(dp5369
g11
(lp5370
sg15
S'com.google.common.collect.Constraint'
p5371
sg17
(lp5372
sg21
(lp5373
sg25
(lp5374
sg29
I0
sba(iArchitecture
Entity
p5375
(dp5376
g11
(lp5377
sg15
S'com.google.common.collect.Constraints'
p5378
sg17
(lp5379
sg21
(lp5380
sg25
(lp5381
sg29
I0
sba(iArchitecture
Entity
p5382
(dp5383
g11
(lp5384
sg15
S'com.google.common.collect.Cut'
p5385
sg17
(lp5386
sg21
(lp5387
sg25
(lp5388
sg29
I0
sba(iArchitecture
Entity
p5389
(dp5390
g11
(lp5391
sg15
S'com.google.common.collect.DiscreteDomain'
p5392
sg17
(lp5393
sg21
(lp5394
sg25
(lp5395
sg29
I0
sba(iArchitecture
Entity
p5396
(dp5397
g11
(lp5398
sg15
S'com.google.common.collect.FilteredKeyListMultimap'
p5399
sg17
(lp5400
sg21
(lp5401
sg25
(lp5402
sg29
I0
sba(iArchitecture
Entity
p5403
(dp5404
g11
(lp5405
sg15
S'com.google.common.collect.FilteredSetMultimap'
p5406
sg17
(lp5407
sg21
(lp5408
sg25
(lp5409
sg29
I0
sba(iArchitecture
Entity
p5410
(dp5411
g11
(lp5412
sg15
S'com.google.common.collect.ForwardingBlockingDeque'
p5413
sg17
(lp5414
sg21
(lp5415
sg25
(lp5416
sg29
I0
sba(iArchitecture
Entity
p5417
(dp5418
g11
(lp5419
sg15
S'com.google.common.collect.ForwardingCollection'
p5420
sg17
(lp5421
sg21
(lp5422
sg25
(lp5423
sg29
I0
sba(iArchitecture
Entity
p5424
(dp5425
g11
(lp5426
sg15
S'com.google.common.collect.ForwardingConcurrentMap'
p5427
sg17
(lp5428
sg21
(lp5429
sg25
(lp5430
sg29
I0
sba(iArchitecture
Entity
p5431
(dp5432
g11
(lp5433
sg15
S'com.google.common.collect.ForwardingDeque'
p5434
sg17
(lp5435
sg21
(lp5436
sg25
(lp5437
sg29
I0
sba(iArchitecture
Entity
p5438
(dp5439
g11
(lp5440
sg15
S'com.google.common.collect.ForwardingImmutableList'
p5441
sg17
(lp5442
sg21
(lp5443
sg25
(lp5444
sg29
I0
sba(iArchitecture
Entity
p5445
(dp5446
g11
(lp5447
sg15
S'com.google.common.collect.ForwardingImmutableMap'
p5448
sg17
(lp5449
sg21
(lp5450
sg25
(lp5451
sg29
I0
sba(iArchitecture
Entity
p5452
(dp5453
g11
(lp5454
sg15
S'com.google.common.collect.ForwardingImmutableSet'
p5455
sg17
(lp5456
sg21
(lp5457
sg25
(lp5458
sg29
I0
sba(iArchitecture
Entity
p5459
(dp5460
g11
(lp5461
sg15
S'com.google.common.collect.ForwardingIterator'
p5462
sg17
(lp5463
sg21
(lp5464
sg25
(lp5465
sg29
I0
sba(iArchitecture
Entity
p5466
(dp5467
g11
(lp5468
sg15
S'com.google.common.collect.ForwardingListIterator'
p5469
sg17
(lp5470
sg21
(lp5471
sg25
(lp5472
sg29
I0
sba(iArchitecture
Entity
p5473
(dp5474
g11
(lp5475
sg15
S'com.google.common.collect.ForwardingListMultimap'
p5476
sg17
(lp5477
sg21
(lp5478
sg25
(lp5479
sg29
I0
sba(iArchitecture
Entity
p5480
(dp5481
g11
(lp5482
sg15
S'com.google.common.collect.ForwardingMap'
p5483
sg17
(lp5484
sg21
(lp5485
sg25
(lp5486
sg29
I0
sba(iArchitecture
Entity
p5487
(dp5488
g11
(lp5489
sg15
S'com.google.common.collect.ForwardingMapEntry'
p5490
sg17
(lp5491
sg21
(lp5492
sg25
(lp5493
sg29
I0
sba(iArchitecture
Entity
p5494
(dp5495
g11
(lp5496
sg15
S'com.google.common.collect.ForwardingMultiset'
p5497
sg17
(lp5498
sg21
(lp5499
sg25
(lp5500
sg29
I0
sba(iArchitecture
Entity
p5501
(dp5502
g11
(lp5503
sg15
S'com.google.common.collect.ForwardingNavigableMap'
p5504
sg17
(lp5505
sg21
(lp5506
sg25
(lp5507
sg29
I0
sba(iArchitecture
Entity
p5508
(dp5509
g11
(lp5510
sg15
S'com.google.common.collect.ForwardingNavigableSet'
p5511
sg17
(lp5512
sg21
(lp5513
sg25
(lp5514
sg29
I0
sba(iArchitecture
Entity
p5515
(dp5516
g11
(lp5517
sg15
S'com.google.common.collect.ForwardingObject'
p5518
sg17
(lp5519
sg21
(lp5520
sg25
(lp5521
sg29
I0
sba(iArchitecture
Entity
p5522
(dp5523
g11
(lp5524
sg15
S'com.google.common.collect.ForwardingQueue'
p5525
sg17
(lp5526
sg21
(lp5527
sg25
(lp5528
sg29
I0
sba(iArchitecture
Entity
p5529
(dp5530
g11
(lp5531
sg15
S'com.google.common.collect.ForwardingSet'
p5532
sg17
(lp5533
sg21
(lp5534
sg25
(lp5535
sg29
I0
sba(iArchitecture
Entity
p5536
(dp5537
g11
(lp5538
sg15
S'com.google.common.collect.ForwardingSortedMap'
p5539
sg17
(lp5540
sg21
(lp5541
sg25
(lp5542
sg29
I0
sba(iArchitecture
Entity
p5543
(dp5544
g11
(lp5545
sg15
S'com.google.common.collect.ForwardingSortedMultiset'
p5546
sg17
(lp5547
sg21
(lp5548
sg25
(lp5549
sg29
I0
sba(iArchitecture
Entity
p5550
(dp5551
g11
(lp5552
sg15
S'com.google.common.collect.ForwardingSortedSet'
p5553
sg17
(lp5554
sg21
(lp5555
sg25
(lp5556
sg29
I0
sba(iArchitecture
Entity
p5557
(dp5558
g11
(lp5559
sg15
S'com.google.common.collect.GwtTransient'
p5560
sg17
(lp5561
sg21
(lp5562
sg25
(lp5563
sg29
I0
sba(iArchitecture
Entity
p5564
(dp5565
g11
(lp5566
sg15
S'com.google.common.collect.ImmutableCollection'
p5567
sg17
(lp5568
sg21
(lp5569
sg25
(lp5570
sg29
I0
sba(iArchitecture
Entity
p5571
(dp5572
g11
(lp5573
sg15
S'com.google.common.collect.ImmutableEnumMap'
p5574
sg17
(lp5575
sg21
(lp5576
sg25
(lp5577
sg29
I0
sba(iArchitecture
Entity
p5578
(dp5579
g11
(lp5580
sg15
S'com.google.common.collect.ImmutableEnumSet'
p5581
sg17
(lp5582
sg21
(lp5583
sg25
(lp5584
sg29
I0
sba(iArchitecture
Entity
p5585
(dp5586
g11
(lp5587
sg15
S'com.google.common.collect.ImmutableMapEntry'
p5588
sg17
(lp5589
sg21
(lp5590
sg25
(lp5591
sg29
I0
sba(iArchitecture
Entity
p5592
(dp5593
g11
(lp5594
sg15
S'com.google.common.collect.ImmutableMapEntrySet'
p5595
sg17
(lp5596
sg21
(lp5597
sg25
(lp5598
sg29
I0
sba(iArchitecture
Entity
p5599
(dp5600
g11
(lp5601
sg15
S'com.google.common.collect.ImmutableSortedAsList'
p5602
sg17
(lp5603
sg21
(lp5604
sg25
(lp5605
sg29
I0
sba(iArchitecture
Entity
p5606
(dp5607
g11
(lp5608
sg15
S'com.google.common.collect.Interners'
p5609
sg17
(lp5610
sg21
(lp5611
sg25
(lp5612
sg29
I0
sba(iArchitecture
Entity
p5613
(dp5614
g11
(lp5615
sg15
S'com.google.common.collect.MapConstraint'
p5616
sg17
(lp5617
sg21
(lp5618
sg25
(lp5619
sg29
I0
sba(iArchitecture
Entity
p5620
(dp5621
g11
(lp5622
sg15
S'com.google.common.collect.MapMaker'
p5623
sg17
(lp5624
sg21
(lp5625
sg25
(lp5626
sg29
I0
sba(iArchitecture
Entity
p5627
(dp5628
g11
(lp5629
sg15
S'com.google.common.collect.MultimapBuilder'
p5630
sg17
(lp5631
sg21
(lp5632
sg25
(lp5633
sg29
I0
sba(iArchitecture
Entity
p5634
(dp5635
g11
(lp5636
sg15
S'com.google.common.collect.Multiset'
p5637
sg17
(lp5638
sg21
(lp5639
sg25
(lp5640
sg29
I0
sba(iArchitecture
Entity
p5641
(dp5642
g11
(lp5643
sg15
S'com.google.common.collect.PeekingIterator'
p5644
sg17
(lp5645
sg21
(lp5646
sg25
(lp5647
sg29
I0
sba(iArchitecture
Entity
p5648
(dp5649
g11
(lp5650
sg15
S'com.google.common.collect.RegularImmutableAsList'
p5651
sg17
(lp5652
sg21
(lp5653
sg25
(lp5654
sg29
I0
sba(iArchitecture
Entity
p5655
(dp5656
g11
(lp5657
sg15
S'com.google.common.collect.SingletonImmutableTable'
p5658
sg17
(lp5659
sg21
(lp5660
sg25
(lp5661
sg29
I0
sba(iArchitecture
Entity
p5662
(dp5663
g11
(lp5664
sg15
S'com.google.common.collect.SortedLists'
p5665
sg17
(lp5666
sg21
(lp5667
sg25
(lp5668
sg29
I0
sba(iArchitecture
Entity
p5669
(dp5670
g11
(lp5671
sg15
S'com.google.common.collect.SortedMultiset'
p5672
sg17
(lp5673
sg21
(lp5674
sg25
(lp5675
sg29
I0
sba(iArchitecture
Entity
p5676
(dp5677
g11
(lp5678
sg15
S'com.google.common.collect.StandardRowSortedTable'
p5679
sg17
(lp5680
sg21
(lp5681
sg25
(lp5682
sg29
I0
sba(iArchitecture
Entity
p5683
(dp5684
g11
(lp5685
sg15
S'com.google.common.collect.TreeTraverser'
p5686
sg17
(lp5687
sg21
(lp5688
sg25
(lp5689
sg29
I0
sba(iArchitecture
Entity
p5690
(dp5691
g11
(lp5692
sg15
S'com.google.common.collect.UnmodifiableIterator'
p5693
sg17
(lp5694
sg21
(lp5695
sg25
(lp5696
sg29
I0
sba(iArchitecture
Entity
p5697
(dp5698
g11
(lp5699
sg15
S'com.google.common.collect.UnmodifiableListIterator'
p5700
sg17
(lp5701
sg21
(lp5702
sg25
(lp5703
sg29
I0
sba(iArchitecture
Entity
p5704
(dp5705
g11
(lp5706
sg15
S'com.google.common.collect.UnmodifiableSortedMultiset'
p5707
sg17
(lp5708
sg21
(lp5709
sg25
(lp5710
sg29
I0
sba(iArchitecture
Entity
p5711
(dp5712
g11
(lp5713
sg15
S'com.google.common.collect.package-info'
p5714
sg17
(lp5715
sg21
(lp5716
sg25
(lp5717
sg29
I0
sba(iArchitecture
Entity
p5718
(dp5719
g11
(lp5720
sg15
S'com.google.common.escape.package-info'
p5721
sg17
(lp5722
sg21
(lp5723
sg25
(lp5724
sg29
I0
sba(iArchitecture
Entity
p5725
(dp5726
g11
(lp5727
sg15
S'com.google.common.eventbus.AsyncEventBus'
p5728
sg17
(lp5729
sg21
(lp5730
sg25
(lp5731
sg29
I0
sba(iArchitecture
Entity
p5732
(dp5733
g11
(lp5734
sg15
S'com.google.common.eventbus.EventBus'
p5735
sg17
(lp5736
sg21
(lp5737
sg25
(lp5738
sg29
I0
sba(iArchitecture
Entity
p5739
(dp5740
g11
(lp5741
sg15
S'com.google.common.graph.AbstractValueGraph'
p5742
sg17
(lp5743
sg21
(lp5744
sg25
(lp5745
sg29
I0
sba(iArchitecture
Entity
p5746
(dp5747
g11
(lp5748
sg15
S'com.google.common.graph.ConfigurableMutableGraph'
p5749
sg17
(lp5750
sg21
(lp5751
sg25
(lp5752
sg29
I0
sba(iArchitecture
Entity
p5753
(dp5754
g11
(lp5755
sg15
S'com.google.common.graph.ConfigurableMutableNetwork'
p5756
sg17
(lp5757
sg21
(lp5758
sg25
(lp5759
sg29
I0
sba(iArchitecture
Entity
p5760
(dp5761
g11
(lp5762
sg15
S'com.google.common.graph.ConfigurableMutableValueGraph'
p5763
sg17
(lp5764
sg21
(lp5765
sg25
(lp5766
sg29
I0
sba(iArchitecture
Entity
p5767
(dp5768
g11
(lp5769
sg15
S'com.google.common.graph.ConfigurableNetwork'
p5770
sg17
(lp5771
sg21
(lp5772
sg25
(lp5773
sg29
I0
sba(iArchitecture
Entity
p5774
(dp5775
g11
(lp5776
sg15
S'com.google.common.graph.EdgesConnecting'
p5777
sg17
(lp5778
sg21
(lp5779
sg25
(lp5780
sg29
I0
sba(iArchitecture
Entity
p5781
(dp5782
g11
(lp5783
sg15
S'com.google.common.graph.Graph'
p5784
sg17
(lp5785
sg21
(lp5786
sg25
(lp5787
sg29
I0
sba(iArchitecture
Entity
p5788
(dp5789
g11
(lp5790
sg15
S'com.google.common.graph.GraphBuilder'
p5791
sg17
(lp5792
sg21
(lp5793
sg25
(lp5794
sg29
I0
sba(iArchitecture
Entity
p5795
(dp5796
g11
(lp5797
sg15
S'com.google.common.graph.Graphs'
p5798
sg17
(lp5799
sg21
(lp5800
sg25
(lp5801
sg29
I0
sba(iArchitecture
Entity
p5802
(dp5803
g11
(lp5804
sg15
S'com.google.common.graph.ImmutableNetwork'
p5805
sg17
(lp5806
sg21
(lp5807
sg25
(lp5808
sg29
I0
sba(iArchitecture
Entity
p5809
(dp5810
g11
(lp5811
sg15
S'com.google.common.graph.MultiEdgesConnecting'
p5812
sg17
(lp5813
sg21
(lp5814
sg25
(lp5815
sg29
I0
sba(iArchitecture
Entity
p5816
(dp5817
g11
(lp5818
sg15
S'com.google.common.graph.MutableGraph'
p5819
sg17
(lp5820
sg21
(lp5821
sg25
(lp5822
sg29
I0
sba(iArchitecture
Entity
p5823
(dp5824
g11
(lp5825
sg15
S'com.google.common.graph.MutableNetwork'
p5826
sg17
(lp5827
sg21
(lp5828
sg25
(lp5829
sg29
I0
sba(iArchitecture
Entity
p5830
(dp5831
g11
(lp5832
sg15
S'com.google.common.graph.MutableValueGraph'
p5833
sg17
(lp5834
sg21
(lp5835
sg25
(lp5836
sg29
I0
sba(iArchitecture
Entity
p5837
(dp5838
g11
(lp5839
sg15
S'com.google.common.graph.Network'
p5840
sg17
(lp5841
sg21
(lp5842
sg25
(lp5843
sg29
I0
sba(iArchitecture
Entity
p5844
(dp5845
g11
(lp5846
sg15
S'com.google.common.graph.NetworkBuilder'
p5847
sg17
(lp5848
sg21
(lp5849
sg25
(lp5850
sg29
I0
sba(iArchitecture
Entity
p5851
(dp5852
g11
(lp5853
sg15
S'com.google.common.graph.ValueGraph'
p5854
sg17
(lp5855
sg21
(lp5856
sg25
(lp5857
sg29
I0
sba(iArchitecture
Entity
p5858
(dp5859
g11
(lp5860
sg15
S'com.google.common.graph.ValueGraphBuilder'
p5861
sg17
(lp5862
sg21
(lp5863
sg25
(lp5864
sg29
I0
sba(iArchitecture
Entity
p5865
(dp5866
g11
(lp5867
sg15
S'com.google.common.hash.Hashing'
p5868
sg17
(lp5869
sg21
(lp5870
sg25
(lp5871
sg29
I0
sba(iArchitecture
Entity
p5872
(dp5873
g11
(lp5874
sg15
S'com.google.common.html.HtmlEscapers'
p5875
sg17
(lp5876
sg21
(lp5877
sg25
(lp5878
sg29
I0
sba(iArchitecture
Entity
p5879
(dp5880
g11
(lp5881
sg15
S'com.google.common.io.Resources'
p5882
sg17
(lp5883
sg21
(lp5884
sg25
(lp5885
sg29
I0
sba(iArchitecture
Entity
p5886
(dp5887
g11
(lp5888
sg15
S'com.google.common.math.DoubleUtils'
p5889
sg17
(lp5890
sg21
(lp5891
sg25
(lp5892
sg29
I0
sba(iArchitecture
Entity
p5893
(dp5894
g11
(lp5895
sg15
S'com.google.common.math.MathPreconditions'
p5896
sg17
(lp5897
sg21
(lp5898
sg25
(lp5899
sg29
I0
sba(iArchitecture
Entity
p5900
(dp5901
g11
(lp5902
sg15
S'com.google.common.net.HostAndPort'
p5903
sg17
(lp5904
sg21
(lp5905
sg25
(lp5906
sg29
I0
sba(iArchitecture
Entity
p5907
(dp5908
g11
(lp5909
sg15
S'com.google.common.net.HostSpecifier'
p5910
sg17
(lp5911
sg21
(lp5912
sg25
(lp5913
sg29
I0
sba(iArchitecture
Entity
p5914
(dp5915
g11
(lp5916
sg15
S'com.google.common.net.HttpHeaders'
p5917
sg17
(lp5918
sg21
(lp5919
sg25
(lp5920
sg29
I0
sba(iArchitecture
Entity
p5921
(dp5922
g11
(lp5923
sg15
S'com.google.common.net.InetAddresses'
p5924
sg17
(lp5925
sg21
(lp5926
sg25
(lp5927
sg29
I0
sba(iArchitecture
Entity
p5928
(dp5929
g11
(lp5930
sg15
S'com.google.common.net.InternetDomainName'
p5931
sg17
(lp5932
sg21
(lp5933
sg25
(lp5934
sg29
I0
sba(iArchitecture
Entity
p5935
(dp5936
g11
(lp5937
sg15
S'com.google.common.net.UrlEscapers'
p5938
sg17
(lp5939
sg21
(lp5940
sg25
(lp5941
sg29
I0
sba(iArchitecture
Entity
p5942
(dp5943
g11
(lp5944
sg15
S'com.google.common.net.package-info'
p5945
sg17
(lp5946
sg21
(lp5947
sg25
(lp5948
sg29
I0
sba(iArchitecture
Entity
p5949
(dp5950
g11
(lp5951
sg15
S'com.google.common.primitives.ParseRequest'
p5952
sg17
(lp5953
sg21
(lp5954
sg25
(lp5955
sg29
I0
sba(iArchitecture
Entity
p5956
(dp5957
g11
(lp5958
sg15
S'com.google.common.primitives.package-info'
p5959
sg17
(lp5960
sg21
(lp5961
sg25
(lp5962
sg29
I0
sba(iArchitecture
Entity
p5963
(dp5964
g11
(lp5965
sg15
S'com.google.common.reflect.AbstractInvocationHandler'
p5966
sg17
(lp5967
sg21
(lp5968
sg25
(lp5969
sg29
I0
sba(iArchitecture
Entity
p5970
(dp5971
g11
(lp5972
sg15
S'com.google.common.reflect.ClassPath'
p5973
sg17
(lp5974
sg21
(lp5975
sg25
(lp5976
sg29
I0
sba(iArchitecture
Entity
p5977
(dp5978
g11
(lp5979
sg15
S'com.google.common.reflect.Reflection'
p5980
sg17
(lp5981
sg21
(lp5982
sg25
(lp5983
sg29
I0
sba(iArchitecture
Entity
p5984
(dp5985
g11
(lp5986
sg15
S'com.google.common.reflect.TypeCapture'
p5987
sg17
(lp5988
sg21
(lp5989
sg25
(lp5990
sg29
I0
sba(iArchitecture
Entity
p5991
(dp5992
g11
(lp5993
sg15
S'com.google.common.util.concurrent.AbstractCheckedFuture'
p5994
sg17
(lp5995
sg21
(lp5996
sg25
(lp5997
sg29
I0
sba(iArchitecture
Entity
p5998
(dp5999
g11
(lp6000
sg15
S'com.google.common.util.concurrent.AbstractExecutionThreadService'
p6001
sg17
(lp6002
sg21
(lp6003
sg25
(lp6004
sg29
I0
sba(iArchitecture
Entity
p6005
(dp6006
g11
(lp6007
sg15
S'com.google.common.util.concurrent.AbstractFuture'
p6008
sg17
(lp6009
sg21
(lp6010
sg25
(lp6011
sg29
I0
sba(iArchitecture
Entity
p6012
(dp6013
g11
(lp6014
sg15
S'com.google.common.util.concurrent.AbstractListeningExecutorService'
p6015
sg17
(lp6016
sg21
(lp6017
sg25
(lp6018
sg29
I0
sba(iArchitecture
Entity
p6019
(dp6020
g11
(lp6021
sg15
S'com.google.common.util.concurrent.AbstractScheduledService'
p6022
sg17
(lp6023
sg21
(lp6024
sg25
(lp6025
sg29
I0
sba(iArchitecture
Entity
p6026
(dp6027
g11
(lp6028
sg15
S'com.google.common.util.concurrent.AbstractService'
p6029
sg17
(lp6030
sg21
(lp6031
sg25
(lp6032
sg29
I0
sba(iArchitecture
Entity
p6033
(dp6034
g11
(lp6035
sg15
S'com.google.common.util.concurrent.AggregateFuture'
p6036
sg17
(lp6037
sg21
(lp6038
sg25
(lp6039
sg29
I0
sba(iArchitecture
Entity
p6040
(dp6041
g11
(lp6042
sg15
S'com.google.common.util.concurrent.AggregateFutureState'
p6043
sg17
(lp6044
sg21
(lp6045
sg25
(lp6046
sg29
I0
sba(iArchitecture
Entity
p6047
(dp6048
g11
(lp6049
sg15
S'com.google.common.util.concurrent.Callables'
p6050
sg17
(lp6051
sg21
(lp6052
sg25
(lp6053
sg29
I0
sba(iArchitecture
Entity
p6054
(dp6055
g11
(lp6056
sg15
S'com.google.common.util.concurrent.CycleDetectingLockFactory'
p6057
sg17
(lp6058
sg21
(lp6059
sg25
(lp6060
sg29
I0
sba(iArchitecture
Entity
p6061
(dp6062
g11
(lp6063
sg15
S'com.google.common.util.concurrent.ExecutionError'
p6064
sg17
(lp6065
sg21
(lp6066
sg25
(lp6067
sg29
I0
sba(iArchitecture
Entity
p6068
(dp6069
g11
(lp6070
sg15
S'com.google.common.util.concurrent.ForwardingBlockingQueue'
p6071
sg17
(lp6072
sg21
(lp6073
sg25
(lp6074
sg29
I0
sba(iArchitecture
Entity
p6075
(dp6076
g11
(lp6077
sg15
S'com.google.common.util.concurrent.ForwardingCheckedFuture'
p6078
sg17
(lp6079
sg21
(lp6080
sg25
(lp6081
sg29
I0
sba(iArchitecture
Entity
p6082
(dp6083
g11
(lp6084
sg15
S'com.google.common.util.concurrent.ForwardingExecutorService'
p6085
sg17
(lp6086
sg21
(lp6087
sg25
(lp6088
sg29
I0
sba(iArchitecture
Entity
p6089
(dp6090
g11
(lp6091
sg15
S'com.google.common.util.concurrent.ForwardingFuture'
p6092
sg17
(lp6093
sg21
(lp6094
sg25
(lp6095
sg29
I0
sba(iArchitecture
Entity
p6096
(dp6097
g11
(lp6098
sg15
S'com.google.common.util.concurrent.ForwardingListenableFuture'
p6099
sg17
(lp6100
sg21
(lp6101
sg25
(lp6102
sg29
I0
sba(iArchitecture
Entity
p6103
(dp6104
g11
(lp6105
sg15
S'com.google.common.util.concurrent.ForwardingListeningExecutorService'
p6106
sg17
(lp6107
sg21
(lp6108
sg25
(lp6109
sg29
I0
sba(iArchitecture
Entity
p6110
(dp6111
g11
(lp6112
sg15
S'com.google.common.util.concurrent.GwtFuturesCatchingSpecialization'
p6113
sg17
(lp6114
sg21
(lp6115
sg25
(lp6116
sg29
I0
sba(iArchitecture
Entity
p6117
(dp6118
g11
(lp6119
sg15
S'com.google.common.util.concurrent.InterruptibleTask'
p6120
sg17
(lp6121
sg21
(lp6122
sg25
(lp6123
sg29
I0
sba(iArchitecture
Entity
p6124
(dp6125
g11
(lp6126
sg15
S'com.google.common.util.concurrent.JdkFutureAdapters'
p6127
sg17
(lp6128
sg21
(lp6129
sg25
(lp6130
sg29
I0
sba(iArchitecture
Entity
p6131
(dp6132
g11
(lp6133
sg15
S'com.google.common.util.concurrent.ListenableFuture'
p6134
sg17
(lp6135
sg21
(lp6136
sg25
(lp6137
sg29
I0
sba(iArchitecture
Entity
p6138
(dp6139
g11
(lp6140
sg15
S'com.google.common.util.concurrent.ListenerCallQueue'
p6141
sg17
(lp6142
sg21
(lp6143
sg25
(lp6144
sg29
I0
sba(iArchitecture
Entity
p6145
(dp6146
g11
(lp6147
sg15
S'com.google.common.util.concurrent.ListeningExecutorService'
p6148
sg17
(lp6149
sg21
(lp6150
sg25
(lp6151
sg29
I0
sba(iArchitecture
Entity
p6152
(dp6153
g11
(lp6154
sg15
S'com.google.common.util.concurrent.MoreExecutors'
p6155
sg17
(lp6156
sg21
(lp6157
sg25
(lp6158
sg29
I0
sba(iArchitecture
Entity
p6159
(dp6160
g11
(lp6161
sg15
S'com.google.common.util.concurrent.RateLimiter'
p6162
sg17
(lp6163
sg21
(lp6164
sg25
(lp6165
sg29
I0
sba(iArchitecture
Entity
p6166
(dp6167
g11
(lp6168
sg15
S'com.google.common.util.concurrent.Runnables'
p6169
sg17
(lp6170
sg21
(lp6171
sg25
(lp6172
sg29
I0
sba(iArchitecture
Entity
p6173
(dp6174
g11
(lp6175
sg15
S'com.google.common.util.concurrent.SerializingExecutor'
p6176
sg17
(lp6177
sg21
(lp6178
sg25
(lp6179
sg29
I0
sba(iArchitecture
Entity
p6180
(dp6181
g11
(lp6182
sg15
S'com.google.common.util.concurrent.Service'
p6183
sg17
(lp6184
sg21
(lp6185
sg25
(lp6186
sg29
I0
sba(iArchitecture
Entity
p6187
(dp6188
g11
(lp6189
sg15
S'com.google.common.util.concurrent.ServiceManager'
p6190
sg17
(lp6191
sg21
(lp6192
sg25
(lp6193
sg29
I0
sba(iArchitecture
Entity
p6194
(dp6195
g11
(lp6196
sg15
S'com.google.common.util.concurrent.SmoothRateLimiter'
p6197
sg17
(lp6198
sg21
(lp6199
sg25
(lp6200
sg29
I0
sba(iArchitecture
Entity
p6201
(dp6202
g11
(lp6203
sg15
S'com.google.common.util.concurrent.ThreadFactoryBuilder'
p6204
sg17
(lp6205
sg21
(lp6206
sg25
(lp6207
sg29
I0
sba(iArchitecture
Entity
p6208
(dp6209
g11
(lp6210
sg15
S'com.google.common.util.concurrent.UncheckedExecutionException'
p6211
sg17
(lp6212
sg21
(lp6213
sg25
(lp6214
sg29
I0
sba(iArchitecture
Entity
p6215
(dp6216
g11
(lp6217
sg15
S'com.google.common.util.concurrent.UncheckedTimeoutException'
p6218
sg17
(lp6219
sg21
(lp6220
sg25
(lp6221
sg29
I0
sba(iArchitecture
Entity
p6222
(dp6223
g11
(lp6224
sg15
S'com.google.common.util.concurrent.Uninterruptibles'
p6225
sg17
(lp6226
sg21
(lp6227
sg25
(lp6228
sg29
I0
sba(iArchitecture
Entity
p6229
(dp6230
g11
(lp6231
sg15
S'com.google.common.util.concurrent.WrappingExecutorService'
p6232
sg17
(lp6233
sg21
(lp6234
sg25
(lp6235
sg29
I0
sba(iArchitecture
Entity
p6236
(dp6237
g11
(lp6238
sg15
S'com.google.common.util.concurrent.WrappingScheduledExecutorService'
p6239
sg17
(lp6240
sg21
(lp6241
sg25
(lp6242
sg29
I0
sba(iArchitecture
Entity
p6243
(dp6244
g11
(lp6245
sg15
S'com.google.thirdparty.publicsuffix.PublicSuffixPatterns'
p6246
sg17
(lp6247
sg21
(lp6248
sg25
(lp6249
sg29
I0
sba(iArchitecture
Entity
p6250
(dp6251
g11
(lp6252
sg15
S'com.google.thirdparty.publicsuffix.PublicSuffixType'
p6253
sg17
(lp6254
sg21
(lp6255
sg25
(lp6256
sg29
I0
sba(iArchitecture
Entity
p6257
(dp6258
g11
(lp6259
sg15
S'com.google.thirdparty.publicsuffix.TrieParser'
p6260
sg17
(lp6261
sg21
(lp6262
sg25
(lp6263
sg29
I0
sbasg1053
(lp6264
g5133
ag5140
ag5147
ag5154
ag5161
ag5168
ag5175
ag5182
ag5189
ag5196
ag5203
ag5210
ag5217
ag5224
ag5231
ag5238
ag5245
ag5252
ag5259
ag5266
ag5273
ag5280
ag5287
ag5294
ag5301
ag5308
ag5315
ag5322
ag5329
ag5336
ag5343
ag5350
ag5357
ag5364
ag5371
ag5378
ag5385
ag5392
ag5399
ag5406
ag5413
ag5420
ag5427
ag5434
ag5441
ag5448
ag5455
ag5462
ag5469
ag5476
ag5483
ag5490
ag5497
ag5504
ag5511
ag5518
ag5525
ag5532
ag5539
ag5546
ag5553
ag5560
ag5567
ag5574
ag5581
ag5588
ag5595
ag5602
ag5609
ag5616
ag5623
ag5630
ag5637
ag5644
ag5651
ag5658
ag5665
ag5672
ag5679
ag5686
ag5693
ag5700
ag5707
ag5714
ag5721
ag5728
ag5735
ag5742
ag5749
ag5756
ag5763
ag5770
ag5777
ag5784
ag5791
ag5798
ag5805
ag5812
ag5819
ag5826
ag5833
ag5840
ag5847
ag5854
ag5861
ag5868
ag5875
ag5882
ag5889
ag5896
ag5903
ag5910
ag5917
ag5924
ag5931
ag5938
ag5945
ag5952
ag5959
ag5966
ag5973
ag5980
ag5987
ag5994
ag6001
ag6008
ag6015
ag6022
ag6029
ag6036
ag6043
ag6050
ag6057
ag6064
ag6071
ag6078
ag6085
ag6092
ag6099
ag6106
ag6113
ag6120
ag6127
ag6134
ag6141
ag6148
ag6155
ag6162
ag6169
ag6176
ag6183
ag6190
ag6197
ag6204
ag6211
ag6218
ag6225
ag6232
ag6239
ag6246
ag6253
ag6260
asg29
I0
sg1055
S'networking'
p6265
sba(iArchitecture
Cluster
p6266
(dp6267
g7
(lp6268
(iArchitecture
Entity
p6269
(dp6270
g11
(lp6271
sg15
S'com.google.common.annotations.VisibleForTesting'
p6272
sg17
(lp6273
sg21
(lp6274
sg25
(lp6275
sg29
I0
sba(iArchitecture
Entity
p6276
(dp6277
g11
(lp6278
sg15
S'com.google.common.base.CommonMatcher'
p6279
sg17
(lp6280
sg21
(lp6281
sg25
(lp6282
sg29
I0
sba(iArchitecture
Entity
p6283
(dp6284
g11
(lp6285
sg15
S'com.google.common.base.FinalizableReference'
p6286
sg17
(lp6287
sg21
(lp6288
sg25
(lp6289
sg29
I0
sba(iArchitecture
Entity
p6290
(dp6291
g11
(lp6292
sg15
S'com.google.common.cache.LongAddable'
p6293
sg17
(lp6294
sg21
(lp6295
sg25
(lp6296
sg29
I0
sba(iArchitecture
Entity
p6297
(dp6298
g11
(lp6299
sg15
S'com.google.common.collect.ArrayListMultimap'
p6300
sg17
(lp6301
sg21
(lp6302
sg25
(lp6303
sg29
I0
sba(iArchitecture
Entity
p6304
(dp6305
g11
(lp6306
sg15
S'com.google.common.collect.ComputationException'
p6307
sg17
(lp6308
sg21
(lp6309
sg25
(lp6310
sg29
I0
sba(iArchitecture
Entity
p6311
(dp6312
g11
(lp6313
sg15
S'com.google.common.collect.FilteredMultimapValues'
p6314
sg17
(lp6315
sg21
(lp6316
sg25
(lp6317
sg29
I0
sba(iArchitecture
Entity
p6318
(dp6319
g11
(lp6320
sg15
S'com.google.common.collect.ForwardingImmutableCollection'
p6321
sg17
(lp6322
sg21
(lp6323
sg25
(lp6324
sg29
I0
sba(iArchitecture
Entity
p6325
(dp6326
g11
(lp6327
sg15
S'com.google.common.collect.ForwardingList'
p6328
sg17
(lp6329
sg21
(lp6330
sg25
(lp6331
sg29
I0
sba(iArchitecture
Entity
p6332
(dp6333
g11
(lp6334
sg15
S'com.google.common.eventbus.Dispatcher'
p6335
sg17
(lp6336
sg21
(lp6337
sg25
(lp6338
sg29
I0
sba(iArchitecture
Entity
p6339
(dp6340
g11
(lp6341
sg15
S'com.google.common.eventbus.SubscriberExceptionHandler'
p6342
sg17
(lp6343
sg21
(lp6344
sg25
(lp6345
sg29
I0
sba(iArchitecture
Entity
p6346
(dp6347
g11
(lp6348
sg15
S'com.google.common.graph.EndpointPairIterator'
p6349
sg17
(lp6350
sg21
(lp6351
sg25
(lp6352
sg29
I0
sba(iArchitecture
Entity
p6353
(dp6354
g11
(lp6355
sg15
S'com.google.common.hash.Funnel'
p6356
sg17
(lp6357
sg21
(lp6358
sg25
(lp6359
sg29
I0
sba(iArchitecture
Entity
p6360
(dp6361
g11
(lp6362
sg15
S'com.google.common.util.concurrent.SettableFuture'
p6363
sg17
(lp6364
sg21
(lp6365
sg25
(lp6366
sg29
I0
sbasg1053
(lp6367
g6272
ag6279
ag6286
ag6293
ag6300
ag6307
ag6314
ag6321
ag6328
ag6335
ag6342
ag6349
ag6356
ag6363
asg29
I0
sg1055
S'no_match'
p6368
sba(iArchitecture
Cluster
p6369
(dp6370
g7
(lp6371
(iArchitecture
Entity
p6372
(dp6373
g11
(lp6374
sg15
S'com.google.common.annotations.Beta'
p6375
sg17
(lp6376
sg21
(lp6377
sg25
(lp6378
sg29
I0
sba(iArchitecture
Entity
p6379
(dp6380
g11
(lp6381
sg15
S'com.google.common.annotations.GwtCompatible'
p6382
sg17
(lp6383
sg21
(lp6384
sg25
(lp6385
sg29
I0
sba(iArchitecture
Entity
p6386
(dp6387
g11
(lp6388
sg15
S'com.google.common.annotations.GwtIncompatible'
p6389
sg17
(lp6390
sg21
(lp6391
sg25
(lp6392
sg29
I0
sba(iArchitecture
Entity
p6393
(dp6394
g11
(lp6395
sg15
S'com.google.common.annotations.package-info'
p6396
sg17
(lp6397
sg21
(lp6398
sg25
(lp6399
sg29
I0
sba(iArchitecture
Entity
p6400
(dp6401
g11
(lp6402
sg15
S'com.google.common.base.Absent'
p6403
sg17
(lp6404
sg21
(lp6405
sg25
(lp6406
sg29
I0
sba(iArchitecture
Entity
p6407
(dp6408
g11
(lp6409
sg15
S'com.google.common.base.Defaults'
p6410
sg17
(lp6411
sg21
(lp6412
sg25
(lp6413
sg29
I0
sba(iArchitecture
Entity
p6414
(dp6415
g11
(lp6416
sg15
S'com.google.common.base.Enums'
p6417
sg17
(lp6418
sg21
(lp6419
sg25
(lp6420
sg29
I0
sba(iArchitecture
Entity
p6421
(dp6422
g11
(lp6423
sg15
S'com.google.common.base.Function'
p6424
sg17
(lp6425
sg21
(lp6426
sg25
(lp6427
sg29
I0
sba(iArchitecture
Entity
p6428
(dp6429
g11
(lp6430
sg15
S'com.google.common.base.Optional'
p6431
sg17
(lp6432
sg21
(lp6433
sg25
(lp6434
sg29
I0
sba(iArchitecture
Entity
p6435
(dp6436
g11
(lp6437
sg15
S'com.google.common.base.Platform'
p6438
sg17
(lp6439
sg21
(lp6440
sg25
(lp6441
sg29
I0
sba(iArchitecture
Entity
p6442
(dp6443
g11
(lp6444
sg15
S'com.google.common.base.Predicate'
p6445
sg17
(lp6446
sg21
(lp6447
sg25
(lp6448
sg29
I0
sba(iArchitecture
Entity
p6449
(dp6450
g11
(lp6451
sg15
S'com.google.common.base.Present'
p6452
sg17
(lp6453
sg21
(lp6454
sg25
(lp6455
sg29
I0
sba(iArchitecture
Entity
p6456
(dp6457
g11
(lp6458
sg15
S'com.google.common.base.StandardSystemProperty'
p6459
sg17
(lp6460
sg21
(lp6461
sg25
(lp6462
sg29
I0
sba(iArchitecture
Entity
p6463
(dp6464
g11
(lp6465
sg15
S'com.google.common.base.Stopwatch'
p6466
sg17
(lp6467
sg21
(lp6468
sg25
(lp6469
sg29
I0
sba(iArchitecture
Entity
p6470
(dp6471
g11
(lp6472
sg15
S'com.google.common.base.Supplier'
p6473
sg17
(lp6474
sg21
(lp6475
sg25
(lp6476
sg29
I0
sba(iArchitecture
Entity
p6477
(dp6478
g11
(lp6479
sg15
S'com.google.common.base.Suppliers'
p6480
sg17
(lp6481
sg21
(lp6482
sg25
(lp6483
sg29
I0
sba(iArchitecture
Entity
p6484
(dp6485
g11
(lp6486
sg15
S'com.google.common.base.internal.Finalizer'
p6487
sg17
(lp6488
sg21
(lp6489
sg25
(lp6490
sg29
I0
sba(iArchitecture
Entity
p6491
(dp6492
g11
(lp6493
sg15
S'com.google.common.cache.Cache'
p6494
sg17
(lp6495
sg21
(lp6496
sg25
(lp6497
sg29
I0
sba(iArchitecture
Entity
p6498
(dp6499
g11
(lp6500
sg15
S'com.google.common.cache.RemovalListener'
p6501
sg17
(lp6502
sg21
(lp6503
sg25
(lp6504
sg29
I0
sba(iArchitecture
Entity
p6505
(dp6506
g11
(lp6507
sg15
S'com.google.common.cache.RemovalNotification'
p6508
sg17
(lp6509
sg21
(lp6510
sg25
(lp6511
sg29
I0
sba(iArchitecture
Entity
p6512
(dp6513
g11
(lp6514
sg15
S'com.google.common.collect.AbstractBiMap'
p6515
sg17
(lp6516
sg21
(lp6517
sg25
(lp6518
sg29
I0
sba(iArchitecture
Entity
p6519
(dp6520
g11
(lp6521
sg15
S'com.google.common.collect.AbstractListMultimap'
p6522
sg17
(lp6523
sg21
(lp6524
sg25
(lp6525
sg29
I0
sba(iArchitecture
Entity
p6526
(dp6527
g11
(lp6528
sg15
S'com.google.common.collect.AbstractSequentialIterator'
p6529
sg17
(lp6530
sg21
(lp6531
sg25
(lp6532
sg29
I0
sba(iArchitecture
Entity
p6533
(dp6534
g11
(lp6535
sg15
S'com.google.common.collect.AbstractSetMultimap'
p6536
sg17
(lp6537
sg21
(lp6538
sg25
(lp6539
sg29
I0
sba(iArchitecture
Entity
p6540
(dp6541
g11
(lp6542
sg15
S'com.google.common.collect.AbstractSortedKeySortedSetMultimap'
p6543
sg17
(lp6544
sg21
(lp6545
sg25
(lp6546
sg29
I0
sba(iArchitecture
Entity
p6547
(dp6548
g11
(lp6549
sg15
S'com.google.common.collect.AbstractSortedSetMultimap'
p6550
sg17
(lp6551
sg21
(lp6552
sg25
(lp6553
sg29
I0
sba(iArchitecture
Entity
p6554
(dp6555
g11
(lp6556
sg15
S'com.google.common.collect.ArrayTable'
p6557
sg17
(lp6558
sg21
(lp6559
sg25
(lp6560
sg29
I0
sba(iArchitecture
Entity
p6561
(dp6562
g11
(lp6563
sg15
S'com.google.common.collect.BiMap'
p6564
sg17
(lp6565
sg21
(lp6566
sg25
(lp6567
sg29
I0
sba(iArchitecture
Entity
p6568
(dp6569
g11
(lp6570
sg15
S'com.google.common.collect.BoundType'
p6571
sg17
(lp6572
sg21
(lp6573
sg25
(lp6574
sg29
I0
sba(iArchitecture
Entity
p6575
(dp6576
g11
(lp6577
sg15
S'com.google.common.collect.ClassToInstanceMap'
p6578
sg17
(lp6579
sg21
(lp6580
sg25
(lp6581
sg29
I0
sba(iArchitecture
Entity
p6582
(dp6583
g11
(lp6584
sg15
S'com.google.common.collect.ConsumingQueueIterator'
p6585
sg17
(lp6586
sg21
(lp6587
sg25
(lp6588
sg29
I0
sba(iArchitecture
Entity
p6589
(dp6590
g11
(lp6591
sg15
S'com.google.common.collect.EmptyImmutableListMultimap'
p6592
sg17
(lp6593
sg21
(lp6594
sg25
(lp6595
sg29
I0
sba(iArchitecture
Entity
p6596
(dp6597
g11
(lp6598
sg15
S'com.google.common.collect.EmptyImmutableSetMultimap'
p6599
sg17
(lp6600
sg21
(lp6601
sg25
(lp6602
sg29
I0
sba(iArchitecture
Entity
p6603
(dp6604
g11
(lp6605
sg15
S'com.google.common.collect.EnumBiMap'
p6606
sg17
(lp6607
sg21
(lp6608
sg25
(lp6609
sg29
I0
sba(iArchitecture
Entity
p6610
(dp6611
g11
(lp6612
sg15
S'com.google.common.collect.EnumHashBiMap'
p6613
sg17
(lp6614
sg21
(lp6615
sg25
(lp6616
sg29
I0
sba(iArchitecture
Entity
p6617
(dp6618
g11
(lp6619
sg15
S'com.google.common.collect.EnumMultiset'
p6620
sg17
(lp6621
sg21
(lp6622
sg25
(lp6623
sg29
I0
sba(iArchitecture
Entity
p6624
(dp6625
g11
(lp6626
sg15
S'com.google.common.collect.FilteredEntrySetMultimap'
p6627
sg17
(lp6628
sg21
(lp6629
sg25
(lp6630
sg29
I0
sba(iArchitecture
Entity
p6631
(dp6632
g11
(lp6633
sg15
S'com.google.common.collect.FilteredKeyMultimap'
p6634
sg17
(lp6635
sg21
(lp6636
sg25
(lp6637
sg29
I0
sba(iArchitecture
Entity
p6638
(dp6639
g11
(lp6640
sg15
S'com.google.common.collect.FilteredKeySetMultimap'
p6641
sg17
(lp6642
sg21
(lp6643
sg25
(lp6644
sg29
I0
sba(iArchitecture
Entity
p6645
(dp6646
g11
(lp6647
sg15
S'com.google.common.collect.FilteredMultimap'
p6648
sg17
(lp6649
sg21
(lp6650
sg25
(lp6651
sg29
I0
sba(iArchitecture
Entity
p6652
(dp6653
g11
(lp6654
sg15
S'com.google.common.collect.ForwardingSetMultimap'
p6655
sg17
(lp6656
sg21
(lp6657
sg25
(lp6658
sg29
I0
sba(iArchitecture
Entity
p6659
(dp6660
g11
(lp6661
sg15
S'com.google.common.collect.ForwardingSortedSetMultimap'
p6662
sg17
(lp6663
sg21
(lp6664
sg25
(lp6665
sg29
I0
sba(iArchitecture
Entity
p6666
(dp6667
g11
(lp6668
sg15
S'com.google.common.collect.HashBasedTable'
p6669
sg17
(lp6670
sg21
(lp6671
sg25
(lp6672
sg29
I0
sba(iArchitecture
Entity
p6673
(dp6674
g11
(lp6675
sg15
S'com.google.common.collect.ImmutableBiMap'
p6676
sg17
(lp6677
sg21
(lp6678
sg25
(lp6679
sg29
I0
sba(iArchitecture
Entity
p6680
(dp6681
g11
(lp6682
sg15
S'com.google.common.collect.ImmutableClassToInstanceMap'
p6683
sg17
(lp6684
sg21
(lp6685
sg25
(lp6686
sg29
I0
sba(iArchitecture
Entity
p6687
(dp6688
g11
(lp6689
sg15
S'com.google.common.collect.ImmutableMapKeySet'
p6690
sg17
(lp6691
sg21
(lp6692
sg25
(lp6693
sg29
I0
sba(iArchitecture
Entity
p6694
(dp6695
g11
(lp6696
sg15
S'com.google.common.collect.ImmutableMapValues'
p6697
sg17
(lp6698
sg21
(lp6699
sg25
(lp6700
sg29
I0
sba(iArchitecture
Entity
p6701
(dp6702
g11
(lp6703
sg15
S'com.google.common.collect.ImmutableMultimap'
p6704
sg17
(lp6705
sg21
(lp6706
sg25
(lp6707
sg29
I0
sba(iArchitecture
Entity
p6708
(dp6709
g11
(lp6710
sg15
S'com.google.common.collect.ImmutableSetMultimap'
p6711
sg17
(lp6712
sg21
(lp6713
sg25
(lp6714
sg29
I0
sba(iArchitecture
Entity
p6715
(dp6716
g11
(lp6717
sg15
S'com.google.common.collect.ImmutableSortedMap'
p6718
sg17
(lp6719
sg21
(lp6720
sg25
(lp6721
sg29
I0
sba(iArchitecture
Entity
p6722
(dp6723
g11
(lp6724
sg15
S'com.google.common.collect.ImmutableSortedMapFauxverideShim'
p6725
sg17
(lp6726
sg21
(lp6727
sg25
(lp6728
sg29
I0
sba(iArchitecture
Entity
p6729
(dp6730
g11
(lp6731
sg15
S'com.google.common.collect.ImmutableSortedMultisetFauxverideShim'
p6732
sg17
(lp6733
sg21
(lp6734
sg25
(lp6735
sg29
I0
sba(iArchitecture
Entity
p6736
(dp6737
g11
(lp6738
sg15
S'com.google.common.collect.ImmutableSortedSetFauxverideShim'
p6739
sg17
(lp6740
sg21
(lp6741
sg25
(lp6742
sg29
I0
sba(iArchitecture
Entity
p6743
(dp6744
g11
(lp6745
sg15
S'com.google.common.collect.ImmutableTable'
p6746
sg17
(lp6747
sg21
(lp6748
sg25
(lp6749
sg29
I0
sba(iArchitecture
Entity
p6750
(dp6751
g11
(lp6752
sg15
S'com.google.common.collect.Interner'
p6753
sg17
(lp6754
sg21
(lp6755
sg25
(lp6756
sg29
I0
sba(iArchitecture
Entity
p6757
(dp6758
g11
(lp6759
sg15
S'com.google.common.collect.LinkedHashMultimap'
p6760
sg17
(lp6761
sg21
(lp6762
sg25
(lp6763
sg29
I0
sba(iArchitecture
Entity
p6764
(dp6765
g11
(lp6766
sg15
S'com.google.common.collect.ListMultimap'
p6767
sg17
(lp6768
sg21
(lp6769
sg25
(lp6770
sg29
I0
sba(iArchitecture
Entity
p6771
(dp6772
g11
(lp6773
sg15
S'com.google.common.collect.MapConstraints'
p6774
sg17
(lp6775
sg21
(lp6776
sg25
(lp6777
sg29
I0
sba(iArchitecture
Entity
p6778
(dp6779
g11
(lp6780
sg15
S'com.google.common.collect.MapDifference'
p6781
sg17
(lp6782
sg21
(lp6783
sg25
(lp6784
sg29
I0
sba(iArchitecture
Entity
p6785
(dp6786
g11
(lp6787
sg15
S'com.google.common.collect.Maps'
p6788
sg17
(lp6789
sg21
(lp6790
sg25
(lp6791
sg29
I0
sba(iArchitecture
Entity
p6792
(dp6793
g11
(lp6794
sg15
S'com.google.common.collect.Multimap'
p6795
sg17
(lp6796
sg21
(lp6797
sg25
(lp6798
sg29
I0
sba(iArchitecture
Entity
p6799
(dp6800
g11
(lp6801
sg15
S'com.google.common.collect.Multimaps'
p6802
sg17
(lp6803
sg21
(lp6804
sg25
(lp6805
sg29
I0
sba(iArchitecture
Entity
p6806
(dp6807
g11
(lp6808
sg15
S'com.google.common.collect.MutableClassToInstanceMap'
p6809
sg17
(lp6810
sg21
(lp6811
sg25
(lp6812
sg29
I0
sba(iArchitecture
Entity
p6813
(dp6814
g11
(lp6815
sg15
S'com.google.common.collect.Ordering'
p6816
sg17
(lp6817
sg21
(lp6818
sg25
(lp6819
sg29
I0
sba(iArchitecture
Entity
p6820
(dp6821
g11
(lp6822
sg15
S'com.google.common.collect.Platform'
p6823
sg17
(lp6824
sg21
(lp6825
sg25
(lp6826
sg29
I0
sba(iArchitecture
Entity
p6827
(dp6828
g11
(lp6829
sg15
S'com.google.common.collect.Queues'
p6830
sg17
(lp6831
sg21
(lp6832
sg25
(lp6833
sg29
I0
sba(iArchitecture
Entity
p6834
(dp6835
g11
(lp6836
sg15
S'com.google.common.collect.RangeMap'
p6837
sg17
(lp6838
sg21
(lp6839
sg25
(lp6840
sg29
I0
sba(iArchitecture
Entity
p6841
(dp6842
g11
(lp6843
sg15
S'com.google.common.collect.RangeSet'
p6844
sg17
(lp6845
sg21
(lp6846
sg25
(lp6847
sg29
I0
sba(iArchitecture
Entity
p6848
(dp6849
g11
(lp6850
sg15
S'com.google.common.collect.RegularImmutableMap'
p6851
sg17
(lp6852
sg21
(lp6853
sg25
(lp6854
sg29
I0
sba(iArchitecture
Entity
p6855
(dp6856
g11
(lp6857
sg15
S'com.google.common.collect.RowSortedTable'
p6858
sg17
(lp6859
sg21
(lp6860
sg25
(lp6861
sg29
I0
sba(iArchitecture
Entity
p6862
(dp6863
g11
(lp6864
sg15
S'com.google.common.collect.SetMultimap'
p6865
sg17
(lp6866
sg21
(lp6867
sg25
(lp6868
sg29
I0
sba(iArchitecture
Entity
p6869
(dp6870
g11
(lp6871
sg15
S'com.google.common.collect.SortedIterable'
p6872
sg17
(lp6873
sg21
(lp6874
sg25
(lp6875
sg29
I0
sba(iArchitecture
Entity
p6876
(dp6877
g11
(lp6878
sg15
S'com.google.common.collect.SortedIterables'
p6879
sg17
(lp6880
sg21
(lp6881
sg25
(lp6882
sg29
I0
sba(iArchitecture
Entity
p6883
(dp6884
g11
(lp6885
sg15
S'com.google.common.collect.SortedMapDifference'
p6886
sg17
(lp6887
sg21
(lp6888
sg25
(lp6889
sg29
I0
sba(iArchitecture
Entity
p6890
(dp6891
g11
(lp6892
sg15
S'com.google.common.collect.SortedMultisetBridge'
p6893
sg17
(lp6894
sg21
(lp6895
sg25
(lp6896
sg29
I0
sba(iArchitecture
Entity
p6897
(dp6898
g11
(lp6899
sg15
S'com.google.common.collect.SortedMultisets'
p6900
sg17
(lp6901
sg21
(lp6902
sg25
(lp6903
sg29
I0
sba(iArchitecture
Entity
p6904
(dp6905
g11
(lp6906
sg15
S'com.google.common.collect.SortedSetMultimap'
p6907
sg17
(lp6908
sg21
(lp6909
sg25
(lp6910
sg29
I0
sba(iArchitecture
Entity
p6911
(dp6912
g11
(lp6913
sg15
S'com.google.common.collect.SparseImmutableTable'
p6914
sg17
(lp6915
sg21
(lp6916
sg25
(lp6917
sg29
I0
sba(iArchitecture
Entity
p6918
(dp6919
g11
(lp6920
sg15
S'com.google.common.collect.Table'
p6921
sg17
(lp6922
sg21
(lp6923
sg25
(lp6924
sg29
I0
sba(iArchitecture
Entity
p6925
(dp6926
g11
(lp6927
sg15
S'com.google.common.collect.Tables'
p6928
sg17
(lp6929
sg21
(lp6930
sg25
(lp6931
sg29
I0
sba(iArchitecture
Entity
p6932
(dp6933
g11
(lp6934
sg15
S'com.google.common.collect.TreeBasedTable'
p6935
sg17
(lp6936
sg21
(lp6937
sg25
(lp6938
sg29
I0
sba(iArchitecture
Entity
p6939
(dp6940
g11
(lp6941
sg15
S'com.google.common.collect.TreeMultimap'
p6942
sg17
(lp6943
sg21
(lp6944
sg25
(lp6945
sg29
I0
sba(iArchitecture
Entity
p6946
(dp6947
g11
(lp6948
sg15
S'com.google.common.collect.WellBehavedMap'
p6949
sg17
(lp6950
sg21
(lp6951
sg25
(lp6952
sg29
I0
sba(iArchitecture
Entity
p6953
(dp6954
g11
(lp6955
sg15
S'com.google.common.eventbus.AllowConcurrentEvents'
p6956
sg17
(lp6957
sg21
(lp6958
sg25
(lp6959
sg29
I0
sba(iArchitecture
Entity
p6960
(dp6961
g11
(lp6962
sg15
S'com.google.common.eventbus.Subscribe'
p6963
sg17
(lp6964
sg21
(lp6965
sg25
(lp6966
sg29
I0
sba(iArchitecture
Entity
p6967
(dp6968
g11
(lp6969
sg15
S'com.google.common.eventbus.SubscriberExceptionContext'
p6970
sg17
(lp6971
sg21
(lp6972
sg25
(lp6973
sg29
I0
sba(iArchitecture
Entity
p6974
(dp6975
g11
(lp6976
sg15
S'com.google.common.eventbus.SubscriberRegistry'
p6977
sg17
(lp6978
sg21
(lp6979
sg25
(lp6980
sg29
I0
sba(iArchitecture
Entity
p6981
(dp6982
g11
(lp6983
sg15
S'com.google.common.eventbus.package-info'
p6984
sg17
(lp6985
sg21
(lp6986
sg25
(lp6987
sg29
I0
sba(iArchitecture
Entity
p6988
(dp6989
g11
(lp6990
sg15
S'com.google.common.graph.AbstractGraphBuilder'
p6991
sg17
(lp6992
sg21
(lp6993
sg25
(lp6994
sg29
I0
sba(iArchitecture
Entity
p6995
(dp6996
g11
(lp6997
sg15
S'com.google.common.graph.ConfigurableValueGraph'
p6998
sg17
(lp6999
sg21
(lp7000
sg25
(lp7001
sg29
I0
sba(iArchitecture
Entity
p7002
(dp7003
g11
(lp7004
sg15
S'com.google.common.graph.DirectedMultiNetworkConnections'
p7005
sg17
(lp7006
sg21
(lp7007
sg25
(lp7008
sg29
I0
sba(iArchitecture
Entity
p7009
(dp7010
g11
(lp7011
sg15
S'com.google.common.graph.DirectedNetworkConnections'
p7012
sg17
(lp7013
sg21
(lp7014
sg25
(lp7015
sg29
I0
sba(iArchitecture
Entity
p7016
(dp7017
g11
(lp7018
sg15
S'com.google.common.graph.ElementOrder'
p7019
sg17
(lp7020
sg21
(lp7021
sg25
(lp7022
sg29
I0
sba(iArchitecture
Entity
p7023
(dp7024
g11
(lp7025
sg15
S'com.google.common.graph.GraphConnections'
p7026
sg17
(lp7027
sg21
(lp7028
sg25
(lp7029
sg29
I0
sba(iArchitecture
Entity
p7030
(dp7031
g11
(lp7032
sg15
S'com.google.common.graph.MapIteratorCache'
p7033
sg17
(lp7034
sg21
(lp7035
sg25
(lp7036
sg29
I0
sba(iArchitecture
Entity
p7037
(dp7038
g11
(lp7039
sg15
S'com.google.common.graph.MapRetrievalCache'
p7040
sg17
(lp7041
sg21
(lp7042
sg25
(lp7043
sg29
I0
sba(iArchitecture
Entity
p7044
(dp7045
g11
(lp7046
sg15
S'com.google.common.graph.NetworkConnections'
p7047
sg17
(lp7048
sg21
(lp7049
sg25
(lp7050
sg29
I0
sba(iArchitecture
Entity
p7051
(dp7052
g11
(lp7053
sg15
S'com.google.common.graph.UndirectedGraphConnections'
p7054
sg17
(lp7055
sg21
(lp7056
sg25
(lp7057
sg29
I0
sba(iArchitecture
Entity
p7058
(dp7059
g11
(lp7060
sg15
S'com.google.common.graph.UndirectedMultiNetworkConnections'
p7061
sg17
(lp7062
sg21
(lp7063
sg25
(lp7064
sg29
I0
sba(iArchitecture
Entity
p7065
(dp7066
g11
(lp7067
sg15
S'com.google.common.graph.UndirectedNetworkConnections'
p7068
sg17
(lp7069
sg21
(lp7070
sg25
(lp7071
sg29
I0
sba(iArchitecture
Entity
p7072
(dp7073
g11
(lp7074
sg15
S'com.google.common.graph.package-info'
p7075
sg17
(lp7076
sg21
(lp7077
sg25
(lp7078
sg29
I0
sba(iArchitecture
Entity
p7079
(dp7080
g11
(lp7081
sg15
S'com.google.common.hash.package-info'
p7082
sg17
(lp7083
sg21
(lp7084
sg25
(lp7085
sg29
I0
sba(iArchitecture
Entity
p7086
(dp7087
g11
(lp7088
sg15
S'com.google.common.html.package-info'
p7089
sg17
(lp7090
sg21
(lp7091
sg25
(lp7092
sg29
I0
sba(iArchitecture
Entity
p7093
(dp7094
g11
(lp7095
sg15
S'com.google.common.io.Closer'
p7096
sg17
(lp7097
sg21
(lp7098
sg25
(lp7099
sg29
I0
sba(iArchitecture
Entity
p7100
(dp7101
g11
(lp7102
sg15
S'com.google.common.math.DoubleMath'
p7103
sg17
(lp7104
sg21
(lp7105
sg25
(lp7106
sg29
I0
sba(iArchitecture
Entity
p7107
(dp7108
g11
(lp7109
sg15
S'com.google.common.math.PairedStatsAccumulator'
p7110
sg17
(lp7111
sg21
(lp7112
sg25
(lp7113
sg29
I0
sba(iArchitecture
Entity
p7114
(dp7115
g11
(lp7116
sg15
S'com.google.common.math.Stats'
p7117
sg17
(lp7118
sg21
(lp7119
sg25
(lp7120
sg29
I0
sba(iArchitecture
Entity
p7121
(dp7122
g11
(lp7123
sg15
S'com.google.common.math.StatsAccumulator'
p7124
sg17
(lp7125
sg21
(lp7126
sg25
(lp7127
sg29
I0
sba(iArchitecture
Entity
p7128
(dp7129
g11
(lp7130
sg15
S'com.google.common.math.package-info'
p7131
sg17
(lp7132
sg21
(lp7133
sg25
(lp7134
sg29
I0
sba(iArchitecture
Entity
p7135
(dp7136
g11
(lp7137
sg15
S'com.google.common.net.MediaType'
p7138
sg17
(lp7139
sg21
(lp7140
sg25
(lp7141
sg29
I0
sba(iArchitecture
Entity
p7142
(dp7143
g11
(lp7144
sg15
S'com.google.common.primitives.Primitives'
p7145
sg17
(lp7146
sg21
(lp7147
sg25
(lp7148
sg29
I0
sba(iArchitecture
Entity
p7149
(dp7150
g11
(lp7151
sg15
S'com.google.common.reflect.ImmutableTypeToInstanceMap'
p7152
sg17
(lp7153
sg21
(lp7154
sg25
(lp7155
sg29
I0
sba(iArchitecture
Entity
p7156
(dp7157
g11
(lp7158
sg15
S'com.google.common.reflect.MutableTypeToInstanceMap'
p7159
sg17
(lp7160
sg21
(lp7161
sg25
(lp7162
sg29
I0
sba(iArchitecture
Entity
p7163
(dp7164
g11
(lp7165
sg15
S'com.google.common.reflect.TypeParameter'
p7166
sg17
(lp7167
sg21
(lp7168
sg25
(lp7169
sg29
I0
sba(iArchitecture
Entity
p7170
(dp7171
g11
(lp7172
sg15
S'com.google.common.reflect.TypeResolver'
p7173
sg17
(lp7174
sg21
(lp7175
sg25
(lp7176
sg29
I0
sba(iArchitecture
Entity
p7177
(dp7178
g11
(lp7179
sg15
S'com.google.common.reflect.TypeToInstanceMap'
p7180
sg17
(lp7181
sg21
(lp7182
sg25
(lp7183
sg29
I0
sba(iArchitecture
Entity
p7184
(dp7185
g11
(lp7186
sg15
S'com.google.common.reflect.TypeToken'
p7187
sg17
(lp7188
sg21
(lp7189
sg25
(lp7190
sg29
I0
sba(iArchitecture
Entity
p7191
(dp7192
g11
(lp7193
sg15
S'com.google.common.reflect.TypeVisitor'
p7194
sg17
(lp7195
sg21
(lp7196
sg25
(lp7197
sg29
I0
sba(iArchitecture
Entity
p7198
(dp7199
g11
(lp7200
sg15
S'com.google.common.reflect.Types'
p7201
sg17
(lp7202
sg21
(lp7203
sg25
(lp7204
sg29
I0
sba(iArchitecture
Entity
p7205
(dp7206
g11
(lp7207
sg15
S'com.google.common.reflect.package-info'
p7208
sg17
(lp7209
sg21
(lp7210
sg25
(lp7211
sg29
I0
sba(iArchitecture
Entity
p7212
(dp7213
g11
(lp7214
sg15
S'com.google.common.util.concurrent.AsyncCallable'
p7215
sg17
(lp7216
sg21
(lp7217
sg25
(lp7218
sg29
I0
sba(iArchitecture
Entity
p7219
(dp7220
g11
(lp7221
sg15
S'com.google.common.util.concurrent.AsyncFunction'
p7222
sg17
(lp7223
sg21
(lp7224
sg25
(lp7225
sg29
I0
sba(iArchitecture
Entity
p7226
(dp7227
g11
(lp7228
sg15
S'com.google.common.util.concurrent.AtomicLongMap'
p7229
sg17
(lp7230
sg21
(lp7231
sg25
(lp7232
sg29
I0
sba(iArchitecture
Entity
p7233
(dp7234
g11
(lp7235
sg15
S'com.google.common.util.concurrent.Atomics'
p7236
sg17
(lp7237
sg21
(lp7238
sg25
(lp7239
sg29
I0
sba(iArchitecture
Entity
p7240
(dp7241
g11
(lp7242
sg15
S'com.google.common.util.concurrent.CheckedFuture'
p7243
sg17
(lp7244
sg21
(lp7245
sg25
(lp7246
sg29
I0
sba(iArchitecture
Entity
p7247
(dp7248
g11
(lp7249
sg15
S'com.google.common.util.concurrent.CollectionFuture'
p7250
sg17
(lp7251
sg21
(lp7252
sg25
(lp7253
sg29
I0
sba(iArchitecture
Entity
p7254
(dp7255
g11
(lp7256
sg15
S'com.google.common.util.concurrent.ExecutionList'
p7257
sg17
(lp7258
sg21
(lp7259
sg25
(lp7260
sg29
I0
sba(iArchitecture
Entity
p7261
(dp7262
g11
(lp7263
sg15
S'com.google.common.util.concurrent.FakeTimeLimiter'
p7264
sg17
(lp7265
sg21
(lp7266
sg25
(lp7267
sg29
I0
sba(iArchitecture
Entity
p7268
(dp7269
g11
(lp7270
sg15
S'com.google.common.util.concurrent.FutureCallback'
p7271
sg17
(lp7272
sg21
(lp7273
sg25
(lp7274
sg29
I0
sba(iArchitecture
Entity
p7275
(dp7276
g11
(lp7277
sg15
S'com.google.common.util.concurrent.FuturesGetChecked'
p7278
sg17
(lp7279
sg21
(lp7280
sg25
(lp7281
sg29
I0
sba(iArchitecture
Entity
p7282
(dp7283
g11
(lp7284
sg15
S'com.google.common.util.concurrent.ImmediateFuture'
p7285
sg17
(lp7286
sg21
(lp7287
sg25
(lp7288
sg29
I0
sba(iArchitecture
Entity
p7289
(dp7290
g11
(lp7291
sg15
S'com.google.common.util.concurrent.ListenableFutureTask'
p7292
sg17
(lp7293
sg21
(lp7294
sg25
(lp7295
sg29
I0
sba(iArchitecture
Entity
p7296
(dp7297
g11
(lp7298
sg15
S'com.google.common.util.concurrent.ListenableScheduledFuture'
p7299
sg17
(lp7300
sg21
(lp7301
sg25
(lp7302
sg29
I0
sba(iArchitecture
Entity
p7303
(dp7304
g11
(lp7305
sg15
S'com.google.common.util.concurrent.ListeningScheduledExecutorService'
p7306
sg17
(lp7307
sg21
(lp7308
sg25
(lp7309
sg29
I0
sba(iArchitecture
Entity
p7310
(dp7311
g11
(lp7312
sg15
S'com.google.common.util.concurrent.Partially'
p7313
sg17
(lp7314
sg21
(lp7315
sg25
(lp7316
sg29
I0
sba(iArchitecture
Entity
p7317
(dp7318
g11
(lp7319
sg15
S'com.google.common.util.concurrent.Platform'
p7320
sg17
(lp7321
sg21
(lp7322
sg25
(lp7323
sg29
I0
sba(iArchitecture
Entity
p7324
(dp7325
g11
(lp7326
sg15
S'com.google.common.util.concurrent.SimpleTimeLimiter'
p7327
sg17
(lp7328
sg21
(lp7329
sg25
(lp7330
sg29
I0
sba(iArchitecture
Entity
p7331
(dp7332
g11
(lp7333
sg15
S'com.google.common.util.concurrent.TimeLimiter'
p7334
sg17
(lp7335
sg21
(lp7336
sg25
(lp7337
sg29
I0
sba(iArchitecture
Entity
p7338
(dp7339
g11
(lp7340
sg15
S'com.google.common.util.concurrent.TimeoutFuture'
p7341
sg17
(lp7342
sg21
(lp7343
sg25
(lp7344
sg29
I0
sba(iArchitecture
Entity
p7345
(dp7346
g11
(lp7347
sg15
S'com.google.common.util.concurrent.TrustedListenableFutureTask'
p7348
sg17
(lp7349
sg21
(lp7350
sg25
(lp7351
sg29
I0
sba(iArchitecture
Entity
p7352
(dp7353
g11
(lp7354
sg15
S'com.google.common.util.concurrent.package-info'
p7355
sg17
(lp7356
sg21
(lp7357
sg25
(lp7358
sg29
I0
sba(iArchitecture
Entity
p7359
(dp7360
g11
(lp7361
sg15
S'com.google.common.xml.package-info'
p7362
sg17
(lp7363
sg21
(lp7364
sg25
(lp7365
sg29
I0
sbasg1053
(lp7366
g6375
ag6382
ag6389
ag6396
ag6403
ag6410
ag6417
ag6424
ag6431
ag6438
ag6445
ag6452
ag6459
ag6466
ag6473
ag6480
ag6487
ag6494
ag6501
ag6508
ag6515
ag6522
ag6529
ag6536
ag6543
ag6550
ag6557
ag6564
ag6571
ag6578
ag6585
ag6592
ag6599
ag6606
ag6613
ag6620
ag6627
ag6634
ag6641
ag6648
ag6655
ag6662
ag6669
ag6676
ag6683
ag6690
ag6697
ag6704
ag6711
ag6718
ag6725
ag6732
ag6739
ag6746
ag6753
ag6760
ag6767
ag6774
ag6781
ag6788
ag6795
ag6802
ag6809
ag6816
ag6823
ag6830
ag6837
ag6844
ag6851
ag6858
ag6865
ag6872
ag6879
ag6886
ag6893
ag6900
ag6907
ag6914
ag6921
ag6928
ag6935
ag6942
ag6949
ag6956
ag6963
ag6970
ag6977
ag6984
ag6991
ag6998
ag7005
ag7012
ag7019
ag7026
ag7033
ag7040
ag7047
ag7054
ag7061
ag7068
ag7075
ag7082
ag7089
ag7096
ag7103
ag7110
ag7117
ag7124
ag7131
ag7138
ag7145
ag7152
ag7159
ag7166
ag7173
ag7180
ag7187
ag7194
ag7201
ag7208
ag7215
ag7222
ag7229
ag7236
ag7243
ag7250
ag7257
ag7264
ag7271
ag7278
ag7285
ag7292
ag7299
ag7306
ag7313
ag7320
ag7327
ag7334
ag7341
ag7348
ag7355
ag7362
asg29
I0
sg1055
S'sql'
p7367
sbasg3610
g3611
sg1053
(lp7368
sg3613
I00
sg1055
S'20.0'
p7369
sba(iArchitecture
Architecture
p7370
(dp7371
g3
(lp7372
(iArchitecture
Cluster
p7373
(dp7374
g7
(lp7375
(iArchitecture
Entity
p7376
(dp7377
g11
(lp7378
sg15
S'com.google.common.base.CharMatcher'
p7379
sg17
(lp7380
sg21
(lp7381
sg25
(lp7382
sg29
I0
sba(iArchitecture
Entity
p7383
(dp7384
g11
(lp7385
sg15
S'com.google.common.base.Equivalence'
p7386
sg17
(lp7387
sg21
(lp7388
sg25
(lp7389
sg29
I0
sba(iArchitecture
Entity
p7390
(dp7391
g11
(lp7392
sg15
S'com.google.common.base.Functions'
p7393
sg17
(lp7394
sg21
(lp7395
sg25
(lp7396
sg29
I0
sba(iArchitecture
Entity
p7397
(dp7398
g11
(lp7399
sg15
S'com.google.common.base.JdkPattern'
p7400
sg17
(lp7401
sg21
(lp7402
sg25
(lp7403
sg29
I0
sba(iArchitecture
Entity
p7404
(dp7405
g11
(lp7406
sg15
S'com.google.common.base.PairwiseEquivalence'
p7407
sg17
(lp7408
sg21
(lp7409
sg25
(lp7410
sg29
I0
sba(iArchitecture
Entity
p7411
(dp7412
g11
(lp7413
sg15
S'com.google.common.base.Preconditions'
p7414
sg17
(lp7415
sg21
(lp7416
sg25
(lp7417
sg29
I0
sba(iArchitecture
Entity
p7418
(dp7419
g11
(lp7420
sg15
S'com.google.common.base.Predicates'
p7421
sg17
(lp7422
sg21
(lp7423
sg25
(lp7424
sg29
I0
sba(iArchitecture
Entity
p7425
(dp7426
g11
(lp7427
sg15
S'com.google.common.base.SmallCharMatcher'
p7428
sg17
(lp7429
sg21
(lp7430
sg25
(lp7431
sg29
I0
sba(iArchitecture
Entity
p7432
(dp7433
g11
(lp7434
sg15
S'com.google.common.base.Splitter'
p7435
sg17
(lp7436
sg21
(lp7437
sg25
(lp7438
sg29
I0
sba(iArchitecture
Entity
p7439
(dp7440
g11
(lp7441
sg15
S'com.google.common.base.Strings'
p7442
sg17
(lp7443
sg21
(lp7444
sg25
(lp7445
sg29
I0
sba(iArchitecture
Entity
p7446
(dp7447
g11
(lp7448
sg15
S'com.google.common.cache.CacheBuilderSpec'
p7449
sg17
(lp7450
sg21
(lp7451
sg25
(lp7452
sg29
I0
sba(iArchitecture
Entity
p7453
(dp7454
g11
(lp7455
sg15
S'com.google.common.cache.LocalCache'
p7456
sg17
(lp7457
sg21
(lp7458
sg25
(lp7459
sg29
I0
sba(iArchitecture
Entity
p7460
(dp7461
g11
(lp7462
sg15
S'com.google.common.cache.LongAdder'
p7463
sg17
(lp7464
sg21
(lp7465
sg25
(lp7466
sg29
I0
sba(iArchitecture
Entity
p7467
(dp7468
g11
(lp7469
sg15
S'com.google.common.collect.AbstractIndexedListIterator'
p7470
sg17
(lp7471
sg21
(lp7472
sg25
(lp7473
sg29
I0
sba(iArchitecture
Entity
p7474
(dp7475
g11
(lp7476
sg15
S'com.google.common.collect.AbstractMapBasedMultimap'
p7477
sg17
(lp7478
sg21
(lp7479
sg25
(lp7480
sg29
I0
sba(iArchitecture
Entity
p7481
(dp7482
g11
(lp7483
sg15
S'com.google.common.collect.AbstractMapBasedMultiset'
p7484
sg17
(lp7485
sg21
(lp7486
sg25
(lp7487
sg29
I0
sba(iArchitecture
Entity
p7488
(dp7489
g11
(lp7490
sg15
S'com.google.common.collect.AbstractMultimap'
p7491
sg17
(lp7492
sg21
(lp7493
sg25
(lp7494
sg29
I0
sba(iArchitecture
Entity
p7495
(dp7496
g11
(lp7497
sg15
S'com.google.common.collect.AbstractMultiset'
p7498
sg17
(lp7499
sg21
(lp7500
sg25
(lp7501
sg29
I0
sba(iArchitecture
Entity
p7502
(dp7503
g11
(lp7504
sg15
S'com.google.common.collect.AbstractNavigableMap'
p7505
sg17
(lp7506
sg21
(lp7507
sg25
(lp7508
sg29
I0
sba(iArchitecture
Entity
p7509
(dp7510
g11
(lp7511
sg15
S'com.google.common.collect.AbstractRangeSet'
p7512
sg17
(lp7513
sg21
(lp7514
sg25
(lp7515
sg29
I0
sba(iArchitecture
Entity
p7516
(dp7517
g11
(lp7518
sg15
S'com.google.common.collect.AbstractTable'
p7519
sg17
(lp7520
sg21
(lp7521
sg25
(lp7522
sg29
I0
sba(iArchitecture
Entity
p7523
(dp7524
g11
(lp7525
sg15
S'com.google.common.collect.CartesianList'
p7526
sg17
(lp7527
sg21
(lp7528
sg25
(lp7529
sg29
I0
sba(iArchitecture
Entity
p7530
(dp7531
g11
(lp7532
sg15
S'com.google.common.collect.CollectSpliterators'
p7533
sg17
(lp7534
sg21
(lp7535
sg25
(lp7536
sg29
I0
sba(iArchitecture
Entity
p7537
(dp7538
g11
(lp7539
sg15
S'com.google.common.collect.Collections2'
p7540
sg17
(lp7541
sg21
(lp7542
sg25
(lp7543
sg29
I0
sba(iArchitecture
Entity
p7544
(dp7545
g11
(lp7546
sg15
S'com.google.common.collect.ComparisonChain'
p7547
sg17
(lp7548
sg21
(lp7549
sg25
(lp7550
sg29
I0
sba(iArchitecture
Entity
p7551
(dp7552
g11
(lp7553
sg15
S'com.google.common.collect.CompoundOrdering'
p7554
sg17
(lp7555
sg21
(lp7556
sg25
(lp7557
sg29
I0
sba(iArchitecture
Entity
p7558
(dp7559
g11
(lp7560
sg15
S'com.google.common.collect.ConcurrentHashMultiset'
p7561
sg17
(lp7562
sg21
(lp7563
sg25
(lp7564
sg29
I0
sba(iArchitecture
Entity
p7565
(dp7566
g11
(lp7567
sg15
S'com.google.common.collect.ContiguousSet'
p7568
sg17
(lp7569
sg21
(lp7570
sg25
(lp7571
sg29
I0
sba(iArchitecture
Entity
p7572
(dp7573
g11
(lp7574
sg15
S'com.google.common.collect.Count'
p7575
sg17
(lp7576
sg21
(lp7577
sg25
(lp7578
sg29
I0
sba(iArchitecture
Entity
p7579
(dp7580
g11
(lp7581
sg15
S'com.google.common.collect.DenseImmutableTable'
p7582
sg17
(lp7583
sg21
(lp7584
sg25
(lp7585
sg29
I0
sba(iArchitecture
Entity
p7586
(dp7587
g11
(lp7588
sg15
S'com.google.common.collect.DescendingImmutableSortedMultiset'
p7589
sg17
(lp7590
sg21
(lp7591
sg25
(lp7592
sg29
I0
sba(iArchitecture
Entity
p7593
(dp7594
g11
(lp7595
sg15
S'com.google.common.collect.DescendingImmutableSortedSet'
p7596
sg17
(lp7597
sg21
(lp7598
sg25
(lp7599
sg29
I0
sba(iArchitecture
Entity
p7600
(dp7601
g11
(lp7602
sg15
S'com.google.common.collect.DescendingMultiset'
p7603
sg17
(lp7604
sg21
(lp7605
sg25
(lp7606
sg29
I0
sba(iArchitecture
Entity
p7607
(dp7608
g11
(lp7609
sg15
S'com.google.common.collect.DiscreteDomain'
p7610
sg17
(lp7611
sg21
(lp7612
sg25
(lp7613
sg29
I0
sba(iArchitecture
Entity
p7614
(dp7615
g11
(lp7616
sg15
S'com.google.common.collect.EmptyContiguousSet'
p7617
sg17
(lp7618
sg21
(lp7619
sg25
(lp7620
sg29
I0
sba(iArchitecture
Entity
p7621
(dp7622
g11
(lp7623
sg15
S'com.google.common.collect.EvictingQueue'
p7624
sg17
(lp7625
sg21
(lp7626
sg25
(lp7627
sg29
I0
sba(iArchitecture
Entity
p7628
(dp7629
g11
(lp7630
sg15
S'com.google.common.collect.ExplicitOrdering'
p7631
sg17
(lp7632
sg21
(lp7633
sg25
(lp7634
sg29
I0
sba(iArchitecture
Entity
p7635
(dp7636
g11
(lp7637
sg15
S'com.google.common.collect.FilteredEntryMultimap'
p7638
sg17
(lp7639
sg21
(lp7640
sg25
(lp7641
sg29
I0
sba(iArchitecture
Entity
p7642
(dp7643
g11
(lp7644
sg15
S'com.google.common.collect.ForwardingMultimap'
p7645
sg17
(lp7646
sg21
(lp7647
sg25
(lp7648
sg29
I0
sba(iArchitecture
Entity
p7649
(dp7650
g11
(lp7651
sg15
S'com.google.common.collect.ForwardingTable'
p7652
sg17
(lp7653
sg21
(lp7654
sg25
(lp7655
sg29
I0
sba(iArchitecture
Entity
p7656
(dp7657
g11
(lp7658
sg15
S'com.google.common.collect.GeneralRange'
p7659
sg17
(lp7660
sg21
(lp7661
sg25
(lp7662
sg29
I0
sba(iArchitecture
Entity
p7663
(dp7664
g11
(lp7665
sg15
S'com.google.common.collect.HashBiMap'
p7666
sg17
(lp7667
sg21
(lp7668
sg25
(lp7669
sg29
I0
sba(iArchitecture
Entity
p7670
(dp7671
g11
(lp7672
sg15
S'com.google.common.collect.Hashing'
p7673
sg17
(lp7674
sg21
(lp7675
sg25
(lp7676
sg29
I0
sba(iArchitecture
Entity
p7677
(dp7678
g11
(lp7679
sg15
S'com.google.common.collect.ImmutableList'
p7680
sg17
(lp7681
sg21
(lp7682
sg25
(lp7683
sg29
I0
sba(iArchitecture
Entity
p7684
(dp7685
g11
(lp7686
sg15
S'com.google.common.collect.ImmutableMultiset'
p7687
sg17
(lp7688
sg21
(lp7689
sg25
(lp7690
sg29
I0
sba(iArchitecture
Entity
p7691
(dp7692
g11
(lp7693
sg15
S'com.google.common.collect.ImmutableRangeMap'
p7694
sg17
(lp7695
sg21
(lp7696
sg25
(lp7697
sg29
I0
sba(iArchitecture
Entity
p7698
(dp7699
g11
(lp7700
sg15
S'com.google.common.collect.ImmutableRangeSet'
p7701
sg17
(lp7702
sg21
(lp7703
sg25
(lp7704
sg29
I0
sba(iArchitecture
Entity
p7705
(dp7706
g11
(lp7707
sg15
S'com.google.common.collect.ImmutableSet'
p7708
sg17
(lp7709
sg21
(lp7710
sg25
(lp7711
sg29
I0
sba(iArchitecture
Entity
p7712
(dp7713
g11
(lp7714
sg15
S'com.google.common.collect.ImmutableSortedMultiset'
p7715
sg17
(lp7716
sg21
(lp7717
sg25
(lp7718
sg29
I0
sba(iArchitecture
Entity
p7719
(dp7720
g11
(lp7721
sg15
S'com.google.common.collect.ImmutableSortedSet'
p7722
sg17
(lp7723
sg21
(lp7724
sg25
(lp7725
sg29
I0
sba(iArchitecture
Entity
p7726
(dp7727
g11
(lp7728
sg15
S'com.google.common.collect.Iterables'
p7729
sg17
(lp7730
sg21
(lp7731
sg25
(lp7732
sg29
I0
sba(iArchitecture
Entity
p7733
(dp7734
g11
(lp7735
sg15
S'com.google.common.collect.Iterators'
p7736
sg17
(lp7737
sg21
(lp7738
sg25
(lp7739
sg29
I0
sba(iArchitecture
Entity
p7740
(dp7741
g11
(lp7742
sg15
S'com.google.common.collect.LexicographicalOrdering'
p7743
sg17
(lp7744
sg21
(lp7745
sg25
(lp7746
sg29
I0
sba(iArchitecture
Entity
p7747
(dp7748
g11
(lp7749
sg15
S'com.google.common.collect.LinkedListMultimap'
p7750
sg17
(lp7751
sg21
(lp7752
sg25
(lp7753
sg29
I0
sba(iArchitecture
Entity
p7754
(dp7755
g11
(lp7756
sg15
S'com.google.common.collect.Lists'
p7757
sg17
(lp7758
sg21
(lp7759
sg25
(lp7760
sg29
I0
sba(iArchitecture
Entity
p7761
(dp7762
g11
(lp7763
sg15
S'com.google.common.collect.MapMakerInternalMap'
p7764
sg17
(lp7765
sg21
(lp7766
sg25
(lp7767
sg29
I0
sba(iArchitecture
Entity
p7768
(dp7769
g11
(lp7770
sg15
S'com.google.common.collect.MinMaxPriorityQueue'
p7771
sg17
(lp7772
sg21
(lp7773
sg25
(lp7774
sg29
I0
sba(iArchitecture
Entity
p7775
(dp7776
g11
(lp7777
sg15
S'com.google.common.collect.Multisets'
p7778
sg17
(lp7779
sg21
(lp7780
sg25
(lp7781
sg29
I0
sba(iArchitecture
Entity
p7782
(dp7783
g11
(lp7784
sg15
S'com.google.common.collect.MultitransformedIterator'
p7785
sg17
(lp7786
sg21
(lp7787
sg25
(lp7788
sg29
I0
sba(iArchitecture
Entity
p7789
(dp7790
g11
(lp7791
sg15
S'com.google.common.collect.NullsFirstOrdering'
p7792
sg17
(lp7793
sg21
(lp7794
sg25
(lp7795
sg29
I0
sba(iArchitecture
Entity
p7796
(dp7797
g11
(lp7798
sg15
S'com.google.common.collect.NullsLastOrdering'
p7799
sg17
(lp7800
sg21
(lp7801
sg25
(lp7802
sg29
I0
sba(iArchitecture
Entity
p7803
(dp7804
g11
(lp7805
sg15
S'com.google.common.collect.ObjectArrays'
p7806
sg17
(lp7807
sg21
(lp7808
sg25
(lp7809
sg29
I0
sba(iArchitecture
Entity
p7810
(dp7811
g11
(lp7812
sg15
S'com.google.common.collect.Range'
p7813
sg17
(lp7814
sg21
(lp7815
sg25
(lp7816
sg29
I0
sba(iArchitecture
Entity
p7817
(dp7818
g11
(lp7819
sg15
S'com.google.common.collect.RangeSet'
p7820
sg17
(lp7821
sg21
(lp7822
sg25
(lp7823
sg29
I0
sba(iArchitecture
Entity
p7824
(dp7825
g11
(lp7826
sg15
S'com.google.common.collect.RegularContiguousSet'
p7827
sg17
(lp7828
sg21
(lp7829
sg25
(lp7830
sg29
I0
sba(iArchitecture
Entity
p7831
(dp7832
g11
(lp7833
sg15
S'com.google.common.collect.RegularImmutableBiMap'
p7834
sg17
(lp7835
sg21
(lp7836
sg25
(lp7837
sg29
I0
sba(iArchitecture
Entity
p7838
(dp7839
g11
(lp7840
sg15
S'com.google.common.collect.RegularImmutableList'
p7841
sg17
(lp7842
sg21
(lp7843
sg25
(lp7844
sg29
I0
sba(iArchitecture
Entity
p7845
(dp7846
g11
(lp7847
sg15
S'com.google.common.collect.RegularImmutableMultiset'
p7848
sg17
(lp7849
sg21
(lp7850
sg25
(lp7851
sg29
I0
sba(iArchitecture
Entity
p7852
(dp7853
g11
(lp7854
sg15
S'com.google.common.collect.RegularImmutableSet'
p7855
sg17
(lp7856
sg21
(lp7857
sg25
(lp7858
sg29
I0
sba(iArchitecture
Entity
p7859
(dp7860
g11
(lp7861
sg15
S'com.google.common.collect.RegularImmutableSortedMultiset'
p7862
sg17
(lp7863
sg21
(lp7864
sg25
(lp7865
sg29
I0
sba(iArchitecture
Entity
p7866
(dp7867
g11
(lp7868
sg15
S'com.google.common.collect.RegularImmutableSortedSet'
p7869
sg17
(lp7870
sg21
(lp7871
sg25
(lp7872
sg29
I0
sba(iArchitecture
Entity
p7873
(dp7874
g11
(lp7875
sg15
S'com.google.common.collect.RegularImmutableTable'
p7876
sg17
(lp7877
sg21
(lp7878
sg25
(lp7879
sg29
I0
sba(iArchitecture
Entity
p7880
(dp7881
g11
(lp7882
sg15
S'com.google.common.collect.ReverseOrdering'
p7883
sg17
(lp7884
sg21
(lp7885
sg25
(lp7886
sg29
I0
sba(iArchitecture
Entity
p7887
(dp7888
g11
(lp7889
sg15
S'com.google.common.collect.SingletonImmutableBiMap'
p7890
sg17
(lp7891
sg21
(lp7892
sg25
(lp7893
sg29
I0
sba(iArchitecture
Entity
p7894
(dp7895
g11
(lp7896
sg15
S'com.google.common.collect.SingletonImmutableSet'
p7897
sg17
(lp7898
sg21
(lp7899
sg25
(lp7900
sg29
I0
sba(iArchitecture
Entity
p7901
(dp7902
g11
(lp7903
sg15
S'com.google.common.collect.StandardTable'
p7904
sg17
(lp7905
sg21
(lp7906
sg25
(lp7907
sg29
I0
sba(iArchitecture
Entity
p7908
(dp7909
g11
(lp7910
sg15
S'com.google.common.collect.Synchronized'
p7911
sg17
(lp7912
sg21
(lp7913
sg25
(lp7914
sg29
I0
sba(iArchitecture
Entity
p7915
(dp7916
g11
(lp7917
sg15
S'com.google.common.collect.TopKSelector'
p7918
sg17
(lp7919
sg21
(lp7920
sg25
(lp7921
sg29
I0
sba(iArchitecture
Entity
p7922
(dp7923
g11
(lp7924
sg15
S'com.google.common.collect.TransformedListIterator'
p7925
sg17
(lp7926
sg21
(lp7927
sg25
(lp7928
sg29
I0
sba(iArchitecture
Entity
p7929
(dp7930
g11
(lp7931
sg15
S'com.google.common.collect.TreeMultiset'
p7932
sg17
(lp7933
sg21
(lp7934
sg25
(lp7935
sg29
I0
sba(iArchitecture
Entity
p7936
(dp7937
g11
(lp7938
sg15
S'com.google.common.collect.TreeRangeMap'
p7939
sg17
(lp7940
sg21
(lp7941
sg25
(lp7942
sg29
I0
sba(iArchitecture
Entity
p7943
(dp7944
g11
(lp7945
sg15
S'com.google.common.collect.TreeRangeSet'
p7946
sg17
(lp7947
sg21
(lp7948
sg25
(lp7949
sg29
I0
sba(iArchitecture
Entity
p7950
(dp7951
g11
(lp7952
sg15
S'com.google.common.escape.CharEscaper'
p7953
sg17
(lp7954
sg21
(lp7955
sg25
(lp7956
sg29
I0
sba(iArchitecture
Entity
p7957
(dp7958
g11
(lp7959
sg15
S'com.google.common.escape.CharEscaperBuilder'
p7960
sg17
(lp7961
sg21
(lp7962
sg25
(lp7963
sg29
I0
sba(iArchitecture
Entity
p7964
(dp7965
g11
(lp7966
sg15
S'com.google.common.eventbus.Subscriber'
p7967
sg17
(lp7968
sg21
(lp7969
sg25
(lp7970
sg29
I0
sba(iArchitecture
Entity
p7971
(dp7972
g11
(lp7973
sg15
S'com.google.common.graph.AbstractBaseGraph'
p7974
sg17
(lp7975
sg21
(lp7976
sg25
(lp7977
sg29
I0
sba(iArchitecture
Entity
p7978
(dp7979
g11
(lp7980
sg15
S'com.google.common.graph.AbstractDirectedNetworkConnections'
p7981
sg17
(lp7982
sg21
(lp7983
sg25
(lp7984
sg29
I0
sba(iArchitecture
Entity
p7985
(dp7986
g11
(lp7987
sg15
S'com.google.common.graph.AbstractNetwork'
p7988
sg17
(lp7989
sg21
(lp7990
sg25
(lp7991
sg29
I0
sba(iArchitecture
Entity
p7992
(dp7993
g11
(lp7994
sg15
S'com.google.common.graph.AbstractUndirectedNetworkConnections'
p7995
sg17
(lp7996
sg21
(lp7997
sg25
(lp7998
sg29
I0
sba(iArchitecture
Entity
p7999
(dp8000
g11
(lp8001
sg15
S'com.google.common.graph.AbstractValueGraph'
p8002
sg17
(lp8003
sg21
(lp8004
sg25
(lp8005
sg29
I0
sba(iArchitecture
Entity
p8006
(dp8007
g11
(lp8008
sg15
S'com.google.common.graph.DirectedGraphConnections'
p8009
sg17
(lp8010
sg21
(lp8011
sg25
(lp8012
sg29
I0
sba(iArchitecture
Entity
p8013
(dp8014
g11
(lp8015
sg15
S'com.google.common.graph.EndpointPair'
p8016
sg17
(lp8017
sg21
(lp8018
sg25
(lp8019
sg29
I0
sba(iArchitecture
Entity
p8020
(dp8021
g11
(lp8022
sg15
S'com.google.common.graph.ForwardingGraph'
p8023
sg17
(lp8024
sg21
(lp8025
sg25
(lp8026
sg29
I0
sba(iArchitecture
Entity
p8027
(dp8028
g11
(lp8029
sg15
S'com.google.common.hash.AbstractCompositeHashFunction'
p8030
sg17
(lp8031
sg21
(lp8032
sg25
(lp8033
sg29
I0
sba(iArchitecture
Entity
p8034
(dp8035
g11
(lp8036
sg15
S'com.google.common.hash.BloomFilterStrategies'
p8037
sg17
(lp8038
sg21
(lp8039
sg25
(lp8040
sg29
I0
sba(iArchitecture
Entity
p8041
(dp8042
g11
(lp8043
sg15
S'com.google.common.hash.ChecksumHashFunction'
p8044
sg17
(lp8045
sg21
(lp8046
sg25
(lp8047
sg29
I0
sba(iArchitecture
Entity
p8048
(dp8049
g11
(lp8050
sg15
S'com.google.common.hash.Crc32cHashFunction'
p8051
sg17
(lp8052
sg21
(lp8053
sg25
(lp8054
sg29
I0
sba(iArchitecture
Entity
p8055
(dp8056
g11
(lp8057
sg15
S'com.google.common.hash.FarmHashFingerprint64'
p8058
sg17
(lp8059
sg21
(lp8060
sg25
(lp8061
sg29
I0
sba(iArchitecture
Entity
p8062
(dp8063
g11
(lp8064
sg15
S'com.google.common.hash.HashCode'
p8065
sg17
(lp8066
sg21
(lp8067
sg25
(lp8068
sg29
I0
sba(iArchitecture
Entity
p8069
(dp8070
g11
(lp8071
sg15
S'com.google.common.hash.LittleEndianByteArray'
p8072
sg17
(lp8073
sg21
(lp8074
sg25
(lp8075
sg29
I0
sba(iArchitecture
Entity
p8076
(dp8077
g11
(lp8078
sg15
S'com.google.common.hash.MacHashFunction'
p8079
sg17
(lp8080
sg21
(lp8081
sg25
(lp8082
sg29
I0
sba(iArchitecture
Entity
p8083
(dp8084
g11
(lp8085
sg15
S'com.google.common.hash.Murmur3_128HashFunction'
p8086
sg17
(lp8087
sg21
(lp8088
sg25
(lp8089
sg29
I0
sba(iArchitecture
Entity
p8090
(dp8091
g11
(lp8092
sg15
S'com.google.common.hash.Murmur3_32HashFunction'
p8093
sg17
(lp8094
sg21
(lp8095
sg25
(lp8096
sg29
I0
sba(iArchitecture
Entity
p8097
(dp8098
g11
(lp8099
sg15
S'com.google.common.hash.SipHashFunction'
p8100
sg17
(lp8101
sg21
(lp8102
sg25
(lp8103
sg29
I0
sba(iArchitecture
Entity
p8104
(dp8105
g11
(lp8106
sg15
S'com.google.common.io.BaseEncoding'
p8107
sg17
(lp8108
sg21
(lp8109
sg25
(lp8110
sg29
I0
sba(iArchitecture
Entity
p8111
(dp8112
g11
(lp8113
sg15
S'com.google.common.io.ByteArrayDataOutput'
p8114
sg17
(lp8115
sg21
(lp8116
sg25
(lp8117
sg29
I0
sba(iArchitecture
Entity
p8118
(dp8119
g11
(lp8120
sg15
S'com.google.common.io.CharSequenceReader'
p8121
sg17
(lp8122
sg21
(lp8123
sg25
(lp8124
sg29
I0
sba(iArchitecture
Entity
p8125
(dp8126
g11
(lp8127
sg15
S'com.google.common.io.MultiReader'
p8128
sg17
(lp8129
sg21
(lp8130
sg25
(lp8131
sg29
I0
sba(iArchitecture
Entity
p8132
(dp8133
g11
(lp8134
sg15
S'com.google.common.math.BigIntegerMath'
p8135
sg17
(lp8136
sg21
(lp8137
sg25
(lp8138
sg29
I0
sba(iArchitecture
Entity
p8139
(dp8140
g11
(lp8141
sg15
S'com.google.common.math.IntMath'
p8142
sg17
(lp8143
sg21
(lp8144
sg25
(lp8145
sg29
I0
sba(iArchitecture
Entity
p8146
(dp8147
g11
(lp8148
sg15
S'com.google.common.math.LinearTransformation'
p8149
sg17
(lp8150
sg21
(lp8151
sg25
(lp8152
sg29
I0
sba(iArchitecture
Entity
p8153
(dp8154
g11
(lp8155
sg15
S'com.google.common.math.LongMath'
p8156
sg17
(lp8157
sg21
(lp8158
sg25
(lp8159
sg29
I0
sba(iArchitecture
Entity
p8160
(dp8161
g11
(lp8162
sg15
S'com.google.common.math.Quantiles'
p8163
sg17
(lp8164
sg21
(lp8165
sg25
(lp8166
sg29
I0
sba(iArchitecture
Entity
p8167
(dp8168
g11
(lp8169
sg15
S'com.google.common.net.PercentEscaper'
p8170
sg17
(lp8171
sg21
(lp8172
sg25
(lp8173
sg29
I0
sba(iArchitecture
Entity
p8174
(dp8175
g11
(lp8176
sg15
S'com.google.common.primitives.Booleans'
p8177
sg17
(lp8178
sg21
(lp8179
sg25
(lp8180
sg29
I0
sba(iArchitecture
Entity
p8181
(dp8182
g11
(lp8183
sg15
S'com.google.common.primitives.Bytes'
p8184
sg17
(lp8185
sg21
(lp8186
sg25
(lp8187
sg29
I0
sba(iArchitecture
Entity
p8188
(dp8189
g11
(lp8190
sg15
S'com.google.common.primitives.Chars'
p8191
sg17
(lp8192
sg21
(lp8193
sg25
(lp8194
sg29
I0
sba(iArchitecture
Entity
p8195
(dp8196
g11
(lp8197
sg15
S'com.google.common.primitives.Doubles'
p8198
sg17
(lp8199
sg21
(lp8200
sg25
(lp8201
sg29
I0
sba(iArchitecture
Entity
p8202
(dp8203
g11
(lp8204
sg15
S'com.google.common.primitives.Floats'
p8205
sg17
(lp8206
sg21
(lp8207
sg25
(lp8208
sg29
I0
sba(iArchitecture
Entity
p8209
(dp8210
g11
(lp8211
sg15
S'com.google.common.primitives.ImmutableDoubleArray'
p8212
sg17
(lp8213
sg21
(lp8214
sg25
(lp8215
sg29
I0
sba(iArchitecture
Entity
p8216
(dp8217
g11
(lp8218
sg15
S'com.google.common.primitives.ImmutableIntArray'
p8219
sg17
(lp8220
sg21
(lp8221
sg25
(lp8222
sg29
I0
sba(iArchitecture
Entity
p8223
(dp8224
g11
(lp8225
sg15
S'com.google.common.primitives.ImmutableLongArray'
p8226
sg17
(lp8227
sg21
(lp8228
sg25
(lp8229
sg29
I0
sba(iArchitecture
Entity
p8230
(dp8231
g11
(lp8232
sg15
S'com.google.common.primitives.Ints'
p8233
sg17
(lp8234
sg21
(lp8235
sg25
(lp8236
sg29
I0
sba(iArchitecture
Entity
p8237
(dp8238
g11
(lp8239
sg15
S'com.google.common.primitives.Longs'
p8240
sg17
(lp8241
sg21
(lp8242
sg25
(lp8243
sg29
I0
sba(iArchitecture
Entity
p8244
(dp8245
g11
(lp8246
sg15
S'com.google.common.primitives.Shorts'
p8247
sg17
(lp8248
sg21
(lp8249
sg25
(lp8250
sg29
I0
sba(iArchitecture
Entity
p8251
(dp8252
g11
(lp8253
sg15
S'com.google.common.primitives.SignedBytes'
p8254
sg17
(lp8255
sg21
(lp8256
sg25
(lp8257
sg29
I0
sba(iArchitecture
Entity
p8258
(dp8259
g11
(lp8260
sg15
S'com.google.common.primitives.UnsignedBytes'
p8261
sg17
(lp8262
sg21
(lp8263
sg25
(lp8264
sg29
I0
sba(iArchitecture
Entity
p8265
(dp8266
g11
(lp8267
sg15
S'com.google.common.primitives.UnsignedInteger'
p8268
sg17
(lp8269
sg21
(lp8270
sg25
(lp8271
sg29
I0
sba(iArchitecture
Entity
p8272
(dp8273
g11
(lp8274
sg15
S'com.google.common.primitives.UnsignedInts'
p8275
sg17
(lp8276
sg21
(lp8277
sg25
(lp8278
sg29
I0
sba(iArchitecture
Entity
p8279
(dp8280
g11
(lp8281
sg15
S'com.google.common.primitives.UnsignedLong'
p8282
sg17
(lp8283
sg21
(lp8284
sg25
(lp8285
sg29
I0
sba(iArchitecture
Entity
p8286
(dp8287
g11
(lp8288
sg15
S'com.google.common.primitives.UnsignedLongs'
p8289
sg17
(lp8290
sg21
(lp8291
sg25
(lp8292
sg29
I0
sba(iArchitecture
Entity
p8293
(dp8294
g11
(lp8295
sg15
S'com.google.common.reflect.Element'
p8296
sg17
(lp8297
sg21
(lp8298
sg25
(lp8299
sg29
I0
sba(iArchitecture
Entity
p8300
(dp8301
g11
(lp8302
sg15
S'com.google.common.reflect.Invokable'
p8303
sg17
(lp8304
sg21
(lp8305
sg25
(lp8306
sg29
I0
sba(iArchitecture
Entity
p8307
(dp8308
g11
(lp8309
sg15
S'com.google.common.reflect.Parameter'
p8310
sg17
(lp8311
sg21
(lp8312
sg25
(lp8313
sg29
I0
sba(iArchitecture
Entity
p8314
(dp8315
g11
(lp8316
sg15
S'com.google.common.util.concurrent.AbstractIdleService'
p8317
sg17
(lp8318
sg21
(lp8319
sg25
(lp8320
sg29
I0
sba(iArchitecture
Entity
p8321
(dp8322
g11
(lp8323
sg15
S'com.google.common.util.concurrent.AtomicDouble'
p8324
sg17
(lp8325
sg21
(lp8326
sg25
(lp8327
sg29
I0
sba(iArchitecture
Entity
p8328
(dp8329
g11
(lp8330
sg15
S'com.google.common.util.concurrent.AtomicDoubleArray'
p8331
sg17
(lp8332
sg21
(lp8333
sg25
(lp8334
sg29
I0
sba(iArchitecture
Entity
p8335
(dp8336
g11
(lp8337
sg15
S'com.google.common.util.concurrent.CombinedFuture'
p8338
sg17
(lp8339
sg21
(lp8340
sg25
(lp8341
sg29
I0
sba(iArchitecture
Entity
p8342
(dp8343
g11
(lp8344
sg15
S'com.google.common.util.concurrent.Monitor'
p8345
sg17
(lp8346
sg21
(lp8347
sg25
(lp8348
sg29
I0
sba(iArchitecture
Entity
p8349
(dp8350
g11
(lp8351
sg15
S'com.google.common.util.concurrent.Striped'
p8352
sg17
(lp8353
sg21
(lp8354
sg25
(lp8355
sg29
I0
sbasg1053
(lp8356
g7379
ag7386
ag7393
ag7400
ag7407
ag7414
ag7421
ag7428
ag7435
ag7442
ag7449
ag7456
ag7463
ag7470
ag7477
ag7484
ag7491
ag7498
ag7505
ag7512
ag7519
ag7526
ag7533
ag7540
ag7547
ag7554
ag7561
ag7568
ag7575
ag7582
ag7589
ag7596
ag7603
ag7610
ag7617
ag7624
ag7631
ag7638
ag7645
ag7652
ag7659
ag7666
ag7673
ag7680
ag7687
ag7694
ag7701
ag7708
ag7715
ag7722
ag7729
ag7736
ag7743
ag7750
ag7757
ag7764
ag7771
ag7778
ag7785
ag7792
ag7799
ag7806
ag7813
ag7820
ag7827
ag7834
ag7841
ag7848
ag7855
ag7862
ag7869
ag7876
ag7883
ag7890
ag7897
ag7904
ag7911
ag7918
ag7925
ag7932
ag7939
ag7946
ag7953
ag7960
ag7967
ag7974
ag7981
ag7988
ag7995
ag8002
ag8009
ag8016
ag8023
ag8030
ag8037
ag8044
ag8051
ag8058
ag8065
ag8072
ag8079
ag8086
ag8093
ag8100
ag8107
ag8114
ag8121
ag8128
ag8135
ag8142
ag8149
ag8156
ag8163
ag8170
ag8177
ag8184
ag8191
ag8198
ag8205
ag8212
ag8219
ag8226
ag8233
ag8240
ag8247
ag8254
ag8261
ag8268
ag8275
ag8282
ag8289
ag8296
ag8303
ag8310
ag8317
ag8324
ag8331
ag8338
ag8345
ag8352
asg29
I0
sg1055
S'graphics'
p8357
sba(iArchitecture
Cluster
p8358
(dp8359
g7
(lp8360
(iArchitecture
Entity
p8361
(dp8362
g11
(lp8363
sg15
S'com.google.common.base.Ascii'
p8364
sg17
(lp8365
sg21
(lp8366
sg25
(lp8367
sg29
I0
sba(iArchitecture
Entity
p8368
(dp8369
g11
(lp8370
sg15
S'com.google.common.base.CaseFormat'
p8371
sg17
(lp8372
sg21
(lp8373
sg25
(lp8374
sg29
I0
sba(iArchitecture
Entity
p8375
(dp8376
g11
(lp8377
sg15
S'com.google.common.base.Charsets'
p8378
sg17
(lp8379
sg21
(lp8380
sg25
(lp8381
sg29
I0
sba(iArchitecture
Entity
p8382
(dp8383
g11
(lp8384
sg15
S'com.google.common.base.FunctionalEquivalence'
p8385
sg17
(lp8386
sg21
(lp8387
sg25
(lp8388
sg29
I0
sba(iArchitecture
Entity
p8389
(dp8390
g11
(lp8391
sg15
S'com.google.common.base.MoreObjects'
p8392
sg17
(lp8393
sg21
(lp8394
sg25
(lp8395
sg29
I0
sba(iArchitecture
Entity
p8396
(dp8397
g11
(lp8398
sg15
S'com.google.common.base.Utf8'
p8399
sg17
(lp8400
sg21
(lp8401
sg25
(lp8402
sg29
I0
sba(iArchitecture
Entity
p8403
(dp8404
g11
(lp8405
sg15
S'com.google.common.collect.AllEqualOrdering'
p8406
sg17
(lp8407
sg21
(lp8408
sg25
(lp8409
sg29
I0
sba(iArchitecture
Entity
p8410
(dp8411
g11
(lp8412
sg15
S'com.google.common.collect.ByFunctionOrdering'
p8413
sg17
(lp8414
sg21
(lp8415
sg25
(lp8416
sg29
I0
sba(iArchitecture
Entity
p8417
(dp8418
g11
(lp8419
sg15
S'com.google.common.collect.CollectCollectors'
p8420
sg17
(lp8421
sg21
(lp8422
sg25
(lp8423
sg29
I0
sba(iArchitecture
Entity
p8424
(dp8425
g11
(lp8426
sg15
S'com.google.common.collect.ComparatorOrdering'
p8427
sg17
(lp8428
sg21
(lp8429
sg25
(lp8430
sg29
I0
sba(iArchitecture
Entity
p8431
(dp8432
g11
(lp8433
sg15
S'com.google.common.collect.FluentIterable'
p8434
sg17
(lp8435
sg21
(lp8436
sg25
(lp8437
sg29
I0
sba(iArchitecture
Entity
p8438
(dp8439
g11
(lp8440
sg15
S'com.google.common.collect.HashMultimap'
p8441
sg17
(lp8442
sg21
(lp8443
sg25
(lp8444
sg29
I0
sba(iArchitecture
Entity
p8445
(dp8446
g11
(lp8447
sg15
S'com.google.common.collect.HashMultiset'
p8448
sg17
(lp8449
sg21
(lp8450
sg25
(lp8451
sg29
I0
sba(iArchitecture
Entity
p8452
(dp8453
g11
(lp8454
sg15
S'com.google.common.collect.ImmutableAsList'
p8455
sg17
(lp8456
sg21
(lp8457
sg25
(lp8458
sg29
I0
sba(iArchitecture
Entity
p8459
(dp8460
g11
(lp8461
sg15
S'com.google.common.collect.ImmutableBiMapFauxverideShim'
p8462
sg17
(lp8463
sg21
(lp8464
sg25
(lp8465
sg29
I0
sba(iArchitecture
Entity
p8466
(dp8467
g11
(lp8468
sg15
S'com.google.common.collect.ImmutableEntry'
p8469
sg17
(lp8470
sg21
(lp8471
sg25
(lp8472
sg29
I0
sba(iArchitecture
Entity
p8473
(dp8474
g11
(lp8475
sg15
S'com.google.common.collect.ImmutableListMultimap'
p8476
sg17
(lp8477
sg21
(lp8478
sg25
(lp8479
sg29
I0
sba(iArchitecture
Entity
p8480
(dp8481
g11
(lp8482
sg15
S'com.google.common.collect.ImmutableSetMultimap'
p8483
sg17
(lp8484
sg21
(lp8485
sg25
(lp8486
sg29
I0
sba(iArchitecture
Entity
p8487
(dp8488
g11
(lp8489
sg15
S'com.google.common.collect.LinkedHashMultiset'
p8490
sg17
(lp8491
sg21
(lp8492
sg25
(lp8493
sg29
I0
sba(iArchitecture
Entity
p8494
(dp8495
g11
(lp8496
sg15
S'com.google.common.collect.NaturalOrdering'
p8497
sg17
(lp8498
sg21
(lp8499
sg25
(lp8500
sg29
I0
sba(iArchitecture
Entity
p8501
(dp8502
g11
(lp8503
sg15
S'com.google.common.collect.RangeGwtSerializationDependencies'
p8504
sg17
(lp8505
sg21
(lp8506
sg25
(lp8507
sg29
I0
sba(iArchitecture
Entity
p8508
(dp8509
g11
(lp8510
sg15
S'com.google.common.collect.ReverseNaturalOrdering'
p8511
sg17
(lp8512
sg21
(lp8513
sg25
(lp8514
sg29
I0
sba(iArchitecture
Entity
p8515
(dp8516
g11
(lp8517
sg15
S'com.google.common.collect.Serialization'
p8518
sg17
(lp8519
sg21
(lp8520
sg25
(lp8521
sg29
I0
sba(iArchitecture
Entity
p8522
(dp8523
g11
(lp8524
sg15
S'com.google.common.collect.Streams'
p8525
sg17
(lp8526
sg21
(lp8527
sg25
(lp8528
sg29
I0
sba(iArchitecture
Entity
p8529
(dp8530
g11
(lp8531
sg15
S'com.google.common.collect.TransformedIterator'
p8532
sg17
(lp8533
sg21
(lp8534
sg25
(lp8535
sg29
I0
sba(iArchitecture
Entity
p8536
(dp8537
g11
(lp8538
sg15
S'com.google.common.collect.UsingToStringOrdering'
p8539
sg17
(lp8540
sg21
(lp8541
sg25
(lp8542
sg29
I0
sba(iArchitecture
Entity
p8543
(dp8544
g11
(lp8545
sg15
S'com.google.common.escape.ArrayBasedCharEscaper'
p8546
sg17
(lp8547
sg21
(lp8548
sg25
(lp8549
sg29
I0
sba(iArchitecture
Entity
p8550
(dp8551
g11
(lp8552
sg15
S'com.google.common.escape.ArrayBasedEscaperMap'
p8553
sg17
(lp8554
sg21
(lp8555
sg25
(lp8556
sg29
I0
sba(iArchitecture
Entity
p8557
(dp8558
g11
(lp8559
sg15
S'com.google.common.escape.ArrayBasedUnicodeEscaper'
p8560
sg17
(lp8561
sg21
(lp8562
sg25
(lp8563
sg29
I0
sba(iArchitecture
Entity
p8564
(dp8565
g11
(lp8566
sg15
S'com.google.common.escape.Escaper'
p8567
sg17
(lp8568
sg21
(lp8569
sg25
(lp8570
sg29
I0
sba(iArchitecture
Entity
p8571
(dp8572
g11
(lp8573
sg15
S'com.google.common.escape.Escapers'
p8574
sg17
(lp8575
sg21
(lp8576
sg25
(lp8577
sg29
I0
sba(iArchitecture
Entity
p8578
(dp8579
g11
(lp8580
sg15
S'com.google.common.escape.Platform'
p8581
sg17
(lp8582
sg21
(lp8583
sg25
(lp8584
sg29
I0
sba(iArchitecture
Entity
p8585
(dp8586
g11
(lp8587
sg15
S'com.google.common.escape.UnicodeEscaper'
p8588
sg17
(lp8589
sg21
(lp8590
sg25
(lp8591
sg29
I0
sba(iArchitecture
Entity
p8592
(dp8593
g11
(lp8594
sg15
S'com.google.common.eventbus.DeadEvent'
p8595
sg17
(lp8596
sg21
(lp8597
sg25
(lp8598
sg29
I0
sba(iArchitecture
Entity
p8599
(dp8600
g11
(lp8601
sg15
S'com.google.common.graph.AbstractGraph'
p8602
sg17
(lp8603
sg21
(lp8604
sg25
(lp8605
sg29
I0
sba(iArchitecture
Entity
p8606
(dp8607
g11
(lp8608
sg15
S'com.google.common.graph.GraphConstants'
p8609
sg17
(lp8610
sg21
(lp8611
sg25
(lp8612
sg29
I0
sba(iArchitecture
Entity
p8613
(dp8614
g11
(lp8615
sg15
S'com.google.common.graph.ImmutableGraph'
p8616
sg17
(lp8617
sg21
(lp8618
sg25
(lp8619
sg29
I0
sba(iArchitecture
Entity
p8620
(dp8621
g11
(lp8622
sg15
S'com.google.common.graph.ImmutableValueGraph'
p8623
sg17
(lp8624
sg21
(lp8625
sg25
(lp8626
sg29
I0
sba(iArchitecture
Entity
p8627
(dp8628
g11
(lp8629
sg15
S'com.google.common.hash.AbstractByteHasher'
p8630
sg17
(lp8631
sg21
(lp8632
sg25
(lp8633
sg29
I0
sba(iArchitecture
Entity
p8634
(dp8635
g11
(lp8636
sg15
S'com.google.common.hash.AbstractHasher'
p8637
sg17
(lp8638
sg21
(lp8639
sg25
(lp8640
sg29
I0
sba(iArchitecture
Entity
p8641
(dp8642
g11
(lp8643
sg15
S'com.google.common.hash.AbstractNonStreamingHashFunction'
p8644
sg17
(lp8645
sg21
(lp8646
sg25
(lp8647
sg29
I0
sba(iArchitecture
Entity
p8648
(dp8649
g11
(lp8650
sg15
S'com.google.common.hash.AbstractStreamingHashFunction'
p8651
sg17
(lp8652
sg21
(lp8653
sg25
(lp8654
sg29
I0
sba(iArchitecture
Entity
p8655
(dp8656
g11
(lp8657
sg15
S'com.google.common.hash.BloomFilter'
p8658
sg17
(lp8659
sg21
(lp8660
sg25
(lp8661
sg29
I0
sba(iArchitecture
Entity
p8662
(dp8663
g11
(lp8664
sg15
S'com.google.common.hash.Funnels'
p8665
sg17
(lp8666
sg21
(lp8667
sg25
(lp8668
sg29
I0
sba(iArchitecture
Entity
p8669
(dp8670
g11
(lp8671
sg15
S'com.google.common.hash.HashFunction'
p8672
sg17
(lp8673
sg21
(lp8674
sg25
(lp8675
sg29
I0
sba(iArchitecture
Entity
p8676
(dp8677
g11
(lp8678
sg15
S'com.google.common.hash.Hasher'
p8679
sg17
(lp8680
sg21
(lp8681
sg25
(lp8682
sg29
I0
sba(iArchitecture
Entity
p8683
(dp8684
g11
(lp8685
sg15
S'com.google.common.hash.HashingInputStream'
p8686
sg17
(lp8687
sg21
(lp8688
sg25
(lp8689
sg29
I0
sba(iArchitecture
Entity
p8690
(dp8691
g11
(lp8692
sg15
S'com.google.common.hash.HashingOutputStream'
p8693
sg17
(lp8694
sg21
(lp8695
sg25
(lp8696
sg29
I0
sba(iArchitecture
Entity
p8697
(dp8698
g11
(lp8699
sg15
S'com.google.common.hash.MessageDigestHashFunction'
p8700
sg17
(lp8701
sg21
(lp8702
sg25
(lp8703
sg29
I0
sba(iArchitecture
Entity
p8704
(dp8705
g11
(lp8706
sg15
S'com.google.common.hash.PrimitiveSink'
p8707
sg17
(lp8708
sg21
(lp8709
sg25
(lp8710
sg29
I0
sba(iArchitecture
Entity
p8711
(dp8712
g11
(lp8713
sg15
S'com.google.common.io.AppendableWriter'
p8714
sg17
(lp8715
sg21
(lp8716
sg25
(lp8717
sg29
I0
sba(iArchitecture
Entity
p8718
(dp8719
g11
(lp8720
sg15
S'com.google.common.io.ByteArrayDataInput'
p8721
sg17
(lp8722
sg21
(lp8723
sg25
(lp8724
sg29
I0
sba(iArchitecture
Entity
p8725
(dp8726
g11
(lp8727
sg15
S'com.google.common.io.ByteProcessor'
p8728
sg17
(lp8729
sg21
(lp8730
sg25
(lp8731
sg29
I0
sba(iArchitecture
Entity
p8732
(dp8733
g11
(lp8734
sg15
S'com.google.common.io.ByteSink'
p8735
sg17
(lp8736
sg21
(lp8737
sg25
(lp8738
sg29
I0
sba(iArchitecture
Entity
p8739
(dp8740
g11
(lp8741
V2843
p8742
ag8742
asg15
S'com.google.common.io.ByteSource'
p8743
sg17
(lp8744
VThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p8745
aVThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p8746
asg21
(lp8747
(lp8748
I0
aag8748
asg25
(lp8749
VOptimize {Byte,Char}Source.isEmpty() for known-non-empty sources
p8750
ag8750
asg29
I0
sba(iArchitecture
Entity
p8751
(dp8752
g11
(lp8753
sg15
S'com.google.common.io.ByteStreams'
p8754
sg17
(lp8755
sg21
(lp8756
sg25
(lp8757
sg29
I0
sba(iArchitecture
Entity
p8758
(dp8759
g11
(lp8760
sg15
S'com.google.common.io.CharSink'
p8761
sg17
(lp8762
sg21
(lp8763
sg25
(lp8764
sg29
I0
sba(iArchitecture
Entity
p8765
(dp8766
g11
(lp8767
g8742
ag8742
asg15
S'com.google.common.io.CharSource'
p8768
sg17
(lp8769
VThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p8770
aVThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p8771
asg21
(lp8772
g8748
ag8748
asg25
(lp8773
g8750
ag8750
asg29
I0
sba(iArchitecture
Entity
p8774
(dp8775
g11
(lp8776
sg15
S'com.google.common.io.CharStreams'
p8777
sg17
(lp8778
sg21
(lp8779
sg25
(lp8780
sg29
I0
sba(iArchitecture
Entity
p8781
(dp8782
g11
(lp8783
sg15
S'com.google.common.io.Closeables'
p8784
sg17
(lp8785
sg21
(lp8786
sg25
(lp8787
sg29
I0
sba(iArchitecture
Entity
p8788
(dp8789
g11
(lp8790
sg15
S'com.google.common.io.CountingInputStream'
p8791
sg17
(lp8792
sg21
(lp8793
sg25
(lp8794
sg29
I0
sba(iArchitecture
Entity
p8795
(dp8796
g11
(lp8797
sg15
S'com.google.common.io.CountingOutputStream'
p8798
sg17
(lp8799
sg21
(lp8800
sg25
(lp8801
sg29
I0
sba(iArchitecture
Entity
p8802
(dp8803
g11
(lp8804
sg15
S'com.google.common.io.FileBackedOutputStream'
p8805
sg17
(lp8806
sg21
(lp8807
sg25
(lp8808
sg29
I0
sba(iArchitecture
Entity
p8809
(dp8810
g11
(lp8811
sg15
S'com.google.common.io.FileWriteMode'
p8812
sg17
(lp8813
sg21
(lp8814
sg25
(lp8815
sg29
I0
sba(iArchitecture
Entity
p8816
(dp8817
g11
(lp8818
sg15
S'com.google.common.io.Files'
p8819
sg17
(lp8820
sg21
(lp8821
sg25
(lp8822
sg29
I0
sba(iArchitecture
Entity
p8823
(dp8824
g11
(lp8825
sg15
S'com.google.common.io.Flushables'
p8826
sg17
(lp8827
sg21
(lp8828
sg25
(lp8829
sg29
I0
sba(iArchitecture
Entity
p8830
(dp8831
g11
(lp8832
sg15
S'com.google.common.io.InsecureRecursiveDeleteException'
p8833
sg17
(lp8834
sg21
(lp8835
sg25
(lp8836
sg29
I0
sba(iArchitecture
Entity
p8837
(dp8838
g11
(lp8839
sg15
S'com.google.common.io.LineBuffer'
p8840
sg17
(lp8841
sg21
(lp8842
sg25
(lp8843
sg29
I0
sba(iArchitecture
Entity
p8844
(dp8845
g11
(lp8846
sg15
S'com.google.common.io.LineProcessor'
p8847
sg17
(lp8848
sg21
(lp8849
sg25
(lp8850
sg29
I0
sba(iArchitecture
Entity
p8851
(dp8852
g11
(lp8853
sg15
S'com.google.common.io.LineReader'
p8854
sg17
(lp8855
sg21
(lp8856
sg25
(lp8857
sg29
I0
sba(iArchitecture
Entity
p8858
(dp8859
g11
(lp8860
sg15
S'com.google.common.io.LittleEndianDataInputStream'
p8861
sg17
(lp8862
sg21
(lp8863
sg25
(lp8864
sg29
I0
sba(iArchitecture
Entity
p8865
(dp8866
g11
(lp8867
sg15
S'com.google.common.io.LittleEndianDataOutputStream'
p8868
sg17
(lp8869
sg21
(lp8870
sg25
(lp8871
sg29
I0
sba(iArchitecture
Entity
p8872
(dp8873
g11
(lp8874
sg15
S'com.google.common.io.MoreFiles'
p8875
sg17
(lp8876
sg21
(lp8877
sg25
(lp8878
sg29
I0
sba(iArchitecture
Entity
p8879
(dp8880
g11
(lp8881
V2996
p8882
ag8882
ag8882
ag8882
asg15
S'com.google.common.io.MultiInputStream'
p8883
sg17
(lp8884
VUsing `guava-23.0` (and earlier versions), `com.google.common.io.MultiInputStream` produces a stack overflow when it is given sufficiently many empty `ByteSource` instances.\u000a\u000aTest cases that reproduce the behavior:\u000a\u000a```java\u000aimport java.io.InputStream;\u000aimport java.util.List;\u000a\u000aimport org.junit.Before;\u000aimport org.junit.Test;\u000a\u000aimport com.google.common.collect.Lists;\u000aimport com.google.common.io.ByteSource;\u000a\u000apublic class MultiInputStreamTest {\u000a\u000a  /** Adjust this according to the thread stack size. */\u000a  private static final int LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE = 1000000;\u000a\u000a  private ByteSource       concatenated;\u000a\u000a  public @Before void setup() throws Exception {\u000a    final List<ByteSource> emptySources = Lists.newArrayList();\u000a    for (int i = 0; i < LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE; i++) {\u000a      emptySources.add(ByteSource.empty());\u000a    }\u000a    // produce a ConcatenatedByteSource which in turn produces\u000a    // a MultiInputStream\u000a    concatenated = ByteSource.concat(emptySources);\u000a  }\u000a\u000a  public @Test void stackOverflowErrorOnEmptySources1() throws Exception {\u000a    try (InputStream in = concatenated.openStream()) {\u000a      in.read();\u000a    }\u000a  }\u000a\u000a  public @Test void stackOverflowErrorOnEmptySources2() throws Exception {\u000a    try (InputStream in = concatenated.openStream()) {\u000a      in.read(new byte[1], 0, 1);\u000a    }\u000a  }\u000a\u000a}\u000a```\u000a\u000aThe condensed exception stack traces produced by the respective test case (which appear to be truncated):\u000a\u000a```\u000a$ uniq -c stack1\u000a   1 java.lang.StackOverflowError\u000a   1 	at com.google.common.io.ByteSource$ByteArrayByteSource.openStream(ByteSource.java:574)\u000a   1 	at com.google.common.io.MultiInputStream.advance(MultiInputStream.java:65)\u000a   1 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:89)\u000a1021 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:90)\u000a```\u000a\u000a```\u000a$ uniq -c stack2\u000a   1 java.lang.StackOverflowError\u000a   1 	at com.google.common.io.MultiInputStream.close(MultiInputStream.java:52)\u000a   1 	at com.google.common.io.MultiInputStream.advance(MultiInputStream.java:63)\u000a   1 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:102)\u000a1021 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:103)\u000a```
p8885
aVUsing `guava-23.0` (and earlier versions), `com.google.common.io.MultiInputStream` produces a stack overflow when it is given sufficiently many empty `ByteSource` instances.\u000a\u000aTest cases that reproduce the behavior:\u000a\u000a```java\u000aimport java.io.InputStream;\u000aimport java.util.List;\u000a\u000aimport org.junit.Before;\u000aimport org.junit.Test;\u000a\u000aimport com.google.common.collect.Lists;\u000aimport com.google.common.io.ByteSource;\u000a\u000apublic class MultiInputStreamTest {\u000a\u000a  /** Adjust this according to the thread stack size. */\u000a  private static final int LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE = 1000000;\u000a\u000a  private ByteSource       concatenated;\u000a\u000a  public @Before void setup() throws Exception {\u000a    final List<ByteSource> emptySources = Lists.newArrayList();\u000a    for (int i = 0; i < LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE; i++) {\u000a      emptySources.add(ByteSource.empty());\u000a    }\u000a    // produce a ConcatenatedByteSource which in turn produces\u000a    // a MultiInputStream\u000a    concatenated = ByteSource.concat(emptySources);\u000a  }\u000a\u000a  public @Test void stackOverflowErrorOnEmptySources1() throws Exception {\u000a    try (InputStream in = concatenated.openStream()) {\u000a      in.read();\u000a    }\u000a  }\u000a\u000a  public @Test void stackOverflowErrorOnEmptySources2() throws Exception {\u000a    try (InputStream in = concatenated.openStream()) {\u000a      in.read(new byte[1], 0, 1);\u000a    }\u000a  }\u000a\u000a}\u000a```\u000a\u000aThe condensed exception stack traces produced by the respective test case (which appear to be truncated):\u000a\u000a```\u000a$ uniq -c stack1\u000a   1 java.lang.StackOverflowError\u000a   1 	at com.google.common.io.ByteSource$ByteArrayByteSource.openStream(ByteSource.java:574)\u000a   1 	at com.google.common.io.MultiInputStream.advance(MultiInputStream.java:65)\u000a   1 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:89)\u000a1021 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:90)\u000a```\u000a\u000a```\u000a$ uniq -c stack2\u000a   1 java.lang.StackOverflowError\u000a   1 	at com.google.common.io.MultiInputStream.close(MultiInputStream.java:52)\u000a   1 	at com.google.common.io.MultiInputStream.advance(MultiInputStream.java:63)\u000a   1 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:102)\u000a1021 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:103)\u000a```
p8886
aVUsing `guava-23.0` (and earlier versions), `com.google.common.io.MultiInputStream` produces a stack overflow when it is given sufficiently many empty `ByteSource` instances.\u000a\u000aTest cases that reproduce the behavior:\u000a\u000a```java\u000aimport java.io.InputStream;\u000aimport java.util.List;\u000a\u000aimport org.junit.Before;\u000aimport org.junit.Test;\u000a\u000aimport com.google.common.collect.Lists;\u000aimport com.google.common.io.ByteSource;\u000a\u000apublic class MultiInputStreamTest {\u000a\u000a  /** Adjust this according to the thread stack size. */\u000a  private static final int LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE = 1000000;\u000a\u000a  private ByteSource       concatenated;\u000a\u000a  public @Before void setup() throws Exception {\u000a    final List<ByteSource> emptySources = Lists.newArrayList();\u000a    for (int i = 0; i < LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE; i++) {\u000a      emptySources.add(ByteSource.empty());\u000a    }\u000a    // produce a ConcatenatedByteSource which in turn produces\u000a    // a MultiInputStream\u000a    concatenated = ByteSource.concat(emptySources);\u000a  }\u000a\u000a  public @Test void stackOverflowErrorOnEmptySources1() throws Exception {\u000a    try (InputStream in = concatenated.openStream()) {\u000a      in.read();\u000a    }\u000a  }\u000a\u000a  public @Test void stackOverflowErrorOnEmptySources2() throws Exception {\u000a    try (InputStream in = concatenated.openStream()) {\u000a      in.read(new byte[1], 0, 1);\u000a    }\u000a  }\u000a\u000a}\u000a```\u000a\u000aThe condensed exception stack traces produced by the respective test case (which appear to be truncated):\u000a\u000a```\u000a$ uniq -c stack1\u000a   1 java.lang.StackOverflowError\u000a   1 	at com.google.common.io.ByteSource$ByteArrayByteSource.openStream(ByteSource.java:574)\u000a   1 	at com.google.common.io.MultiInputStream.advance(MultiInputStream.java:65)\u000a   1 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:89)\u000a1021 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:90)\u000a```\u000a\u000a```\u000a$ uniq -c stack2\u000a   1 java.lang.StackOverflowError\u000a   1 	at com.google.common.io.MultiInputStream.close(MultiInputStream.java:52)\u000a   1 	at com.google.common.io.MultiInputStream.advance(MultiInputStream.java:63)\u000a   1 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:102)\u000a1021 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:103)\u000a```
p8887
aVUsing `guava-23.0` (and earlier versions), `com.google.common.io.MultiInputStream` produces a stack overflow when it is given sufficiently many empty `ByteSource` instances.\u000a\u000aTest cases that reproduce the behavior:\u000a\u000a```java\u000aimport java.io.InputStream;\u000aimport java.util.List;\u000a\u000aimport org.junit.Before;\u000aimport org.junit.Test;\u000a\u000aimport com.google.common.collect.Lists;\u000aimport com.google.common.io.ByteSource;\u000a\u000apublic class MultiInputStreamTest {\u000a\u000a  /** Adjust this according to the thread stack size. */\u000a  private static final int LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE = 1000000;\u000a\u000a  private ByteSource       concatenated;\u000a\u000a  public @Before void setup() throws Exception {\u000a    final List<ByteSource> emptySources = Lists.newArrayList();\u000a    for (int i = 0; i < LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE; i++) {\u000a      emptySources.add(ByteSource.empty());\u000a    }\u000a    // produce a ConcatenatedByteSource which in turn produces\u000a    // a MultiInputStream\u000a    concatenated = ByteSource.concat(emptySources);\u000a  }\u000a\u000a  public @Test void stackOverflowErrorOnEmptySources1() throws Exception {\u000a    try (InputStream in = concatenated.openStream()) {\u000a      in.read();\u000a    }\u000a  }\u000a\u000a  public @Test void stackOverflowErrorOnEmptySources2() throws Exception {\u000a    try (InputStream in = concatenated.openStream()) {\u000a      in.read(new byte[1], 0, 1);\u000a    }\u000a  }\u000a\u000a}\u000a```\u000a\u000aThe condensed exception stack traces produced by the respective test case (which appear to be truncated):\u000a\u000a```\u000a$ uniq -c stack1\u000a   1 java.lang.StackOverflowError\u000a   1 	at com.google.common.io.ByteSource$ByteArrayByteSource.openStream(ByteSource.java:574)\u000a   1 	at com.google.common.io.MultiInputStream.advance(MultiInputStream.java:65)\u000a   1 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:89)\u000a1021 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:90)\u000a```\u000a\u000a```\u000a$ uniq -c stack2\u000a   1 java.lang.StackOverflowError\u000a   1 	at com.google.common.io.MultiInputStream.close(MultiInputStream.java:52)\u000a   1 	at com.google.common.io.MultiInputStream.advance(MultiInputStream.java:63)\u000a   1 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:102)\u000a1021 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:103)\u000a```
p8888
asg21
(lp8889
(lp8890
I7
aag8890
ag8890
ag8890
asg25
(lp8891
VMultiInputStream produces stack overflow
p8892
ag8892
ag8892
ag8892
asg29
I0
sba(iArchitecture
Entity
p8893
(dp8894
g11
(lp8895
sg15
S'com.google.common.io.PatternFilenameFilter'
p8896
sg17
(lp8897
sg21
(lp8898
sg25
(lp8899
sg29
I0
sba(iArchitecture
Entity
p8900
(dp8901
g11
(lp8902
sg15
S'com.google.common.io.ReaderInputStream'
p8903
sg17
(lp8904
sg21
(lp8905
sg25
(lp8906
sg29
I0
sba(iArchitecture
Entity
p8907
(dp8908
g11
(lp8909
sg15
S'com.google.common.io.RecursiveDeleteOption'
p8910
sg17
(lp8911
sg21
(lp8912
sg25
(lp8913
sg29
I0
sba(iArchitecture
Entity
p8914
(dp8915
g11
(lp8916
sg15
S'com.google.common.io.package-info'
p8917
sg17
(lp8918
sg21
(lp8919
sg25
(lp8920
sg29
I0
sba(iArchitecture
Entity
p8921
(dp8922
g11
(lp8923
sg15
S'com.google.common.math.PairedStats'
p8924
sg17
(lp8925
sg21
(lp8926
sg25
(lp8927
sg29
I0
sba(iArchitecture
Entity
p8928
(dp8929
g11
(lp8930
sg15
S'com.google.common.util.concurrent.AbstractCatchingFuture'
p8931
sg17
(lp8932
sg21
(lp8933
sg25
(lp8934
sg29
I0
sba(iArchitecture
Entity
p8935
(dp8936
g11
(lp8937
sg15
S'com.google.common.util.concurrent.AbstractTransformFuture'
p8938
sg17
(lp8939
sg21
(lp8940
sg25
(lp8941
sg29
I0
sba(iArchitecture
Entity
p8942
(dp8943
g11
(lp8944
sg15
S'com.google.common.util.concurrent.Futures'
p8945
sg17
(lp8946
sg21
(lp8947
sg25
(lp8948
sg29
I0
sba(iArchitecture
Entity
p8949
(dp8950
g11
(lp8951
sg15
S'com.google.common.util.concurrent.UncaughtExceptionHandlers'
p8952
sg17
(lp8953
sg21
(lp8954
sg25
(lp8955
sg29
I0
sba(iArchitecture
Entity
p8956
(dp8957
g11
(lp8958
sg15
S'com.google.common.xml.XmlEscapers'
p8959
sg17
(lp8960
sg21
(lp8961
sg25
(lp8962
sg29
I0
sbasg1053
(lp8963
g8364
ag8371
ag8378
ag8385
ag8392
ag8399
ag8406
ag8413
ag8420
ag8427
ag8434
ag8441
ag8448
ag8455
ag8462
ag8469
ag8476
ag8483
ag8490
ag8497
ag8504
ag8511
ag8518
ag8525
ag8532
ag8539
ag8546
ag8553
ag8560
ag8567
ag8574
ag8581
ag8588
ag8595
ag8602
ag8609
ag8616
ag8623
ag8630
ag8637
ag8644
ag8651
ag8658
ag8665
ag8672
ag8679
ag8686
ag8693
ag8700
ag8707
ag8714
ag8721
ag8728
ag8735
ag8743
ag8754
ag8761
ag8768
ag8777
ag8784
ag8791
ag8798
ag8805
ag8812
ag8819
ag8826
ag8833
ag8840
ag8847
ag8854
ag8861
ag8868
ag8875
ag8883
ag8896
ag8903
ag8910
ag8917
ag8924
ag8931
ag8938
ag8945
ag8952
ag8959
asg29
I0
sg1055
S'io'
p8964
sba(iArchitecture
Cluster
p8965
(dp8966
g7
(lp8967
(iArchitecture
Entity
p8968
(dp8969
g11
(lp8970
sg15
S'com.google.common.base.AbstractIterator'
p8971
sg17
(lp8972
sg21
(lp8973
sg25
(lp8974
sg29
I0
sba(iArchitecture
Entity
p8975
(dp8976
g11
(lp8977
sg15
S'com.google.common.base.CommonPattern'
p8978
sg17
(lp8979
sg21
(lp8980
sg25
(lp8981
sg29
I0
sba(iArchitecture
Entity
p8982
(dp8983
g11
(lp8984
sg15
S'com.google.common.base.Converter'
p8985
sg17
(lp8986
sg21
(lp8987
sg25
(lp8988
sg29
I0
sba(iArchitecture
Entity
p8989
(dp8990
g11
(lp8991
sg15
S'com.google.common.base.ExtraObjectsMethodsForWeb'
p8992
sg17
(lp8993
sg21
(lp8994
sg25
(lp8995
sg29
I0
sba(iArchitecture
Entity
p8996
(dp8997
g11
(lp8998
sg15
S'com.google.common.base.FinalizablePhantomReference'
p8999
sg17
(lp9000
sg21
(lp9001
sg25
(lp9002
sg29
I0
sba(iArchitecture
Entity
p9003
(dp9004
g11
(lp9005
sg15
S'com.google.common.base.FinalizableReferenceQueue'
p9006
sg17
(lp9007
sg21
(lp9008
sg25
(lp9009
sg29
I0
sba(iArchitecture
Entity
p9010
(dp9011
g11
(lp9012
sg15
S'com.google.common.base.FinalizableSoftReference'
p9013
sg17
(lp9014
sg21
(lp9015
sg25
(lp9016
sg29
I0
sba(iArchitecture
Entity
p9017
(dp9018
g11
(lp9019
sg15
S'com.google.common.base.FinalizableWeakReference'
p9020
sg17
(lp9021
sg21
(lp9022
sg25
(lp9023
sg29
I0
sba(iArchitecture
Entity
p9024
(dp9025
g11
(lp9026
sg15
S'com.google.common.base.Joiner'
p9027
sg17
(lp9028
sg21
(lp9029
sg25
(lp9030
sg29
I0
sba(iArchitecture
Entity
p9031
(dp9032
g11
(lp9033
sg15
S'com.google.common.base.PatternCompiler'
p9034
sg17
(lp9035
sg21
(lp9036
sg25
(lp9037
sg29
I0
sba(iArchitecture
Entity
p9038
(dp9039
g11
(lp9040
V2866
p9041
ag9041
ag9041
ag9041
ag9041
asg15
S'com.google.common.base.Throwables'
p9042
sg17
(lp9043
VException cause can be set by initCause method which can lead to a circular reference:\u000a```java\u000aException cause = new Exception();\u000aException exception = new Exception(cause);\u000acause.initCause(exception);\u000a```\u000aCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\u000a\u000aIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. 
p9044
aVException cause can be set by initCause method which can lead to a circular reference:\u000a```java\u000aException cause = new Exception();\u000aException exception = new Exception(cause);\u000acause.initCause(exception);\u000a```\u000aCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\u000a\u000aIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. 
p9045
aVException cause can be set by initCause method which can lead to a circular reference:\u000a```java\u000aException cause = new Exception();\u000aException exception = new Exception(cause);\u000acause.initCause(exception);\u000a```\u000aCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\u000a\u000aIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. 
p9046
aVException cause can be set by initCause method which can lead to a circular reference:\u000a```java\u000aException cause = new Exception();\u000aException exception = new Exception(cause);\u000acause.initCause(exception);\u000a```\u000aCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\u000a\u000aIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. 
p9047
aVException cause can be set by initCause method which can lead to a circular reference:\u000a```java\u000aException cause = new Exception();\u000aException exception = new Exception(cause);\u000acause.initCause(exception);\u000a```\u000aCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\u000a\u000aIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. 
p9048
asg21
(lp9049
(lp9050
I0
aag9050
ag9050
ag9050
ag9050
asg25
(lp9051
VMake Throwables.getCausalChain and Throwables.getRootCause cyclic reference safe
p9052
ag9052
ag9052
ag9052
ag9052
asg29
I0
sba(iArchitecture
Entity
p9053
(dp9054
g11
(lp9055
sg15
S'com.google.common.base.Ticker'
p9056
sg17
(lp9057
sg21
(lp9058
sg25
(lp9059
sg29
I0
sba(iArchitecture
Entity
p9060
(dp9061
g11
(lp9062
sg15
S'com.google.common.base.Verify'
p9063
sg17
(lp9064
sg21
(lp9065
sg25
(lp9066
sg29
I0
sba(iArchitecture
Entity
p9067
(dp9068
g11
(lp9069
sg15
S'com.google.common.base.VerifyException'
p9070
sg17
(lp9071
sg21
(lp9072
sg25
(lp9073
sg29
I0
sba(iArchitecture
Entity
p9074
(dp9075
g11
(lp9076
sg15
S'com.google.common.base.package-info'
p9077
sg17
(lp9078
sg21
(lp9079
sg25
(lp9080
sg29
I0
sba(iArchitecture
Entity
p9081
(dp9082
g11
(lp9083
sg15
S'com.google.common.cache.AbstractCache'
p9084
sg17
(lp9085
sg21
(lp9086
sg25
(lp9087
sg29
I0
sba(iArchitecture
Entity
p9088
(dp9089
g11
(lp9090
sg15
S'com.google.common.cache.AbstractLoadingCache'
p9091
sg17
(lp9092
sg21
(lp9093
sg25
(lp9094
sg29
I0
sba(iArchitecture
Entity
p9095
(dp9096
g11
(lp9097
sg15
S'com.google.common.cache.CacheBuilder'
p9098
sg17
(lp9099
sg21
(lp9100
sg25
(lp9101
sg29
I0
sba(iArchitecture
Entity
p9102
(dp9103
g11
(lp9104
sg15
S'com.google.common.cache.CacheLoader'
p9105
sg17
(lp9106
sg21
(lp9107
sg25
(lp9108
sg29
I0
sba(iArchitecture
Entity
p9109
(dp9110
g11
(lp9111
sg15
S'com.google.common.cache.CacheStats'
p9112
sg17
(lp9113
sg21
(lp9114
sg25
(lp9115
sg29
I0
sba(iArchitecture
Entity
p9116
(dp9117
g11
(lp9118
sg15
S'com.google.common.cache.ForwardingCache'
p9119
sg17
(lp9120
sg21
(lp9121
sg25
(lp9122
sg29
I0
sba(iArchitecture
Entity
p9123
(dp9124
g11
(lp9125
sg15
S'com.google.common.cache.ForwardingLoadingCache'
p9126
sg17
(lp9127
sg21
(lp9128
sg25
(lp9129
sg29
I0
sba(iArchitecture
Entity
p9130
(dp9131
g11
(lp9132
sg15
S'com.google.common.cache.LoadingCache'
p9133
sg17
(lp9134
sg21
(lp9135
sg25
(lp9136
sg29
I0
sba(iArchitecture
Entity
p9137
(dp9138
g11
(lp9139
sg15
S'com.google.common.cache.LongAddables'
p9140
sg17
(lp9141
sg21
(lp9142
sg25
(lp9143
sg29
I0
sba(iArchitecture
Entity
p9144
(dp9145
g11
(lp9146
sg15
S'com.google.common.cache.RemovalCause'
p9147
sg17
(lp9148
sg21
(lp9149
sg25
(lp9150
sg29
I0
sba(iArchitecture
Entity
p9151
(dp9152
g11
(lp9153
sg15
S'com.google.common.cache.RemovalListener'
p9154
sg17
(lp9155
sg21
(lp9156
sg25
(lp9157
sg29
I0
sba(iArchitecture
Entity
p9158
(dp9159
g11
(lp9160
sg15
S'com.google.common.cache.RemovalListeners'
p9161
sg17
(lp9162
sg21
(lp9163
sg25
(lp9164
sg29
I0
sba(iArchitecture
Entity
p9165
(dp9166
g11
(lp9167
sg15
S'com.google.common.cache.Striped64'
p9168
sg17
(lp9169
sg21
(lp9170
sg25
(lp9171
sg29
I0
sba(iArchitecture
Entity
p9172
(dp9173
g11
(lp9174
sg15
S'com.google.common.cache.Weigher'
p9175
sg17
(lp9176
sg21
(lp9177
sg25
(lp9178
sg29
I0
sba(iArchitecture
Entity
p9179
(dp9180
g11
(lp9181
sg15
S'com.google.common.cache.package-info'
p9182
sg17
(lp9183
sg21
(lp9184
sg25
(lp9185
sg29
I0
sba(iArchitecture
Entity
p9186
(dp9187
g11
(lp9188
sg15
S'com.google.common.collect.AbstractIterator'
p9189
sg17
(lp9190
sg21
(lp9191
sg25
(lp9192
sg29
I0
sba(iArchitecture
Entity
p9193
(dp9194
g11
(lp9195
sg15
S'com.google.common.collect.AbstractMapEntry'
p9196
sg17
(lp9197
sg21
(lp9198
sg25
(lp9199
sg29
I0
sba(iArchitecture
Entity
p9200
(dp9201
g11
(lp9202
sg15
S'com.google.common.collect.AbstractSortedMultiset'
p9203
sg17
(lp9204
sg21
(lp9205
sg25
(lp9206
sg29
I0
sba(iArchitecture
Entity
p9207
(dp9208
g11
(lp9209
sg15
S'com.google.common.collect.CollectPreconditions'
p9210
sg17
(lp9211
sg21
(lp9212
sg25
(lp9213
sg29
I0
sba(iArchitecture
Entity
p9214
(dp9215
g11
(lp9216
sg15
S'com.google.common.collect.Cut'
p9217
sg17
(lp9218
sg21
(lp9219
sg25
(lp9220
sg29
I0
sba(iArchitecture
Entity
p9221
(dp9222
g11
(lp9223
sg15
S'com.google.common.collect.FilteredKeyListMultimap'
p9224
sg17
(lp9225
sg21
(lp9226
sg25
(lp9227
sg29
I0
sba(iArchitecture
Entity
p9228
(dp9229
g11
(lp9230
sg15
S'com.google.common.collect.FilteredSetMultimap'
p9231
sg17
(lp9232
sg21
(lp9233
sg25
(lp9234
sg29
I0
sba(iArchitecture
Entity
p9235
(dp9236
g11
(lp9237
sg15
S'com.google.common.collect.ForwardingBlockingDeque'
p9238
sg17
(lp9239
sg21
(lp9240
sg25
(lp9241
sg29
I0
sba(iArchitecture
Entity
p9242
(dp9243
g11
(lp9244
sg15
S'com.google.common.collect.ForwardingCollection'
p9245
sg17
(lp9246
sg21
(lp9247
sg25
(lp9248
sg29
I0
sba(iArchitecture
Entity
p9249
(dp9250
g11
(lp9251
sg15
S'com.google.common.collect.ForwardingConcurrentMap'
p9252
sg17
(lp9253
sg21
(lp9254
sg25
(lp9255
sg29
I0
sba(iArchitecture
Entity
p9256
(dp9257
g11
(lp9258
sg15
S'com.google.common.collect.ForwardingDeque'
p9259
sg17
(lp9260
sg21
(lp9261
sg25
(lp9262
sg29
I0
sba(iArchitecture
Entity
p9263
(dp9264
g11
(lp9265
sg15
S'com.google.common.collect.ForwardingImmutableList'
p9266
sg17
(lp9267
sg21
(lp9268
sg25
(lp9269
sg29
I0
sba(iArchitecture
Entity
p9270
(dp9271
g11
(lp9272
sg15
S'com.google.common.collect.ForwardingImmutableMap'
p9273
sg17
(lp9274
sg21
(lp9275
sg25
(lp9276
sg29
I0
sba(iArchitecture
Entity
p9277
(dp9278
g11
(lp9279
sg15
S'com.google.common.collect.ForwardingImmutableSet'
p9280
sg17
(lp9281
sg21
(lp9282
sg25
(lp9283
sg29
I0
sba(iArchitecture
Entity
p9284
(dp9285
g11
(lp9286
sg15
S'com.google.common.collect.ForwardingIterator'
p9287
sg17
(lp9288
sg21
(lp9289
sg25
(lp9290
sg29
I0
sba(iArchitecture
Entity
p9291
(dp9292
g11
(lp9293
sg15
S'com.google.common.collect.ForwardingListIterator'
p9294
sg17
(lp9295
sg21
(lp9296
sg25
(lp9297
sg29
I0
sba(iArchitecture
Entity
p9298
(dp9299
g11
(lp9300
sg15
S'com.google.common.collect.ForwardingListMultimap'
p9301
sg17
(lp9302
sg21
(lp9303
sg25
(lp9304
sg29
I0
sba(iArchitecture
Entity
p9305
(dp9306
g11
(lp9307
sg15
S'com.google.common.collect.ForwardingMap'
p9308
sg17
(lp9309
sg21
(lp9310
sg25
(lp9311
sg29
I0
sba(iArchitecture
Entity
p9312
(dp9313
g11
(lp9314
sg15
S'com.google.common.collect.ForwardingMapEntry'
p9315
sg17
(lp9316
sg21
(lp9317
sg25
(lp9318
sg29
I0
sba(iArchitecture
Entity
p9319
(dp9320
g11
(lp9321
sg15
S'com.google.common.collect.ForwardingMultiset'
p9322
sg17
(lp9323
sg21
(lp9324
sg25
(lp9325
sg29
I0
sba(iArchitecture
Entity
p9326
(dp9327
g11
(lp9328
sg15
S'com.google.common.collect.ForwardingNavigableMap'
p9329
sg17
(lp9330
sg21
(lp9331
sg25
(lp9332
sg29
I0
sba(iArchitecture
Entity
p9333
(dp9334
g11
(lp9335
sg15
S'com.google.common.collect.ForwardingNavigableSet'
p9336
sg17
(lp9337
sg21
(lp9338
sg25
(lp9339
sg29
I0
sba(iArchitecture
Entity
p9340
(dp9341
g11
(lp9342
sg15
S'com.google.common.collect.ForwardingObject'
p9343
sg17
(lp9344
sg21
(lp9345
sg25
(lp9346
sg29
I0
sba(iArchitecture
Entity
p9347
(dp9348
g11
(lp9349
sg15
S'com.google.common.collect.ForwardingQueue'
p9350
sg17
(lp9351
sg21
(lp9352
sg25
(lp9353
sg29
I0
sba(iArchitecture
Entity
p9354
(dp9355
g11
(lp9356
sg15
S'com.google.common.collect.ForwardingSet'
p9357
sg17
(lp9358
sg21
(lp9359
sg25
(lp9360
sg29
I0
sba(iArchitecture
Entity
p9361
(dp9362
g11
(lp9363
sg15
S'com.google.common.collect.ForwardingSortedMap'
p9364
sg17
(lp9365
sg21
(lp9366
sg25
(lp9367
sg29
I0
sba(iArchitecture
Entity
p9368
(dp9369
g11
(lp9370
sg15
S'com.google.common.collect.ForwardingSortedMultiset'
p9371
sg17
(lp9372
sg21
(lp9373
sg25
(lp9374
sg29
I0
sba(iArchitecture
Entity
p9375
(dp9376
g11
(lp9377
sg15
S'com.google.common.collect.ForwardingSortedSet'
p9378
sg17
(lp9379
sg21
(lp9380
sg25
(lp9381
sg29
I0
sba(iArchitecture
Entity
p9382
(dp9383
g11
(lp9384
sg15
S'com.google.common.collect.GwtTransient'
p9385
sg17
(lp9386
sg21
(lp9387
sg25
(lp9388
sg29
I0
sba(iArchitecture
Entity
p9389
(dp9390
g11
(lp9391
sg15
S'com.google.common.collect.ImmutableCollection'
p9392
sg17
(lp9393
sg21
(lp9394
sg25
(lp9395
sg29
I0
sba(iArchitecture
Entity
p9396
(dp9397
g11
(lp9398
sg15
S'com.google.common.collect.ImmutableEnumMap'
p9399
sg17
(lp9400
sg21
(lp9401
sg25
(lp9402
sg29
I0
sba(iArchitecture
Entity
p9403
(dp9404
g11
(lp9405
sg15
S'com.google.common.collect.ImmutableEnumSet'
p9406
sg17
(lp9407
sg21
(lp9408
sg25
(lp9409
sg29
I0
sba(iArchitecture
Entity
p9410
(dp9411
g11
(lp9412
sg15
S'com.google.common.collect.ImmutableMapEntry'
p9413
sg17
(lp9414
sg21
(lp9415
sg25
(lp9416
sg29
I0
sba(iArchitecture
Entity
p9417
(dp9418
g11
(lp9419
sg15
S'com.google.common.collect.ImmutableMapEntrySet'
p9420
sg17
(lp9421
sg21
(lp9422
sg25
(lp9423
sg29
I0
sba(iArchitecture
Entity
p9424
(dp9425
g11
(lp9426
sg15
S'com.google.common.collect.ImmutableMultisetGwtSerializationDependencies'
p9427
sg17
(lp9428
sg21
(lp9429
sg25
(lp9430
sg29
I0
sba(iArchitecture
Entity
p9431
(dp9432
g11
(lp9433
sg15
S'com.google.common.collect.Interners'
p9434
sg17
(lp9435
sg21
(lp9436
sg25
(lp9437
sg29
I0
sba(iArchitecture
Entity
p9438
(dp9439
g11
(lp9440
sg15
S'com.google.common.collect.MapMaker'
p9441
sg17
(lp9442
sg21
(lp9443
sg25
(lp9444
sg29
I0
sba(iArchitecture
Entity
p9445
(dp9446
g11
(lp9447
sg15
S'com.google.common.collect.MultimapBuilder'
p9448
sg17
(lp9449
sg21
(lp9450
sg25
(lp9451
sg29
I0
sba(iArchitecture
Entity
p9452
(dp9453
g11
(lp9454
sg15
S'com.google.common.collect.Multiset'
p9455
sg17
(lp9456
sg21
(lp9457
sg25
(lp9458
sg29
I0
sba(iArchitecture
Entity
p9459
(dp9460
g11
(lp9461
sg15
S'com.google.common.collect.PeekingIterator'
p9462
sg17
(lp9463
sg21
(lp9464
sg25
(lp9465
sg29
I0
sba(iArchitecture
Entity
p9466
(dp9467
g11
(lp9468
sg15
S'com.google.common.collect.RegularImmutableAsList'
p9469
sg17
(lp9470
sg21
(lp9471
sg25
(lp9472
sg29
I0
sba(iArchitecture
Entity
p9473
(dp9474
g11
(lp9475
sg15
S'com.google.common.collect.SingletonImmutableTable'
p9476
sg17
(lp9477
sg21
(lp9478
sg25
(lp9479
sg29
I0
sba(iArchitecture
Entity
p9480
(dp9481
g11
(lp9482
sg15
S'com.google.common.collect.SortedLists'
p9483
sg17
(lp9484
sg21
(lp9485
sg25
(lp9486
sg29
I0
sba(iArchitecture
Entity
p9487
(dp9488
g11
(lp9489
sg15
S'com.google.common.collect.SortedMultiset'
p9490
sg17
(lp9491
sg21
(lp9492
sg25
(lp9493
sg29
I0
sba(iArchitecture
Entity
p9494
(dp9495
g11
(lp9496
sg15
S'com.google.common.collect.StandardRowSortedTable'
p9497
sg17
(lp9498
sg21
(lp9499
sg25
(lp9500
sg29
I0
sba(iArchitecture
Entity
p9501
(dp9502
g11
(lp9503
sg15
S'com.google.common.collect.TreeTraverser'
p9504
sg17
(lp9505
sg21
(lp9506
sg25
(lp9507
sg29
I0
sba(iArchitecture
Entity
p9508
(dp9509
g11
(lp9510
sg15
S'com.google.common.collect.UnmodifiableIterator'
p9511
sg17
(lp9512
sg21
(lp9513
sg25
(lp9514
sg29
I0
sba(iArchitecture
Entity
p9515
(dp9516
g11
(lp9517
sg15
S'com.google.common.collect.UnmodifiableListIterator'
p9518
sg17
(lp9519
sg21
(lp9520
sg25
(lp9521
sg29
I0
sba(iArchitecture
Entity
p9522
(dp9523
g11
(lp9524
sg15
S'com.google.common.collect.UnmodifiableSortedMultiset'
p9525
sg17
(lp9526
sg21
(lp9527
sg25
(lp9528
sg29
I0
sba(iArchitecture
Entity
p9529
(dp9530
g11
(lp9531
sg15
S'com.google.common.collect.package-info'
p9532
sg17
(lp9533
sg21
(lp9534
sg25
(lp9535
sg29
I0
sba(iArchitecture
Entity
p9536
(dp9537
g11
(lp9538
sg15
S'com.google.common.escape.package-info'
p9539
sg17
(lp9540
sg21
(lp9541
sg25
(lp9542
sg29
I0
sba(iArchitecture
Entity
p9543
(dp9544
g11
(lp9545
sg15
S'com.google.common.eventbus.AsyncEventBus'
p9546
sg17
(lp9547
sg21
(lp9548
sg25
(lp9549
sg29
I0
sba(iArchitecture
Entity
p9550
(dp9551
g11
(lp9552
sg15
S'com.google.common.eventbus.EventBus'
p9553
sg17
(lp9554
sg21
(lp9555
sg25
(lp9556
sg29
I0
sba(iArchitecture
Entity
p9557
(dp9558
g11
(lp9559
sg15
S'com.google.common.graph.BaseGraph'
p9560
sg17
(lp9561
sg21
(lp9562
sg25
(lp9563
sg29
I0
sba(iArchitecture
Entity
p9564
(dp9565
g11
(lp9566
sg15
S'com.google.common.graph.ConfigurableMutableGraph'
p9567
sg17
(lp9568
sg21
(lp9569
sg25
(lp9570
sg29
I0
sba(iArchitecture
Entity
p9571
(dp9572
g11
(lp9573
sg15
S'com.google.common.graph.ConfigurableMutableNetwork'
p9574
sg17
(lp9575
sg21
(lp9576
sg25
(lp9577
sg29
I0
sba(iArchitecture
Entity
p9578
(dp9579
g11
(lp9580
sg15
S'com.google.common.graph.ConfigurableMutableValueGraph'
p9581
sg17
(lp9582
sg21
(lp9583
sg25
(lp9584
sg29
I0
sba(iArchitecture
Entity
p9585
(dp9586
g11
(lp9587
sg15
S'com.google.common.graph.ConfigurableNetwork'
p9588
sg17
(lp9589
sg21
(lp9590
sg25
(lp9591
sg29
I0
sba(iArchitecture
Entity
p9592
(dp9593
g11
(lp9594
sg15
S'com.google.common.graph.EdgesConnecting'
p9595
sg17
(lp9596
sg21
(lp9597
sg25
(lp9598
sg29
I0
sba(iArchitecture
Entity
p9599
(dp9600
g11
(lp9601
sg15
S'com.google.common.graph.EndpointPairIterator'
p9602
sg17
(lp9603
sg21
(lp9604
sg25
(lp9605
sg29
I0
sba(iArchitecture
Entity
p9606
(dp9607
g11
(lp9608
sg15
S'com.google.common.graph.Graph'
p9609
sg17
(lp9610
sg21
(lp9611
sg25
(lp9612
sg29
I0
sba(iArchitecture
Entity
p9613
(dp9614
g11
(lp9615
sg15
S'com.google.common.graph.GraphBuilder'
p9616
sg17
(lp9617
sg21
(lp9618
sg25
(lp9619
sg29
I0
sba(iArchitecture
Entity
p9620
(dp9621
g11
(lp9622
sg15
S'com.google.common.graph.Graphs'
p9623
sg17
(lp9624
sg21
(lp9625
sg25
(lp9626
sg29
I0
sba(iArchitecture
Entity
p9627
(dp9628
g11
(lp9629
sg15
S'com.google.common.graph.ImmutableNetwork'
p9630
sg17
(lp9631
sg21
(lp9632
sg25
(lp9633
sg29
I0
sba(iArchitecture
Entity
p9634
(dp9635
g11
(lp9636
sg15
S'com.google.common.graph.MultiEdgesConnecting'
p9637
sg17
(lp9638
sg21
(lp9639
sg25
(lp9640
sg29
I0
sba(iArchitecture
Entity
p9641
(dp9642
g11
(lp9643
sg15
S'com.google.common.graph.MutableGraph'
p9644
sg17
(lp9645
sg21
(lp9646
sg25
(lp9647
sg29
I0
sba(iArchitecture
Entity
p9648
(dp9649
g11
(lp9650
sg15
S'com.google.common.graph.MutableNetwork'
p9651
sg17
(lp9652
sg21
(lp9653
sg25
(lp9654
sg29
I0
sba(iArchitecture
Entity
p9655
(dp9656
g11
(lp9657
sg15
S'com.google.common.graph.MutableValueGraph'
p9658
sg17
(lp9659
sg21
(lp9660
sg25
(lp9661
sg29
I0
sba(iArchitecture
Entity
p9662
(dp9663
g11
(lp9664
sg15
S'com.google.common.graph.Network'
p9665
sg17
(lp9666
sg21
(lp9667
sg25
(lp9668
sg29
I0
sba(iArchitecture
Entity
p9669
(dp9670
g11
(lp9671
sg15
S'com.google.common.graph.NetworkBuilder'
p9672
sg17
(lp9673
sg21
(lp9674
sg25
(lp9675
sg29
I0
sba(iArchitecture
Entity
p9676
(dp9677
g11
(lp9678
sg15
S'com.google.common.graph.ValueGraph'
p9679
sg17
(lp9680
sg21
(lp9681
sg25
(lp9682
sg29
I0
sba(iArchitecture
Entity
p9683
(dp9684
g11
(lp9685
sg15
S'com.google.common.graph.ValueGraphBuilder'
p9686
sg17
(lp9687
sg21
(lp9688
sg25
(lp9689
sg29
I0
sba(iArchitecture
Entity
p9690
(dp9691
g11
(lp9692
sg15
S'com.google.common.hash.Hashing'
p9693
sg17
(lp9694
sg21
(lp9695
sg25
(lp9696
sg29
I0
sba(iArchitecture
Entity
p9697
(dp9698
g11
(lp9699
sg15
S'com.google.common.html.HtmlEscapers'
p9700
sg17
(lp9701
sg21
(lp9702
sg25
(lp9703
sg29
I0
sba(iArchitecture
Entity
p9704
(dp9705
g11
(lp9706
sg15
S'com.google.common.io.Resources'
p9707
sg17
(lp9708
sg21
(lp9709
sg25
(lp9710
sg29
I0
sba(iArchitecture
Entity
p9711
(dp9712
g11
(lp9713
sg15
S'com.google.common.math.DoubleUtils'
p9714
sg17
(lp9715
sg21
(lp9716
sg25
(lp9717
sg29
I0
sba(iArchitecture
Entity
p9718
(dp9719
g11
(lp9720
sg15
S'com.google.common.math.MathPreconditions'
p9721
sg17
(lp9722
sg21
(lp9723
sg25
(lp9724
sg29
I0
sba(iArchitecture
Entity
p9725
(dp9726
g11
(lp9727
sg15
S'com.google.common.net.HostAndPort'
p9728
sg17
(lp9729
sg21
(lp9730
sg25
(lp9731
sg29
I0
sba(iArchitecture
Entity
p9732
(dp9733
g11
(lp9734
sg15
S'com.google.common.net.HostSpecifier'
p9735
sg17
(lp9736
sg21
(lp9737
sg25
(lp9738
sg29
I0
sba(iArchitecture
Entity
p9739
(dp9740
g11
(lp9741
sg15
S'com.google.common.net.HttpHeaders'
p9742
sg17
(lp9743
sg21
(lp9744
sg25
(lp9745
sg29
I0
sba(iArchitecture
Entity
p9746
(dp9747
g11
(lp9748
sg15
S'com.google.common.net.InetAddresses'
p9749
sg17
(lp9750
sg21
(lp9751
sg25
(lp9752
sg29
I0
sba(iArchitecture
Entity
p9753
(dp9754
g11
(lp9755
sg15
S'com.google.common.net.InternetDomainName'
p9756
sg17
(lp9757
sg21
(lp9758
sg25
(lp9759
sg29
I0
sba(iArchitecture
Entity
p9760
(dp9761
g11
(lp9762
sg15
S'com.google.common.net.UrlEscapers'
p9763
sg17
(lp9764
sg21
(lp9765
sg25
(lp9766
sg29
I0
sba(iArchitecture
Entity
p9767
(dp9768
g11
(lp9769
sg15
S'com.google.common.net.package-info'
p9770
sg17
(lp9771
sg21
(lp9772
sg25
(lp9773
sg29
I0
sba(iArchitecture
Entity
p9774
(dp9775
g11
(lp9776
sg15
S'com.google.common.primitives.ParseRequest'
p9777
sg17
(lp9778
sg21
(lp9779
sg25
(lp9780
sg29
I0
sba(iArchitecture
Entity
p9781
(dp9782
g11
(lp9783
sg15
S'com.google.common.primitives.package-info'
p9784
sg17
(lp9785
sg21
(lp9786
sg25
(lp9787
sg29
I0
sba(iArchitecture
Entity
p9788
(dp9789
g11
(lp9790
sg15
S'com.google.common.reflect.AbstractInvocationHandler'
p9791
sg17
(lp9792
sg21
(lp9793
sg25
(lp9794
sg29
I0
sba(iArchitecture
Entity
p9795
(dp9796
g11
(lp9797
sg15
S'com.google.common.reflect.ClassPath'
p9798
sg17
(lp9799
sg21
(lp9800
sg25
(lp9801
sg29
I0
sba(iArchitecture
Entity
p9802
(dp9803
g11
(lp9804
sg15
S'com.google.common.reflect.Reflection'
p9805
sg17
(lp9806
sg21
(lp9807
sg25
(lp9808
sg29
I0
sba(iArchitecture
Entity
p9809
(dp9810
g11
(lp9811
sg15
S'com.google.common.reflect.TypeCapture'
p9812
sg17
(lp9813
sg21
(lp9814
sg25
(lp9815
sg29
I0
sba(iArchitecture
Entity
p9816
(dp9817
g11
(lp9818
sg15
S'com.google.common.util.concurrent.AbstractCheckedFuture'
p9819
sg17
(lp9820
sg21
(lp9821
sg25
(lp9822
sg29
I0
sba(iArchitecture
Entity
p9823
(dp9824
g11
(lp9825
sg15
S'com.google.common.util.concurrent.AbstractExecutionThreadService'
p9826
sg17
(lp9827
sg21
(lp9828
sg25
(lp9829
sg29
I0
sba(iArchitecture
Entity
p9830
(dp9831
g11
(lp9832
sg15
S'com.google.common.util.concurrent.AbstractFuture'
p9833
sg17
(lp9834
sg21
(lp9835
sg25
(lp9836
sg29
I0
sba(iArchitecture
Entity
p9837
(dp9838
g11
(lp9839
sg15
S'com.google.common.util.concurrent.AbstractListeningExecutorService'
p9840
sg17
(lp9841
sg21
(lp9842
sg25
(lp9843
sg29
I0
sba(iArchitecture
Entity
p9844
(dp9845
g11
(lp9846
sg15
S'com.google.common.util.concurrent.AbstractScheduledService'
p9847
sg17
(lp9848
sg21
(lp9849
sg25
(lp9850
sg29
I0
sba(iArchitecture
Entity
p9851
(dp9852
g11
(lp9853
sg15
S'com.google.common.util.concurrent.AbstractService'
p9854
sg17
(lp9855
sg21
(lp9856
sg25
(lp9857
sg29
I0
sba(iArchitecture
Entity
p9858
(dp9859
g11
(lp9860
sg15
S'com.google.common.util.concurrent.AggregateFuture'
p9861
sg17
(lp9862
sg21
(lp9863
sg25
(lp9864
sg29
I0
sba(iArchitecture
Entity
p9865
(dp9866
g11
(lp9867
sg15
S'com.google.common.util.concurrent.AggregateFutureState'
p9868
sg17
(lp9869
sg21
(lp9870
sg25
(lp9871
sg29
I0
sba(iArchitecture
Entity
p9872
(dp9873
g11
(lp9874
sg15
S'com.google.common.util.concurrent.Callables'
p9875
sg17
(lp9876
sg21
(lp9877
sg25
(lp9878
sg29
I0
sba(iArchitecture
Entity
p9879
(dp9880
g11
(lp9881
sg15
S'com.google.common.util.concurrent.CheckedFuture'
p9882
sg17
(lp9883
sg21
(lp9884
sg25
(lp9885
sg29
I0
sba(iArchitecture
Entity
p9886
(dp9887
g11
(lp9888
sg15
S'com.google.common.util.concurrent.CycleDetectingLockFactory'
p9889
sg17
(lp9890
sg21
(lp9891
sg25
(lp9892
sg29
I0
sba(iArchitecture
Entity
p9893
(dp9894
g11
(lp9895
sg15
S'com.google.common.util.concurrent.ExecutionError'
p9896
sg17
(lp9897
sg21
(lp9898
sg25
(lp9899
sg29
I0
sba(iArchitecture
Entity
p9900
(dp9901
g11
(lp9902
sg15
S'com.google.common.util.concurrent.FakeTimeLimiter'
p9903
sg17
(lp9904
sg21
(lp9905
sg25
(lp9906
sg29
I0
sba(iArchitecture
Entity
p9907
(dp9908
g11
(lp9909
sg15
S'com.google.common.util.concurrent.ForwardingBlockingDeque'
p9910
sg17
(lp9911
sg21
(lp9912
sg25
(lp9913
sg29
I0
sba(iArchitecture
Entity
p9914
(dp9915
g11
(lp9916
sg15
S'com.google.common.util.concurrent.ForwardingBlockingQueue'
p9917
sg17
(lp9918
sg21
(lp9919
sg25
(lp9920
sg29
I0
sba(iArchitecture
Entity
p9921
(dp9922
g11
(lp9923
sg15
S'com.google.common.util.concurrent.ForwardingCheckedFuture'
p9924
sg17
(lp9925
sg21
(lp9926
sg25
(lp9927
sg29
I0
sba(iArchitecture
Entity
p9928
(dp9929
g11
(lp9930
sg15
S'com.google.common.util.concurrent.ForwardingExecutorService'
p9931
sg17
(lp9932
sg21
(lp9933
sg25
(lp9934
sg29
I0
sba(iArchitecture
Entity
p9935
(dp9936
g11
(lp9937
sg15
S'com.google.common.util.concurrent.ForwardingFuture'
p9938
sg17
(lp9939
sg21
(lp9940
sg25
(lp9941
sg29
I0
sba(iArchitecture
Entity
p9942
(dp9943
g11
(lp9944
sg15
S'com.google.common.util.concurrent.ForwardingListenableFuture'
p9945
sg17
(lp9946
sg21
(lp9947
sg25
(lp9948
sg29
I0
sba(iArchitecture
Entity
p9949
(dp9950
g11
(lp9951
sg15
S'com.google.common.util.concurrent.ForwardingListeningExecutorService'
p9952
sg17
(lp9953
sg21
(lp9954
sg25
(lp9955
sg29
I0
sba(iArchitecture
Entity
p9956
(dp9957
g11
(lp9958
sg15
S'com.google.common.util.concurrent.GwtFuturesCatchingSpecialization'
p9959
sg17
(lp9960
sg21
(lp9961
sg25
(lp9962
sg29
I0
sba(iArchitecture
Entity
p9963
(dp9964
g11
(lp9965
sg15
S'com.google.common.util.concurrent.InterruptibleTask'
p9966
sg17
(lp9967
sg21
(lp9968
sg25
(lp9969
sg29
I0
sba(iArchitecture
Entity
p9970
(dp9971
g11
(lp9972
sg15
S'com.google.common.util.concurrent.JdkFutureAdapters'
p9973
sg17
(lp9974
sg21
(lp9975
sg25
(lp9976
sg29
I0
sba(iArchitecture
Entity
p9977
(dp9978
g11
(lp9979
sg15
S'com.google.common.util.concurrent.ListenableFuture'
p9980
sg17
(lp9981
sg21
(lp9982
sg25
(lp9983
sg29
I0
sba(iArchitecture
Entity
p9984
(dp9985
g11
(lp9986
sg15
S'com.google.common.util.concurrent.ListenerCallQueue'
p9987
sg17
(lp9988
sg21
(lp9989
sg25
(lp9990
sg29
I0
sba(iArchitecture
Entity
p9991
(dp9992
g11
(lp9993
sg15
S'com.google.common.util.concurrent.ListeningExecutorService'
p9994
sg17
(lp9995
sg21
(lp9996
sg25
(lp9997
sg29
I0
sba(iArchitecture
Entity
p9998
(dp9999
g11
(lp10000
sg15
S'com.google.common.util.concurrent.MoreExecutors'
p10001
sg17
(lp10002
sg21
(lp10003
sg25
(lp10004
sg29
I0
sba(iArchitecture
Entity
p10005
(dp10006
g11
(lp10007
sg15
S'com.google.common.util.concurrent.RateLimiter'
p10008
sg17
(lp10009
sg21
(lp10010
sg25
(lp10011
sg29
I0
sba(iArchitecture
Entity
p10012
(dp10013
g11
(lp10014
sg15
S'com.google.common.util.concurrent.Runnables'
p10015
sg17
(lp10016
sg21
(lp10017
sg25
(lp10018
sg29
I0
sba(iArchitecture
Entity
p10019
(dp10020
g11
(lp10021
sg15
S'com.google.common.util.concurrent.SerializingExecutor'
p10022
sg17
(lp10023
sg21
(lp10024
sg25
(lp10025
sg29
I0
sba(iArchitecture
Entity
p10026
(dp10027
g11
(lp10028
sg15
S'com.google.common.util.concurrent.Service'
p10029
sg17
(lp10030
sg21
(lp10031
sg25
(lp10032
sg29
I0
sba(iArchitecture
Entity
p10033
(dp10034
g11
(lp10035
sg15
S'com.google.common.util.concurrent.ServiceManager'
p10036
sg17
(lp10037
sg21
(lp10038
sg25
(lp10039
sg29
I0
sba(iArchitecture
Entity
p10040
(dp10041
g11
(lp10042
sg15
S'com.google.common.util.concurrent.SettableFuture'
p10043
sg17
(lp10044
sg21
(lp10045
sg25
(lp10046
sg29
I0
sba(iArchitecture
Entity
p10047
(dp10048
g11
(lp10049
sg15
S'com.google.common.util.concurrent.SmoothRateLimiter'
p10050
sg17
(lp10051
sg21
(lp10052
sg25
(lp10053
sg29
I0
sba(iArchitecture
Entity
p10054
(dp10055
g11
(lp10056
sg15
S'com.google.common.util.concurrent.ThreadFactoryBuilder'
p10057
sg17
(lp10058
sg21
(lp10059
sg25
(lp10060
sg29
I0
sba(iArchitecture
Entity
p10061
(dp10062
g11
(lp10063
sg15
S'com.google.common.util.concurrent.UncheckedExecutionException'
p10064
sg17
(lp10065
sg21
(lp10066
sg25
(lp10067
sg29
I0
sba(iArchitecture
Entity
p10068
(dp10069
g11
(lp10070
sg15
S'com.google.common.util.concurrent.UncheckedTimeoutException'
p10071
sg17
(lp10072
sg21
(lp10073
sg25
(lp10074
sg29
I0
sba(iArchitecture
Entity
p10075
(dp10076
g11
(lp10077
sg15
S'com.google.common.util.concurrent.Uninterruptibles'
p10078
sg17
(lp10079
sg21
(lp10080
sg25
(lp10081
sg29
I0
sba(iArchitecture
Entity
p10082
(dp10083
g11
(lp10084
sg15
S'com.google.common.util.concurrent.WrappingExecutorService'
p10085
sg17
(lp10086
sg21
(lp10087
sg25
(lp10088
sg29
I0
sba(iArchitecture
Entity
p10089
(dp10090
g11
(lp10091
sg15
S'com.google.common.util.concurrent.WrappingScheduledExecutorService'
p10092
sg17
(lp10093
sg21
(lp10094
sg25
(lp10095
sg29
I0
sba(iArchitecture
Entity
p10096
(dp10097
g11
(lp10098
sg15
S'com.google.thirdparty.publicsuffix.PublicSuffixPatterns'
p10099
sg17
(lp10100
sg21
(lp10101
sg25
(lp10102
sg29
I0
sba(iArchitecture
Entity
p10103
(dp10104
g11
(lp10105
sg15
S'com.google.thirdparty.publicsuffix.PublicSuffixType'
p10106
sg17
(lp10107
sg21
(lp10108
sg25
(lp10109
sg29
I0
sba(iArchitecture
Entity
p10110
(dp10111
g11
(lp10112
sg15
S'com.google.thirdparty.publicsuffix.TrieParser'
p10113
sg17
(lp10114
sg21
(lp10115
sg25
(lp10116
sg29
I0
sbasg1053
(lp10117
g8971
ag8978
ag8985
ag8992
ag8999
ag9006
ag9013
ag9020
ag9027
ag9034
ag9042
ag9056
ag9063
ag9070
ag9077
ag9084
ag9091
ag9098
ag9105
ag9112
ag9119
ag9126
ag9133
ag9140
ag9147
ag9154
ag9161
ag9168
ag9175
ag9182
ag9189
ag9196
ag9203
ag9210
ag9217
ag9224
ag9231
ag9238
ag9245
ag9252
ag9259
ag9266
ag9273
ag9280
ag9287
ag9294
ag9301
ag9308
ag9315
ag9322
ag9329
ag9336
ag9343
ag9350
ag9357
ag9364
ag9371
ag9378
ag9385
ag9392
ag9399
ag9406
ag9413
ag9420
ag9427
ag9434
ag9441
ag9448
ag9455
ag9462
ag9469
ag9476
ag9483
ag9490
ag9497
ag9504
ag9511
ag9518
ag9525
ag9532
ag9539
ag9546
ag9553
ag9560
ag9567
ag9574
ag9581
ag9588
ag9595
ag9602
ag9609
ag9616
ag9623
ag9630
ag9637
ag9644
ag9651
ag9658
ag9665
ag9672
ag9679
ag9686
ag9693
ag9700
ag9707
ag9714
ag9721
ag9728
ag9735
ag9742
ag9749
ag9756
ag9763
ag9770
ag9777
ag9784
ag9791
ag9798
ag9805
ag9812
ag9819
ag9826
ag9833
ag9840
ag9847
ag9854
ag9861
ag9868
ag9875
ag9882
ag9889
ag9896
ag9903
ag9910
ag9917
ag9924
ag9931
ag9938
ag9945
ag9952
ag9959
ag9966
ag9973
ag9980
ag9987
ag9994
ag10001
ag10008
ag10015
ag10022
ag10029
ag10036
ag10043
ag10050
ag10057
ag10064
ag10071
ag10078
ag10085
ag10092
ag10099
ag10106
ag10113
asg29
I0
sg1055
S'networking'
p10118
sba(iArchitecture
Cluster
p10119
(dp10120
g7
(lp10121
(iArchitecture
Entity
p10122
(dp10123
g11
(lp10124
sg15
S'com.google.common.annotations.VisibleForTesting'
p10125
sg17
(lp10126
sg21
(lp10127
sg25
(lp10128
sg29
I0
sba(iArchitecture
Entity
p10129
(dp10130
g11
(lp10131
sg15
S'com.google.common.base.CommonMatcher'
p10132
sg17
(lp10133
sg21
(lp10134
sg25
(lp10135
sg29
I0
sba(iArchitecture
Entity
p10136
(dp10137
g11
(lp10138
sg15
S'com.google.common.base.FinalizableReference'
p10139
sg17
(lp10140
sg21
(lp10141
sg25
(lp10142
sg29
I0
sba(iArchitecture
Entity
p10143
(dp10144
g11
(lp10145
sg15
S'com.google.common.cache.LongAddable'
p10146
sg17
(lp10147
sg21
(lp10148
sg25
(lp10149
sg29
I0
sba(iArchitecture
Entity
p10150
(dp10151
g11
(lp10152
sg15
S'com.google.common.collect.BinaryTreeTraverser'
p10153
sg17
(lp10154
sg21
(lp10155
sg25
(lp10156
sg29
I0
sba(iArchitecture
Entity
p10157
(dp10158
g11
(lp10159
sg15
S'com.google.common.collect.ComputationException'
p10160
sg17
(lp10161
sg21
(lp10162
sg25
(lp10163
sg29
I0
sba(iArchitecture
Entity
p10164
(dp10165
g11
(lp10166
sg15
S'com.google.common.collect.FilteredMultimapValues'
p10167
sg17
(lp10168
sg21
(lp10169
sg25
(lp10170
sg29
I0
sba(iArchitecture
Entity
p10171
(dp10172
g11
(lp10173
sg15
S'com.google.common.collect.ForwardingImmutableCollection'
p10174
sg17
(lp10175
sg21
(lp10176
sg25
(lp10177
sg29
I0
sba(iArchitecture
Entity
p10178
(dp10179
g11
(lp10180
sg15
S'com.google.common.collect.ForwardingList'
p10181
sg17
(lp10182
sg21
(lp10183
sg25
(lp10184
sg29
I0
sba(iArchitecture
Entity
p10185
(dp10186
g11
(lp10187
sg15
S'com.google.common.collect.ForwardingSortedSetMultimap'
p10188
sg17
(lp10189
sg21
(lp10190
sg25
(lp10191
sg29
I0
sba(iArchitecture
Entity
p10192
(dp10193
g11
(lp10194
sg15
S'com.google.common.collect.ImmutableSortedAsList'
p10195
sg17
(lp10196
sg21
(lp10197
sg25
(lp10198
sg29
I0
sba(iArchitecture
Entity
p10199
(dp10200
g11
(lp10201
sg15
S'com.google.common.eventbus.Dispatcher'
p10202
sg17
(lp10203
sg21
(lp10204
sg25
(lp10205
sg29
I0
sba(iArchitecture
Entity
p10206
(dp10207
g11
(lp10208
sg15
S'com.google.common.eventbus.SubscriberExceptionHandler'
p10209
sg17
(lp10210
sg21
(lp10211
sg25
(lp10212
sg29
I0
sba(iArchitecture
Entity
p10213
(dp10214
g11
(lp10215
sg15
S'com.google.common.hash.Funnel'
p10216
sg17
(lp10217
sg21
(lp10218
sg25
(lp10219
sg29
I0
sbasg1053
(lp10220
g10125
ag10132
ag10139
ag10146
ag10153
ag10160
ag10167
ag10174
ag10181
ag10188
ag10195
ag10202
ag10209
ag10216
asg29
I0
sg1055
S'no_match'
p10221
sba(iArchitecture
Cluster
p10222
(dp10223
g7
(lp10224
(iArchitecture
Entity
p10225
(dp10226
g11
(lp10227
sg15
S'com.google.common.annotations.Beta'
p10228
sg17
(lp10229
sg21
(lp10230
sg25
(lp10231
sg29
I0
sba(iArchitecture
Entity
p10232
(dp10233
g11
(lp10234
sg15
S'com.google.common.annotations.GwtCompatible'
p10235
sg17
(lp10236
sg21
(lp10237
sg25
(lp10238
sg29
I0
sba(iArchitecture
Entity
p10239
(dp10240
g11
(lp10241
sg15
S'com.google.common.annotations.GwtIncompatible'
p10242
sg17
(lp10243
sg21
(lp10244
sg25
(lp10245
sg29
I0
sba(iArchitecture
Entity
p10246
(dp10247
g11
(lp10248
sg15
S'com.google.common.annotations.package-info'
p10249
sg17
(lp10250
sg21
(lp10251
sg25
(lp10252
sg29
I0
sba(iArchitecture
Entity
p10253
(dp10254
g11
(lp10255
sg15
S'com.google.common.base.Absent'
p10256
sg17
(lp10257
sg21
(lp10258
sg25
(lp10259
sg29
I0
sba(iArchitecture
Entity
p10260
(dp10261
g11
(lp10262
sg15
S'com.google.common.base.Defaults'
p10263
sg17
(lp10264
sg21
(lp10265
sg25
(lp10266
sg29
I0
sba(iArchitecture
Entity
p10267
(dp10268
g11
(lp10269
sg15
S'com.google.common.base.Enums'
p10270
sg17
(lp10271
sg21
(lp10272
sg25
(lp10273
sg29
I0
sba(iArchitecture
Entity
p10274
(dp10275
g11
(lp10276
sg15
S'com.google.common.base.Function'
p10277
sg17
(lp10278
sg21
(lp10279
sg25
(lp10280
sg29
I0
sba(iArchitecture
Entity
p10281
(dp10282
g11
(lp10283
sg15
S'com.google.common.base.Objects'
p10284
sg17
(lp10285
sg21
(lp10286
sg25
(lp10287
sg29
I0
sba(iArchitecture
Entity
p10288
(dp10289
g11
(lp10290
sg15
S'com.google.common.base.Optional'
p10291
sg17
(lp10292
sg21
(lp10293
sg25
(lp10294
sg29
I0
sba(iArchitecture
Entity
p10295
(dp10296
g11
(lp10297
sg15
S'com.google.common.base.Platform'
p10298
sg17
(lp10299
sg21
(lp10300
sg25
(lp10301
sg29
I0
sba(iArchitecture
Entity
p10302
(dp10303
g11
(lp10304
sg15
S'com.google.common.base.Predicate'
p10305
sg17
(lp10306
sg21
(lp10307
sg25
(lp10308
sg29
I0
sba(iArchitecture
Entity
p10309
(dp10310
g11
(lp10311
sg15
S'com.google.common.base.Present'
p10312
sg17
(lp10313
sg21
(lp10314
sg25
(lp10315
sg29
I0
sba(iArchitecture
Entity
p10316
(dp10317
g11
(lp10318
sg15
S'com.google.common.base.StandardSystemProperty'
p10319
sg17
(lp10320
sg21
(lp10321
sg25
(lp10322
sg29
I0
sba(iArchitecture
Entity
p10323
(dp10324
g11
(lp10325
sg15
S'com.google.common.base.Stopwatch'
p10326
sg17
(lp10327
sg21
(lp10328
sg25
(lp10329
sg29
I0
sba(iArchitecture
Entity
p10330
(dp10331
g11
(lp10332
sg15
S'com.google.common.base.Supplier'
p10333
sg17
(lp10334
sg21
(lp10335
sg25
(lp10336
sg29
I0
sba(iArchitecture
Entity
p10337
(dp10338
g11
(lp10339
sg15
S'com.google.common.base.Suppliers'
p10340
sg17
(lp10341
sg21
(lp10342
sg25
(lp10343
sg29
I0
sba(iArchitecture
Entity
p10344
(dp10345
g11
(lp10346
sg15
S'com.google.common.base.internal.Finalizer'
p10347
sg17
(lp10348
sg21
(lp10349
sg25
(lp10350
sg29
I0
sba(iArchitecture
Entity
p10351
(dp10352
g11
(lp10353
sg15
S'com.google.common.cache.Cache'
p10354
sg17
(lp10355
sg21
(lp10356
sg25
(lp10357
sg29
I0
sba(iArchitecture
Entity
p10358
(dp10359
g11
(lp10360
sg15
S'com.google.common.cache.RemovalNotification'
p10361
sg17
(lp10362
sg21
(lp10363
sg25
(lp10364
sg29
I0
sba(iArchitecture
Entity
p10365
(dp10366
g11
(lp10367
sg15
S'com.google.common.collect.AbstractBiMap'
p10368
sg17
(lp10369
sg21
(lp10370
sg25
(lp10371
sg29
I0
sba(iArchitecture
Entity
p10372
(dp10373
g11
(lp10374
sg15
S'com.google.common.collect.AbstractListMultimap'
p10375
sg17
(lp10376
sg21
(lp10377
sg25
(lp10378
sg29
I0
sba(iArchitecture
Entity
p10379
(dp10380
g11
(lp10381
sg15
S'com.google.common.collect.AbstractSequentialIterator'
p10382
sg17
(lp10383
sg21
(lp10384
sg25
(lp10385
sg29
I0
sba(iArchitecture
Entity
p10386
(dp10387
g11
(lp10388
sg15
S'com.google.common.collect.AbstractSetMultimap'
p10389
sg17
(lp10390
sg21
(lp10391
sg25
(lp10392
sg29
I0
sba(iArchitecture
Entity
p10393
(dp10394
g11
(lp10395
sg15
S'com.google.common.collect.AbstractSortedKeySortedSetMultimap'
p10396
sg17
(lp10397
sg21
(lp10398
sg25
(lp10399
sg29
I0
sba(iArchitecture
Entity
p10400
(dp10401
g11
(lp10402
sg15
S'com.google.common.collect.AbstractSortedSetMultimap'
p10403
sg17
(lp10404
sg21
(lp10405
sg25
(lp10406
sg29
I0
sba(iArchitecture
Entity
p10407
(dp10408
g11
(lp10409
sg15
S'com.google.common.collect.ArrayListMultimap'
p10410
sg17
(lp10411
sg21
(lp10412
sg25
(lp10413
sg29
I0
sba(iArchitecture
Entity
p10414
(dp10415
g11
(lp10416
sg15
S'com.google.common.collect.ArrayListMultimapGwtSerializationDependencies'
p10417
sg17
(lp10418
sg21
(lp10419
sg25
(lp10420
sg29
I0
sba(iArchitecture
Entity
p10421
(dp10422
g11
(lp10423
sg15
S'com.google.common.collect.ArrayTable'
p10424
sg17
(lp10425
sg21
(lp10426
sg25
(lp10427
sg29
I0
sba(iArchitecture
Entity
p10428
(dp10429
g11
(lp10430
sg15
S'com.google.common.collect.BiMap'
p10431
sg17
(lp10432
sg21
(lp10433
sg25
(lp10434
sg29
I0
sba(iArchitecture
Entity
p10435
(dp10436
g11
(lp10437
sg15
S'com.google.common.collect.BoundType'
p10438
sg17
(lp10439
sg21
(lp10440
sg25
(lp10441
sg29
I0
sba(iArchitecture
Entity
p10442
(dp10443
g11
(lp10444
sg15
S'com.google.common.collect.ClassToInstanceMap'
p10445
sg17
(lp10446
sg21
(lp10447
sg25
(lp10448
sg29
I0
sba(iArchitecture
Entity
p10449
(dp10450
g11
(lp10451
sg15
S'com.google.common.collect.Comparators'
p10452
sg17
(lp10453
sg21
(lp10454
sg25
(lp10455
sg29
I0
sba(iArchitecture
Entity
p10456
(dp10457
g11
(lp10458
sg15
S'com.google.common.collect.ConsumingQueueIterator'
p10459
sg17
(lp10460
sg21
(lp10461
sg25
(lp10462
sg29
I0
sba(iArchitecture
Entity
p10463
(dp10464
g11
(lp10465
sg15
S'com.google.common.collect.EmptyImmutableListMultimap'
p10466
sg17
(lp10467
sg21
(lp10468
sg25
(lp10469
sg29
I0
sba(iArchitecture
Entity
p10470
(dp10471
g11
(lp10472
sg15
S'com.google.common.collect.EmptyImmutableSetMultimap'
p10473
sg17
(lp10474
sg21
(lp10475
sg25
(lp10476
sg29
I0
sba(iArchitecture
Entity
p10477
(dp10478
g11
(lp10479
sg15
S'com.google.common.collect.EnumBiMap'
p10480
sg17
(lp10481
sg21
(lp10482
sg25
(lp10483
sg29
I0
sba(iArchitecture
Entity
p10484
(dp10485
g11
(lp10486
sg15
S'com.google.common.collect.EnumHashBiMap'
p10487
sg17
(lp10488
sg21
(lp10489
sg25
(lp10490
sg29
I0
sba(iArchitecture
Entity
p10491
(dp10492
g11
(lp10493
sg15
S'com.google.common.collect.EnumMultiset'
p10494
sg17
(lp10495
sg21
(lp10496
sg25
(lp10497
sg29
I0
sba(iArchitecture
Entity
p10498
(dp10499
g11
(lp10500
sg15
S'com.google.common.collect.FilteredEntrySetMultimap'
p10501
sg17
(lp10502
sg21
(lp10503
sg25
(lp10504
sg29
I0
sba(iArchitecture
Entity
p10505
(dp10506
g11
(lp10507
sg15
S'com.google.common.collect.FilteredKeyMultimap'
p10508
sg17
(lp10509
sg21
(lp10510
sg25
(lp10511
sg29
I0
sba(iArchitecture
Entity
p10512
(dp10513
g11
(lp10514
sg15
S'com.google.common.collect.FilteredKeySetMultimap'
p10515
sg17
(lp10516
sg21
(lp10517
sg25
(lp10518
sg29
I0
sba(iArchitecture
Entity
p10519
(dp10520
g11
(lp10521
sg15
S'com.google.common.collect.FilteredMultimap'
p10522
sg17
(lp10523
sg21
(lp10524
sg25
(lp10525
sg29
I0
sba(iArchitecture
Entity
p10526
(dp10527
g11
(lp10528
sg15
S'com.google.common.collect.ForwardingSetMultimap'
p10529
sg17
(lp10530
sg21
(lp10531
sg25
(lp10532
sg29
I0
sba(iArchitecture
Entity
p10533
(dp10534
g11
(lp10535
sg15
S'com.google.common.collect.HashBasedTable'
p10536
sg17
(lp10537
sg21
(lp10538
sg25
(lp10539
sg29
I0
sba(iArchitecture
Entity
p10540
(dp10541
g11
(lp10542
sg15
S'com.google.common.collect.HashMultimapGwtSerializationDependencies'
p10543
sg17
(lp10544
sg21
(lp10545
sg25
(lp10546
sg29
I0
sba(iArchitecture
Entity
p10547
(dp10548
g11
(lp10549
sg15
S'com.google.common.collect.ImmutableBiMap'
p10550
sg17
(lp10551
sg21
(lp10552
sg25
(lp10553
sg29
I0
sba(iArchitecture
Entity
p10554
(dp10555
g11
(lp10556
sg15
S'com.google.common.collect.ImmutableClassToInstanceMap'
p10557
sg17
(lp10558
sg21
(lp10559
sg25
(lp10560
sg29
I0
sba(iArchitecture
Entity
p10561
(dp10562
g11
(lp10563
sg15
S'com.google.common.collect.ImmutableMap'
p10564
sg17
(lp10565
sg21
(lp10566
sg25
(lp10567
sg29
I0
sba(iArchitecture
Entity
p10568
(dp10569
g11
(lp10570
sg15
S'com.google.common.collect.ImmutableMapKeySet'
p10571
sg17
(lp10572
sg21
(lp10573
sg25
(lp10574
sg29
I0
sba(iArchitecture
Entity
p10575
(dp10576
g11
(lp10577
sg15
S'com.google.common.collect.ImmutableMapValues'
p10578
sg17
(lp10579
sg21
(lp10580
sg25
(lp10581
sg29
I0
sba(iArchitecture
Entity
p10582
(dp10583
g11
(lp10584
sg15
S'com.google.common.collect.ImmutableMultimap'
p10585
sg17
(lp10586
sg21
(lp10587
sg25
(lp10588
sg29
I0
sba(iArchitecture
Entity
p10589
(dp10590
g11
(lp10591
sg15
S'com.google.common.collect.ImmutableSortedMap'
p10592
sg17
(lp10593
sg21
(lp10594
sg25
(lp10595
sg29
I0
sba(iArchitecture
Entity
p10596
(dp10597
g11
(lp10598
sg15
S'com.google.common.collect.ImmutableSortedMapFauxverideShim'
p10599
sg17
(lp10600
sg21
(lp10601
sg25
(lp10602
sg29
I0
sba(iArchitecture
Entity
p10603
(dp10604
g11
(lp10605
sg15
S'com.google.common.collect.ImmutableSortedMultisetFauxverideShim'
p10606
sg17
(lp10607
sg21
(lp10608
sg25
(lp10609
sg29
I0
sba(iArchitecture
Entity
p10610
(dp10611
g11
(lp10612
sg15
S'com.google.common.collect.ImmutableSortedSetFauxverideShim'
p10613
sg17
(lp10614
sg21
(lp10615
sg25
(lp10616
sg29
I0
sba(iArchitecture
Entity
p10617
(dp10618
g11
(lp10619
sg15
S'com.google.common.collect.ImmutableTable'
p10620
sg17
(lp10621
sg21
(lp10622
sg25
(lp10623
sg29
I0
sba(iArchitecture
Entity
p10624
(dp10625
g11
(lp10626
sg15
S'com.google.common.collect.Interner'
p10627
sg17
(lp10628
sg21
(lp10629
sg25
(lp10630
sg29
I0
sba(iArchitecture
Entity
p10631
(dp10632
g11
(lp10633
sg15
S'com.google.common.collect.LinkedHashMultimap'
p10634
sg17
(lp10635
sg21
(lp10636
sg25
(lp10637
sg29
I0
sba(iArchitecture
Entity
p10638
(dp10639
g11
(lp10640
sg15
S'com.google.common.collect.LinkedHashMultimapGwtSerializationDependencies'
p10641
sg17
(lp10642
sg21
(lp10643
sg25
(lp10644
sg29
I0
sba(iArchitecture
Entity
p10645
(dp10646
g11
(lp10647
sg15
S'com.google.common.collect.ListMultimap'
p10648
sg17
(lp10649
sg21
(lp10650
sg25
(lp10651
sg29
I0
sba(iArchitecture
Entity
p10652
(dp10653
g11
(lp10654
sg15
S'com.google.common.collect.MapDifference'
p10655
sg17
(lp10656
sg21
(lp10657
sg25
(lp10658
sg29
I0
sba(iArchitecture
Entity
p10659
(dp10660
g11
(lp10661
sg15
S'com.google.common.collect.Maps'
p10662
sg17
(lp10663
sg21
(lp10664
sg25
(lp10665
sg29
I0
sba(iArchitecture
Entity
p10666
(dp10667
g11
(lp10668
sg15
S'com.google.common.collect.MoreCollectors'
p10669
sg17
(lp10670
sg21
(lp10671
sg25
(lp10672
sg29
I0
sba(iArchitecture
Entity
p10673
(dp10674
g11
(lp10675
sg15
S'com.google.common.collect.Multimap'
p10676
sg17
(lp10677
sg21
(lp10678
sg25
(lp10679
sg29
I0
sba(iArchitecture
Entity
p10680
(dp10681
g11
(lp10682
sg15
S'com.google.common.collect.Multimaps'
p10683
sg17
(lp10684
sg21
(lp10685
sg25
(lp10686
sg29
I0
sba(iArchitecture
Entity
p10687
(dp10688
g11
(lp10689
sg15
S'com.google.common.collect.MutableClassToInstanceMap'
p10690
sg17
(lp10691
sg21
(lp10692
sg25
(lp10693
sg29
I0
sba(iArchitecture
Entity
p10694
(dp10695
g11
(lp10696
sg15
S'com.google.common.collect.Ordering'
p10697
sg17
(lp10698
sg21
(lp10699
sg25
(lp10700
sg29
I0
sba(iArchitecture
Entity
p10701
(dp10702
g11
(lp10703
sg15
S'com.google.common.collect.Platform'
p10704
sg17
(lp10705
sg21
(lp10706
sg25
(lp10707
sg29
I0
sba(iArchitecture
Entity
p10708
(dp10709
g11
(lp10710
sg15
S'com.google.common.collect.Queues'
p10711
sg17
(lp10712
sg21
(lp10713
sg25
(lp10714
sg29
I0
sba(iArchitecture
Entity
p10715
(dp10716
g11
(lp10717
sg15
S'com.google.common.collect.RangeMap'
p10718
sg17
(lp10719
sg21
(lp10720
sg25
(lp10721
sg29
I0
sba(iArchitecture
Entity
p10722
(dp10723
g11
(lp10724
sg15
S'com.google.common.collect.RegularImmutableMap'
p10725
sg17
(lp10726
sg21
(lp10727
sg25
(lp10728
sg29
I0
sba(iArchitecture
Entity
p10729
(dp10730
g11
(lp10731
sg15
S'com.google.common.collect.RowSortedTable'
p10732
sg17
(lp10733
sg21
(lp10734
sg25
(lp10735
sg29
I0
sba(iArchitecture
Entity
p10736
(dp10737
g11
(lp10738
sg15
S'com.google.common.collect.SetMultimap'
p10739
sg17
(lp10740
sg21
(lp10741
sg25
(lp10742
sg29
I0
sba(iArchitecture
Entity
p10743
(dp10744
g11
(lp10745
sg15
S'com.google.common.collect.Sets'
p10746
sg17
(lp10747
sg21
(lp10748
sg25
(lp10749
sg29
I0
sba(iArchitecture
Entity
p10750
(dp10751
g11
(lp10752
sg15
S'com.google.common.collect.SortedIterable'
p10753
sg17
(lp10754
sg21
(lp10755
sg25
(lp10756
sg29
I0
sba(iArchitecture
Entity
p10757
(dp10758
g11
(lp10759
sg15
S'com.google.common.collect.SortedIterables'
p10760
sg17
(lp10761
sg21
(lp10762
sg25
(lp10763
sg29
I0
sba(iArchitecture
Entity
p10764
(dp10765
g11
(lp10766
sg15
S'com.google.common.collect.SortedMapDifference'
p10767
sg17
(lp10768
sg21
(lp10769
sg25
(lp10770
sg29
I0
sba(iArchitecture
Entity
p10771
(dp10772
g11
(lp10773
sg15
S'com.google.common.collect.SortedMultisetBridge'
p10774
sg17
(lp10775
sg21
(lp10776
sg25
(lp10777
sg29
I0
sba(iArchitecture
Entity
p10778
(dp10779
g11
(lp10780
sg15
S'com.google.common.collect.SortedMultisets'
p10781
sg17
(lp10782
sg21
(lp10783
sg25
(lp10784
sg29
I0
sba(iArchitecture
Entity
p10785
(dp10786
g11
(lp10787
sg15
S'com.google.common.collect.SortedSetMultimap'
p10788
sg17
(lp10789
sg21
(lp10790
sg25
(lp10791
sg29
I0
sba(iArchitecture
Entity
p10792
(dp10793
g11
(lp10794
sg15
S'com.google.common.collect.SparseImmutableTable'
p10795
sg17
(lp10796
sg21
(lp10797
sg25
(lp10798
sg29
I0
sba(iArchitecture
Entity
p10799
(dp10800
g11
(lp10801
sg15
S'com.google.common.collect.Table'
p10802
sg17
(lp10803
sg21
(lp10804
sg25
(lp10805
sg29
I0
sba(iArchitecture
Entity
p10806
(dp10807
g11
(lp10808
sg15
S'com.google.common.collect.Tables'
p10809
sg17
(lp10810
sg21
(lp10811
sg25
(lp10812
sg29
I0
sba(iArchitecture
Entity
p10813
(dp10814
g11
(lp10815
sg15
S'com.google.common.collect.TreeBasedTable'
p10816
sg17
(lp10817
sg21
(lp10818
sg25
(lp10819
sg29
I0
sba(iArchitecture
Entity
p10820
(dp10821
g11
(lp10822
sg15
S'com.google.common.collect.TreeMultimap'
p10823
sg17
(lp10824
sg21
(lp10825
sg25
(lp10826
sg29
I0
sba(iArchitecture
Entity
p10827
(dp10828
g11
(lp10829
sg15
S'com.google.common.collect.WellBehavedMap'
p10830
sg17
(lp10831
sg21
(lp10832
sg25
(lp10833
sg29
I0
sba(iArchitecture
Entity
p10834
(dp10835
g11
(lp10836
sg15
S'com.google.common.eventbus.AllowConcurrentEvents'
p10837
sg17
(lp10838
sg21
(lp10839
sg25
(lp10840
sg29
I0
sba(iArchitecture
Entity
p10841
(dp10842
g11
(lp10843
sg15
S'com.google.common.eventbus.Subscribe'
p10844
sg17
(lp10845
sg21
(lp10846
sg25
(lp10847
sg29
I0
sba(iArchitecture
Entity
p10848
(dp10849
g11
(lp10850
sg15
S'com.google.common.eventbus.SubscriberExceptionContext'
p10851
sg17
(lp10852
sg21
(lp10853
sg25
(lp10854
sg29
I0
sba(iArchitecture
Entity
p10855
(dp10856
g11
(lp10857
sg15
S'com.google.common.eventbus.SubscriberRegistry'
p10858
sg17
(lp10859
sg21
(lp10860
sg25
(lp10861
sg29
I0
sba(iArchitecture
Entity
p10862
(dp10863
g11
(lp10864
sg15
S'com.google.common.eventbus.package-info'
p10865
sg17
(lp10866
sg21
(lp10867
sg25
(lp10868
sg29
I0
sba(iArchitecture
Entity
p10869
(dp10870
g11
(lp10871
sg15
S'com.google.common.graph.AbstractGraphBuilder'
p10872
sg17
(lp10873
sg21
(lp10874
sg25
(lp10875
sg29
I0
sba(iArchitecture
Entity
p10876
(dp10877
g11
(lp10878
sg15
S'com.google.common.graph.ConfigurableValueGraph'
p10879
sg17
(lp10880
sg21
(lp10881
sg25
(lp10882
sg29
I0
sba(iArchitecture
Entity
p10883
(dp10884
g11
(lp10885
sg15
S'com.google.common.graph.DirectedMultiNetworkConnections'
p10886
sg17
(lp10887
sg21
(lp10888
sg25
(lp10889
sg29
I0
sba(iArchitecture
Entity
p10890
(dp10891
g11
(lp10892
sg15
S'com.google.common.graph.DirectedNetworkConnections'
p10893
sg17
(lp10894
sg21
(lp10895
sg25
(lp10896
sg29
I0
sba(iArchitecture
Entity
p10897
(dp10898
g11
(lp10899
sg15
S'com.google.common.graph.ElementOrder'
p10900
sg17
(lp10901
sg21
(lp10902
sg25
(lp10903
sg29
I0
sba(iArchitecture
Entity
p10904
(dp10905
g11
(lp10906
sg15
S'com.google.common.graph.GraphConnections'
p10907
sg17
(lp10908
sg21
(lp10909
sg25
(lp10910
sg29
I0
sba(iArchitecture
Entity
p10911
(dp10912
g11
(lp10913
sg15
S'com.google.common.graph.MapIteratorCache'
p10914
sg17
(lp10915
sg21
(lp10916
sg25
(lp10917
sg29
I0
sba(iArchitecture
Entity
p10918
(dp10919
g11
(lp10920
sg15
S'com.google.common.graph.MapRetrievalCache'
p10921
sg17
(lp10922
sg21
(lp10923
sg25
(lp10924
sg29
I0
sba(iArchitecture
Entity
p10925
(dp10926
g11
(lp10927
sg15
S'com.google.common.graph.NetworkConnections'
p10928
sg17
(lp10929
sg21
(lp10930
sg25
(lp10931
sg29
I0
sba(iArchitecture
Entity
p10932
(dp10933
g11
(lp10934
sg15
S'com.google.common.graph.UndirectedGraphConnections'
p10935
sg17
(lp10936
sg21
(lp10937
sg25
(lp10938
sg29
I0
sba(iArchitecture
Entity
p10939
(dp10940
g11
(lp10941
sg15
S'com.google.common.graph.UndirectedMultiNetworkConnections'
p10942
sg17
(lp10943
sg21
(lp10944
sg25
(lp10945
sg29
I0
sba(iArchitecture
Entity
p10946
(dp10947
g11
(lp10948
sg15
S'com.google.common.graph.UndirectedNetworkConnections'
p10949
sg17
(lp10950
sg21
(lp10951
sg25
(lp10952
sg29
I0
sba(iArchitecture
Entity
p10953
(dp10954
g11
(lp10955
sg15
S'com.google.common.graph.package-info'
p10956
sg17
(lp10957
sg21
(lp10958
sg25
(lp10959
sg29
I0
sba(iArchitecture
Entity
p10960
(dp10961
g11
(lp10962
sg15
S'com.google.common.hash.package-info'
p10963
sg17
(lp10964
sg21
(lp10965
sg25
(lp10966
sg29
I0
sba(iArchitecture
Entity
p10967
(dp10968
g11
(lp10969
sg15
S'com.google.common.html.package-info'
p10970
sg17
(lp10971
sg21
(lp10972
sg25
(lp10973
sg29
I0
sba(iArchitecture
Entity
p10974
(dp10975
g11
(lp10976
sg15
S'com.google.common.io.Closer'
p10977
sg17
(lp10978
sg21
(lp10979
sg25
(lp10980
sg29
I0
sba(iArchitecture
Entity
p10981
(dp10982
g11
(lp10983
sg15
S'com.google.common.math.DoubleMath'
p10984
sg17
(lp10985
sg21
(lp10986
sg25
(lp10987
sg29
I0
sba(iArchitecture
Entity
p10988
(dp10989
g11
(lp10990
sg15
S'com.google.common.math.PairedStatsAccumulator'
p10991
sg17
(lp10992
sg21
(lp10993
sg25
(lp10994
sg29
I0
sba(iArchitecture
Entity
p10995
(dp10996
g11
(lp10997
sg15
S'com.google.common.math.Stats'
p10998
sg17
(lp10999
sg21
(lp11000
sg25
(lp11001
sg29
I0
sba(iArchitecture
Entity
p11002
(dp11003
g11
(lp11004
sg15
S'com.google.common.math.StatsAccumulator'
p11005
sg17
(lp11006
sg21
(lp11007
sg25
(lp11008
sg29
I0
sba(iArchitecture
Entity
p11009
(dp11010
g11
(lp11011
sg15
S'com.google.common.math.package-info'
p11012
sg17
(lp11013
sg21
(lp11014
sg25
(lp11015
sg29
I0
sba(iArchitecture
Entity
p11016
(dp11017
g11
(lp11018
sg15
S'com.google.common.net.MediaType'
p11019
sg17
(lp11020
sg21
(lp11021
sg25
(lp11022
sg29
I0
sba(iArchitecture
Entity
p11023
(dp11024
g11
(lp11025
sg15
S'com.google.common.primitives.Primitives'
p11026
sg17
(lp11027
sg21
(lp11028
sg25
(lp11029
sg29
I0
sba(iArchitecture
Entity
p11030
(dp11031
g11
(lp11032
sg15
S'com.google.common.reflect.ImmutableTypeToInstanceMap'
p11033
sg17
(lp11034
sg21
(lp11035
sg25
(lp11036
sg29
I0
sba(iArchitecture
Entity
p11037
(dp11038
g11
(lp11039
sg15
S'com.google.common.reflect.MutableTypeToInstanceMap'
p11040
sg17
(lp11041
sg21
(lp11042
sg25
(lp11043
sg29
I0
sba(iArchitecture
Entity
p11044
(dp11045
g11
(lp11046
sg15
S'com.google.common.reflect.TypeParameter'
p11047
sg17
(lp11048
sg21
(lp11049
sg25
(lp11050
sg29
I0
sba(iArchitecture
Entity
p11051
(dp11052
g11
(lp11053
sg15
S'com.google.common.reflect.TypeResolver'
p11054
sg17
(lp11055
sg21
(lp11056
sg25
(lp11057
sg29
I0
sba(iArchitecture
Entity
p11058
(dp11059
g11
(lp11060
sg15
S'com.google.common.reflect.TypeToInstanceMap'
p11061
sg17
(lp11062
sg21
(lp11063
sg25
(lp11064
sg29
I0
sba(iArchitecture
Entity
p11065
(dp11066
g11
(lp11067
sg15
S'com.google.common.reflect.TypeToken'
p11068
sg17
(lp11069
sg21
(lp11070
sg25
(lp11071
sg29
I0
sba(iArchitecture
Entity
p11072
(dp11073
g11
(lp11074
sg15
S'com.google.common.reflect.TypeVisitor'
p11075
sg17
(lp11076
sg21
(lp11077
sg25
(lp11078
sg29
I0
sba(iArchitecture
Entity
p11079
(dp11080
g11
(lp11081
sg15
S'com.google.common.reflect.Types'
p11082
sg17
(lp11083
sg21
(lp11084
sg25
(lp11085
sg29
I0
sba(iArchitecture
Entity
p11086
(dp11087
g11
(lp11088
sg15
S'com.google.common.reflect.package-info'
p11089
sg17
(lp11090
sg21
(lp11091
sg25
(lp11092
sg29
I0
sba(iArchitecture
Entity
p11093
(dp11094
g11
(lp11095
sg15
S'com.google.common.util.concurrent.AsyncCallable'
p11096
sg17
(lp11097
sg21
(lp11098
sg25
(lp11099
sg29
I0
sba(iArchitecture
Entity
p11100
(dp11101
g11
(lp11102
sg15
S'com.google.common.util.concurrent.AsyncFunction'
p11103
sg17
(lp11104
sg21
(lp11105
sg25
(lp11106
sg29
I0
sba(iArchitecture
Entity
p11107
(dp11108
g11
(lp11109
sg15
S'com.google.common.util.concurrent.AtomicLongMap'
p11110
sg17
(lp11111
sg21
(lp11112
sg25
(lp11113
sg29
I0
sba(iArchitecture
Entity
p11114
(dp11115
g11
(lp11116
sg15
S'com.google.common.util.concurrent.Atomics'
p11117
sg17
(lp11118
sg21
(lp11119
sg25
(lp11120
sg29
I0
sba(iArchitecture
Entity
p11121
(dp11122
g11
(lp11123
sg15
S'com.google.common.util.concurrent.CollectionFuture'
p11124
sg17
(lp11125
sg21
(lp11126
sg25
(lp11127
sg29
I0
sba(iArchitecture
Entity
p11128
(dp11129
g11
(lp11130
sg15
S'com.google.common.util.concurrent.ExecutionList'
p11131
sg17
(lp11132
sg21
(lp11133
sg25
(lp11134
sg29
I0
sba(iArchitecture
Entity
p11135
(dp11136
g11
(lp11137
sg15
S'com.google.common.util.concurrent.FutureCallback'
p11138
sg17
(lp11139
sg21
(lp11140
sg25
(lp11141
sg29
I0
sba(iArchitecture
Entity
p11142
(dp11143
g11
(lp11144
sg15
S'com.google.common.util.concurrent.FuturesGetChecked'
p11145
sg17
(lp11146
sg21
(lp11147
sg25
(lp11148
sg29
I0
sba(iArchitecture
Entity
p11149
(dp11150
g11
(lp11151
sg15
S'com.google.common.util.concurrent.ImmediateFuture'
p11152
sg17
(lp11153
sg21
(lp11154
sg25
(lp11155
sg29
I0
sba(iArchitecture
Entity
p11156
(dp11157
g11
(lp11158
sg15
S'com.google.common.util.concurrent.ListenableFutureTask'
p11159
sg17
(lp11160
sg21
(lp11161
sg25
(lp11162
sg29
I0
sba(iArchitecture
Entity
p11163
(dp11164
g11
(lp11165
sg15
S'com.google.common.util.concurrent.ListenableScheduledFuture'
p11166
sg17
(lp11167
sg21
(lp11168
sg25
(lp11169
sg29
I0
sba(iArchitecture
Entity
p11170
(dp11171
g11
(lp11172
sg15
S'com.google.common.util.concurrent.ListeningScheduledExecutorService'
p11173
sg17
(lp11174
sg21
(lp11175
sg25
(lp11176
sg29
I0
sba(iArchitecture
Entity
p11177
(dp11178
g11
(lp11179
sg15
S'com.google.common.util.concurrent.Partially'
p11180
sg17
(lp11181
sg21
(lp11182
sg25
(lp11183
sg29
I0
sba(iArchitecture
Entity
p11184
(dp11185
g11
(lp11186
sg15
S'com.google.common.util.concurrent.Platform'
p11187
sg17
(lp11188
sg21
(lp11189
sg25
(lp11190
sg29
I0
sba(iArchitecture
Entity
p11191
(dp11192
g11
(lp11193
sg15
S'com.google.common.util.concurrent.SimpleTimeLimiter'
p11194
sg17
(lp11195
sg21
(lp11196
sg25
(lp11197
sg29
I0
sba(iArchitecture
Entity
p11198
(dp11199
g11
(lp11200
sg15
S'com.google.common.util.concurrent.TimeLimiter'
p11201
sg17
(lp11202
sg21
(lp11203
sg25
(lp11204
sg29
I0
sba(iArchitecture
Entity
p11205
(dp11206
g11
(lp11207
sg15
S'com.google.common.util.concurrent.TimeoutFuture'
p11208
sg17
(lp11209
sg21
(lp11210
sg25
(lp11211
sg29
I0
sba(iArchitecture
Entity
p11212
(dp11213
g11
(lp11214
sg15
S'com.google.common.util.concurrent.TrustedListenableFutureTask'
p11215
sg17
(lp11216
sg21
(lp11217
sg25
(lp11218
sg29
I0
sba(iArchitecture
Entity
p11219
(dp11220
g11
(lp11221
sg15
S'com.google.common.util.concurrent.package-info'
p11222
sg17
(lp11223
sg21
(lp11224
sg25
(lp11225
sg29
I0
sba(iArchitecture
Entity
p11226
(dp11227
g11
(lp11228
sg15
S'com.google.common.xml.package-info'
p11229
sg17
(lp11230
sg21
(lp11231
sg25
(lp11232
sg29
I0
sbasg1053
(lp11233
g10228
ag10235
ag10242
ag10249
ag10256
ag10263
ag10270
ag10277
ag10284
ag10291
ag10298
ag10305
ag10312
ag10319
ag10326
ag10333
ag10340
ag10347
ag10354
ag10361
ag10368
ag10375
ag10382
ag10389
ag10396
ag10403
ag10410
ag10417
ag10424
ag10431
ag10438
ag10445
ag10452
ag10459
ag10466
ag10473
ag10480
ag10487
ag10494
ag10501
ag10508
ag10515
ag10522
ag10529
ag10536
ag10543
ag10550
ag10557
ag10564
ag10571
ag10578
ag10585
ag10592
ag10599
ag10606
ag10613
ag10620
ag10627
ag10634
ag10641
ag10648
ag10655
ag10662
ag10669
ag10676
ag10683
ag10690
ag10697
ag10704
ag10711
ag10718
ag10725
ag10732
ag10739
ag10746
ag10753
ag10760
ag10767
ag10774
ag10781
ag10788
ag10795
ag10802
ag10809
ag10816
ag10823
ag10830
ag10837
ag10844
ag10851
ag10858
ag10865
ag10872
ag10879
ag10886
ag10893
ag10900
ag10907
ag10914
ag10921
ag10928
ag10935
ag10942
ag10949
ag10956
ag10963
ag10970
ag10977
ag10984
ag10991
ag10998
ag11005
ag11012
ag11019
ag11026
ag11033
ag11040
ag11047
ag11054
ag11061
ag11068
ag11075
ag11082
ag11089
ag11096
ag11103
ag11110
ag11117
ag11124
ag11131
ag11138
ag11145
ag11152
ag11159
ag11166
ag11173
ag11180
ag11187
ag11194
ag11201
ag11208
ag11215
ag11222
ag11229
asg29
I0
sg1055
S'sql'
p11234
sbasg3610
g3611
sg1053
(lp11235
sg3613
I00
sg1055
S'22.0'
p11236
sba.