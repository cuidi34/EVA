(lp0
(iArchitecture
Architecture
p1
(dp2
S'clusters'
p3
(lp4
(iArchitecture
Cluster
p5
(dp6
S'entities'
p7
(lp8
(iArchitecture
Entity
p9
(dp10
S'issue_ids'
p11
(lp12
sS'name'
p13
S'com.google.common.annotations.GwtIncompatible'
p14
sS'descs'
p15
(lp16
sS'labels'
p17
(lp18
sS'titles'
p19
(lp20
sS'change'
p21
I0
sba(iArchitecture
Entity
p22
(dp23
g11
(lp24
sg13
S'com.google.common.base.AbstractIterator'
p25
sg15
(lp26
sg17
(lp27
sg19
(lp28
sg21
I0
sba(iArchitecture
Entity
p29
(dp30
g11
(lp31
sg13
S'com.google.common.base.AbstractIterator$1'
p32
sg15
(lp33
sg17
(lp34
sg19
(lp35
sg21
I0
sba(iArchitecture
Entity
p36
(dp37
g11
(lp38
sg13
S'com.google.common.base.AbstractIterator$State'
p39
sg15
(lp40
sg17
(lp41
sg19
(lp42
sg21
I0
sba(iArchitecture
Entity
p43
(dp44
g11
(lp45
sg13
S'com.google.common.base.Ascii'
p46
sg15
(lp47
sg17
(lp48
sg19
(lp49
sg21
I0
sba(iArchitecture
Entity
p50
(dp51
g11
(lp52
sg13
S'com.google.common.base.CaseFormat'
p53
sg15
(lp54
sg17
(lp55
sg19
(lp56
sg21
I0
sba(iArchitecture
Entity
p57
(dp58
g11
(lp59
sg13
S'com.google.common.base.CaseFormat$1'
p60
sg15
(lp61
sg17
(lp62
sg19
(lp63
sg21
I0
sba(iArchitecture
Entity
p64
(dp65
g11
(lp66
sg13
S'com.google.common.base.CaseFormat$2'
p67
sg15
(lp68
sg17
(lp69
sg19
(lp70
sg21
I0
sba(iArchitecture
Entity
p71
(dp72
g11
(lp73
sg13
S'com.google.common.base.CaseFormat$3'
p74
sg15
(lp75
sg17
(lp76
sg19
(lp77
sg21
I0
sba(iArchitecture
Entity
p78
(dp79
g11
(lp80
sg13
S'com.google.common.base.CaseFormat$4'
p81
sg15
(lp82
sg17
(lp83
sg19
(lp84
sg21
I0
sba(iArchitecture
Entity
p85
(dp86
g11
(lp87
sg13
S'com.google.common.base.CaseFormat$5'
p88
sg15
(lp89
sg17
(lp90
sg19
(lp91
sg21
I0
sba(iArchitecture
Entity
p92
(dp93
g11
(lp94
sg13
S'com.google.common.base.CaseFormat$StringConverter'
p95
sg15
(lp96
sg17
(lp97
sg19
(lp98
sg21
I0
sba(iArchitecture
Entity
p99
(dp100
g11
(lp101
V339
p102
asg13
S'com.google.common.base.CharMatcher'
p103
sg15
(lp104
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p105
asg17
(lp106
(lp107
I1
aasg19
(lp108
VConcurrency bug in AbstractMultimap
p109
asg21
I0
sba(iArchitecture
Entity
p110
(dp111
g11
(lp112
g102
asg13
S'com.google.common.base.CharMatcher$1'
p113
sg15
(lp114
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p115
asg17
(lp116
g107
asg19
(lp117
g109
asg21
I0
sba(iArchitecture
Entity
p118
(dp119
g11
(lp120
g102
asg13
S'com.google.common.base.CharMatcher$10'
p121
sg15
(lp122
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p123
asg17
(lp124
g107
asg19
(lp125
g109
asg21
I0
sba(iArchitecture
Entity
p126
(dp127
g11
(lp128
g102
asg13
S'com.google.common.base.CharMatcher$11'
p129
sg15
(lp130
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p131
asg17
(lp132
g107
asg19
(lp133
g109
asg21
I0
sba(iArchitecture
Entity
p134
(dp135
g11
(lp136
g102
asg13
S'com.google.common.base.CharMatcher$12'
p137
sg15
(lp138
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p139
asg17
(lp140
g107
asg19
(lp141
g109
asg21
I0
sba(iArchitecture
Entity
p142
(dp143
g11
(lp144
g102
asg13
S'com.google.common.base.CharMatcher$13'
p145
sg15
(lp146
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p147
asg17
(lp148
g107
asg19
(lp149
g109
asg21
I0
sba(iArchitecture
Entity
p150
(dp151
g11
(lp152
g102
asg13
S'com.google.common.base.CharMatcher$14'
p153
sg15
(lp154
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p155
asg17
(lp156
g107
asg19
(lp157
g109
asg21
I0
sba(iArchitecture
Entity
p158
(dp159
g11
(lp160
g102
asg13
S'com.google.common.base.CharMatcher$15'
p161
sg15
(lp162
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p163
asg17
(lp164
g107
asg19
(lp165
g109
asg21
I0
sba(iArchitecture
Entity
p166
(dp167
g11
(lp168
g102
asg13
S'com.google.common.base.CharMatcher$2'
p169
sg15
(lp170
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p171
asg17
(lp172
g107
asg19
(lp173
g109
asg21
I0
sba(iArchitecture
Entity
p174
(dp175
g11
(lp176
g102
asg13
S'com.google.common.base.CharMatcher$3'
p177
sg15
(lp178
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p179
asg17
(lp180
g107
asg19
(lp181
g109
asg21
I0
sba(iArchitecture
Entity
p182
(dp183
g11
(lp184
g102
asg13
S'com.google.common.base.CharMatcher$4'
p185
sg15
(lp186
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p187
asg17
(lp188
g107
asg19
(lp189
g109
asg21
I0
sba(iArchitecture
Entity
p190
(dp191
g11
(lp192
g102
asg13
S'com.google.common.base.CharMatcher$5'
p193
sg15
(lp194
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p195
asg17
(lp196
g107
asg19
(lp197
g109
asg21
I0
sba(iArchitecture
Entity
p198
(dp199
g11
(lp200
g102
asg13
S'com.google.common.base.CharMatcher$6'
p201
sg15
(lp202
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p203
asg17
(lp204
g107
asg19
(lp205
g109
asg21
I0
sba(iArchitecture
Entity
p206
(dp207
g11
(lp208
g102
asg13
S'com.google.common.base.CharMatcher$7'
p209
sg15
(lp210
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p211
asg17
(lp212
g107
asg19
(lp213
g109
asg21
I0
sba(iArchitecture
Entity
p214
(dp215
g11
(lp216
g102
asg13
S'com.google.common.base.CharMatcher$8'
p217
sg15
(lp218
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p219
asg17
(lp220
g107
asg19
(lp221
g109
asg21
I0
sba(iArchitecture
Entity
p222
(dp223
g11
(lp224
g102
asg13
S'com.google.common.base.CharMatcher$9'
p225
sg15
(lp226
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p227
asg17
(lp228
g107
asg19
(lp229
g109
asg21
I0
sba(iArchitecture
Entity
p230
(dp231
g11
(lp232
g102
asg13
S'com.google.common.base.CharMatcher$And'
p233
sg15
(lp234
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p235
asg17
(lp236
g107
asg19
(lp237
g109
asg21
I0
sba(iArchitecture
Entity
p238
(dp239
g11
(lp240
g102
asg13
S'com.google.common.base.CharMatcher$BitSetMatcher'
p241
sg15
(lp242
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p243
asg17
(lp244
g107
asg19
(lp245
g109
asg21
I0
sba(iArchitecture
Entity
p246
(dp247
g11
(lp248
g102
asg13
S'com.google.common.base.CharMatcher$FastMatcher'
p249
sg15
(lp250
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p251
asg17
(lp252
g107
asg19
(lp253
g109
asg21
I0
sba(iArchitecture
Entity
p254
(dp255
g11
(lp256
g102
asg13
S'com.google.common.base.CharMatcher$NegatedFastMatcher'
p257
sg15
(lp258
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p259
asg17
(lp260
g107
asg19
(lp261
g109
asg21
I0
sba(iArchitecture
Entity
p262
(dp263
g11
(lp264
g102
asg13
S'com.google.common.base.CharMatcher$NegatedMatcher'
p265
sg15
(lp266
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p267
asg17
(lp268
g107
asg19
(lp269
g109
asg21
I0
sba(iArchitecture
Entity
p270
(dp271
g11
(lp272
g102
asg13
S'com.google.common.base.CharMatcher$Or'
p273
sg15
(lp274
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p275
asg17
(lp276
g107
asg19
(lp277
g109
asg21
I0
sba(iArchitecture
Entity
p278
(dp279
g11
(lp280
g102
asg13
S'com.google.common.base.CharMatcher$RangesMatcher'
p281
sg15
(lp282
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p283
asg17
(lp284
g107
asg19
(lp285
g109
asg21
I0
sba(iArchitecture
Entity
p286
(dp287
g11
(lp288
g102
asg13
S'com.google.common.base.Converter'
p289
sg15
(lp290
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p291
asg17
(lp292
g107
asg19
(lp293
g109
asg21
I0
sba(iArchitecture
Entity
p294
(dp295
g11
(lp296
g102
asg13
S'com.google.common.base.Converter$1'
p297
sg15
(lp298
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p299
asg17
(lp300
g107
asg19
(lp301
g109
asg21
I0
sba(iArchitecture
Entity
p302
(dp303
g11
(lp304
g102
asg13
S'com.google.common.base.Converter$1$1'
p305
sg15
(lp306
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p307
asg17
(lp308
g107
asg19
(lp309
g109
asg21
I0
sba(iArchitecture
Entity
p310
(dp311
g11
(lp312
g102
asg13
S'com.google.common.base.Converter$ConverterComposition'
p313
sg15
(lp314
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p315
asg17
(lp316
g107
asg19
(lp317
g109
asg21
I0
sba(iArchitecture
Entity
p318
(dp319
g11
(lp320
g102
asg13
S'com.google.common.base.Converter$FunctionBasedConverter'
p321
sg15
(lp322
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p323
asg17
(lp324
g107
asg19
(lp325
g109
asg21
I0
sba(iArchitecture
Entity
p326
(dp327
g11
(lp328
g102
asg13
S'com.google.common.base.Converter$IdentityConverter'
p329
sg15
(lp330
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p331
asg17
(lp332
g107
asg19
(lp333
g109
asg21
I0
sba(iArchitecture
Entity
p334
(dp335
g11
(lp336
g102
asg13
S'com.google.common.base.Converter$ReverseConverter'
p337
sg15
(lp338
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p339
asg17
(lp340
g107
asg19
(lp341
g109
asg21
I0
sba(iArchitecture
Entity
p342
(dp343
g11
(lp344
sg13
S'com.google.common.base.Enums'
p345
sg15
(lp346
sg17
(lp347
sg19
(lp348
sg21
I0
sba(iArchitecture
Entity
p349
(dp350
g11
(lp351
sg13
S'com.google.common.base.Enums$StringConverter'
p352
sg15
(lp353
sg17
(lp354
sg19
(lp355
sg21
I0
sba(iArchitecture
Entity
p356
(dp357
g11
(lp358
g102
asg13
S'com.google.common.base.Equivalence'
p359
sg15
(lp360
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p361
asg17
(lp362
g107
asg19
(lp363
g109
asg21
I0
sba(iArchitecture
Entity
p364
(dp365
g11
(lp366
g102
asg13
S'com.google.common.base.Equivalence$1'
p367
sg15
(lp368
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p369
asg17
(lp370
g107
asg19
(lp371
g109
asg21
I0
sba(iArchitecture
Entity
p372
(dp373
g11
(lp374
g102
asg13
S'com.google.common.base.Equivalence$Equals'
p375
sg15
(lp376
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p377
asg17
(lp378
g107
asg19
(lp379
g109
asg21
I0
sba(iArchitecture
Entity
p380
(dp381
g11
(lp382
g102
asg13
S'com.google.common.base.Equivalence$EquivalentToPredicate'
p383
sg15
(lp384
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p385
asg17
(lp386
g107
asg19
(lp387
g109
asg21
I0
sba(iArchitecture
Entity
p388
(dp389
g11
(lp390
g102
asg13
S'com.google.common.base.Equivalence$Identity'
p391
sg15
(lp392
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p393
asg17
(lp394
g107
asg19
(lp395
g109
asg21
I0
sba(iArchitecture
Entity
p396
(dp397
g11
(lp398
g102
asg13
S'com.google.common.base.Equivalence$Wrapper'
p399
sg15
(lp400
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p401
asg17
(lp402
g107
asg19
(lp403
g109
asg21
I0
sba(iArchitecture
Entity
p404
(dp405
g11
(lp406
sg13
S'com.google.common.base.FinalizablePhantomReference'
p407
sg15
(lp408
sg17
(lp409
sg19
(lp410
sg21
I0
sba(iArchitecture
Entity
p411
(dp412
g11
(lp413
sg13
S'com.google.common.base.FinalizableReference'
p414
sg15
(lp415
sg17
(lp416
sg19
(lp417
sg21
I0
sba(iArchitecture
Entity
p418
(dp419
g11
(lp420
sg13
S'com.google.common.base.FinalizableReferenceQueue'
p421
sg15
(lp422
sg17
(lp423
sg19
(lp424
sg21
I0
sba(iArchitecture
Entity
p425
(dp426
g11
(lp427
sg13
S'com.google.common.base.FinalizableReferenceQueue$DecoupledLoader'
p428
sg15
(lp429
sg17
(lp430
sg19
(lp431
sg21
I0
sba(iArchitecture
Entity
p432
(dp433
g11
(lp434
sg13
S'com.google.common.base.FinalizableReferenceQueue$DirectLoader'
p435
sg15
(lp436
sg17
(lp437
sg19
(lp438
sg21
I0
sba(iArchitecture
Entity
p439
(dp440
g11
(lp441
sg13
S'com.google.common.base.FinalizableReferenceQueue$FinalizerLoader'
p442
sg15
(lp443
sg17
(lp444
sg19
(lp445
sg21
I0
sba(iArchitecture
Entity
p446
(dp447
g11
(lp448
sg13
S'com.google.common.base.FinalizableReferenceQueue$SystemLoader'
p449
sg15
(lp450
sg17
(lp451
sg19
(lp452
sg21
I0
sba(iArchitecture
Entity
p453
(dp454
g11
(lp455
sg13
S'com.google.common.base.FinalizableSoftReference'
p456
sg15
(lp457
sg17
(lp458
sg19
(lp459
sg21
I0
sba(iArchitecture
Entity
p460
(dp461
g11
(lp462
sg13
S'com.google.common.base.FinalizableWeakReference'
p463
sg15
(lp464
sg17
(lp465
sg19
(lp466
sg21
I0
sba(iArchitecture
Entity
p467
(dp468
g11
(lp469
sg13
S'com.google.common.base.Function'
p470
sg15
(lp471
sg17
(lp472
sg19
(lp473
sg21
I0
sba(iArchitecture
Entity
p474
(dp475
g11
(lp476
sg13
S'com.google.common.base.FunctionalEquivalence'
p477
sg15
(lp478
sg17
(lp479
sg19
(lp480
sg21
I0
sba(iArchitecture
Entity
p481
(dp482
g11
(lp483
sg13
S'com.google.common.base.Functions'
p484
sg15
(lp485
sg17
(lp486
sg19
(lp487
sg21
I0
sba(iArchitecture
Entity
p488
(dp489
g11
(lp490
sg13
S'com.google.common.base.Functions$1'
p491
sg15
(lp492
sg17
(lp493
sg19
(lp494
sg21
I0
sba(iArchitecture
Entity
p495
(dp496
g11
(lp497
sg13
S'com.google.common.base.Functions$ConstantFunction'
p498
sg15
(lp499
sg17
(lp500
sg19
(lp501
sg21
I0
sba(iArchitecture
Entity
p502
(dp503
g11
(lp504
sg13
S'com.google.common.base.Functions$ForMapWithDefault'
p505
sg15
(lp506
sg17
(lp507
sg19
(lp508
sg21
I0
sba(iArchitecture
Entity
p509
(dp510
g11
(lp511
sg13
S'com.google.common.base.Functions$FunctionComposition'
p512
sg15
(lp513
sg17
(lp514
sg19
(lp515
sg21
I0
sba(iArchitecture
Entity
p516
(dp517
g11
(lp518
sg13
S'com.google.common.base.Functions$FunctionForMapNoDefault'
p519
sg15
(lp520
sg17
(lp521
sg19
(lp522
sg21
I0
sba(iArchitecture
Entity
p523
(dp524
g11
(lp525
sg13
S'com.google.common.base.Functions$IdentityFunction'
p526
sg15
(lp527
sg17
(lp528
sg19
(lp529
sg21
I0
sba(iArchitecture
Entity
p530
(dp531
g11
(lp532
sg13
S'com.google.common.base.Functions$PredicateFunction'
p533
sg15
(lp534
sg17
(lp535
sg19
(lp536
sg21
I0
sba(iArchitecture
Entity
p537
(dp538
g11
(lp539
sg13
S'com.google.common.base.Functions$SupplierFunction'
p540
sg15
(lp541
sg17
(lp542
sg19
(lp543
sg21
I0
sba(iArchitecture
Entity
p544
(dp545
g11
(lp546
sg13
S'com.google.common.base.Functions$ToStringFunction'
p547
sg15
(lp548
sg17
(lp549
sg19
(lp550
sg21
I0
sba(iArchitecture
Entity
p551
(dp552
g11
(lp553
sg13
S'com.google.common.base.GwtSerializationDependencies'
p554
sg15
(lp555
sg17
(lp556
sg19
(lp557
sg21
I0
sba(iArchitecture
Entity
p558
(dp559
g11
(lp560
sg13
S'com.google.common.base.GwtSerializationDependencies$OptionalDependencies'
p561
sg15
(lp562
sg17
(lp563
sg19
(lp564
sg21
I0
sba(iArchitecture
Entity
p565
(dp566
g11
(lp567
sg13
S'com.google.common.base.Joiner'
p568
sg15
(lp569
sg17
(lp570
sg19
(lp571
sg21
I0
sba(iArchitecture
Entity
p572
(dp573
g11
(lp574
sg13
S'com.google.common.base.Joiner$1'
p575
sg15
(lp576
sg17
(lp577
sg19
(lp578
sg21
I0
sba(iArchitecture
Entity
p579
(dp580
g11
(lp581
sg13
S'com.google.common.base.Joiner$2'
p582
sg15
(lp583
sg17
(lp584
sg19
(lp585
sg21
I0
sba(iArchitecture
Entity
p586
(dp587
g11
(lp588
sg13
S'com.google.common.base.Joiner$3'
p589
sg15
(lp590
sg17
(lp591
sg19
(lp592
sg21
I0
sba(iArchitecture
Entity
p593
(dp594
g11
(lp595
sg13
S'com.google.common.base.Joiner$MapJoiner'
p596
sg15
(lp597
sg17
(lp598
sg19
(lp599
sg21
I0
sba(iArchitecture
Entity
p600
(dp601
g11
(lp602
V1125
p603
asg13
S'com.google.common.base.MoreObjects'
p604
sg15
(lp605
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1125) created by **adrianshum** on 2012-08-29 at 03:06 AM_\u000a\u000a---\u000a\u000aCurrently there is no handling for arrays in helpers in Objects, e.g. toStringHelper and Object.equal.\u000a\u000aThat means, I cannot do\u000aObjects.toStringHelper(getClass())\u000a&nbsp;&nbsp;&nbsp;&nbsp;.add("foo", this.foo)\u000a&nbsp;&nbsp;&nbsp;&nbsp;.add("anArray", this.anArray)\u000a&nbsp;&nbsp;&nbsp;&nbsp;.toString();\u000a\u000a(I know I can change it to add("anArray", Arrays.toString(this.anArray)) but it looks bad)\u000a\u000aSame for Objects.equal, when I am overriding equals(), I cannot do:\u000areturn Objects.equal("foo", other.foo) \u000a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&& Objects.equals("anArray", other.anArray);\u000a\u000aI believe adding corresponding overloads should not be difficult, and it makes the API much easier to use.\u000a
p606
asg17
(lp607
(lp608
I0
aasg19
(lp609
VArray handling in Objects#toStringHelper
p610
asg21
I0
sba(iArchitecture
Entity
p611
(dp612
g11
(lp613
g603
asg13
S'com.google.common.base.MoreObjects$1'
p614
sg15
(lp615
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1125) created by **adrianshum** on 2012-08-29 at 03:06 AM_\u000a\u000a---\u000a\u000aCurrently there is no handling for arrays in helpers in Objects, e.g. toStringHelper and Object.equal.\u000a\u000aThat means, I cannot do\u000aObjects.toStringHelper(getClass())\u000a&nbsp;&nbsp;&nbsp;&nbsp;.add("foo", this.foo)\u000a&nbsp;&nbsp;&nbsp;&nbsp;.add("anArray", this.anArray)\u000a&nbsp;&nbsp;&nbsp;&nbsp;.toString();\u000a\u000a(I know I can change it to add("anArray", Arrays.toString(this.anArray)) but it looks bad)\u000a\u000aSame for Objects.equal, when I am overriding equals(), I cannot do:\u000areturn Objects.equal("foo", other.foo) \u000a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&& Objects.equals("anArray", other.anArray);\u000a\u000aI believe adding corresponding overloads should not be difficult, and it makes the API much easier to use.\u000a
p616
asg17
(lp617
g608
asg19
(lp618
g610
asg21
I0
sba(iArchitecture
Entity
p619
(dp620
g11
(lp621
g603
asg13
S'com.google.common.base.MoreObjects$ToStringHelper'
p622
sg15
(lp623
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1125) created by **adrianshum** on 2012-08-29 at 03:06 AM_\u000a\u000a---\u000a\u000aCurrently there is no handling for arrays in helpers in Objects, e.g. toStringHelper and Object.equal.\u000a\u000aThat means, I cannot do\u000aObjects.toStringHelper(getClass())\u000a&nbsp;&nbsp;&nbsp;&nbsp;.add("foo", this.foo)\u000a&nbsp;&nbsp;&nbsp;&nbsp;.add("anArray", this.anArray)\u000a&nbsp;&nbsp;&nbsp;&nbsp;.toString();\u000a\u000a(I know I can change it to add("anArray", Arrays.toString(this.anArray)) but it looks bad)\u000a\u000aSame for Objects.equal, when I am overriding equals(), I cannot do:\u000areturn Objects.equal("foo", other.foo) \u000a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&& Objects.equals("anArray", other.anArray);\u000a\u000aI believe adding corresponding overloads should not be difficult, and it makes the API much easier to use.\u000a
p624
asg17
(lp625
g608
asg19
(lp626
g610
asg21
I0
sba(iArchitecture
Entity
p627
(dp628
g11
(lp629
g603
asg13
S'com.google.common.base.MoreObjects$ToStringHelper$ValueHolder'
p630
sg15
(lp631
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1125) created by **adrianshum** on 2012-08-29 at 03:06 AM_\u000a\u000a---\u000a\u000aCurrently there is no handling for arrays in helpers in Objects, e.g. toStringHelper and Object.equal.\u000a\u000aThat means, I cannot do\u000aObjects.toStringHelper(getClass())\u000a&nbsp;&nbsp;&nbsp;&nbsp;.add("foo", this.foo)\u000a&nbsp;&nbsp;&nbsp;&nbsp;.add("anArray", this.anArray)\u000a&nbsp;&nbsp;&nbsp;&nbsp;.toString();\u000a\u000a(I know I can change it to add("anArray", Arrays.toString(this.anArray)) but it looks bad)\u000a\u000aSame for Objects.equal, when I am overriding equals(), I cannot do:\u000areturn Objects.equal("foo", other.foo) \u000a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&& Objects.equals("anArray", other.anArray);\u000a\u000aI believe adding corresponding overloads should not be difficult, and it makes the API much easier to use.\u000a
p632
asg17
(lp633
g608
asg19
(lp634
g610
asg21
I0
sba(iArchitecture
Entity
p635
(dp636
g11
(lp637
sg13
S'com.google.common.base.Objects'
p638
sg15
(lp639
sg17
(lp640
sg19
(lp641
sg21
I0
sba(iArchitecture
Entity
p642
(dp643
g11
(lp644
sg13
S'com.google.common.base.Objects$1'
p645
sg15
(lp646
sg17
(lp647
sg19
(lp648
sg21
I0
sba(iArchitecture
Entity
p649
(dp650
g11
(lp651
sg13
S'com.google.common.base.Objects$ToStringHelper'
p652
sg15
(lp653
sg17
(lp654
sg19
(lp655
sg21
I0
sba(iArchitecture
Entity
p656
(dp657
g11
(lp658
sg13
S'com.google.common.base.Objects$ToStringHelper$ValueHolder'
p659
sg15
(lp660
sg17
(lp661
sg19
(lp662
sg21
I0
sba(iArchitecture
Entity
p663
(dp664
g11
(lp665
V2037
p666
ag666
asg13
S'com.google.common.base.Optional$1'
p667
sg15
(lp668
VUncorrect hashCode() implementation at com.google.common.base.Absent and com.google.common.base.Present - for example if hashCode() of reference at Present return 0 then it hashCode() equal Absent.\u000a\u000aexample: Optional.absent() has same hash code as Optional.of(0.0) or Optional.of(0)\u000a
p669
aVUncorrect hashCode() implementation at com.google.common.base.Absent and com.google.common.base.Present - for example if hashCode() of reference at Present return 0 then it hashCode() equal Absent.\u000a\u000aexample: Optional.absent() has same hash code as Optional.of(0.0) or Optional.of(0)\u000a
p670
asg17
(lp671
(lp672
I0
aag672
asg19
(lp673
VOptional.hashCode()
p674
ag674
asg21
I0
sba(iArchitecture
Entity
p675
(dp676
g11
(lp677
g666
ag666
asg13
S'com.google.common.base.Optional$1$1'
p678
sg15
(lp679
VUncorrect hashCode() implementation at com.google.common.base.Absent and com.google.common.base.Present - for example if hashCode() of reference at Present return 0 then it hashCode() equal Absent.\u000a\u000aexample: Optional.absent() has same hash code as Optional.of(0.0) or Optional.of(0)\u000a
p680
aVUncorrect hashCode() implementation at com.google.common.base.Absent and com.google.common.base.Present - for example if hashCode() of reference at Present return 0 then it hashCode() equal Absent.\u000a\u000aexample: Optional.absent() has same hash code as Optional.of(0.0) or Optional.of(0)\u000a
p681
asg17
(lp682
g672
ag672
asg19
(lp683
g674
ag674
asg21
I0
sba(iArchitecture
Entity
p684
(dp685
g11
(lp686
sg13
S'com.google.common.base.PairwiseEquivalence'
p687
sg15
(lp688
sg17
(lp689
sg19
(lp690
sg21
I0
sba(iArchitecture
Entity
p691
(dp692
g11
(lp693
sg13
S'com.google.common.base.PairwiseEquivalence_CustomFieldSerializer'
p694
sg15
(lp695
sg17
(lp696
sg19
(lp697
sg21
I0
sba(iArchitecture
Entity
p698
(dp699
g11
(lp700
sg13
S'com.google.common.base.Platform'
p701
sg15
(lp702
sg17
(lp703
sg19
(lp704
sg21
I0
sba(iArchitecture
Entity
p705
(dp706
g11
(lp707
sg13
S'com.google.common.base.Predicate'
p708
sg15
(lp709
sg17
(lp710
sg19
(lp711
sg21
I0
sba(iArchitecture
Entity
p712
(dp713
g11
(lp714
sg13
S'com.google.common.base.Predicates'
p715
sg15
(lp716
sg17
(lp717
sg19
(lp718
sg21
I0
sba(iArchitecture
Entity
p719
(dp720
g11
(lp721
sg13
S'com.google.common.base.Predicates$1'
p722
sg15
(lp723
sg17
(lp724
sg19
(lp725
sg21
I0
sba(iArchitecture
Entity
p726
(dp727
g11
(lp728
sg13
S'com.google.common.base.Predicates$AndPredicate'
p729
sg15
(lp730
sg17
(lp731
sg19
(lp732
sg21
I0
sba(iArchitecture
Entity
p733
(dp734
g11
(lp735
sg13
S'com.google.common.base.Predicates$AssignableFromPredicate'
p736
sg15
(lp737
sg17
(lp738
sg19
(lp739
sg21
I0
sba(iArchitecture
Entity
p740
(dp741
g11
(lp742
sg13
S'com.google.common.base.Predicates$CompositionPredicate'
p743
sg15
(lp744
sg17
(lp745
sg19
(lp746
sg21
I0
sba(iArchitecture
Entity
p747
(dp748
g11
(lp749
sg13
S'com.google.common.base.Predicates$ContainsPatternFromStringPredicate'
p750
sg15
(lp751
sg17
(lp752
sg19
(lp753
sg21
I0
sba(iArchitecture
Entity
p754
(dp755
g11
(lp756
sg13
S'com.google.common.base.Predicates$ContainsPatternPredicate'
p757
sg15
(lp758
sg17
(lp759
sg19
(lp760
sg21
I0
sba(iArchitecture
Entity
p761
(dp762
g11
(lp763
sg13
S'com.google.common.base.Predicates$InPredicate'
p764
sg15
(lp765
sg17
(lp766
sg19
(lp767
sg21
I0
sba(iArchitecture
Entity
p768
(dp769
g11
(lp770
sg13
S'com.google.common.base.Predicates$InstanceOfPredicate'
p771
sg15
(lp772
sg17
(lp773
sg19
(lp774
sg21
I0
sba(iArchitecture
Entity
p775
(dp776
g11
(lp777
sg13
S'com.google.common.base.Predicates$IsEqualToPredicate'
p778
sg15
(lp779
sg17
(lp780
sg19
(lp781
sg21
I0
sba(iArchitecture
Entity
p782
(dp783
g11
(lp784
sg13
S'com.google.common.base.Predicates$NotPredicate'
p785
sg15
(lp786
sg17
(lp787
sg19
(lp788
sg21
I0
sba(iArchitecture
Entity
p789
(dp790
g11
(lp791
sg13
S'com.google.common.base.Predicates$ObjectPredicate'
p792
sg15
(lp793
sg17
(lp794
sg19
(lp795
sg21
I0
sba(iArchitecture
Entity
p796
(dp797
g11
(lp798
sg13
S'com.google.common.base.Predicates$ObjectPredicate$1'
p799
sg15
(lp800
sg17
(lp801
sg19
(lp802
sg21
I0
sba(iArchitecture
Entity
p803
(dp804
g11
(lp805
sg13
S'com.google.common.base.Predicates$ObjectPredicate$2'
p806
sg15
(lp807
sg17
(lp808
sg19
(lp809
sg21
I0
sba(iArchitecture
Entity
p810
(dp811
g11
(lp812
sg13
S'com.google.common.base.Predicates$ObjectPredicate$3'
p813
sg15
(lp814
sg17
(lp815
sg19
(lp816
sg21
I0
sba(iArchitecture
Entity
p817
(dp818
g11
(lp819
sg13
S'com.google.common.base.Predicates$ObjectPredicate$4'
p820
sg15
(lp821
sg17
(lp822
sg19
(lp823
sg21
I0
sba(iArchitecture
Entity
p824
(dp825
g11
(lp826
sg13
S'com.google.common.base.Predicates$OrPredicate'
p827
sg15
(lp828
sg17
(lp829
sg19
(lp830
sg21
I0
sba(iArchitecture
Entity
p831
(dp832
g11
(lp833
sg13
S'com.google.common.base.SmallCharMatcher'
p834
sg15
(lp835
sg17
(lp836
sg19
(lp837
sg21
I0
sba(iArchitecture
Entity
p838
(dp839
g11
(lp840
sg13
S'com.google.common.base.Splitter'
p841
sg15
(lp842
sg17
(lp843
sg19
(lp844
sg21
I0
sba(iArchitecture
Entity
p845
(dp846
g11
(lp847
sg13
S'com.google.common.base.Splitter$1'
p848
sg15
(lp849
sg17
(lp850
sg19
(lp851
sg21
I0
sba(iArchitecture
Entity
p852
(dp853
g11
(lp854
sg13
S'com.google.common.base.Splitter$1$1'
p855
sg15
(lp856
sg17
(lp857
sg19
(lp858
sg21
I0
sba(iArchitecture
Entity
p859
(dp860
g11
(lp861
sg13
S'com.google.common.base.Splitter$2'
p862
sg15
(lp863
sg17
(lp864
sg19
(lp865
sg21
I0
sba(iArchitecture
Entity
p866
(dp867
g11
(lp868
sg13
S'com.google.common.base.Splitter$2$1'
p869
sg15
(lp870
sg17
(lp871
sg19
(lp872
sg21
I0
sba(iArchitecture
Entity
p873
(dp874
g11
(lp875
sg13
S'com.google.common.base.Splitter$3'
p876
sg15
(lp877
sg17
(lp878
sg19
(lp879
sg21
I0
sba(iArchitecture
Entity
p880
(dp881
g11
(lp882
sg13
S'com.google.common.base.Splitter$3$1'
p883
sg15
(lp884
sg17
(lp885
sg19
(lp886
sg21
I0
sba(iArchitecture
Entity
p887
(dp888
g11
(lp889
sg13
S'com.google.common.base.Splitter$4'
p890
sg15
(lp891
sg17
(lp892
sg19
(lp893
sg21
I0
sba(iArchitecture
Entity
p894
(dp895
g11
(lp896
sg13
S'com.google.common.base.Splitter$4$1'
p897
sg15
(lp898
sg17
(lp899
sg19
(lp900
sg21
I0
sba(iArchitecture
Entity
p901
(dp902
g11
(lp903
sg13
S'com.google.common.base.Splitter$5'
p904
sg15
(lp905
sg17
(lp906
sg19
(lp907
sg21
I0
sba(iArchitecture
Entity
p908
(dp909
g11
(lp910
sg13
S'com.google.common.base.Splitter$MapSplitter'
p911
sg15
(lp912
sg17
(lp913
sg19
(lp914
sg21
I0
sba(iArchitecture
Entity
p915
(dp916
g11
(lp917
sg13
S'com.google.common.base.Splitter$SplittingIterator'
p918
sg15
(lp919
sg17
(lp920
sg19
(lp921
sg21
I0
sba(iArchitecture
Entity
p922
(dp923
g11
(lp924
sg13
S'com.google.common.base.Splitter$Strategy'
p925
sg15
(lp926
sg17
(lp927
sg19
(lp928
sg21
I0
sba(iArchitecture
Entity
p929
(dp930
g11
(lp931
sg13
S'com.google.common.base.StandardSystemProperty'
p932
sg15
(lp933
sg17
(lp934
sg19
(lp935
sg21
I0
sba(iArchitecture
Entity
p936
(dp937
g11
(lp938
V2039
p939
ag939
ag939
aV1567
p940
aV1312
p941
ag941
asg13
S'com.google.common.base.Stopwatch'
p942
sg15
(lp943
VHello, I was reading through the set of tests at https://github.com/google/guava/blob/master/guava-tests/test/com/google/common/base/StopwatchTest.java , and I noticed there are two tests that appear to do the same thing - testElapsed_millis() and testElapsedMillis(). Is this expected? Could one test perhaps be an old test under a different naming convention? From the history it looks like they were added independently.\u000a\u000aThe contribution guide recommends creating an issue as the first step, so I thought I would ask.\u000a\u000aGitHub suggests that both functions are only called from guava-gwt/test/com/google/common/base/StopwatchTest_gwt.java . Would it be appropriate to create a pull request to remove one of the tests? (Or of course, feel free to simply remove one yourself if the workflow is easier; I just wanted to ask)\u000a\u000aCheers!\u000a
p944
aVHello, I was reading through the set of tests at https://github.com/google/guava/blob/master/guava-tests/test/com/google/common/base/StopwatchTest.java , and I noticed there are two tests that appear to do the same thing - testElapsed_millis() and testElapsedMillis(). Is this expected? Could one test perhaps be an old test under a different naming convention? From the history it looks like they were added independently.\u000a\u000aThe contribution guide recommends creating an issue as the first step, so I thought I would ask.\u000a\u000aGitHub suggests that both functions are only called from guava-gwt/test/com/google/common/base/StopwatchTest_gwt.java . Would it be appropriate to create a pull request to remove one of the tests? (Or of course, feel free to simply remove one yourself if the workflow is easier; I just wanted to ask)\u000a\u000aCheers!\u000a
p945
aVHello, I was reading through the set of tests at https://github.com/google/guava/blob/master/guava-tests/test/com/google/common/base/StopwatchTest.java , and I noticed there are two tests that appear to do the same thing - testElapsed_millis() and testElapsedMillis(). Is this expected? Could one test perhaps be an old test under a different naming convention? From the history it looks like they were added independently.\u000a\u000aThe contribution guide recommends creating an issue as the first step, so I thought I would ask.\u000a\u000aGitHub suggests that both functions are only called from guava-gwt/test/com/google/common/base/StopwatchTest_gwt.java . Would it be appropriate to create a pull request to remove one of the tests? (Or of course, feel free to simply remove one yourself if the workflow is easier; I just wanted to ask)\u000a\u000aCheers!\u000a
p946
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p947
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1312) created by **vgal...@tennaxia.com** on 2013-02-28 at 01:05 PM_\u000a\u000a---\u000a\u000aHello,\u000a\u000aIt would be great if Stopwatch could be promoted in next release.\u000a\u000aThank you\u000a\u000avictor\u000a
p948
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1312) created by **vgal...@tennaxia.com** on 2013-02-28 at 01:05 PM_\u000a\u000a---\u000a\u000aHello,\u000a\u000aIt would be great if Stopwatch could be promoted in next release.\u000a\u000aThank you\u000a\u000avictor\u000a
p949
asg17
(lp950
(lp951
I6
aag951
ag951
a(lp952
I1
aa(lp953
I7
aag953
asg19
(lp954
VPossible duplicate tests? - testElapsed_millis() and testElapsedMillis()
p955
ag955
ag955
aVRunning tests in a non-US locale might fail
p956
aVDe-@Beta Stopwatch
p957
ag957
asg21
I0
sba(iArchitecture
Entity
p958
(dp959
g11
(lp960
g939
ag939
ag939
ag940
ag941
ag941
asg13
S'com.google.common.base.Stopwatch$1'
p961
sg15
(lp962
VHello, I was reading through the set of tests at https://github.com/google/guava/blob/master/guava-tests/test/com/google/common/base/StopwatchTest.java , and I noticed there are two tests that appear to do the same thing - testElapsed_millis() and testElapsedMillis(). Is this expected? Could one test perhaps be an old test under a different naming convention? From the history it looks like they were added independently.\u000a\u000aThe contribution guide recommends creating an issue as the first step, so I thought I would ask.\u000a\u000aGitHub suggests that both functions are only called from guava-gwt/test/com/google/common/base/StopwatchTest_gwt.java . Would it be appropriate to create a pull request to remove one of the tests? (Or of course, feel free to simply remove one yourself if the workflow is easier; I just wanted to ask)\u000a\u000aCheers!\u000a
p963
aVHello, I was reading through the set of tests at https://github.com/google/guava/blob/master/guava-tests/test/com/google/common/base/StopwatchTest.java , and I noticed there are two tests that appear to do the same thing - testElapsed_millis() and testElapsedMillis(). Is this expected? Could one test perhaps be an old test under a different naming convention? From the history it looks like they were added independently.\u000a\u000aThe contribution guide recommends creating an issue as the first step, so I thought I would ask.\u000a\u000aGitHub suggests that both functions are only called from guava-gwt/test/com/google/common/base/StopwatchTest_gwt.java . Would it be appropriate to create a pull request to remove one of the tests? (Or of course, feel free to simply remove one yourself if the workflow is easier; I just wanted to ask)\u000a\u000aCheers!\u000a
p964
aVHello, I was reading through the set of tests at https://github.com/google/guava/blob/master/guava-tests/test/com/google/common/base/StopwatchTest.java , and I noticed there are two tests that appear to do the same thing - testElapsed_millis() and testElapsedMillis(). Is this expected? Could one test perhaps be an old test under a different naming convention? From the history it looks like they were added independently.\u000a\u000aThe contribution guide recommends creating an issue as the first step, so I thought I would ask.\u000a\u000aGitHub suggests that both functions are only called from guava-gwt/test/com/google/common/base/StopwatchTest_gwt.java . Would it be appropriate to create a pull request to remove one of the tests? (Or of course, feel free to simply remove one yourself if the workflow is easier; I just wanted to ask)\u000a\u000aCheers!\u000a
p965
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p966
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1312) created by **vgal...@tennaxia.com** on 2013-02-28 at 01:05 PM_\u000a\u000a---\u000a\u000aHello,\u000a\u000aIt would be great if Stopwatch could be promoted in next release.\u000a\u000aThank you\u000a\u000avictor\u000a
p967
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1312) created by **vgal...@tennaxia.com** on 2013-02-28 at 01:05 PM_\u000a\u000a---\u000a\u000aHello,\u000a\u000aIt would be great if Stopwatch could be promoted in next release.\u000a\u000aThank you\u000a\u000avictor\u000a
p968
asg17
(lp969
g951
ag951
ag951
ag952
ag953
ag953
asg19
(lp970
g955
ag955
ag955
ag956
ag957
ag957
asg21
I0
sba(iArchitecture
Entity
p971
(dp972
g11
(lp973
sg13
S'com.google.common.base.Suppliers'
p974
sg15
(lp975
sg17
(lp976
sg19
(lp977
sg21
I0
sba(iArchitecture
Entity
p978
(dp979
g11
(lp980
sg13
S'com.google.common.base.Suppliers$ExpiringMemoizingSupplier'
p981
sg15
(lp982
sg17
(lp983
sg19
(lp984
sg21
I0
sba(iArchitecture
Entity
p985
(dp986
g11
(lp987
sg13
S'com.google.common.base.Suppliers$MemoizingSupplier'
p988
sg15
(lp989
sg17
(lp990
sg19
(lp991
sg21
I0
sba(iArchitecture
Entity
p992
(dp993
g11
(lp994
sg13
S'com.google.common.base.Suppliers$SupplierComposition'
p995
sg15
(lp996
sg17
(lp997
sg19
(lp998
sg21
I0
sba(iArchitecture
Entity
p999
(dp1000
g11
(lp1001
sg13
S'com.google.common.base.Suppliers$SupplierFunction'
p1002
sg15
(lp1003
sg17
(lp1004
sg19
(lp1005
sg21
I0
sba(iArchitecture
Entity
p1006
(dp1007
g11
(lp1008
sg13
S'com.google.common.base.Suppliers$SupplierFunctionImpl'
p1009
sg15
(lp1010
sg17
(lp1011
sg19
(lp1012
sg21
I0
sba(iArchitecture
Entity
p1013
(dp1014
g11
(lp1015
sg13
S'com.google.common.base.Suppliers$SupplierOfInstance'
p1016
sg15
(lp1017
sg17
(lp1018
sg19
(lp1019
sg21
I0
sba(iArchitecture
Entity
p1020
(dp1021
g11
(lp1022
sg13
S'com.google.common.base.Suppliers$ThreadSafeSupplier'
p1023
sg15
(lp1024
sg17
(lp1025
sg19
(lp1026
sg21
I0
sba(iArchitecture
Entity
p1027
(dp1028
g11
(lp1029
sg13
S'com.google.common.base.Ticker'
p1030
sg15
(lp1031
sg17
(lp1032
sg19
(lp1033
sg21
I0
sba(iArchitecture
Entity
p1034
(dp1035
g11
(lp1036
sg13
S'com.google.common.base.Ticker$1'
p1037
sg15
(lp1038
sg17
(lp1039
sg19
(lp1040
sg21
I0
sba(iArchitecture
Entity
p1041
(dp1042
g11
(lp1043
sg13
S'com.google.common.base.Verify'
p1044
sg15
(lp1045
sg17
(lp1046
sg19
(lp1047
sg21
I0
sba(iArchitecture
Entity
p1048
(dp1049
g11
(lp1050
sg13
S'com.google.common.base.VerifyException'
p1051
sg15
(lp1052
sg17
(lp1053
sg19
(lp1054
sg21
I0
sbasS'classes'
p1055
(lp1056
g14
ag25
ag32
ag39
ag46
ag53
ag60
ag67
ag74
ag81
ag88
ag95
ag103
ag113
ag121
ag129
ag137
ag145
ag153
ag161
ag169
ag177
ag185
ag193
ag201
ag209
ag217
ag225
ag233
ag241
ag249
ag257
ag265
ag273
ag281
ag289
ag297
ag305
ag313
ag321
ag329
ag337
ag345
ag352
ag359
ag367
ag375
ag383
ag391
ag399
ag407
ag414
ag421
ag428
ag435
ag442
ag449
ag456
ag463
ag470
ag477
ag484
ag491
ag498
ag505
ag512
ag519
ag526
ag533
ag540
ag547
ag554
ag561
ag568
ag575
ag582
ag589
ag596
ag604
ag614
ag622
ag630
ag638
ag645
ag652
ag659
ag667
ag678
ag687
ag694
ag701
ag708
ag715
ag722
ag729
ag736
ag743
ag750
ag757
ag764
ag771
ag778
ag785
ag792
ag799
ag806
ag813
ag820
ag827
ag834
ag841
ag848
ag855
ag862
ag869
ag876
ag883
ag890
ag897
ag904
ag911
ag918
ag925
ag932
ag942
ag961
ag974
ag981
ag988
ag995
ag1002
ag1009
ag1016
ag1023
ag1030
ag1037
ag1044
ag1051
asg21
I0
sS'label'
p1057
S'com.google.common.base.ss'
p1058
sba(iArchitecture
Cluster
p1059
(dp1060
g7
(lp1061
(iArchitecture
Entity
p1062
(dp1063
g11
(lp1064
sg13
S'com.google.common.base.Preconditions'
p1065
sg15
(lp1066
sg17
(lp1067
sg19
(lp1068
sg21
I0
sba(iArchitecture
Entity
p1069
(dp1070
g11
(lp1071
sg13
S'com.google.common.base.Utf8'
p1072
sg15
(lp1073
sg17
(lp1074
sg19
(lp1075
sg21
I0
sba(iArchitecture
Entity
p1076
(dp1077
g11
(lp1078
sg13
S'com.google.common.cache.AbstractCache'
p1079
sg15
(lp1080
sg17
(lp1081
sg19
(lp1082
sg21
I0
sba(iArchitecture
Entity
p1083
(dp1084
g11
(lp1085
sg13
S'com.google.common.cache.AbstractCache$SimpleStatsCounter'
p1086
sg15
(lp1087
sg17
(lp1088
sg19
(lp1089
sg21
I0
sba(iArchitecture
Entity
p1090
(dp1091
g11
(lp1092
sg13
S'com.google.common.cache.AbstractCache$StatsCounter'
p1093
sg15
(lp1094
sg17
(lp1095
sg19
(lp1096
sg21
I0
sba(iArchitecture
Entity
p1097
(dp1098
g11
(lp1099
g102
ag102
aV2178
p1100
ag940
aV2101
p1101
asg13
S'com.google.common.cache.Cache'
p1102
sg15
(lp1103
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p1104
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p1105
aVAs a novice of using Cache I think its statistic activation should be documented in the API of stats().\u000a\u000aFirst: recordStats() is to be isssued.\u000aSecond: stats() can not be instantiated because it is a factory for a final statistic.\u000a
p1106
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1107
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1108
asg17
(lp1109
g107
ag107
a(lp1110
I2
aag952
a(lp1111
I1
aasg19
(lp1112
g109
ag109
aVCache.stats usage should be documented better
p1113
ag956
aVWrong RemovalCause published on cache.invaldateAll()
p1114
asg21
I0
sba(iArchitecture
Entity
p1115
(dp1116
g11
(lp1117
g940
asg13
S'com.google.common.cache.CacheBuilder'
p1118
sg15
(lp1119
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1120
asg17
(lp1121
g952
asg19
(lp1122
g956
asg21
I0
sba(iArchitecture
Entity
p1123
(dp1124
g11
(lp1125
g940
asg13
S'com.google.common.cache.CacheBuilder$1'
p1126
sg15
(lp1127
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1128
asg17
(lp1129
g952
asg19
(lp1130
g956
asg21
I0
sba(iArchitecture
Entity
p1131
(dp1132
g11
(lp1133
g940
asg13
S'com.google.common.cache.CacheBuilder$2'
p1134
sg15
(lp1135
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1136
asg17
(lp1137
g952
asg19
(lp1138
g956
asg21
I0
sba(iArchitecture
Entity
p1139
(dp1140
g11
(lp1141
g940
asg13
S'com.google.common.cache.CacheBuilder$3'
p1142
sg15
(lp1143
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1144
asg17
(lp1145
g952
asg19
(lp1146
g956
asg21
I0
sba(iArchitecture
Entity
p1147
(dp1148
g11
(lp1149
g940
asg13
S'com.google.common.cache.CacheBuilder$NullListener'
p1150
sg15
(lp1151
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1152
asg17
(lp1153
g952
asg19
(lp1154
g956
asg21
I0
sba(iArchitecture
Entity
p1155
(dp1156
g11
(lp1157
g940
asg13
S'com.google.common.cache.CacheBuilder$OneWeigher'
p1158
sg15
(lp1159
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1160
asg17
(lp1161
g952
asg19
(lp1162
g956
asg21
I0
sba(iArchitecture
Entity
p1163
(dp1164
g11
(lp1165
g940
asg13
S'com.google.common.cache.CacheBuilderSpec'
p1166
sg15
(lp1167
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1168
asg17
(lp1169
g952
asg19
(lp1170
g956
asg21
I0
sba(iArchitecture
Entity
p1171
(dp1172
g11
(lp1173
g940
asg13
S'com.google.common.cache.CacheBuilderSpec$1'
p1174
sg15
(lp1175
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1176
asg17
(lp1177
g952
asg19
(lp1178
g956
asg21
I0
sba(iArchitecture
Entity
p1179
(dp1180
g11
(lp1181
g940
asg13
S'com.google.common.cache.CacheBuilderSpec$AccessDurationParser'
p1182
sg15
(lp1183
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1184
asg17
(lp1185
g952
asg19
(lp1186
g956
asg21
I0
sba(iArchitecture
Entity
p1187
(dp1188
g11
(lp1189
g940
asg13
S'com.google.common.cache.CacheBuilderSpec$ConcurrencyLevelParser'
p1190
sg15
(lp1191
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1192
asg17
(lp1193
g952
asg19
(lp1194
g956
asg21
I0
sba(iArchitecture
Entity
p1195
(dp1196
g11
(lp1197
g940
asg13
S'com.google.common.cache.CacheBuilderSpec$DurationParser'
p1198
sg15
(lp1199
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1200
asg17
(lp1201
g952
asg19
(lp1202
g956
asg21
I0
sba(iArchitecture
Entity
p1203
(dp1204
g11
(lp1205
g940
asg13
S'com.google.common.cache.CacheBuilderSpec$InitialCapacityParser'
p1206
sg15
(lp1207
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1208
asg17
(lp1209
g952
asg19
(lp1210
g956
asg21
I0
sba(iArchitecture
Entity
p1211
(dp1212
g11
(lp1213
g940
asg13
S'com.google.common.cache.CacheBuilderSpec$IntegerParser'
p1214
sg15
(lp1215
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1216
asg17
(lp1217
g952
asg19
(lp1218
g956
asg21
I0
sba(iArchitecture
Entity
p1219
(dp1220
g11
(lp1221
g940
asg13
S'com.google.common.cache.CacheBuilderSpec$KeyStrengthParser'
p1222
sg15
(lp1223
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1224
asg17
(lp1225
g952
asg19
(lp1226
g956
asg21
I0
sba(iArchitecture
Entity
p1227
(dp1228
g11
(lp1229
g940
asg13
S'com.google.common.cache.CacheBuilderSpec$LongParser'
p1230
sg15
(lp1231
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1232
asg17
(lp1233
g952
asg19
(lp1234
g956
asg21
I0
sba(iArchitecture
Entity
p1235
(dp1236
g11
(lp1237
g940
asg13
S'com.google.common.cache.CacheBuilderSpec$MaximumSizeParser'
p1238
sg15
(lp1239
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1240
asg17
(lp1241
g952
asg19
(lp1242
g956
asg21
I0
sba(iArchitecture
Entity
p1243
(dp1244
g11
(lp1245
g940
asg13
S'com.google.common.cache.CacheBuilderSpec$MaximumWeightParser'
p1246
sg15
(lp1247
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1248
asg17
(lp1249
g952
asg19
(lp1250
g956
asg21
I0
sba(iArchitecture
Entity
p1251
(dp1252
g11
(lp1253
g940
asg13
S'com.google.common.cache.CacheBuilderSpec$RecordStatsParser'
p1254
sg15
(lp1255
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1256
asg17
(lp1257
g952
asg19
(lp1258
g956
asg21
I0
sba(iArchitecture
Entity
p1259
(dp1260
g11
(lp1261
g940
asg13
S'com.google.common.cache.CacheBuilderSpec$RefreshDurationParser'
p1262
sg15
(lp1263
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1264
asg17
(lp1265
g952
asg19
(lp1266
g956
asg21
I0
sba(iArchitecture
Entity
p1267
(dp1268
g11
(lp1269
g940
asg13
S'com.google.common.cache.CacheBuilderSpec$ValueParser'
p1270
sg15
(lp1271
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1272
asg17
(lp1273
g952
asg19
(lp1274
g956
asg21
I0
sba(iArchitecture
Entity
p1275
(dp1276
g11
(lp1277
g940
asg13
S'com.google.common.cache.CacheBuilderSpec$ValueStrengthParser'
p1278
sg15
(lp1279
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1280
asg17
(lp1281
g952
asg19
(lp1282
g956
asg21
I0
sba(iArchitecture
Entity
p1283
(dp1284
g11
(lp1285
g940
asg13
S'com.google.common.cache.CacheBuilderSpec$WriteDurationParser'
p1286
sg15
(lp1287
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p1288
asg17
(lp1289
g952
asg19
(lp1290
g956
asg21
I0
sba(iArchitecture
Entity
p1291
(dp1292
g11
(lp1293
sg13
S'com.google.common.cache.CacheLoader'
p1294
sg15
(lp1295
sg17
(lp1296
sg19
(lp1297
sg21
I0
sba(iArchitecture
Entity
p1298
(dp1299
g11
(lp1300
sg13
S'com.google.common.cache.CacheLoader$1'
p1301
sg15
(lp1302
sg17
(lp1303
sg19
(lp1304
sg21
I0
sba(iArchitecture
Entity
p1305
(dp1306
g11
(lp1307
sg13
S'com.google.common.cache.CacheLoader$1$1'
p1308
sg15
(lp1309
sg17
(lp1310
sg19
(lp1311
sg21
I0
sba(iArchitecture
Entity
p1312
(dp1313
g11
(lp1314
sg13
S'com.google.common.cache.CacheLoader$FunctionToCacheLoader'
p1315
sg15
(lp1316
sg17
(lp1317
sg19
(lp1318
sg21
I0
sba(iArchitecture
Entity
p1319
(dp1320
g11
(lp1321
sg13
S'com.google.common.cache.CacheLoader$InvalidCacheLoadException'
p1322
sg15
(lp1323
sg17
(lp1324
sg19
(lp1325
sg21
I0
sba(iArchitecture
Entity
p1326
(dp1327
g11
(lp1328
sg13
S'com.google.common.cache.CacheLoader$SupplierToCacheLoader'
p1329
sg15
(lp1330
sg17
(lp1331
sg19
(lp1332
sg21
I0
sba(iArchitecture
Entity
p1333
(dp1334
g11
(lp1335
sg13
S'com.google.common.cache.CacheLoader$UnsupportedLoadingOperationException'
p1336
sg15
(lp1337
sg17
(lp1338
sg19
(lp1339
sg21
I0
sba(iArchitecture
Entity
p1340
(dp1341
g11
(lp1342
sg13
S'com.google.common.cache.CacheStats'
p1343
sg15
(lp1344
sg17
(lp1345
sg19
(lp1346
sg21
I0
sba(iArchitecture
Entity
p1347
(dp1348
g11
(lp1349
sg13
S'com.google.common.cache.ForwardingCache'
p1350
sg15
(lp1351
sg17
(lp1352
sg19
(lp1353
sg21
I0
sba(iArchitecture
Entity
p1354
(dp1355
g11
(lp1356
sg13
S'com.google.common.cache.ForwardingCache$SimpleForwardingCache'
p1357
sg15
(lp1358
sg17
(lp1359
sg19
(lp1360
sg21
I0
sba(iArchitecture
Entity
p1361
(dp1362
g11
(lp1363
sg13
S'com.google.common.cache.ForwardingLoadingCache'
p1364
sg15
(lp1365
sg17
(lp1366
sg19
(lp1367
sg21
I0
sba(iArchitecture
Entity
p1368
(dp1369
g11
(lp1370
sg13
S'com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache'
p1371
sg15
(lp1372
sg17
(lp1373
sg19
(lp1374
sg21
I0
sba(iArchitecture
Entity
p1375
(dp1376
g11
(lp1377
sg13
S'com.google.common.cache.LoadingCache'
p1378
sg15
(lp1379
sg17
(lp1380
sg19
(lp1381
sg21
I0
sba(iArchitecture
Entity
p1382
(dp1383
g11
(lp1384
V2108
p1385
ag1101
asg13
S'com.google.common.cache.LocalCache'
p1386
sg15
(lp1387
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1388
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1389
asg17
(lp1390
(lp1391
I1
aag1111
asg19
(lp1392
VCache.asMap().size() may return a negative value
p1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1394
(dp1395
g11
(lp1396
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$1'
p1397
sg15
(lp1398
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1399
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1400
asg17
(lp1401
g1391
ag1111
asg19
(lp1402
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1403
(dp1404
g11
(lp1405
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$2'
p1406
sg15
(lp1407
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1408
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1409
asg17
(lp1410
g1391
ag1111
asg19
(lp1411
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1412
(dp1413
g11
(lp1414
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$AbstractCacheSet'
p1415
sg15
(lp1416
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1417
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1418
asg17
(lp1419
g1391
ag1111
asg19
(lp1420
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1421
(dp1422
g11
(lp1423
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$AbstractReferenceEntry'
p1424
sg15
(lp1425
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1426
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1427
asg17
(lp1428
g1391
ag1111
asg19
(lp1429
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1430
(dp1431
g11
(lp1432
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$AccessQueue'
p1433
sg15
(lp1434
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1435
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1436
asg17
(lp1437
g1391
ag1111
asg19
(lp1438
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1439
(dp1440
g11
(lp1441
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$AccessQueue$1'
p1442
sg15
(lp1443
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1444
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1445
asg17
(lp1446
g1391
ag1111
asg19
(lp1447
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1448
(dp1449
g11
(lp1450
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$AccessQueue$2'
p1451
sg15
(lp1452
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1453
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1454
asg17
(lp1455
g1391
ag1111
asg19
(lp1456
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1457
(dp1458
g11
(lp1459
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$EntryFactory'
p1460
sg15
(lp1461
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1462
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1463
asg17
(lp1464
g1391
ag1111
asg19
(lp1465
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1466
(dp1467
g11
(lp1468
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$EntryFactory$1'
p1469
sg15
(lp1470
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1471
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1472
asg17
(lp1473
g1391
ag1111
asg19
(lp1474
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1475
(dp1476
g11
(lp1477
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$EntryFactory$2'
p1478
sg15
(lp1479
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1480
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1481
asg17
(lp1482
g1391
ag1111
asg19
(lp1483
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1484
(dp1485
g11
(lp1486
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$EntryFactory$3'
p1487
sg15
(lp1488
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1489
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1490
asg17
(lp1491
g1391
ag1111
asg19
(lp1492
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1493
(dp1494
g11
(lp1495
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$EntryFactory$4'
p1496
sg15
(lp1497
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1498
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1499
asg17
(lp1500
g1391
ag1111
asg19
(lp1501
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1502
(dp1503
g11
(lp1504
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$EntryFactory$5'
p1505
sg15
(lp1506
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1507
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1508
asg17
(lp1509
g1391
ag1111
asg19
(lp1510
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1511
(dp1512
g11
(lp1513
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$EntryFactory$6'
p1514
sg15
(lp1515
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1516
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1517
asg17
(lp1518
g1391
ag1111
asg19
(lp1519
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1520
(dp1521
g11
(lp1522
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$EntryFactory$7'
p1523
sg15
(lp1524
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1525
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1526
asg17
(lp1527
g1391
ag1111
asg19
(lp1528
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1529
(dp1530
g11
(lp1531
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$EntryFactory$8'
p1532
sg15
(lp1533
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1534
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1535
asg17
(lp1536
g1391
ag1111
asg19
(lp1537
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1538
(dp1539
g11
(lp1540
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$EntryIterator'
p1541
sg15
(lp1542
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1543
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1544
asg17
(lp1545
g1391
ag1111
asg19
(lp1546
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1547
(dp1548
g11
(lp1549
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$EntrySet'
p1550
sg15
(lp1551
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1552
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1553
asg17
(lp1554
g1391
ag1111
asg19
(lp1555
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1556
(dp1557
g11
(lp1558
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$HashIterator'
p1559
sg15
(lp1560
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1561
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1562
asg17
(lp1563
g1391
ag1111
asg19
(lp1564
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1565
(dp1566
g11
(lp1567
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$KeyIterator'
p1568
sg15
(lp1569
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1570
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1571
asg17
(lp1572
g1391
ag1111
asg19
(lp1573
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1574
(dp1575
g11
(lp1576
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$KeySet'
p1577
sg15
(lp1578
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1579
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1580
asg17
(lp1581
g1391
ag1111
asg19
(lp1582
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1583
(dp1584
g11
(lp1585
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$LoadingSerializationProxy'
p1586
sg15
(lp1587
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1588
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1589
asg17
(lp1590
g1391
ag1111
asg19
(lp1591
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1592
(dp1593
g11
(lp1594
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$LoadingValueReference'
p1595
sg15
(lp1596
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1597
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1598
asg17
(lp1599
g1391
ag1111
asg19
(lp1600
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1601
(dp1602
g11
(lp1603
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$LoadingValueReference$1'
p1604
sg15
(lp1605
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1606
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1607
asg17
(lp1608
g1391
ag1111
asg19
(lp1609
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1610
(dp1611
g11
(lp1612
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$LocalLoadingCache'
p1613
sg15
(lp1614
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1615
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1616
asg17
(lp1617
g1391
ag1111
asg19
(lp1618
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1619
(dp1620
g11
(lp1621
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$LocalManualCache'
p1622
sg15
(lp1623
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1624
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1625
asg17
(lp1626
g1391
ag1111
asg19
(lp1627
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1628
(dp1629
g11
(lp1630
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$LocalManualCache$1'
p1631
sg15
(lp1632
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1633
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1634
asg17
(lp1635
g1391
ag1111
asg19
(lp1636
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1637
(dp1638
g11
(lp1639
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$ManualSerializationProxy'
p1640
sg15
(lp1641
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1642
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1643
asg17
(lp1644
g1391
ag1111
asg19
(lp1645
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1646
(dp1647
g11
(lp1648
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$NullEntry'
p1649
sg15
(lp1650
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1651
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1652
asg17
(lp1653
g1391
ag1111
asg19
(lp1654
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1655
(dp1656
g11
(lp1657
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$ReferenceEntry'
p1658
sg15
(lp1659
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1660
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1661
asg17
(lp1662
g1391
ag1111
asg19
(lp1663
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1664
(dp1665
g11
(lp1666
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$Segment'
p1667
sg15
(lp1668
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1669
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1670
asg17
(lp1671
g1391
ag1111
asg19
(lp1672
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1673
(dp1674
g11
(lp1675
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$Segment$1'
p1676
sg15
(lp1677
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1678
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1679
asg17
(lp1680
g1391
ag1111
asg19
(lp1681
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1682
(dp1683
g11
(lp1684
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$SoftValueReference'
p1685
sg15
(lp1686
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1687
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1688
asg17
(lp1689
g1391
ag1111
asg19
(lp1690
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1691
(dp1692
g11
(lp1693
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$Strength'
p1694
sg15
(lp1695
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1696
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1697
asg17
(lp1698
g1391
ag1111
asg19
(lp1699
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1700
(dp1701
g11
(lp1702
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$Strength$1'
p1703
sg15
(lp1704
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1705
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1706
asg17
(lp1707
g1391
ag1111
asg19
(lp1708
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1709
(dp1710
g11
(lp1711
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$Strength$2'
p1712
sg15
(lp1713
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1714
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1715
asg17
(lp1716
g1391
ag1111
asg19
(lp1717
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1718
(dp1719
g11
(lp1720
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$Strength$3'
p1721
sg15
(lp1722
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1723
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1724
asg17
(lp1725
g1391
ag1111
asg19
(lp1726
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1727
(dp1728
g11
(lp1729
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$StrongAccessEntry'
p1730
sg15
(lp1731
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1732
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1733
asg17
(lp1734
g1391
ag1111
asg19
(lp1735
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1736
(dp1737
g11
(lp1738
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$StrongAccessWriteEntry'
p1739
sg15
(lp1740
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1741
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1742
asg17
(lp1743
g1391
ag1111
asg19
(lp1744
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1745
(dp1746
g11
(lp1747
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$StrongEntry'
p1748
sg15
(lp1749
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1750
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1751
asg17
(lp1752
g1391
ag1111
asg19
(lp1753
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1754
(dp1755
g11
(lp1756
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$StrongValueReference'
p1757
sg15
(lp1758
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1759
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1760
asg17
(lp1761
g1391
ag1111
asg19
(lp1762
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1763
(dp1764
g11
(lp1765
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$StrongWriteEntry'
p1766
sg15
(lp1767
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1768
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1769
asg17
(lp1770
g1391
ag1111
asg19
(lp1771
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1772
(dp1773
g11
(lp1774
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$ValueIterator'
p1775
sg15
(lp1776
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1777
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1778
asg17
(lp1779
g1391
ag1111
asg19
(lp1780
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1781
(dp1782
g11
(lp1783
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$ValueReference'
p1784
sg15
(lp1785
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1786
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1787
asg17
(lp1788
g1391
ag1111
asg19
(lp1789
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1790
(dp1791
g11
(lp1792
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$Values'
p1793
sg15
(lp1794
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1795
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1796
asg17
(lp1797
g1391
ag1111
asg19
(lp1798
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1799
(dp1800
g11
(lp1801
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$WeakAccessEntry'
p1802
sg15
(lp1803
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1804
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1805
asg17
(lp1806
g1391
ag1111
asg19
(lp1807
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1808
(dp1809
g11
(lp1810
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$WeakAccessWriteEntry'
p1811
sg15
(lp1812
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1813
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1814
asg17
(lp1815
g1391
ag1111
asg19
(lp1816
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1817
(dp1818
g11
(lp1819
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$WeakEntry'
p1820
sg15
(lp1821
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1822
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1823
asg17
(lp1824
g1391
ag1111
asg19
(lp1825
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1826
(dp1827
g11
(lp1828
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$WeakValueReference'
p1829
sg15
(lp1830
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1831
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1832
asg17
(lp1833
g1391
ag1111
asg19
(lp1834
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1835
(dp1836
g11
(lp1837
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$WeakWriteEntry'
p1838
sg15
(lp1839
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1840
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1841
asg17
(lp1842
g1391
ag1111
asg19
(lp1843
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1844
(dp1845
g11
(lp1846
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$WeightedSoftValueReference'
p1847
sg15
(lp1848
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1849
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1850
asg17
(lp1851
g1391
ag1111
asg19
(lp1852
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1853
(dp1854
g11
(lp1855
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$WeightedStrongValueReference'
p1856
sg15
(lp1857
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1858
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1859
asg17
(lp1860
g1391
ag1111
asg19
(lp1861
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1862
(dp1863
g11
(lp1864
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$WeightedWeakValueReference'
p1865
sg15
(lp1866
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1867
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1868
asg17
(lp1869
g1391
ag1111
asg19
(lp1870
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1871
(dp1872
g11
(lp1873
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$WriteQueue'
p1874
sg15
(lp1875
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1876
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1877
asg17
(lp1878
g1391
ag1111
asg19
(lp1879
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1880
(dp1881
g11
(lp1882
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$WriteQueue$1'
p1883
sg15
(lp1884
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1885
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1886
asg17
(lp1887
g1391
ag1111
asg19
(lp1888
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1889
(dp1890
g11
(lp1891
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$WriteQueue$2'
p1892
sg15
(lp1893
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1894
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1895
asg17
(lp1896
g1391
ag1111
asg19
(lp1897
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1898
(dp1899
g11
(lp1900
g1385
ag1101
asg13
S'com.google.common.cache.LocalCache$WriteThroughEntry'
p1901
sg15
(lp1902
VMy multithreaded thrashing tests failed with Guava due to `size()` returning a negative value. The size is used for verifying that the `toArray()` methods are threadsafe (this was a common bug until JDK6 rewrote AbstractCollection's to be tolerant to races). The lines in question are,\u000a\u000a``` java\u000a(cache, key) -> cache.asMap().keySet().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().values().toArray(new Object[cache.asMap().size()]),\u000a(cache, key) -> cache.asMap().entrySet().toArray(new Entry[cache.asMap().size()]),\u000a```\u000a\u000aThis results in a `NegativeArraySizeException` unless worked around using `Math.max(0, cache.asMap().size())` which is now done in the guava fixture. I'm not sure why this occurs, and only happened after tweaking some JVM args. Regardless this failure was reproducible and is simple to fix.\u000a\u000a```\u000ajava.lang.NegativeArraySizeException\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest.lambda$new$280(MultiThreadedTest.java:142)\u000aat com.github.benmanes.caffeine.cache.MultiThreadedTest$$Lambda$29/584234975.accept(Unknown Source)\u000aat com.github.benmanes.caffeine.testing.Threads$Thrasher.run(Threads.java:149)\u000aat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness.lambda$timeTasks$344(ConcurrentTestHarness.java:100)\u000aat com.github.benmanes.caffeine.testing.ConcurrentTestHarness$$Lambda$61/1027825150.run(Unknown Source)\u000aat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\u000aat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\u000aat java.lang.Thread.run(Thread.java:745)\u000a```\u000a
p1903
aVWhen the cache is being cleared, either through `Cache.invalidateAll()` or `asMap().clear()`, the removal cause is always `EXPLICIT`. However the map may contain expired or GC'd entries that would be removed on the next maintenance cycle. The removal cause should indicate the actual state of the entry, not merely the action that triggered the eventual removal.\u000a\u000aDue to weak and soft references the key or value may be null. A listener should only expect to receive a null key or value if the cause is `COLLECTED`, as indicated by `RemovalNotification`:\u000a\u000a> The key and/or value may be null if they were already garbage collected.\u000a\u000aTherefore a listener might decide to inspect the properties without a null guard, leading to an NPE.\u000a\u000a``` java\u000a@Test\u000apublic void clear_expireAfterAccess() {\u000a  FakeTicker ticker = new FakeTicker();\u000a  RemovalListener<Integer, Integer> listener = Mockito.mock(RemovalListener.class);\u000a  ArgumentCaptor<RemovalNotification<Integer, Integer>> captor =\u000a      ArgumentCaptor.forClass(RemovalNotification.class);\u000a  Cache<Integer, Integer> cache = CacheBuilder.newBuilder()\u000a      .expireAfterAccess(1, TimeUnit.MINUTES)\u000a      .removalListener(listener)\u000a      .ticker(ticker)\u000a      .build();\u000a  cache.put(1, 1);\u000a  ticker.advance(10, TimeUnit.MINUTES);\u000a  cache.invalidateAll();\u000a\u000a  verify(listener).onRemoval(captor.capture());\u000a  assertThat(captor.getValue().getCause(), is(RemovalCause.EXPIRED));\u000a}\u000a```\u000a\u000aThe fix is to change `LocalCache$Segment#clear()` to inspect the key, value, and expiration status when determining the cause. \u000a\u000aUnfortunately this race condition is more widespread due to `enqueueNotification` not being tolerant to a garbage collection nulling out the key/value. Prior to constructing the notification, the method must take a strong reference to the key and value, check if either was collected, and if so publish a `COLLECTED` instead of the caller's cause.\u000a
p1904
asg17
(lp1905
g1391
ag1111
asg19
(lp1906
g1393
ag1114
asg21
I0
sba(iArchitecture
Entity
p1907
(dp1908
g11
(lp1909
sg13
S'com.google.common.cache.LongAddable'
p1910
sg15
(lp1911
sg17
(lp1912
sg19
(lp1913
sg21
I0
sba(iArchitecture
Entity
p1914
(dp1915
g11
(lp1916
sg13
S'com.google.common.cache.LongAddables'
p1917
sg15
(lp1918
sg17
(lp1919
sg19
(lp1920
sg21
I0
sba(iArchitecture
Entity
p1921
(dp1922
g11
(lp1923
sg13
S'com.google.common.cache.LongAddables$1'
p1924
sg15
(lp1925
sg17
(lp1926
sg19
(lp1927
sg21
I0
sba(iArchitecture
Entity
p1928
(dp1929
g11
(lp1930
sg13
S'com.google.common.cache.LongAddables$2'
p1931
sg15
(lp1932
sg17
(lp1933
sg19
(lp1934
sg21
I0
sba(iArchitecture
Entity
p1935
(dp1936
g11
(lp1937
sg13
S'com.google.common.cache.LongAddables$PureJavaLongAddable'
p1938
sg15
(lp1939
sg17
(lp1940
sg19
(lp1941
sg21
I0
sba(iArchitecture
Entity
p1942
(dp1943
g11
(lp1944
sg13
S'com.google.common.cache.LongAdder'
p1945
sg15
(lp1946
sg17
(lp1947
sg19
(lp1948
sg21
I0
sba(iArchitecture
Entity
p1949
(dp1950
g11
(lp1951
sg13
S'com.google.common.cache.RemovalCause'
p1952
sg15
(lp1953
sg17
(lp1954
sg19
(lp1955
sg21
I0
sba(iArchitecture
Entity
p1956
(dp1957
g11
(lp1958
sg13
S'com.google.common.cache.RemovalCause$1'
p1959
sg15
(lp1960
sg17
(lp1961
sg19
(lp1962
sg21
I0
sba(iArchitecture
Entity
p1963
(dp1964
g11
(lp1965
sg13
S'com.google.common.cache.RemovalCause$2'
p1966
sg15
(lp1967
sg17
(lp1968
sg19
(lp1969
sg21
I0
sba(iArchitecture
Entity
p1970
(dp1971
g11
(lp1972
sg13
S'com.google.common.cache.RemovalCause$3'
p1973
sg15
(lp1974
sg17
(lp1975
sg19
(lp1976
sg21
I0
sba(iArchitecture
Entity
p1977
(dp1978
g11
(lp1979
sg13
S'com.google.common.cache.RemovalCause$4'
p1980
sg15
(lp1981
sg17
(lp1982
sg19
(lp1983
sg21
I0
sba(iArchitecture
Entity
p1984
(dp1985
g11
(lp1986
sg13
S'com.google.common.cache.RemovalCause$5'
p1987
sg15
(lp1988
sg17
(lp1989
sg19
(lp1990
sg21
I0
sba(iArchitecture
Entity
p1991
(dp1992
g11
(lp1993
sg13
S'com.google.common.cache.RemovalListener'
p1994
sg15
(lp1995
sg17
(lp1996
sg19
(lp1997
sg21
I0
sba(iArchitecture
Entity
p1998
(dp1999
g11
(lp2000
sg13
S'com.google.common.cache.RemovalListeners'
p2001
sg15
(lp2002
sg17
(lp2003
sg19
(lp2004
sg21
I0
sba(iArchitecture
Entity
p2005
(dp2006
g11
(lp2007
sg13
S'com.google.common.cache.RemovalListeners$1'
p2008
sg15
(lp2009
sg17
(lp2010
sg19
(lp2011
sg21
I0
sba(iArchitecture
Entity
p2012
(dp2013
g11
(lp2014
sg13
S'com.google.common.cache.RemovalListeners$1$1'
p2015
sg15
(lp2016
sg17
(lp2017
sg19
(lp2018
sg21
I0
sba(iArchitecture
Entity
p2019
(dp2020
g11
(lp2021
sg13
S'com.google.common.cache.RemovalNotification'
p2022
sg15
(lp2023
sg17
(lp2024
sg19
(lp2025
sg21
I0
sba(iArchitecture
Entity
p2026
(dp2027
g11
(lp2028
sg13
S'com.google.common.cache.Striped64'
p2029
sg15
(lp2030
sg17
(lp2031
sg19
(lp2032
sg21
I0
sba(iArchitecture
Entity
p2033
(dp2034
g11
(lp2035
sg13
S'com.google.common.cache.Striped64$1'
p2036
sg15
(lp2037
sg17
(lp2038
sg19
(lp2039
sg21
I0
sba(iArchitecture
Entity
p2040
(dp2041
g11
(lp2042
sg13
S'com.google.common.cache.Striped64$Cell'
p2043
sg15
(lp2044
sg17
(lp2045
sg19
(lp2046
sg21
I0
sba(iArchitecture
Entity
p2047
(dp2048
g11
(lp2049
sg13
S'com.google.common.cache.Weigher'
p2050
sg15
(lp2051
sg17
(lp2052
sg19
(lp2053
sg21
I0
sba(iArchitecture
Entity
p2054
(dp2055
g11
(lp2056
sg13
S'com.google.common.collect.EvictingQueue'
p2057
sg15
(lp2058
sg17
(lp2059
sg19
(lp2060
sg21
I0
sba(iArchitecture
Entity
p2061
(dp2062
g11
(lp2063
sg13
S'com.google.common.collect.SingletonImmutableBiMap_CustomFieldSerializer'
p2064
sg15
(lp2065
sg17
(lp2066
sg19
(lp2067
sg21
I0
sba(iArchitecture
Entity
p2068
(dp2069
g11
(lp2070
sg13
S'com.google.common.escape.ArrayBasedUnicodeEscaper'
p2071
sg15
(lp2072
sg17
(lp2073
sg19
(lp2074
sg21
I0
sba(iArchitecture
Entity
p2075
(dp2076
g11
(lp2077
sg13
S'com.google.common.hash.HashingInputStream'
p2078
sg15
(lp2079
sg17
(lp2080
sg19
(lp2081
sg21
I0
sba(iArchitecture
Entity
p2082
(dp2083
g11
(lp2084
sg13
S'com.google.common.hash.HashingOutputStream'
p2085
sg15
(lp2086
sg17
(lp2087
sg19
(lp2088
sg21
I0
sba(iArchitecture
Entity
p2089
(dp2090
g11
(lp2091
sg13
S'com.google.common.io.PatternFilenameFilter'
p2092
sg15
(lp2093
sg17
(lp2094
sg19
(lp2095
sg21
I0
sba(iArchitecture
Entity
p2096
(dp2097
g11
(lp2098
sg13
S'com.google.common.testing.FakeTicker'
p2099
sg15
(lp2100
sg17
(lp2101
sg19
(lp2102
sg21
I0
sba(iArchitecture
Entity
p2103
(dp2104
g11
(lp2105
sg13
S'com.google.common.util.concurrent.FakeTimeLimiter'
p2106
sg15
(lp2107
sg17
(lp2108
sg19
(lp2109
sg21
I0
sba(iArchitecture
Entity
p2110
(dp2111
g11
(lp2112
sg13
S'com.google.common.util.concurrent.SettableFuture'
p2113
sg15
(lp2114
sg17
(lp2115
sg19
(lp2116
sg21
I0
sba(iArchitecture
Entity
p2117
(dp2118
g11
(lp2119
sg13
S'sun.misc.Unsafe'
p2120
sg15
(lp2121
sg17
(lp2122
sg19
(lp2123
sg21
I0
sbasg1055
(lp2124
g1065
ag1072
ag1079
ag1086
ag1093
ag1102
ag1118
ag1126
ag1134
ag1142
ag1150
ag1158
ag1166
ag1174
ag1182
ag1190
ag1198
ag1206
ag1214
ag1222
ag1230
ag1238
ag1246
ag1254
ag1262
ag1270
ag1278
ag1286
ag1294
ag1301
ag1308
ag1315
ag1322
ag1329
ag1336
ag1343
ag1350
ag1357
ag1364
ag1371
ag1378
ag1386
ag1397
ag1406
ag1415
ag1424
ag1433
ag1442
ag1451
ag1460
ag1469
ag1478
ag1487
ag1496
ag1505
ag1514
ag1523
ag1532
ag1541
ag1550
ag1559
ag1568
ag1577
ag1586
ag1595
ag1604
ag1613
ag1622
ag1631
ag1640
ag1649
ag1658
ag1667
ag1676
ag1685
ag1694
ag1703
ag1712
ag1721
ag1730
ag1739
ag1748
ag1757
ag1766
ag1775
ag1784
ag1793
ag1802
ag1811
ag1820
ag1829
ag1838
ag1847
ag1856
ag1865
ag1874
ag1883
ag1892
ag1901
ag1910
ag1917
ag1924
ag1931
ag1938
ag1945
ag1952
ag1959
ag1966
ag1973
ag1980
ag1987
ag1994
ag2001
ag2008
ag2015
ag2022
ag2029
ag2036
ag2043
ag2050
ag2057
ag2064
ag2071
ag2078
ag2085
ag2092
ag2099
ag2106
ag2113
ag2120
asg21
I0
sg1057
S'com.google.common.cache.ss'
p2125
sba(iArchitecture
Cluster
p2126
(dp2127
g7
(lp2128
(iArchitecture
Entity
p2129
(dp2130
g11
(lp2131
sg13
S'com.google.common.annotations.Beta'
p2132
sg15
(lp2133
sg17
(lp2134
sg19
(lp2135
sg21
I0
sba(iArchitecture
Entity
p2136
(dp2137
g11
(lp2138
sg13
S'com.google.common.annotations.VisibleForTesting'
p2139
sg15
(lp2140
sg17
(lp2141
sg19
(lp2142
sg21
I0
sba(iArchitecture
Entity
p2143
(dp2144
g11
(lp2145
g102
ag666
asg13
S'com.google.common.base.Absent'
p2146
sg15
(lp2147
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2148
aVUncorrect hashCode() implementation at com.google.common.base.Absent and com.google.common.base.Present - for example if hashCode() of reference at Present return 0 then it hashCode() equal Absent.\u000a\u000aexample: Optional.absent() has same hash code as Optional.of(0.0) or Optional.of(0)\u000a
p2149
asg17
(lp2150
g107
ag672
asg19
(lp2151
g109
ag674
asg21
I0
sba(iArchitecture
Entity
p2152
(dp2153
g11
(lp2154
g666
ag666
asg13
S'com.google.common.base.Optional'
p2155
sg15
(lp2156
VUncorrect hashCode() implementation at com.google.common.base.Absent and com.google.common.base.Present - for example if hashCode() of reference at Present return 0 then it hashCode() equal Absent.\u000a\u000aexample: Optional.absent() has same hash code as Optional.of(0.0) or Optional.of(0)\u000a
p2157
aVUncorrect hashCode() implementation at com.google.common.base.Absent and com.google.common.base.Present - for example if hashCode() of reference at Present return 0 then it hashCode() equal Absent.\u000a\u000aexample: Optional.absent() has same hash code as Optional.of(0.0) or Optional.of(0)\u000a
p2158
asg17
(lp2159
g672
ag672
asg19
(lp2160
g674
ag674
asg21
I0
sba(iArchitecture
Entity
p2161
(dp2162
g11
(lp2163
sg13
S'com.google.common.base.Present'
p2164
sg15
(lp2165
sg17
(lp2166
sg19
(lp2167
sg21
I0
sba(iArchitecture
Entity
p2168
(dp2169
g11
(lp2170
sg13
S'com.google.common.base.Present_CustomFieldSerializer'
p2171
sg15
(lp2172
sg17
(lp2173
sg19
(lp2174
sg21
I0
sba(iArchitecture
Entity
p2175
(dp2176
g11
(lp2177
sg13
S'com.google.common.cache.AbstractLoadingCache'
p2178
sg15
(lp2179
sg17
(lp2180
sg19
(lp2181
sg21
I0
sba(iArchitecture
Entity
p2182
(dp2183
g11
(lp2184
sg13
S'com.google.common.collect.AbstractBiMap'
p2185
sg15
(lp2186
sg17
(lp2187
sg19
(lp2188
sg21
I0
sba(iArchitecture
Entity
p2189
(dp2190
g11
(lp2191
sg13
S'com.google.common.collect.AbstractBiMap$1'
p2192
sg15
(lp2193
sg17
(lp2194
sg19
(lp2195
sg21
I0
sba(iArchitecture
Entity
p2196
(dp2197
g11
(lp2198
sg13
S'com.google.common.collect.AbstractBiMap$EntrySet'
p2199
sg15
(lp2200
sg17
(lp2201
sg19
(lp2202
sg21
I0
sba(iArchitecture
Entity
p2203
(dp2204
g11
(lp2205
sg13
S'com.google.common.collect.AbstractBiMap$EntrySet$1'
p2206
sg15
(lp2207
sg17
(lp2208
sg19
(lp2209
sg21
I0
sba(iArchitecture
Entity
p2210
(dp2211
g11
(lp2212
sg13
S'com.google.common.collect.AbstractBiMap$EntrySet$1$1'
p2213
sg15
(lp2214
sg17
(lp2215
sg19
(lp2216
sg21
I0
sba(iArchitecture
Entity
p2217
(dp2218
g11
(lp2219
sg13
S'com.google.common.collect.AbstractBiMap$Inverse'
p2220
sg15
(lp2221
sg17
(lp2222
sg19
(lp2223
sg21
I0
sba(iArchitecture
Entity
p2224
(dp2225
g11
(lp2226
sg13
S'com.google.common.collect.AbstractBiMap$KeySet'
p2227
sg15
(lp2228
sg17
(lp2229
sg19
(lp2230
sg21
I0
sba(iArchitecture
Entity
p2231
(dp2232
g11
(lp2233
sg13
S'com.google.common.collect.AbstractBiMap$ValueSet'
p2234
sg15
(lp2235
sg17
(lp2236
sg19
(lp2237
sg21
I0
sba(iArchitecture
Entity
p2238
(dp2239
g11
(lp2240
sg13
S'com.google.common.collect.AbstractIndexedListIterator'
p2241
sg15
(lp2242
sg17
(lp2243
sg19
(lp2244
sg21
I0
sba(iArchitecture
Entity
p2245
(dp2246
g11
(lp2247
sg13
S'com.google.common.collect.AbstractIterator'
p2248
sg15
(lp2249
sg17
(lp2250
sg19
(lp2251
sg21
I0
sba(iArchitecture
Entity
p2252
(dp2253
g11
(lp2254
sg13
S'com.google.common.collect.AbstractIterator$1'
p2255
sg15
(lp2256
sg17
(lp2257
sg19
(lp2258
sg21
I0
sba(iArchitecture
Entity
p2259
(dp2260
g11
(lp2261
sg13
S'com.google.common.collect.AbstractIterator$State'
p2262
sg15
(lp2263
sg17
(lp2264
sg19
(lp2265
sg21
I0
sba(iArchitecture
Entity
p2266
(dp2267
g11
(lp2268
sg13
S'com.google.common.collect.AbstractListMultimap'
p2269
sg15
(lp2270
sg17
(lp2271
sg19
(lp2272
sg21
I0
sba(iArchitecture
Entity
p2273
(dp2274
g11
(lp2275
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap'
p2276
sg15
(lp2277
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2278
asg17
(lp2279
g107
asg19
(lp2280
g109
asg21
I0
sba(iArchitecture
Entity
p2281
(dp2282
g11
(lp2283
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$1'
p2284
sg15
(lp2285
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2286
asg17
(lp2287
g107
asg19
(lp2288
g109
asg21
I0
sba(iArchitecture
Entity
p2289
(dp2290
g11
(lp2291
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$2'
p2292
sg15
(lp2293
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2294
asg17
(lp2295
g107
asg19
(lp2296
g109
asg21
I0
sba(iArchitecture
Entity
p2297
(dp2298
g11
(lp2299
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$AsMap'
p2300
sg15
(lp2301
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2302
asg17
(lp2303
g107
asg19
(lp2304
g109
asg21
I0
sba(iArchitecture
Entity
p2305
(dp2306
g11
(lp2307
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries'
p2308
sg15
(lp2309
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2310
asg17
(lp2311
g107
asg19
(lp2312
g109
asg21
I0
sba(iArchitecture
Entity
p2313
(dp2314
g11
(lp2315
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator'
p2316
sg15
(lp2317
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2318
asg17
(lp2319
g107
asg19
(lp2320
g109
asg21
I0
sba(iArchitecture
Entity
p2321
(dp2322
g11
(lp2323
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$Itr'
p2324
sg15
(lp2325
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2326
asg17
(lp2327
g107
asg19
(lp2328
g109
asg21
I0
sba(iArchitecture
Entity
p2329
(dp2330
g11
(lp2331
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$KeySet'
p2332
sg15
(lp2333
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2334
asg17
(lp2335
g107
asg19
(lp2336
g109
asg21
I0
sba(iArchitecture
Entity
p2337
(dp2338
g11
(lp2339
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$KeySet$1'
p2340
sg15
(lp2341
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2342
asg17
(lp2343
g107
asg19
(lp2344
g109
asg21
I0
sba(iArchitecture
Entity
p2345
(dp2346
g11
(lp2347
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap'
p2348
sg15
(lp2349
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2350
asg17
(lp2351
g107
asg19
(lp2352
g109
asg21
I0
sba(iArchitecture
Entity
p2353
(dp2354
g11
(lp2355
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet'
p2356
sg15
(lp2357
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2358
asg17
(lp2359
g107
asg19
(lp2360
g109
asg21
I0
sba(iArchitecture
Entity
p2361
(dp2362
g11
(lp2363
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList'
p2364
sg15
(lp2365
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2366
asg17
(lp2367
g107
asg19
(lp2368
g109
asg21
I0
sba(iArchitecture
Entity
p2369
(dp2370
g11
(lp2371
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap'
p2372
sg15
(lp2373
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2374
asg17
(lp2375
g107
asg19
(lp2376
g109
asg21
I0
sba(iArchitecture
Entity
p2377
(dp2378
g11
(lp2379
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet'
p2380
sg15
(lp2381
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2382
asg17
(lp2383
g107
asg19
(lp2384
g109
asg21
I0
sba(iArchitecture
Entity
p2385
(dp2386
g11
(lp2387
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection'
p2388
sg15
(lp2389
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2390
asg17
(lp2391
g107
asg19
(lp2392
g109
asg21
I0
sba(iArchitecture
Entity
p2393
(dp2394
g11
(lp2395
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator'
p2396
sg15
(lp2397
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2398
asg17
(lp2399
g107
asg19
(lp2400
g109
asg21
I0
sba(iArchitecture
Entity
p2401
(dp2402
g11
(lp2403
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedList'
p2404
sg15
(lp2405
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2406
asg17
(lp2407
g107
asg19
(lp2408
g109
asg21
I0
sba(iArchitecture
Entity
p2409
(dp2410
g11
(lp2411
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator'
p2412
sg15
(lp2413
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2414
asg17
(lp2415
g107
asg19
(lp2416
g109
asg21
I0
sba(iArchitecture
Entity
p2417
(dp2418
g11
(lp2419
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet'
p2420
sg15
(lp2421
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2422
asg17
(lp2423
g107
asg19
(lp2424
g109
asg21
I0
sba(iArchitecture
Entity
p2425
(dp2426
g11
(lp2427
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedSet'
p2428
sg15
(lp2429
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2430
asg17
(lp2431
g107
asg19
(lp2432
g109
asg21
I0
sba(iArchitecture
Entity
p2433
(dp2434
g11
(lp2435
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet'
p2436
sg15
(lp2437
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2438
asg17
(lp2439
g107
asg19
(lp2440
g109
asg21
I0
sba(iArchitecture
Entity
p2441
(dp2442
g11
(lp2443
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultiset'
p2444
sg15
(lp2445
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2446
asg17
(lp2447
g107
asg19
(lp2448
g109
asg21
I0
sba(iArchitecture
Entity
p2449
(dp2450
g11
(lp2451
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultiset$1'
p2452
sg15
(lp2453
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2454
asg17
(lp2455
g107
asg19
(lp2456
g109
asg21
I0
sba(iArchitecture
Entity
p2457
(dp2458
g11
(lp2459
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultiset$1$1'
p2460
sg15
(lp2461
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2462
asg17
(lp2463
g107
asg19
(lp2464
g109
asg21
I0
sba(iArchitecture
Entity
p2465
(dp2466
g11
(lp2467
g102
asg13
S'com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator'
p2468
sg15
(lp2469
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2470
asg17
(lp2471
g107
asg19
(lp2472
g109
asg21
I0
sba(iArchitecture
Entity
p2473
(dp2474
g11
(lp2475
sg13
S'com.google.common.collect.AbstractMapEntry'
p2476
sg15
(lp2477
sg17
(lp2478
sg19
(lp2479
sg21
I0
sba(iArchitecture
Entity
p2480
(dp2481
g11
(lp2482
sg13
S'com.google.common.collect.AbstractMultimap'
p2483
sg15
(lp2484
sg17
(lp2485
sg19
(lp2486
sg21
I0
sba(iArchitecture
Entity
p2487
(dp2488
g11
(lp2489
sg13
S'com.google.common.collect.AbstractMultimap$1'
p2490
sg15
(lp2491
sg17
(lp2492
sg19
(lp2493
sg21
I0
sba(iArchitecture
Entity
p2494
(dp2495
g11
(lp2496
sg13
S'com.google.common.collect.AbstractMultimap$Entries'
p2497
sg15
(lp2498
sg17
(lp2499
sg19
(lp2500
sg21
I0
sba(iArchitecture
Entity
p2501
(dp2502
g11
(lp2503
sg13
S'com.google.common.collect.AbstractMultimap$EntrySet'
p2504
sg15
(lp2505
sg17
(lp2506
sg19
(lp2507
sg21
I0
sba(iArchitecture
Entity
p2508
(dp2509
g11
(lp2510
sg13
S'com.google.common.collect.AbstractMultimap$Values'
p2511
sg15
(lp2512
sg17
(lp2513
sg19
(lp2514
sg21
I0
sba(iArchitecture
Entity
p2515
(dp2516
g11
(lp2517
sg13
S'com.google.common.collect.AbstractMultiset'
p2518
sg15
(lp2519
sg17
(lp2520
sg19
(lp2521
sg21
I0
sba(iArchitecture
Entity
p2522
(dp2523
g11
(lp2524
sg13
S'com.google.common.collect.AbstractMultiset$ElementSet'
p2525
sg15
(lp2526
sg17
(lp2527
sg19
(lp2528
sg21
I0
sba(iArchitecture
Entity
p2529
(dp2530
g11
(lp2531
sg13
S'com.google.common.collect.AbstractMultiset$EntrySet'
p2532
sg15
(lp2533
sg17
(lp2534
sg19
(lp2535
sg21
I0
sba(iArchitecture
Entity
p2536
(dp2537
g11
(lp2538
sg13
S'com.google.common.collect.AbstractNavigableMap'
p2539
sg15
(lp2540
sg17
(lp2541
sg19
(lp2542
sg21
I0
sba(iArchitecture
Entity
p2543
(dp2544
g11
(lp2545
sg13
S'com.google.common.collect.AbstractNavigableMap$1'
p2546
sg15
(lp2547
sg17
(lp2548
sg19
(lp2549
sg21
I0
sba(iArchitecture
Entity
p2550
(dp2551
g11
(lp2552
sg13
S'com.google.common.collect.AbstractNavigableMap$DescendingMap'
p2553
sg15
(lp2554
sg17
(lp2555
sg19
(lp2556
sg21
I0
sba(iArchitecture
Entity
p2557
(dp2558
g11
(lp2559
sg13
S'com.google.common.collect.AbstractRangeSet'
p2560
sg15
(lp2561
sg17
(lp2562
sg19
(lp2563
sg21
I0
sba(iArchitecture
Entity
p2564
(dp2565
g11
(lp2566
sg13
S'com.google.common.collect.AbstractSequentialIterator'
p2567
sg15
(lp2568
sg17
(lp2569
sg19
(lp2570
sg21
I0
sba(iArchitecture
Entity
p2571
(dp2572
g11
(lp2573
sg13
S'com.google.common.collect.AbstractSetMultimap'
p2574
sg15
(lp2575
sg17
(lp2576
sg19
(lp2577
sg21
I0
sba(iArchitecture
Entity
p2578
(dp2579
g11
(lp2580
sg13
S'com.google.common.collect.AbstractSortedKeySortedSetMultimap'
p2581
sg15
(lp2582
sg17
(lp2583
sg19
(lp2584
sg21
I0
sba(iArchitecture
Entity
p2585
(dp2586
g11
(lp2587
sg13
S'com.google.common.collect.AbstractSortedMultiset'
p2588
sg15
(lp2589
sg17
(lp2590
sg19
(lp2591
sg21
I0
sba(iArchitecture
Entity
p2592
(dp2593
g11
(lp2594
sg13
S'com.google.common.collect.AbstractSortedMultiset$1'
p2595
sg15
(lp2596
sg17
(lp2597
sg19
(lp2598
sg21
I0
sba(iArchitecture
Entity
p2599
(dp2600
g11
(lp2601
sg13
S'com.google.common.collect.AbstractSortedSetMultimap'
p2602
sg15
(lp2603
sg17
(lp2604
sg19
(lp2605
sg21
I0
sba(iArchitecture
Entity
p2606
(dp2607
g11
(lp2608
sg13
S'com.google.common.collect.AbstractTable'
p2609
sg15
(lp2610
sg17
(lp2611
sg19
(lp2612
sg21
I0
sba(iArchitecture
Entity
p2613
(dp2614
g11
(lp2615
sg13
S'com.google.common.collect.AbstractTable$1'
p2616
sg15
(lp2617
sg17
(lp2618
sg19
(lp2619
sg21
I0
sba(iArchitecture
Entity
p2620
(dp2621
g11
(lp2622
sg13
S'com.google.common.collect.AbstractTable$CellSet'
p2623
sg15
(lp2624
sg17
(lp2625
sg19
(lp2626
sg21
I0
sba(iArchitecture
Entity
p2627
(dp2628
g11
(lp2629
sg13
S'com.google.common.collect.AbstractTable$Values'
p2630
sg15
(lp2631
sg17
(lp2632
sg19
(lp2633
sg21
I0
sba(iArchitecture
Entity
p2634
(dp2635
g11
(lp2636
g102
asg13
S'com.google.common.collect.AllEqualOrdering'
p2637
sg15
(lp2638
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2639
asg17
(lp2640
g107
asg19
(lp2641
g109
asg21
I0
sba(iArchitecture
Entity
p2642
(dp2643
g11
(lp2644
sg13
S'com.google.common.collect.AllEqualOrdering_CustomFieldSerializer'
p2645
sg15
(lp2646
sg17
(lp2647
sg19
(lp2648
sg21
I0
sba(iArchitecture
Entity
p2649
(dp2650
g11
(lp2651
sg13
S'com.google.common.collect.ArrayTable'
p2652
sg15
(lp2653
sg17
(lp2654
sg19
(lp2655
sg21
I0
sba(iArchitecture
Entity
p2656
(dp2657
g11
(lp2658
sg13
S'com.google.common.collect.ArrayTable$1'
p2659
sg15
(lp2660
sg17
(lp2661
sg19
(lp2662
sg21
I0
sba(iArchitecture
Entity
p2663
(dp2664
g11
(lp2665
sg13
S'com.google.common.collect.ArrayTable$1$1'
p2666
sg15
(lp2667
sg17
(lp2668
sg19
(lp2669
sg21
I0
sba(iArchitecture
Entity
p2670
(dp2671
g11
(lp2672
sg13
S'com.google.common.collect.ArrayTable$ArrayMap'
p2673
sg15
(lp2674
sg17
(lp2675
sg19
(lp2676
sg21
I0
sba(iArchitecture
Entity
p2677
(dp2678
g11
(lp2679
sg13
S'com.google.common.collect.ArrayTable$ArrayMap$1'
p2680
sg15
(lp2681
sg17
(lp2682
sg19
(lp2683
sg21
I0
sba(iArchitecture
Entity
p2684
(dp2685
g11
(lp2686
sg13
S'com.google.common.collect.ArrayTable$ArrayMap$1$1'
p2687
sg15
(lp2688
sg17
(lp2689
sg19
(lp2690
sg21
I0
sba(iArchitecture
Entity
p2691
(dp2692
g11
(lp2693
sg13
S'com.google.common.collect.ArrayTable$ArrayMap$1$1$1'
p2694
sg15
(lp2695
sg17
(lp2696
sg19
(lp2697
sg21
I0
sba(iArchitecture
Entity
p2698
(dp2699
g11
(lp2700
sg13
S'com.google.common.collect.ArrayTable$Column'
p2701
sg15
(lp2702
sg17
(lp2703
sg19
(lp2704
sg21
I0
sba(iArchitecture
Entity
p2705
(dp2706
g11
(lp2707
sg13
S'com.google.common.collect.ArrayTable$ColumnMap'
p2708
sg15
(lp2709
sg17
(lp2710
sg19
(lp2711
sg21
I0
sba(iArchitecture
Entity
p2712
(dp2713
g11
(lp2714
sg13
S'com.google.common.collect.ArrayTable$Row'
p2715
sg15
(lp2716
sg17
(lp2717
sg19
(lp2718
sg21
I0
sba(iArchitecture
Entity
p2719
(dp2720
g11
(lp2721
sg13
S'com.google.common.collect.ArrayTable$RowMap'
p2722
sg15
(lp2723
sg17
(lp2724
sg19
(lp2725
sg21
I0
sba(iArchitecture
Entity
p2726
(dp2727
g11
(lp2728
sg13
S'com.google.common.collect.BinaryTreeTraverser'
p2729
sg15
(lp2730
sg17
(lp2731
sg19
(lp2732
sg21
I0
sba(iArchitecture
Entity
p2733
(dp2734
g11
(lp2735
sg13
S'com.google.common.collect.BinaryTreeTraverser$1'
p2736
sg15
(lp2737
sg17
(lp2738
sg19
(lp2739
sg21
I0
sba(iArchitecture
Entity
p2740
(dp2741
g11
(lp2742
sg13
S'com.google.common.collect.BinaryTreeTraverser$1$1'
p2743
sg15
(lp2744
sg17
(lp2745
sg19
(lp2746
sg21
I0
sba(iArchitecture
Entity
p2747
(dp2748
g11
(lp2749
sg13
S'com.google.common.collect.BinaryTreeTraverser$2'
p2750
sg15
(lp2751
sg17
(lp2752
sg19
(lp2753
sg21
I0
sba(iArchitecture
Entity
p2754
(dp2755
g11
(lp2756
sg13
S'com.google.common.collect.BinaryTreeTraverser$InOrderIterator'
p2757
sg15
(lp2758
sg17
(lp2759
sg19
(lp2760
sg21
I0
sba(iArchitecture
Entity
p2761
(dp2762
g11
(lp2763
sg13
S'com.google.common.collect.BinaryTreeTraverser$PostOrderIterator'
p2764
sg15
(lp2765
sg17
(lp2766
sg19
(lp2767
sg21
I0
sba(iArchitecture
Entity
p2768
(dp2769
g11
(lp2770
sg13
S'com.google.common.collect.BinaryTreeTraverser$PreOrderIterator'
p2771
sg15
(lp2772
sg17
(lp2773
sg19
(lp2774
sg21
I0
sba(iArchitecture
Entity
p2775
(dp2776
g11
(lp2777
sg13
S'com.google.common.collect.BoundType'
p2778
sg15
(lp2779
sg17
(lp2780
sg19
(lp2781
sg21
I0
sba(iArchitecture
Entity
p2782
(dp2783
g11
(lp2784
sg13
S'com.google.common.collect.BoundType$1'
p2785
sg15
(lp2786
sg17
(lp2787
sg19
(lp2788
sg21
I0
sba(iArchitecture
Entity
p2789
(dp2790
g11
(lp2791
sg13
S'com.google.common.collect.BoundType$2'
p2792
sg15
(lp2793
sg17
(lp2794
sg19
(lp2795
sg21
I0
sba(iArchitecture
Entity
p2796
(dp2797
g11
(lp2798
sg13
S'com.google.common.collect.ByFunctionOrdering'
p2799
sg15
(lp2800
sg17
(lp2801
sg19
(lp2802
sg21
I0
sba(iArchitecture
Entity
p2803
(dp2804
g11
(lp2805
sg13
S'com.google.common.collect.ByFunctionOrdering_CustomFieldSerializer'
p2806
sg15
(lp2807
sg17
(lp2808
sg19
(lp2809
sg21
I0
sba(iArchitecture
Entity
p2810
(dp2811
g11
(lp2812
sg13
S'com.google.common.collect.CartesianList'
p2813
sg15
(lp2814
sg17
(lp2815
sg19
(lp2816
sg21
I0
sba(iArchitecture
Entity
p2817
(dp2818
g11
(lp2819
sg13
S'com.google.common.collect.CartesianList$1'
p2820
sg15
(lp2821
sg17
(lp2822
sg19
(lp2823
sg21
I0
sba(iArchitecture
Entity
p2824
(dp2825
g11
(lp2826
sg13
S'com.google.common.collect.CollectPreconditions'
p2827
sg15
(lp2828
sg17
(lp2829
sg19
(lp2830
sg21
I0
sba(iArchitecture
Entity
p2831
(dp2832
g11
(lp2833
sg13
S'com.google.common.collect.Collections2'
p2834
sg15
(lp2835
sg17
(lp2836
sg19
(lp2837
sg21
I0
sba(iArchitecture
Entity
p2838
(dp2839
g11
(lp2840
sg13
S'com.google.common.collect.Collections2$1'
p2841
sg15
(lp2842
sg17
(lp2843
sg19
(lp2844
sg21
I0
sba(iArchitecture
Entity
p2845
(dp2846
g11
(lp2847
sg13
S'com.google.common.collect.Collections2$FilteredCollection'
p2848
sg15
(lp2849
sg17
(lp2850
sg19
(lp2851
sg21
I0
sba(iArchitecture
Entity
p2852
(dp2853
g11
(lp2854
sg13
S'com.google.common.collect.Collections2$OrderedPermutationCollection'
p2855
sg15
(lp2856
sg17
(lp2857
sg19
(lp2858
sg21
I0
sba(iArchitecture
Entity
p2859
(dp2860
g11
(lp2861
sg13
S'com.google.common.collect.Collections2$OrderedPermutationIterator'
p2862
sg15
(lp2863
sg17
(lp2864
sg19
(lp2865
sg21
I0
sba(iArchitecture
Entity
p2866
(dp2867
g11
(lp2868
sg13
S'com.google.common.collect.Collections2$PermutationCollection'
p2869
sg15
(lp2870
sg17
(lp2871
sg19
(lp2872
sg21
I0
sba(iArchitecture
Entity
p2873
(dp2874
g11
(lp2875
sg13
S'com.google.common.collect.Collections2$PermutationIterator'
p2876
sg15
(lp2877
sg17
(lp2878
sg19
(lp2879
sg21
I0
sba(iArchitecture
Entity
p2880
(dp2881
g11
(lp2882
sg13
S'com.google.common.collect.Collections2$TransformedCollection'
p2883
sg15
(lp2884
sg17
(lp2885
sg19
(lp2886
sg21
I0
sba(iArchitecture
Entity
p2887
(dp2888
g11
(lp2889
sg13
S'com.google.common.collect.ComparatorOrdering'
p2890
sg15
(lp2891
sg17
(lp2892
sg19
(lp2893
sg21
I0
sba(iArchitecture
Entity
p2894
(dp2895
g11
(lp2896
sg13
S'com.google.common.collect.ComparatorOrdering_CustomFieldSerializer'
p2897
sg15
(lp2898
sg17
(lp2899
sg19
(lp2900
sg21
I0
sba(iArchitecture
Entity
p2901
(dp2902
g11
(lp2903
sg13
S'com.google.common.collect.ComparisonChain'
p2904
sg15
(lp2905
sg17
(lp2906
sg19
(lp2907
sg21
I0
sba(iArchitecture
Entity
p2908
(dp2909
g11
(lp2910
sg13
S'com.google.common.collect.ComparisonChain$1'
p2911
sg15
(lp2912
sg17
(lp2913
sg19
(lp2914
sg21
I0
sba(iArchitecture
Entity
p2915
(dp2916
g11
(lp2917
sg13
S'com.google.common.collect.ComparisonChain$InactiveComparisonChain'
p2918
sg15
(lp2919
sg17
(lp2920
sg19
(lp2921
sg21
I0
sba(iArchitecture
Entity
p2922
(dp2923
g11
(lp2924
sg13
S'com.google.common.collect.CompoundOrdering'
p2925
sg15
(lp2926
sg17
(lp2927
sg19
(lp2928
sg21
I0
sba(iArchitecture
Entity
p2929
(dp2930
g11
(lp2931
sg13
S'com.google.common.collect.CompoundOrdering_CustomFieldSerializer'
p2932
sg15
(lp2933
sg17
(lp2934
sg19
(lp2935
sg21
I0
sba(iArchitecture
Entity
p2936
(dp2937
g11
(lp2938
sg13
S'com.google.common.collect.ComputationException'
p2939
sg15
(lp2940
sg17
(lp2941
sg19
(lp2942
sg21
I0
sba(iArchitecture
Entity
p2943
(dp2944
g11
(lp2945
g102
asg13
S'com.google.common.collect.ComputingConcurrentHashMap'
p2946
sg15
(lp2947
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2948
asg17
(lp2949
g107
asg19
(lp2950
g109
asg21
I0
sba(iArchitecture
Entity
p2951
(dp2952
g11
(lp2953
g102
asg13
S'com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference'
p2954
sg15
(lp2955
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2956
asg17
(lp2957
g107
asg19
(lp2958
g109
asg21
I0
sba(iArchitecture
Entity
p2959
(dp2960
g11
(lp2961
g102
asg13
S'com.google.common.collect.ComputingConcurrentHashMap$ComputedReference'
p2962
sg15
(lp2963
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2964
asg17
(lp2965
g107
asg19
(lp2966
g109
asg21
I0
sba(iArchitecture
Entity
p2967
(dp2968
g11
(lp2969
g102
asg13
S'com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment'
p2970
sg15
(lp2971
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2972
asg17
(lp2973
g107
asg19
(lp2974
g109
asg21
I0
sba(iArchitecture
Entity
p2975
(dp2976
g11
(lp2977
g102
asg13
S'com.google.common.collect.ComputingConcurrentHashMap$ComputingSerializationProxy'
p2978
sg15
(lp2979
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2980
asg17
(lp2981
g107
asg19
(lp2982
g109
asg21
I0
sba(iArchitecture
Entity
p2983
(dp2984
g11
(lp2985
g102
asg13
S'com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference'
p2986
sg15
(lp2987
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p2988
asg17
(lp2989
g107
asg19
(lp2990
g109
asg21
I0
sba(iArchitecture
Entity
p2991
(dp2992
g11
(lp2993
sg13
S'com.google.common.collect.ConcurrentHashMultiset'
p2994
sg15
(lp2995
sg17
(lp2996
sg19
(lp2997
sg21
I0
sba(iArchitecture
Entity
p2998
(dp2999
g11
(lp3000
sg13
S'com.google.common.collect.ConcurrentHashMultiset$1'
p3001
sg15
(lp3002
sg17
(lp3003
sg19
(lp3004
sg21
I0
sba(iArchitecture
Entity
p3005
(dp3006
g11
(lp3007
sg13
S'com.google.common.collect.ConcurrentHashMultiset$2'
p3008
sg15
(lp3009
sg17
(lp3010
sg19
(lp3011
sg21
I0
sba(iArchitecture
Entity
p3012
(dp3013
g11
(lp3014
sg13
S'com.google.common.collect.ConcurrentHashMultiset$3'
p3015
sg15
(lp3016
sg17
(lp3017
sg19
(lp3018
sg21
I0
sba(iArchitecture
Entity
p3019
(dp3020
g11
(lp3021
sg13
S'com.google.common.collect.ConcurrentHashMultiset$EntrySet'
p3022
sg15
(lp3023
sg17
(lp3024
sg19
(lp3025
sg21
I0
sba(iArchitecture
Entity
p3026
(dp3027
g11
(lp3028
sg13
S'com.google.common.collect.ConcurrentHashMultiset$FieldSettersHolder'
p3029
sg15
(lp3030
sg17
(lp3031
sg19
(lp3032
sg21
I0
sba(iArchitecture
Entity
p3033
(dp3034
g11
(lp3035
sg13
S'com.google.common.collect.Constraint'
p3036
sg15
(lp3037
sg17
(lp3038
sg19
(lp3039
sg21
I0
sba(iArchitecture
Entity
p3040
(dp3041
g11
(lp3042
sg13
S'com.google.common.collect.Constraints'
p3043
sg15
(lp3044
sg17
(lp3045
sg19
(lp3046
sg21
I0
sba(iArchitecture
Entity
p3047
(dp3048
g11
(lp3049
sg13
S'com.google.common.collect.Constraints$ConstrainedCollection'
p3050
sg15
(lp3051
sg17
(lp3052
sg19
(lp3053
sg21
I0
sba(iArchitecture
Entity
p3054
(dp3055
g11
(lp3056
sg13
S'com.google.common.collect.Constraints$ConstrainedList'
p3057
sg15
(lp3058
sg17
(lp3059
sg19
(lp3060
sg21
I0
sba(iArchitecture
Entity
p3061
(dp3062
g11
(lp3063
sg13
S'com.google.common.collect.Constraints$ConstrainedListIterator'
p3064
sg15
(lp3065
sg17
(lp3066
sg19
(lp3067
sg21
I0
sba(iArchitecture
Entity
p3068
(dp3069
g11
(lp3070
sg13
S'com.google.common.collect.Constraints$ConstrainedRandomAccessList'
p3071
sg15
(lp3072
sg17
(lp3073
sg19
(lp3074
sg21
I0
sba(iArchitecture
Entity
p3075
(dp3076
g11
(lp3077
sg13
S'com.google.common.collect.Constraints$ConstrainedSet'
p3078
sg15
(lp3079
sg17
(lp3080
sg19
(lp3081
sg21
I0
sba(iArchitecture
Entity
p3082
(dp3083
g11
(lp3084
sg13
S'com.google.common.collect.Constraints$ConstrainedSortedSet'
p3085
sg15
(lp3086
sg17
(lp3087
sg19
(lp3088
sg21
I0
sba(iArchitecture
Entity
p3089
(dp3090
g11
(lp3091
sg13
S'com.google.common.collect.Count'
p3092
sg15
(lp3093
sg17
(lp3094
sg19
(lp3095
sg21
I0
sba(iArchitecture
Entity
p3096
(dp3097
g11
(lp3098
g102
asg13
S'com.google.common.collect.Cut'
p3099
sg15
(lp3100
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p3101
asg17
(lp3102
g107
asg19
(lp3103
g109
asg21
I0
sba(iArchitecture
Entity
p3104
(dp3105
g11
(lp3106
g102
asg13
S'com.google.common.collect.Cut$1'
p3107
sg15
(lp3108
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p3109
asg17
(lp3110
g107
asg19
(lp3111
g109
asg21
I0
sba(iArchitecture
Entity
p3112
(dp3113
g11
(lp3114
g102
asg13
S'com.google.common.collect.Cut$AboveAll'
p3115
sg15
(lp3116
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p3117
asg17
(lp3118
g107
asg19
(lp3119
g109
asg21
I0
sba(iArchitecture
Entity
p3120
(dp3121
g11
(lp3122
g102
asg13
S'com.google.common.collect.Cut$AboveValue'
p3123
sg15
(lp3124
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p3125
asg17
(lp3126
g107
asg19
(lp3127
g109
asg21
I0
sba(iArchitecture
Entity
p3128
(dp3129
g11
(lp3130
g102
asg13
S'com.google.common.collect.Cut$BelowAll'
p3131
sg15
(lp3132
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p3133
asg17
(lp3134
g107
asg19
(lp3135
g109
asg21
I0
sba(iArchitecture
Entity
p3136
(dp3137
g11
(lp3138
g102
asg13
S'com.google.common.collect.Cut$BelowValue'
p3139
sg15
(lp3140
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p3141
asg17
(lp3142
g107
asg19
(lp3143
g109
asg21
I0
sba(iArchitecture
Entity
p3144
(dp3145
g11
(lp3146
sg13
S'com.google.common.collect.DenseImmutableTable'
p3147
sg15
(lp3148
sg17
(lp3149
sg19
(lp3150
sg21
I0
sba(iArchitecture
Entity
p3151
(dp3152
g11
(lp3153
sg13
S'com.google.common.collect.DenseImmutableTable$1'
p3154
sg15
(lp3155
sg17
(lp3156
sg19
(lp3157
sg21
I0
sba(iArchitecture
Entity
p3158
(dp3159
g11
(lp3160
sg13
S'com.google.common.collect.DenseImmutableTable$Column'
p3161
sg15
(lp3162
sg17
(lp3163
sg19
(lp3164
sg21
I0
sba(iArchitecture
Entity
p3165
(dp3166
g11
(lp3167
sg13
S'com.google.common.collect.DenseImmutableTable$ColumnMap'
p3168
sg15
(lp3169
sg17
(lp3170
sg19
(lp3171
sg21
I0
sba(iArchitecture
Entity
p3172
(dp3173
g11
(lp3174
sg13
S'com.google.common.collect.DenseImmutableTable$ImmutableArrayMap'
p3175
sg15
(lp3176
sg17
(lp3177
sg19
(lp3178
sg21
I0
sba(iArchitecture
Entity
p3179
(dp3180
g11
(lp3181
sg13
S'com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1'
p3182
sg15
(lp3183
sg17
(lp3184
sg19
(lp3185
sg21
I0
sba(iArchitecture
Entity
p3186
(dp3187
g11
(lp3188
sg13
S'com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1$1'
p3189
sg15
(lp3190
sg17
(lp3191
sg19
(lp3192
sg21
I0
sba(iArchitecture
Entity
p3193
(dp3194
g11
(lp3195
sg13
S'com.google.common.collect.DenseImmutableTable$Row'
p3196
sg15
(lp3197
sg17
(lp3198
sg19
(lp3199
sg21
I0
sba(iArchitecture
Entity
p3200
(dp3201
g11
(lp3202
sg13
S'com.google.common.collect.DenseImmutableTable$RowMap'
p3203
sg15
(lp3204
sg17
(lp3205
sg19
(lp3206
sg21
I0
sba(iArchitecture
Entity
p3207
(dp3208
g11
(lp3209
sg13
S'com.google.common.collect.DenseImmutableTable_CustomFieldSerializer'
p3210
sg15
(lp3211
sg17
(lp3212
sg19
(lp3213
sg21
I0
sba(iArchitecture
Entity
p3214
(dp3215
g11
(lp3216
sg13
S'com.google.common.collect.DescendingImmutableSortedMultiset'
p3217
sg15
(lp3218
sg17
(lp3219
sg19
(lp3220
sg21
I0
sba(iArchitecture
Entity
p3221
(dp3222
g11
(lp3223
sg13
S'com.google.common.collect.DescendingImmutableSortedSet'
p3224
sg15
(lp3225
sg17
(lp3226
sg19
(lp3227
sg21
I0
sba(iArchitecture
Entity
p3228
(dp3229
g11
(lp3230
sg13
S'com.google.common.collect.DescendingMultiset'
p3231
sg15
(lp3232
sg17
(lp3233
sg19
(lp3234
sg21
I0
sba(iArchitecture
Entity
p3235
(dp3236
g11
(lp3237
sg13
S'com.google.common.collect.DescendingMultiset$1'
p3238
sg15
(lp3239
sg17
(lp3240
sg19
(lp3241
sg21
I0
sba(iArchitecture
Entity
p3242
(dp3243
g11
(lp3244
g102
asg13
S'com.google.common.collect.DiscreteDomain'
p3245
sg15
(lp3246
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p3247
asg17
(lp3248
g107
asg19
(lp3249
g109
asg21
I0
sba(iArchitecture
Entity
p3250
(dp3251
g11
(lp3252
g102
asg13
S'com.google.common.collect.DiscreteDomain$BigIntegerDomain'
p3253
sg15
(lp3254
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p3255
asg17
(lp3256
g107
asg19
(lp3257
g109
asg21
I0
sba(iArchitecture
Entity
p3258
(dp3259
g11
(lp3260
g102
asg13
S'com.google.common.collect.DiscreteDomain$IntegerDomain'
p3261
sg15
(lp3262
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p3263
asg17
(lp3264
g107
asg19
(lp3265
g109
asg21
I0
sba(iArchitecture
Entity
p3266
(dp3267
g11
(lp3268
g102
asg13
S'com.google.common.collect.DiscreteDomain$LongDomain'
p3269
sg15
(lp3270
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p3271
asg17
(lp3272
g107
asg19
(lp3273
g109
asg21
I0
sba(iArchitecture
Entity
p3274
(dp3275
g11
(lp3276
sg13
S'com.google.common.collect.EmptyContiguousSet'
p3277
sg15
(lp3278
sg17
(lp3279
sg19
(lp3280
sg21
I0
sba(iArchitecture
Entity
p3281
(dp3282
g11
(lp3283
sg13
S'com.google.common.collect.EmptyContiguousSet$1'
p3284
sg15
(lp3285
sg17
(lp3286
sg19
(lp3287
sg21
I0
sba(iArchitecture
Entity
p3288
(dp3289
g11
(lp3290
sg13
S'com.google.common.collect.EmptyContiguousSet$SerializedForm'
p3291
sg15
(lp3292
sg17
(lp3293
sg19
(lp3294
sg21
I0
sba(iArchitecture
Entity
p3295
(dp3296
g11
(lp3297
sg13
S'com.google.common.collect.EmptyImmutableBiMap'
p3298
sg15
(lp3299
sg17
(lp3300
sg19
(lp3301
sg21
I0
sba(iArchitecture
Entity
p3302
(dp3303
g11
(lp3304
sg13
S'com.google.common.collect.EmptyImmutableBiMap_CustomFieldSerializer'
p3305
sg15
(lp3306
sg17
(lp3307
sg19
(lp3308
sg21
I0
sba(iArchitecture
Entity
p3309
(dp3310
g11
(lp3311
g102
asg13
S'com.google.common.collect.EmptyImmutableListMultimap'
p3312
sg15
(lp3313
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p3314
asg17
(lp3315
g107
asg19
(lp3316
g109
asg21
I0
sba(iArchitecture
Entity
p3317
(dp3318
g11
(lp3319
sg13
S'com.google.common.collect.EmptyImmutableListMultimap_CustomFieldSerializer'
p3320
sg15
(lp3321
sg17
(lp3322
sg19
(lp3323
sg21
I0
sba(iArchitecture
Entity
p3324
(dp3325
g11
(lp3326
g102
asg13
S'com.google.common.collect.EmptyImmutableSet'
p3327
sg15
(lp3328
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p3329
asg17
(lp3330
g107
asg19
(lp3331
g109
asg21
I0
sba(iArchitecture
Entity
p3332
(dp3333
g11
(lp3334
g102
asg13
S'com.google.common.collect.EmptyImmutableSetMultimap'
p3335
sg15
(lp3336
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p3337
asg17
(lp3338
g107
asg19
(lp3339
g109
asg21
I0
sba(iArchitecture
Entity
p3340
(dp3341
g11
(lp3342
sg13
S'com.google.common.collect.EmptyImmutableSetMultimap_CustomFieldSerializer'
p3343
sg15
(lp3344
sg17
(lp3345
sg19
(lp3346
sg21
I0
sba(iArchitecture
Entity
p3347
(dp3348
g11
(lp3349
sg13
S'com.google.common.collect.EmptyImmutableSet_CustomFieldSerializer'
p3350
sg15
(lp3351
sg17
(lp3352
sg19
(lp3353
sg21
I0
sba(iArchitecture
Entity
p3354
(dp3355
g11
(lp3356
sg13
S'com.google.common.collect.EmptyImmutableSortedMap'
p3357
sg15
(lp3358
sg17
(lp3359
sg19
(lp3360
sg21
I0
sba(iArchitecture
Entity
p3361
(dp3362
g11
(lp3363
sg13
S'com.google.common.collect.EmptyImmutableSortedMap_CustomFieldSerializer'
p3364
sg15
(lp3365
sg17
(lp3366
sg19
(lp3367
sg21
I0
sba(iArchitecture
Entity
p3368
(dp3369
g11
(lp3370
sg13
S'com.google.common.collect.EmptyImmutableSortedMultiset'
p3371
sg15
(lp3372
sg17
(lp3373
sg19
(lp3374
sg21
I0
sba(iArchitecture
Entity
p3375
(dp3376
g11
(lp3377
sg13
S'com.google.common.collect.EmptyImmutableSortedSet'
p3378
sg15
(lp3379
sg17
(lp3380
sg19
(lp3381
sg21
I0
sba(iArchitecture
Entity
p3382
(dp3383
g11
(lp3384
sg13
S'com.google.common.collect.EmptyImmutableSortedSet_CustomFieldSerializer'
p3385
sg15
(lp3386
sg17
(lp3387
sg19
(lp3388
sg21
I0
sba(iArchitecture
Entity
p3389
(dp3390
g11
(lp3391
sg13
S'com.google.common.collect.EnumBiMap'
p3392
sg15
(lp3393
sg17
(lp3394
sg19
(lp3395
sg21
I0
sba(iArchitecture
Entity
p3396
(dp3397
g11
(lp3398
sg13
S'com.google.common.collect.EnumHashBiMap'
p3399
sg15
(lp3400
sg17
(lp3401
sg19
(lp3402
sg21
I0
sba(iArchitecture
Entity
p3403
(dp3404
g11
(lp3405
sg13
S'com.google.common.collect.ExplicitOrdering'
p3406
sg15
(lp3407
sg17
(lp3408
sg19
(lp3409
sg21
I0
sba(iArchitecture
Entity
p3410
(dp3411
g11
(lp3412
sg13
S'com.google.common.collect.FilteredEntryMultimap'
p3413
sg15
(lp3414
sg17
(lp3415
sg19
(lp3416
sg21
I0
sba(iArchitecture
Entity
p3417
(dp3418
g11
(lp3419
sg13
S'com.google.common.collect.FilteredEntryMultimap$AsMap'
p3420
sg15
(lp3421
sg17
(lp3422
sg19
(lp3423
sg21
I0
sba(iArchitecture
Entity
p3424
(dp3425
g11
(lp3426
sg13
S'com.google.common.collect.FilteredEntryMultimap$AsMap$1'
p3427
sg15
(lp3428
sg17
(lp3429
sg19
(lp3430
sg21
I0
sba(iArchitecture
Entity
p3431
(dp3432
g11
(lp3433
sg13
S'com.google.common.collect.FilteredEntryMultimap$AsMap$2'
p3434
sg15
(lp3435
sg17
(lp3436
sg19
(lp3437
sg21
I0
sba(iArchitecture
Entity
p3438
(dp3439
g11
(lp3440
sg13
S'com.google.common.collect.FilteredEntryMultimap$AsMap$2$1'
p3441
sg15
(lp3442
sg17
(lp3443
sg19
(lp3444
sg21
I0
sba(iArchitecture
Entity
p3445
(dp3446
g11
(lp3447
sg13
S'com.google.common.collect.FilteredEntryMultimap$AsMap$3'
p3448
sg15
(lp3449
sg17
(lp3450
sg19
(lp3451
sg21
I0
sba(iArchitecture
Entity
p3452
(dp3453
g11
(lp3454
sg13
S'com.google.common.collect.FilteredEntryMultimap$Keys'
p3455
sg15
(lp3456
sg17
(lp3457
sg19
(lp3458
sg21
I0
sba(iArchitecture
Entity
p3459
(dp3460
g11
(lp3461
sg13
S'com.google.common.collect.FilteredEntryMultimap$Keys$1'
p3462
sg15
(lp3463
sg17
(lp3464
sg19
(lp3465
sg21
I0
sba(iArchitecture
Entity
p3466
(dp3467
g11
(lp3468
sg13
S'com.google.common.collect.FilteredEntryMultimap$Keys$1$1'
p3469
sg15
(lp3470
sg17
(lp3471
sg19
(lp3472
sg21
I0
sba(iArchitecture
Entity
p3473
(dp3474
g11
(lp3475
sg13
S'com.google.common.collect.FilteredEntryMultimap$ValuePredicate'
p3476
sg15
(lp3477
sg17
(lp3478
sg19
(lp3479
sg21
I0
sba(iArchitecture
Entity
p3480
(dp3481
g11
(lp3482
sg13
S'com.google.common.collect.FilteredEntrySetMultimap'
p3483
sg15
(lp3484
sg17
(lp3485
sg19
(lp3486
sg21
I0
sba(iArchitecture
Entity
p3487
(dp3488
g11
(lp3489
sg13
S'com.google.common.collect.FilteredKeyListMultimap'
p3490
sg15
(lp3491
sg17
(lp3492
sg19
(lp3493
sg21
I0
sba(iArchitecture
Entity
p3494
(dp3495
g11
(lp3496
sg13
S'com.google.common.collect.FilteredKeyMultimap'
p3497
sg15
(lp3498
sg17
(lp3499
sg19
(lp3500
sg21
I0
sba(iArchitecture
Entity
p3501
(dp3502
g11
(lp3503
sg13
S'com.google.common.collect.FilteredKeyMultimap$AddRejectingList'
p3504
sg15
(lp3505
sg17
(lp3506
sg19
(lp3507
sg21
I0
sba(iArchitecture
Entity
p3508
(dp3509
g11
(lp3510
sg13
S'com.google.common.collect.FilteredKeyMultimap$AddRejectingSet'
p3511
sg15
(lp3512
sg17
(lp3513
sg19
(lp3514
sg21
I0
sba(iArchitecture
Entity
p3515
(dp3516
g11
(lp3517
sg13
S'com.google.common.collect.FilteredKeyMultimap$Entries'
p3518
sg15
(lp3519
sg17
(lp3520
sg19
(lp3521
sg21
I0
sba(iArchitecture
Entity
p3522
(dp3523
g11
(lp3524
sg13
S'com.google.common.collect.FilteredKeySetMultimap'
p3525
sg15
(lp3526
sg17
(lp3527
sg19
(lp3528
sg21
I0
sba(iArchitecture
Entity
p3529
(dp3530
g11
(lp3531
sg13
S'com.google.common.collect.FilteredKeySetMultimap$EntrySet'
p3532
sg15
(lp3533
sg17
(lp3534
sg19
(lp3535
sg21
I0
sba(iArchitecture
Entity
p3536
(dp3537
g11
(lp3538
sg13
S'com.google.common.collect.FilteredMultimap'
p3539
sg15
(lp3540
sg17
(lp3541
sg19
(lp3542
sg21
I0
sba(iArchitecture
Entity
p3543
(dp3544
g11
(lp3545
sg13
S'com.google.common.collect.FilteredMultimapValues'
p3546
sg15
(lp3547
sg17
(lp3548
sg19
(lp3549
sg21
I0
sba(iArchitecture
Entity
p3550
(dp3551
g11
(lp3552
sg13
S'com.google.common.collect.FilteredSetMultimap'
p3553
sg15
(lp3554
sg17
(lp3555
sg19
(lp3556
sg21
I0
sba(iArchitecture
Entity
p3557
(dp3558
g11
(lp3559
V1963
p3560
ag3560
asg13
S'com.google.common.collect.FluentIterable'
p3561
sg15
(lp3562
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p3563
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p3564
asg17
(lp3565
(lp3566
I0
aag3566
asg19
(lp3567
VDe-@Beta Maps.asMap and toMap
p3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p3569
(dp3570
g11
(lp3571
g3560
ag3560
asg13
S'com.google.common.collect.FluentIterable$1'
p3572
sg15
(lp3573
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p3574
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p3575
asg17
(lp3576
g3566
ag3566
asg19
(lp3577
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p3578
(dp3579
g11
(lp3580
g3560
ag3560
asg13
S'com.google.common.collect.FluentIterable$FromIterableFunction'
p3581
sg15
(lp3582
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p3583
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p3584
asg17
(lp3585
g3566
ag3566
asg19
(lp3586
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p3587
(dp3588
g11
(lp3589
sg13
S'com.google.common.collect.ForwardingBlockingDeque'
p3590
sg15
(lp3591
sg17
(lp3592
sg19
(lp3593
sg21
I0
sba(iArchitecture
Entity
p3594
(dp3595
g11
(lp3596
sg13
S'com.google.common.collect.ForwardingCollection'
p3597
sg15
(lp3598
sg17
(lp3599
sg19
(lp3600
sg21
I0
sba(iArchitecture
Entity
p3601
(dp3602
g11
(lp3603
sg13
S'com.google.common.collect.ForwardingConcurrentMap'
p3604
sg15
(lp3605
sg17
(lp3606
sg19
(lp3607
sg21
I0
sba(iArchitecture
Entity
p3608
(dp3609
g11
(lp3610
sg13
S'com.google.common.collect.ForwardingDeque'
p3611
sg15
(lp3612
sg17
(lp3613
sg19
(lp3614
sg21
I0
sba(iArchitecture
Entity
p3615
(dp3616
g11
(lp3617
sg13
S'com.google.common.collect.ForwardingIterator'
p3618
sg15
(lp3619
sg17
(lp3620
sg19
(lp3621
sg21
I0
sba(iArchitecture
Entity
p3622
(dp3623
g11
(lp3624
sg13
S'com.google.common.collect.ForwardingList'
p3625
sg15
(lp3626
sg17
(lp3627
sg19
(lp3628
sg21
I0
sba(iArchitecture
Entity
p3629
(dp3630
g11
(lp3631
sg13
S'com.google.common.collect.ForwardingListIterator'
p3632
sg15
(lp3633
sg17
(lp3634
sg19
(lp3635
sg21
I0
sba(iArchitecture
Entity
p3636
(dp3637
g11
(lp3638
sg13
S'com.google.common.collect.ForwardingMap'
p3639
sg15
(lp3640
sg17
(lp3641
sg19
(lp3642
sg21
I0
sba(iArchitecture
Entity
p3643
(dp3644
g11
(lp3645
sg13
S'com.google.common.collect.ForwardingMap$StandardEntrySet'
p3646
sg15
(lp3647
sg17
(lp3648
sg19
(lp3649
sg21
I0
sba(iArchitecture
Entity
p3650
(dp3651
g11
(lp3652
sg13
S'com.google.common.collect.ForwardingMap$StandardKeySet'
p3653
sg15
(lp3654
sg17
(lp3655
sg19
(lp3656
sg21
I0
sba(iArchitecture
Entity
p3657
(dp3658
g11
(lp3659
sg13
S'com.google.common.collect.ForwardingMap$StandardValues'
p3660
sg15
(lp3661
sg17
(lp3662
sg19
(lp3663
sg21
I0
sba(iArchitecture
Entity
p3664
(dp3665
g11
(lp3666
sg13
S'com.google.common.collect.ForwardingMultimap'
p3667
sg15
(lp3668
sg17
(lp3669
sg19
(lp3670
sg21
I0
sba(iArchitecture
Entity
p3671
(dp3672
g11
(lp3673
sg13
S'com.google.common.collect.ForwardingMultiset'
p3674
sg15
(lp3675
sg17
(lp3676
sg19
(lp3677
sg21
I0
sba(iArchitecture
Entity
p3678
(dp3679
g11
(lp3680
sg13
S'com.google.common.collect.ForwardingMultiset$StandardElementSet'
p3681
sg15
(lp3682
sg17
(lp3683
sg19
(lp3684
sg21
I0
sba(iArchitecture
Entity
p3685
(dp3686
g11
(lp3687
sg13
S'com.google.common.collect.ForwardingNavigableMap'
p3688
sg15
(lp3689
sg17
(lp3690
sg19
(lp3691
sg21
I0
sba(iArchitecture
Entity
p3692
(dp3693
g11
(lp3694
sg13
S'com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap'
p3695
sg15
(lp3696
sg17
(lp3697
sg19
(lp3698
sg21
I0
sba(iArchitecture
Entity
p3699
(dp3700
g11
(lp3701
sg13
S'com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1'
p3702
sg15
(lp3703
sg17
(lp3704
sg19
(lp3705
sg21
I0
sba(iArchitecture
Entity
p3706
(dp3707
g11
(lp3708
sg13
S'com.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet'
p3709
sg15
(lp3710
sg17
(lp3711
sg19
(lp3712
sg21
I0
sba(iArchitecture
Entity
p3713
(dp3714
g11
(lp3715
sg13
S'com.google.common.collect.ForwardingNavigableSet'
p3716
sg15
(lp3717
sg17
(lp3718
sg19
(lp3719
sg21
I0
sba(iArchitecture
Entity
p3720
(dp3721
g11
(lp3722
sg13
S'com.google.common.collect.ForwardingNavigableSet$StandardDescendingSet'
p3723
sg15
(lp3724
sg17
(lp3725
sg19
(lp3726
sg21
I0
sba(iArchitecture
Entity
p3727
(dp3728
g11
(lp3729
sg13
S'com.google.common.collect.ForwardingQueue'
p3730
sg15
(lp3731
sg17
(lp3732
sg19
(lp3733
sg21
I0
sba(iArchitecture
Entity
p3734
(dp3735
g11
(lp3736
sg13
S'com.google.common.collect.ForwardingSet'
p3737
sg15
(lp3738
sg17
(lp3739
sg19
(lp3740
sg21
I0
sba(iArchitecture
Entity
p3741
(dp3742
g11
(lp3743
sg13
S'com.google.common.collect.ForwardingSetMultimap'
p3744
sg15
(lp3745
sg17
(lp3746
sg19
(lp3747
sg21
I0
sba(iArchitecture
Entity
p3748
(dp3749
g11
(lp3750
sg13
S'com.google.common.collect.ForwardingSortedMap'
p3751
sg15
(lp3752
sg17
(lp3753
sg19
(lp3754
sg21
I0
sba(iArchitecture
Entity
p3755
(dp3756
g11
(lp3757
sg13
S'com.google.common.collect.ForwardingSortedMap$StandardKeySet'
p3758
sg15
(lp3759
sg17
(lp3760
sg19
(lp3761
sg21
I0
sba(iArchitecture
Entity
p3762
(dp3763
g11
(lp3764
sg13
S'com.google.common.collect.ForwardingSortedMultiset'
p3765
sg15
(lp3766
sg17
(lp3767
sg19
(lp3768
sg21
I0
sba(iArchitecture
Entity
p3769
(dp3770
g11
(lp3771
sg13
S'com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset'
p3772
sg15
(lp3773
sg17
(lp3774
sg19
(lp3775
sg21
I0
sba(iArchitecture
Entity
p3776
(dp3777
g11
(lp3778
sg13
S'com.google.common.collect.ForwardingSortedMultiset$StandardElementSet'
p3779
sg15
(lp3780
sg17
(lp3781
sg19
(lp3782
sg21
I0
sba(iArchitecture
Entity
p3783
(dp3784
g11
(lp3785
sg13
S'com.google.common.collect.ForwardingSortedSet'
p3786
sg15
(lp3787
sg17
(lp3788
sg19
(lp3789
sg21
I0
sba(iArchitecture
Entity
p3790
(dp3791
g11
(lp3792
sg13
S'com.google.common.collect.ForwardingSortedSetMultimap'
p3793
sg15
(lp3794
sg17
(lp3795
sg19
(lp3796
sg21
I0
sba(iArchitecture
Entity
p3797
(dp3798
g11
(lp3799
sg13
S'com.google.common.collect.ForwardingTable'
p3800
sg15
(lp3801
sg17
(lp3802
sg19
(lp3803
sg21
I0
sba(iArchitecture
Entity
p3804
(dp3805
g11
(lp3806
sg13
S'com.google.common.collect.GeneralRange'
p3807
sg15
(lp3808
sg17
(lp3809
sg19
(lp3810
sg21
I0
sba(iArchitecture
Entity
p3811
(dp3812
g11
(lp3813
sg13
S'com.google.common.collect.GenericMapMaker'
p3814
sg15
(lp3815
sg17
(lp3816
sg19
(lp3817
sg21
I0
sba(iArchitecture
Entity
p3818
(dp3819
g11
(lp3820
sg13
S'com.google.common.collect.GenericMapMaker$NullListener'
p3821
sg15
(lp3822
sg17
(lp3823
sg19
(lp3824
sg21
I0
sba(iArchitecture
Entity
p3825
(dp3826
g11
(lp3827
sg13
S'com.google.common.collect.GwtSerializationDependencies'
p3828
sg15
(lp3829
sg17
(lp3830
sg19
(lp3831
sg21
I0
sba(iArchitecture
Entity
p3832
(dp3833
g11
(lp3834
sg13
S'com.google.common.collect.GwtSerializationDependencies$HashBasedTableDependencies'
p3835
sg15
(lp3836
sg17
(lp3837
sg19
(lp3838
sg21
I0
sba(iArchitecture
Entity
p3839
(dp3840
g11
(lp3841
sg13
S'com.google.common.collect.GwtSerializationDependencies$ImmutableListMultimapDependencies'
p3842
sg15
(lp3843
sg17
(lp3844
sg19
(lp3845
sg21
I0
sba(iArchitecture
Entity
p3846
(dp3847
g11
(lp3848
sg13
S'com.google.common.collect.GwtSerializationDependencies$ImmutableSetMultimapDependencies'
p3849
sg15
(lp3850
sg17
(lp3851
sg19
(lp3852
sg21
I0
sba(iArchitecture
Entity
p3853
(dp3854
g11
(lp3855
sg13
S'com.google.common.collect.GwtSerializationDependencies$ImmutableTableDependencies'
p3856
sg15
(lp3857
sg17
(lp3858
sg19
(lp3859
sg21
I0
sba(iArchitecture
Entity
p3860
(dp3861
g11
(lp3862
sg13
S'com.google.common.collect.GwtSerializationDependencies$LinkedListMultimapDependencies'
p3863
sg15
(lp3864
sg17
(lp3865
sg19
(lp3866
sg21
I0
sba(iArchitecture
Entity
p3867
(dp3868
g11
(lp3869
sg13
S'com.google.common.collect.GwtSerializationDependencies$TreeBasedTableDependencies'
p3870
sg15
(lp3871
sg17
(lp3872
sg19
(lp3873
sg21
I0
sba(iArchitecture
Entity
p3874
(dp3875
g11
(lp3876
sg13
S'com.google.common.collect.GwtSerializationDependencies$TreeMultimapDependencies'
p3877
sg15
(lp3878
sg17
(lp3879
sg19
(lp3880
sg21
I0
sba(iArchitecture
Entity
p3881
(dp3882
g11
(lp3883
sg13
S'com.google.common.collect.GwtTransient'
p3884
sg15
(lp3885
sg17
(lp3886
sg19
(lp3887
sg21
I0
sba(iArchitecture
Entity
p3888
(dp3889
g11
(lp3890
sg13
S'com.google.common.collect.HashBasedTable_CustomFieldSerializer'
p3891
sg15
(lp3892
sg17
(lp3893
sg19
(lp3894
sg21
I0
sba(iArchitecture
Entity
p3895
(dp3896
g11
(lp3897
sg13
S'com.google.common.collect.HashBiMap'
p3898
sg15
(lp3899
sg17
(lp3900
sg19
(lp3901
sg21
I0
sba(iArchitecture
Entity
p3902
(dp3903
g11
(lp3904
sg13
S'com.google.common.collect.HashBiMap$1'
p3905
sg15
(lp3906
sg17
(lp3907
sg19
(lp3908
sg21
I0
sba(iArchitecture
Entity
p3909
(dp3910
g11
(lp3911
sg13
S'com.google.common.collect.HashBiMap$BiEntry'
p3912
sg15
(lp3913
sg17
(lp3914
sg19
(lp3915
sg21
I0
sba(iArchitecture
Entity
p3916
(dp3917
g11
(lp3918
sg13
S'com.google.common.collect.HashBiMap$EntrySet'
p3919
sg15
(lp3920
sg17
(lp3921
sg19
(lp3922
sg21
I0
sba(iArchitecture
Entity
p3923
(dp3924
g11
(lp3925
sg13
S'com.google.common.collect.HashBiMap$EntrySet$1'
p3926
sg15
(lp3927
sg17
(lp3928
sg19
(lp3929
sg21
I0
sba(iArchitecture
Entity
p3930
(dp3931
g11
(lp3932
sg13
S'com.google.common.collect.HashBiMap$EntrySet$1$MapEntry'
p3933
sg15
(lp3934
sg17
(lp3935
sg19
(lp3936
sg21
I0
sba(iArchitecture
Entity
p3937
(dp3938
g11
(lp3939
sg13
S'com.google.common.collect.HashBiMap$EntrySet$1.MapEntry'
p3940
sg15
(lp3941
sg17
(lp3942
sg19
(lp3943
sg21
I0
sba(iArchitecture
Entity
p3944
(dp3945
g11
(lp3946
sg13
S'com.google.common.collect.HashBiMap$Inverse'
p3947
sg15
(lp3948
sg17
(lp3949
sg19
(lp3950
sg21
I0
sba(iArchitecture
Entity
p3951
(dp3952
g11
(lp3953
sg13
S'com.google.common.collect.HashBiMap$Inverse$1'
p3954
sg15
(lp3955
sg17
(lp3956
sg19
(lp3957
sg21
I0
sba(iArchitecture
Entity
p3958
(dp3959
g11
(lp3960
sg13
S'com.google.common.collect.HashBiMap$Inverse$1$1'
p3961
sg15
(lp3962
sg17
(lp3963
sg19
(lp3964
sg21
I0
sba(iArchitecture
Entity
p3965
(dp3966
g11
(lp3967
sg13
S'com.google.common.collect.HashBiMap$Inverse$1$1$InverseEntry'
p3968
sg15
(lp3969
sg17
(lp3970
sg19
(lp3971
sg21
I0
sba(iArchitecture
Entity
p3972
(dp3973
g11
(lp3974
sg13
S'com.google.common.collect.HashBiMap$Inverse$1$1.InverseEntry'
p3975
sg15
(lp3976
sg17
(lp3977
sg19
(lp3978
sg21
I0
sba(iArchitecture
Entity
p3979
(dp3980
g11
(lp3981
sg13
S'com.google.common.collect.HashBiMap$Inverse$InverseKeySet'
p3982
sg15
(lp3983
sg17
(lp3984
sg19
(lp3985
sg21
I0
sba(iArchitecture
Entity
p3986
(dp3987
g11
(lp3988
sg13
S'com.google.common.collect.HashBiMap$Inverse$InverseKeySet$1'
p3989
sg15
(lp3990
sg17
(lp3991
sg19
(lp3992
sg21
I0
sba(iArchitecture
Entity
p3993
(dp3994
g11
(lp3995
sg13
S'com.google.common.collect.HashBiMap$InverseSerializedForm'
p3996
sg15
(lp3997
sg17
(lp3998
sg19
(lp3999
sg21
I0
sba(iArchitecture
Entity
p4000
(dp4001
g11
(lp4002
sg13
S'com.google.common.collect.HashBiMap$Itr'
p4003
sg15
(lp4004
sg17
(lp4005
sg19
(lp4006
sg21
I0
sba(iArchitecture
Entity
p4007
(dp4008
g11
(lp4009
sg13
S'com.google.common.collect.HashBiMap$KeySet'
p4010
sg15
(lp4011
sg17
(lp4012
sg19
(lp4013
sg21
I0
sba(iArchitecture
Entity
p4014
(dp4015
g11
(lp4016
sg13
S'com.google.common.collect.HashBiMap$KeySet$1'
p4017
sg15
(lp4018
sg17
(lp4019
sg19
(lp4020
sg21
I0
sba(iArchitecture
Entity
p4021
(dp4022
g11
(lp4023
sg13
S'com.google.common.collect.Hashing'
p4024
sg15
(lp4025
sg17
(lp4026
sg19
(lp4027
sg21
I0
sba(iArchitecture
Entity
p4028
(dp4029
g11
(lp4030
g102
asg13
S'com.google.common.collect.ImmutableAsList'
p4031
sg15
(lp4032
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p4033
asg17
(lp4034
g107
asg19
(lp4035
g109
asg21
I0
sba(iArchitecture
Entity
p4036
(dp4037
g11
(lp4038
g102
asg13
S'com.google.common.collect.ImmutableAsList$SerializedForm'
p4039
sg15
(lp4040
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p4041
asg17
(lp4042
g107
asg19
(lp4043
g109
asg21
I0
sba(iArchitecture
Entity
p4044
(dp4045
g11
(lp4046
sg13
S'com.google.common.collect.ImmutableBiMap'
p4047
sg15
(lp4048
sg17
(lp4049
sg19
(lp4050
sg21
I0
sba(iArchitecture
Entity
p4051
(dp4052
g11
(lp4053
sg13
S'com.google.common.collect.ImmutableBiMap$Builder'
p4054
sg15
(lp4055
sg17
(lp4056
sg19
(lp4057
sg21
I0
sba(iArchitecture
Entity
p4058
(dp4059
g11
(lp4060
sg13
S'com.google.common.collect.ImmutableBiMap$SerializedForm'
p4061
sg15
(lp4062
sg17
(lp4063
sg19
(lp4064
sg21
I0
sba(iArchitecture
Entity
p4065
(dp4066
g11
(lp4067
sg13
S'com.google.common.collect.ImmutableEntry'
p4068
sg15
(lp4069
sg17
(lp4070
sg19
(lp4071
sg21
I0
sba(iArchitecture
Entity
p4072
(dp4073
g11
(lp4074
sg13
S'com.google.common.collect.ImmutableEntry_CustomFieldSerializer'
p4075
sg15
(lp4076
sg17
(lp4077
sg19
(lp4078
sg21
I0
sba(iArchitecture
Entity
p4079
(dp4080
g11
(lp4081
sg13
S'com.google.common.collect.ImmutableEnumMap'
p4082
sg15
(lp4083
sg17
(lp4084
sg19
(lp4085
sg21
I0
sba(iArchitecture
Entity
p4086
(dp4087
g11
(lp4088
sg13
S'com.google.common.collect.ImmutableEnumMap$1'
p4089
sg15
(lp4090
sg17
(lp4091
sg19
(lp4092
sg21
I0
sba(iArchitecture
Entity
p4093
(dp4094
g11
(lp4095
sg13
S'com.google.common.collect.ImmutableEnumMap$2'
p4096
sg15
(lp4097
sg17
(lp4098
sg19
(lp4099
sg21
I0
sba(iArchitecture
Entity
p4100
(dp4101
g11
(lp4102
sg13
S'com.google.common.collect.ImmutableEnumMap$2$1'
p4103
sg15
(lp4104
sg17
(lp4105
sg19
(lp4106
sg21
I0
sba(iArchitecture
Entity
p4107
(dp4108
g11
(lp4109
sg13
S'com.google.common.collect.ImmutableEnumMap$EnumSerializedForm'
p4110
sg15
(lp4111
sg17
(lp4112
sg19
(lp4113
sg21
I0
sba(iArchitecture
Entity
p4114
(dp4115
g11
(lp4116
sg13
S'com.google.common.collect.ImmutableEnumSet'
p4117
sg15
(lp4118
sg17
(lp4119
sg19
(lp4120
sg21
I0
sba(iArchitecture
Entity
p4121
(dp4122
g11
(lp4123
sg13
S'com.google.common.collect.ImmutableEnumSet$1'
p4124
sg15
(lp4125
sg17
(lp4126
sg19
(lp4127
sg21
I0
sba(iArchitecture
Entity
p4128
(dp4129
g11
(lp4130
sg13
S'com.google.common.collect.ImmutableEnumSet$EnumSerializedForm'
p4131
sg15
(lp4132
sg17
(lp4133
sg19
(lp4134
sg21
I0
sba(iArchitecture
Entity
p4135
(dp4136
g11
(lp4137
sg13
S'com.google.common.collect.ImmutableEnumSet_CustomFieldSerializer'
p4138
sg15
(lp4139
sg17
(lp4140
sg19
(lp4141
sg21
I0
sba(iArchitecture
Entity
p4142
(dp4143
g11
(lp4144
g102
aV1977
p4145
asg13
S'com.google.common.collect.ImmutableList'
p4146
sg15
(lp4147
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p4148
aVImmutableList contains following code since version 15.0\u000a\u000a private static final ImmutableList<Object> EMPTY =\u000a      new RegularImmutableList<Object>(ObjectArrays.EMPTY_ARRAY);\u000a
p4149
asg17
(lp4150
g107
a(lp4151
I1
aasg19
(lp4152
g109
aVPossible deadlock in ImmutableList 
p4153
asg21
I0
sba(iArchitecture
Entity
p4154
(dp4155
g11
(lp4156
g102
ag4145
asg13
S'com.google.common.collect.ImmutableList$1'
p4157
sg15
(lp4158
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p4159
aVImmutableList contains following code since version 15.0\u000a\u000a private static final ImmutableList<Object> EMPTY =\u000a      new RegularImmutableList<Object>(ObjectArrays.EMPTY_ARRAY);\u000a
p4160
asg17
(lp4161
g107
ag4151
asg19
(lp4162
g109
ag4153
asg21
I0
sba(iArchitecture
Entity
p4163
(dp4164
g11
(lp4165
g102
ag4145
asg13
S'com.google.common.collect.ImmutableList$ReverseImmutableList'
p4166
sg15
(lp4167
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p4168
aVImmutableList contains following code since version 15.0\u000a\u000a private static final ImmutableList<Object> EMPTY =\u000a      new RegularImmutableList<Object>(ObjectArrays.EMPTY_ARRAY);\u000a
p4169
asg17
(lp4170
g107
ag4151
asg19
(lp4171
g109
ag4153
asg21
I0
sba(iArchitecture
Entity
p4172
(dp4173
g11
(lp4174
g102
ag4145
asg13
S'com.google.common.collect.ImmutableList$SerializedForm'
p4175
sg15
(lp4176
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p4177
aVImmutableList contains following code since version 15.0\u000a\u000a private static final ImmutableList<Object> EMPTY =\u000a      new RegularImmutableList<Object>(ObjectArrays.EMPTY_ARRAY);\u000a
p4178
asg17
(lp4179
g107
ag4151
asg19
(lp4180
g109
ag4153
asg21
I0
sba(iArchitecture
Entity
p4181
(dp4182
g11
(lp4183
g102
ag4145
asg13
S'com.google.common.collect.ImmutableList$SubList'
p4184
sg15
(lp4185
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p4186
aVImmutableList contains following code since version 15.0\u000a\u000a private static final ImmutableList<Object> EMPTY =\u000a      new RegularImmutableList<Object>(ObjectArrays.EMPTY_ARRAY);\u000a
p4187
asg17
(lp4188
g107
ag4151
asg19
(lp4189
g109
ag4153
asg21
I0
sba(iArchitecture
Entity
p4190
(dp4191
g11
(lp4192
sg13
S'com.google.common.collect.ImmutableListMultimap'
p4193
sg15
(lp4194
sg17
(lp4195
sg19
(lp4196
sg21
I0
sba(iArchitecture
Entity
p4197
(dp4198
g11
(lp4199
sg13
S'com.google.common.collect.ImmutableListMultimap$Builder'
p4200
sg15
(lp4201
sg17
(lp4202
sg19
(lp4203
sg21
I0
sba(iArchitecture
Entity
p4204
(dp4205
g11
(lp4206
sg13
S'com.google.common.collect.ImmutableListMultimap_CustomFieldSerializer'
p4207
sg15
(lp4208
sg17
(lp4209
sg19
(lp4210
sg21
I0
sba(iArchitecture
Entity
p4211
(dp4212
g11
(lp4213
V2082
p4214
asg13
S'com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets'
p4215
sg15
(lp4216
VI'm a [Spoon](https://github.com/INRIA/spoon) contributor, an open source project to analyse and transform Java source code. This project have a dependency to [JDT](https://eclipse.org/jdt/) to compile target source code. Recently, I tried to analyse Guava with Spoon but JDT can't compile our project.\u000a\u000aWhat is the problem?\u000a\u000aIn [`ImmutableMap`](https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableMap.java) class, we have these methods:\u000a\u000a``` java\u000a// If the map is an EnumMap, it must have key type K for some <K extends Enum<K>>.\u000a@SuppressWarnings({"unchecked", "rawtypes"})\u000aprivate static <K, V> ImmutableMap<K, V> copyOfEnumMapUnsafe(Map<? extends K, ? extends V> map) {\u000a    return copyOfEnumMap((EnumMap) map);\u000a}\u000a\u000aprivate static <K extends Enum<K>, V> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\u000a    EnumMap<K, V> copy = new EnumMap<K, V>(original);\u000a    for (Map.Entry<?, ?> entry : copy.entrySet()) {\u000a        checkEntryNotNull(entry.getKey(), entry.getValue());\u000a    }\u000a    return ImmutableEnumMap.asImmutable(copy);\u000a}\u000a```\u000a\u000aThis code is valid but there is an error from JDT:\u000a\u000a> Type mismatch: cannot convert from `<Enum<Enum<K>>>` to `<K>`\u000a\u000aBefore the creation of this issue, I reported the bug in the bugtracker of JDT (issue [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404)). In 2 words, the conclusion was that: "Yes, JDT don't support this usage of Java but there is a better practice". This better practice is explained [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404#c3):\u000a\u000a``` java\u000aprivate static <K extends Enum<K>> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\u000a    return copyOfEnumMap((EnumMap<K,?>) map);\u000a}\u000a```\u000a\u000aI tried some tricky solutions but, unfortunately, this solution can't be applied in your project. So I come to notify you that your project can't be compiled by JDT.\u000a
p4217
asg17
(lp4218
(lp4219
asg19
(lp4220
VGuava can't be compiled by JDT
p4221
asg21
I0
sba(iArchitecture
Entity
p4222
(dp4223
g11
(lp4224
g4214
asg13
S'com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1'
p4225
sg15
(lp4226
VI'm a [Spoon](https://github.com/INRIA/spoon) contributor, an open source project to analyse and transform Java source code. This project have a dependency to [JDT](https://eclipse.org/jdt/) to compile target source code. Recently, I tried to analyse Guava with Spoon but JDT can't compile our project.\u000a\u000aWhat is the problem?\u000a\u000aIn [`ImmutableMap`](https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableMap.java) class, we have these methods:\u000a\u000a``` java\u000a// If the map is an EnumMap, it must have key type K for some <K extends Enum<K>>.\u000a@SuppressWarnings({"unchecked", "rawtypes"})\u000aprivate static <K, V> ImmutableMap<K, V> copyOfEnumMapUnsafe(Map<? extends K, ? extends V> map) {\u000a    return copyOfEnumMap((EnumMap) map);\u000a}\u000a\u000aprivate static <K extends Enum<K>, V> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\u000a    EnumMap<K, V> copy = new EnumMap<K, V>(original);\u000a    for (Map.Entry<?, ?> entry : copy.entrySet()) {\u000a        checkEntryNotNull(entry.getKey(), entry.getValue());\u000a    }\u000a    return ImmutableEnumMap.asImmutable(copy);\u000a}\u000a```\u000a\u000aThis code is valid but there is an error from JDT:\u000a\u000a> Type mismatch: cannot convert from `<Enum<Enum<K>>>` to `<K>`\u000a\u000aBefore the creation of this issue, I reported the bug in the bugtracker of JDT (issue [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404)). In 2 words, the conclusion was that: "Yes, JDT don't support this usage of Java but there is a better practice". This better practice is explained [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404#c3):\u000a\u000a``` java\u000aprivate static <K extends Enum<K>> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\u000a    return copyOfEnumMap((EnumMap<K,?>) map);\u000a}\u000a```\u000a\u000aI tried some tricky solutions but, unfortunately, this solution can't be applied in your project. So I come to notify you that your project can't be compiled by JDT.\u000a
p4227
asg17
(lp4228
g4219
asg19
(lp4229
g4221
asg21
I0
sba(iArchitecture
Entity
p4230
(dp4231
g11
(lp4232
g4214
asg13
S'com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1'
p4233
sg15
(lp4234
VI'm a [Spoon](https://github.com/INRIA/spoon) contributor, an open source project to analyse and transform Java source code. This project have a dependency to [JDT](https://eclipse.org/jdt/) to compile target source code. Recently, I tried to analyse Guava with Spoon but JDT can't compile our project.\u000a\u000aWhat is the problem?\u000a\u000aIn [`ImmutableMap`](https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableMap.java) class, we have these methods:\u000a\u000a``` java\u000a// If the map is an EnumMap, it must have key type K for some <K extends Enum<K>>.\u000a@SuppressWarnings({"unchecked", "rawtypes"})\u000aprivate static <K, V> ImmutableMap<K, V> copyOfEnumMapUnsafe(Map<? extends K, ? extends V> map) {\u000a    return copyOfEnumMap((EnumMap) map);\u000a}\u000a\u000aprivate static <K extends Enum<K>, V> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\u000a    EnumMap<K, V> copy = new EnumMap<K, V>(original);\u000a    for (Map.Entry<?, ?> entry : copy.entrySet()) {\u000a        checkEntryNotNull(entry.getKey(), entry.getValue());\u000a    }\u000a    return ImmutableEnumMap.asImmutable(copy);\u000a}\u000a```\u000a\u000aThis code is valid but there is an error from JDT:\u000a\u000a> Type mismatch: cannot convert from `<Enum<Enum<K>>>` to `<K>`\u000a\u000aBefore the creation of this issue, I reported the bug in the bugtracker of JDT (issue [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404)). In 2 words, the conclusion was that: "Yes, JDT don't support this usage of Java but there is a better practice". This better practice is explained [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404#c3):\u000a\u000a``` java\u000aprivate static <K extends Enum<K>> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\u000a    return copyOfEnumMap((EnumMap<K,?>) map);\u000a}\u000a```\u000a\u000aI tried some tricky solutions but, unfortunately, this solution can't be applied in your project. So I come to notify you that your project can't be compiled by JDT.\u000a
p4235
asg17
(lp4236
g4219
asg19
(lp4237
g4221
asg21
I0
sba(iArchitecture
Entity
p4238
(dp4239
g11
(lp4240
g4214
asg13
S'com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1$1'
p4241
sg15
(lp4242
VI'm a [Spoon](https://github.com/INRIA/spoon) contributor, an open source project to analyse and transform Java source code. This project have a dependency to [JDT](https://eclipse.org/jdt/) to compile target source code. Recently, I tried to analyse Guava with Spoon but JDT can't compile our project.\u000a\u000aWhat is the problem?\u000a\u000aIn [`ImmutableMap`](https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableMap.java) class, we have these methods:\u000a\u000a``` java\u000a// If the map is an EnumMap, it must have key type K for some <K extends Enum<K>>.\u000a@SuppressWarnings({"unchecked", "rawtypes"})\u000aprivate static <K, V> ImmutableMap<K, V> copyOfEnumMapUnsafe(Map<? extends K, ? extends V> map) {\u000a    return copyOfEnumMap((EnumMap) map);\u000a}\u000a\u000aprivate static <K extends Enum<K>, V> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\u000a    EnumMap<K, V> copy = new EnumMap<K, V>(original);\u000a    for (Map.Entry<?, ?> entry : copy.entrySet()) {\u000a        checkEntryNotNull(entry.getKey(), entry.getValue());\u000a    }\u000a    return ImmutableEnumMap.asImmutable(copy);\u000a}\u000a```\u000a\u000aThis code is valid but there is an error from JDT:\u000a\u000a> Type mismatch: cannot convert from `<Enum<Enum<K>>>` to `<K>`\u000a\u000aBefore the creation of this issue, I reported the bug in the bugtracker of JDT (issue [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404)). In 2 words, the conclusion was that: "Yes, JDT don't support this usage of Java but there is a better practice". This better practice is explained [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404#c3):\u000a\u000a``` java\u000aprivate static <K extends Enum<K>> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\u000a    return copyOfEnumMap((EnumMap<K,?>) map);\u000a}\u000a```\u000a\u000aI tried some tricky solutions but, unfortunately, this solution can't be applied in your project. So I come to notify you that your project can't be compiled by JDT.\u000a
p4243
asg17
(lp4244
g4219
asg19
(lp4245
g4221
asg21
I0
sba(iArchitecture
Entity
p4246
(dp4247
g11
(lp4248
sg13
S'com.google.common.collect.ImmutableMapEntrySet'
p4249
sg15
(lp4250
sg17
(lp4251
sg19
(lp4252
sg21
I0
sba(iArchitecture
Entity
p4253
(dp4254
g11
(lp4255
sg13
S'com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm'
p4256
sg15
(lp4257
sg17
(lp4258
sg19
(lp4259
sg21
I0
sba(iArchitecture
Entity
p4260
(dp4261
g11
(lp4262
sg13
S'com.google.common.collect.ImmutableMapKeySet'
p4263
sg15
(lp4264
sg17
(lp4265
sg19
(lp4266
sg21
I0
sba(iArchitecture
Entity
p4267
(dp4268
g11
(lp4269
sg13
S'com.google.common.collect.ImmutableMapKeySet$1'
p4270
sg15
(lp4271
sg17
(lp4272
sg19
(lp4273
sg21
I0
sba(iArchitecture
Entity
p4274
(dp4275
g11
(lp4276
sg13
S'com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm'
p4277
sg15
(lp4278
sg17
(lp4279
sg19
(lp4280
sg21
I0
sba(iArchitecture
Entity
p4281
(dp4282
g11
(lp4283
sg13
S'com.google.common.collect.ImmutableMapValues'
p4284
sg15
(lp4285
sg17
(lp4286
sg19
(lp4287
sg21
I0
sba(iArchitecture
Entity
p4288
(dp4289
g11
(lp4290
sg13
S'com.google.common.collect.ImmutableMapValues$1'
p4291
sg15
(lp4292
sg17
(lp4293
sg19
(lp4294
sg21
I0
sba(iArchitecture
Entity
p4295
(dp4296
g11
(lp4297
sg13
S'com.google.common.collect.ImmutableMapValues$SerializedForm'
p4298
sg15
(lp4299
sg17
(lp4300
sg19
(lp4301
sg21
I0
sba(iArchitecture
Entity
p4302
(dp4303
g11
(lp4304
sg13
S'com.google.common.collect.ImmutableMultimap'
p4305
sg15
(lp4306
sg17
(lp4307
sg19
(lp4308
sg21
I0
sba(iArchitecture
Entity
p4309
(dp4310
g11
(lp4311
sg13
S'com.google.common.collect.ImmutableMultimap$1'
p4312
sg15
(lp4313
sg17
(lp4314
sg19
(lp4315
sg21
I0
sba(iArchitecture
Entity
p4316
(dp4317
g11
(lp4318
sg13
S'com.google.common.collect.ImmutableMultimap$2'
p4319
sg15
(lp4320
sg17
(lp4321
sg19
(lp4322
sg21
I0
sba(iArchitecture
Entity
p4323
(dp4324
g11
(lp4325
sg13
S'com.google.common.collect.ImmutableMultimap$Builder'
p4326
sg15
(lp4327
sg17
(lp4328
sg19
(lp4329
sg21
I0
sba(iArchitecture
Entity
p4330
(dp4331
g11
(lp4332
sg13
S'com.google.common.collect.ImmutableMultimap$BuilderMultimap'
p4333
sg15
(lp4334
sg17
(lp4335
sg19
(lp4336
sg21
I0
sba(iArchitecture
Entity
p4337
(dp4338
g11
(lp4339
sg13
S'com.google.common.collect.ImmutableMultimap$EntryCollection'
p4340
sg15
(lp4341
sg17
(lp4342
sg19
(lp4343
sg21
I0
sba(iArchitecture
Entity
p4344
(dp4345
g11
(lp4346
sg13
S'com.google.common.collect.ImmutableMultimap$FieldSettersHolder'
p4347
sg15
(lp4348
sg17
(lp4349
sg19
(lp4350
sg21
I0
sba(iArchitecture
Entity
p4351
(dp4352
g11
(lp4353
sg13
S'com.google.common.collect.ImmutableMultimap$Itr'
p4354
sg15
(lp4355
sg17
(lp4356
sg19
(lp4357
sg21
I0
sba(iArchitecture
Entity
p4358
(dp4359
g11
(lp4360
sg13
S'com.google.common.collect.ImmutableMultimap$Keys'
p4361
sg15
(lp4362
sg17
(lp4363
sg19
(lp4364
sg21
I0
sba(iArchitecture
Entity
p4365
(dp4366
g11
(lp4367
sg13
S'com.google.common.collect.ImmutableMultimap$Values'
p4368
sg15
(lp4369
sg17
(lp4370
sg19
(lp4371
sg21
I0
sba(iArchitecture
Entity
p4372
(dp4373
g11
(lp4374
sg13
S'com.google.common.collect.ImmutableMultiset'
p4375
sg15
(lp4376
sg17
(lp4377
sg19
(lp4378
sg21
I0
sba(iArchitecture
Entity
p4379
(dp4380
g11
(lp4381
sg13
S'com.google.common.collect.ImmutableMultiset$1'
p4382
sg15
(lp4383
sg17
(lp4384
sg19
(lp4385
sg21
I0
sba(iArchitecture
Entity
p4386
(dp4387
g11
(lp4388
sg13
S'com.google.common.collect.ImmutableMultiset$Builder'
p4389
sg15
(lp4390
sg17
(lp4391
sg19
(lp4392
sg21
I0
sba(iArchitecture
Entity
p4393
(dp4394
g11
(lp4395
sg13
S'com.google.common.collect.ImmutableMultiset$EntrySet'
p4396
sg15
(lp4397
sg17
(lp4398
sg19
(lp4399
sg21
I0
sba(iArchitecture
Entity
p4400
(dp4401
g11
(lp4402
sg13
S'com.google.common.collect.ImmutableMultiset$EntrySet$1'
p4403
sg15
(lp4404
sg17
(lp4405
sg19
(lp4406
sg21
I0
sba(iArchitecture
Entity
p4407
(dp4408
g11
(lp4409
sg13
S'com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm'
p4410
sg15
(lp4411
sg17
(lp4412
sg19
(lp4413
sg21
I0
sba(iArchitecture
Entity
p4414
(dp4415
g11
(lp4416
sg13
S'com.google.common.collect.ImmutableMultiset$SerializedForm'
p4417
sg15
(lp4418
sg17
(lp4419
sg19
(lp4420
sg21
I0
sba(iArchitecture
Entity
p4421
(dp4422
g11
(lp4423
sg13
S'com.google.common.collect.ImmutableRangeMap'
p4424
sg15
(lp4425
sg17
(lp4426
sg19
(lp4427
sg21
I0
sba(iArchitecture
Entity
p4428
(dp4429
g11
(lp4430
sg13
S'com.google.common.collect.ImmutableRangeMap$1'
p4431
sg15
(lp4432
sg17
(lp4433
sg19
(lp4434
sg21
I0
sba(iArchitecture
Entity
p4435
(dp4436
g11
(lp4437
sg13
S'com.google.common.collect.ImmutableRangeMap$2'
p4438
sg15
(lp4439
sg17
(lp4440
sg19
(lp4441
sg21
I0
sba(iArchitecture
Entity
p4442
(dp4443
g11
(lp4444
sg13
S'com.google.common.collect.ImmutableRangeMap$Builder'
p4445
sg15
(lp4446
sg17
(lp4447
sg19
(lp4448
sg21
I0
sba(iArchitecture
Entity
p4449
(dp4450
g11
(lp4451
sg13
S'com.google.common.collect.ImmutableRangeSet'
p4452
sg15
(lp4453
sg17
(lp4454
sg19
(lp4455
sg21
I0
sba(iArchitecture
Entity
p4456
(dp4457
g11
(lp4458
sg13
S'com.google.common.collect.ImmutableRangeSet$1'
p4459
sg15
(lp4460
sg17
(lp4461
sg19
(lp4462
sg21
I0
sba(iArchitecture
Entity
p4463
(dp4464
g11
(lp4465
sg13
S'com.google.common.collect.ImmutableRangeSet$AsSet'
p4466
sg15
(lp4467
sg17
(lp4468
sg19
(lp4469
sg21
I0
sba(iArchitecture
Entity
p4470
(dp4471
g11
(lp4472
sg13
S'com.google.common.collect.ImmutableRangeSet$AsSet$1'
p4473
sg15
(lp4474
sg17
(lp4475
sg19
(lp4476
sg21
I0
sba(iArchitecture
Entity
p4477
(dp4478
g11
(lp4479
sg13
S'com.google.common.collect.ImmutableRangeSet$AsSet$2'
p4480
sg15
(lp4481
sg17
(lp4482
sg19
(lp4483
sg21
I0
sba(iArchitecture
Entity
p4484
(dp4485
g11
(lp4486
sg13
S'com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm'
p4487
sg15
(lp4488
sg17
(lp4489
sg19
(lp4490
sg21
I0
sba(iArchitecture
Entity
p4491
(dp4492
g11
(lp4493
sg13
S'com.google.common.collect.ImmutableRangeSet$Builder'
p4494
sg15
(lp4495
sg17
(lp4496
sg19
(lp4497
sg21
I0
sba(iArchitecture
Entity
p4498
(dp4499
g11
(lp4500
sg13
S'com.google.common.collect.ImmutableRangeSet$ComplementRanges'
p4501
sg15
(lp4502
sg17
(lp4503
sg19
(lp4504
sg21
I0
sba(iArchitecture
Entity
p4505
(dp4506
g11
(lp4507
sg13
S'com.google.common.collect.ImmutableRangeSet$SerializedForm'
p4508
sg15
(lp4509
sg17
(lp4510
sg19
(lp4511
sg21
I0
sba(iArchitecture
Entity
p4512
(dp4513
g11
(lp4514
sg13
S'com.google.common.collect.ImmutableSet'
p4515
sg15
(lp4516
sg17
(lp4517
sg19
(lp4518
sg21
I0
sba(iArchitecture
Entity
p4519
(dp4520
g11
(lp4521
sg13
S'com.google.common.collect.ImmutableSet$SerializedForm'
p4522
sg15
(lp4523
sg17
(lp4524
sg19
(lp4525
sg21
I0
sba(iArchitecture
Entity
p4526
(dp4527
g11
(lp4528
sg13
S'com.google.common.collect.ImmutableSetMultimap'
p4529
sg15
(lp4530
sg17
(lp4531
sg19
(lp4532
sg21
I0
sba(iArchitecture
Entity
p4533
(dp4534
g11
(lp4535
sg13
S'com.google.common.collect.ImmutableSetMultimap$Builder'
p4536
sg15
(lp4537
sg17
(lp4538
sg19
(lp4539
sg21
I0
sba(iArchitecture
Entity
p4540
(dp4541
g11
(lp4542
sg13
S'com.google.common.collect.ImmutableSetMultimap$BuilderMultimap'
p4543
sg15
(lp4544
sg17
(lp4545
sg19
(lp4546
sg21
I0
sba(iArchitecture
Entity
p4547
(dp4548
g11
(lp4549
sg13
S'com.google.common.collect.ImmutableSetMultimap$EntrySet'
p4550
sg15
(lp4551
sg17
(lp4552
sg19
(lp4553
sg21
I0
sba(iArchitecture
Entity
p4554
(dp4555
g11
(lp4556
sg13
S'com.google.common.collect.ImmutableSetMultimap_CustomFieldSerializer'
p4557
sg15
(lp4558
sg17
(lp4559
sg19
(lp4560
sg21
I0
sba(iArchitecture
Entity
p4561
(dp4562
g11
(lp4563
sg13
S'com.google.common.collect.ImmutableSortedAsList'
p4564
sg15
(lp4565
sg17
(lp4566
sg19
(lp4567
sg21
I0
sba(iArchitecture
Entity
p4568
(dp4569
g11
(lp4570
sg13
S'com.google.common.collect.ImmutableSortedMap'
p4571
sg15
(lp4572
sg17
(lp4573
sg19
(lp4574
sg21
I0
sba(iArchitecture
Entity
p4575
(dp4576
g11
(lp4577
sg13
S'com.google.common.collect.ImmutableSortedMap$Builder'
p4578
sg15
(lp4579
sg17
(lp4580
sg19
(lp4581
sg21
I0
sba(iArchitecture
Entity
p4582
(dp4583
g11
(lp4584
sg13
S'com.google.common.collect.ImmutableSortedMap$SerializedForm'
p4585
sg15
(lp4586
sg17
(lp4587
sg19
(lp4588
sg21
I0
sba(iArchitecture
Entity
p4589
(dp4590
g11
(lp4591
sg13
S'com.google.common.collect.ImmutableSortedMapFauxverideShim'
p4592
sg15
(lp4593
sg17
(lp4594
sg19
(lp4595
sg21
I0
sba(iArchitecture
Entity
p4596
(dp4597
g11
(lp4598
sg13
S'com.google.common.collect.ImmutableSortedMap_CustomFieldSerializerBase'
p4599
sg15
(lp4600
sg17
(lp4601
sg19
(lp4602
sg21
I0
sba(iArchitecture
Entity
p4603
(dp4604
g11
(lp4605
sg13
S'com.google.common.collect.ImmutableSortedMultiset'
p4606
sg15
(lp4607
sg17
(lp4608
sg19
(lp4609
sg21
I0
sba(iArchitecture
Entity
p4610
(dp4611
g11
(lp4612
sg13
S'com.google.common.collect.ImmutableSortedMultiset$Builder'
p4613
sg15
(lp4614
sg17
(lp4615
sg19
(lp4616
sg21
I0
sba(iArchitecture
Entity
p4617
(dp4618
g11
(lp4619
sg13
S'com.google.common.collect.ImmutableSortedMultiset$SerializedForm'
p4620
sg15
(lp4621
sg17
(lp4622
sg19
(lp4623
sg21
I0
sba(iArchitecture
Entity
p4624
(dp4625
g11
(lp4626
sg13
S'com.google.common.collect.ImmutableSortedMultisetFauxverideShim'
p4627
sg15
(lp4628
sg17
(lp4629
sg19
(lp4630
sg21
I0
sba(iArchitecture
Entity
p4631
(dp4632
g11
(lp4633
g102
asg13
S'com.google.common.collect.ImmutableSortedSet'
p4634
sg15
(lp4635
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p4636
asg17
(lp4637
g107
asg19
(lp4638
g109
asg21
I0
sba(iArchitecture
Entity
p4639
(dp4640
g11
(lp4641
g102
asg13
S'com.google.common.collect.ImmutableSortedSet$SerializedForm'
p4642
sg15
(lp4643
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p4644
asg17
(lp4645
g107
asg19
(lp4646
g109
asg21
I0
sba(iArchitecture
Entity
p4647
(dp4648
g11
(lp4649
sg13
S'com.google.common.collect.ImmutableSortedSetFauxverideShim'
p4650
sg15
(lp4651
sg17
(lp4652
sg19
(lp4653
sg21
I0
sba(iArchitecture
Entity
p4654
(dp4655
g11
(lp4656
sg13
S'com.google.common.collect.ImmutableTable'
p4657
sg15
(lp4658
sg17
(lp4659
sg19
(lp4660
sg21
I0
sba(iArchitecture
Entity
p4661
(dp4662
g11
(lp4663
sg13
S'com.google.common.collect.ImmutableTable$Builder'
p4664
sg15
(lp4665
sg17
(lp4666
sg19
(lp4667
sg21
I0
sba(iArchitecture
Entity
p4668
(dp4669
g11
(lp4670
sg13
S'com.google.common.collect.ImmutableTable_CustomFieldSerializerBase'
p4671
sg15
(lp4672
sg17
(lp4673
sg19
(lp4674
sg21
I0
sba(iArchitecture
Entity
p4675
(dp4676
g11
(lp4677
sg13
S'com.google.common.collect.Interner'
p4678
sg15
(lp4679
sg17
(lp4680
sg19
(lp4681
sg21
I0
sba(iArchitecture
Entity
p4682
(dp4683
g11
(lp4684
sg13
S'com.google.common.collect.Interners'
p4685
sg15
(lp4686
sg17
(lp4687
sg19
(lp4688
sg21
I0
sba(iArchitecture
Entity
p4689
(dp4690
g11
(lp4691
sg13
S'com.google.common.collect.Interners$1'
p4692
sg15
(lp4693
sg17
(lp4694
sg19
(lp4695
sg21
I0
sba(iArchitecture
Entity
p4696
(dp4697
g11
(lp4698
sg13
S'com.google.common.collect.Interners$InternerFunction'
p4699
sg15
(lp4700
sg17
(lp4701
sg19
(lp4702
sg21
I0
sba(iArchitecture
Entity
p4703
(dp4704
g11
(lp4705
sg13
S'com.google.common.collect.Interners$WeakInterner'
p4706
sg15
(lp4707
sg17
(lp4708
sg19
(lp4709
sg21
I0
sba(iArchitecture
Entity
p4710
(dp4711
g11
(lp4712
sg13
S'com.google.common.collect.Interners$WeakInterner$Dummy'
p4713
sg15
(lp4714
sg17
(lp4715
sg19
(lp4716
sg21
I0
sba(iArchitecture
Entity
p4717
(dp4718
g11
(lp4719
V1596
p4720
ag4720
ag4720
aV1543
p4721
ag4721
aV1558
p4722
ag4722
aV2008
p4723
ag4723
asg13
S'com.google.common.collect.Iterables'
p4724
sg15
(lp4725
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4726
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4727
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4728
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4729
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4730
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4731
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4732
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4733
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4734
asg17
(lp4735
(lp4736
I1
aag4736
ag4736
a(lp4737
I2
aag4737
a(lp4738
I1
aag4738
a(lp4739
I1
aag4739
asg19
(lp4740
VIterables.removeIfFromRandomAccessList(..) not working with Lists prohibiting duplicates
p4741
ag4741
ag4741
aVIterables.removeIf wrong items removed when ArrayList is used
p4742
ag4742
aVIterables.toArray broken in case of concurrent modifications
p4743
ag4743
aVIterators.concat is not gc friendly
p4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p4745
(dp4746
g11
(lp4747
g4720
ag4720
ag4720
ag4721
ag4721
ag4722
ag4722
ag4723
ag4723
asg13
S'com.google.common.collect.Iterables$1'
p4748
sg15
(lp4749
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4750
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4751
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4752
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4753
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4754
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4755
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4756
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4757
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4758
asg17
(lp4759
g4736
ag4736
ag4736
ag4737
ag4737
ag4738
ag4738
ag4739
ag4739
asg19
(lp4760
g4741
ag4741
ag4741
ag4742
ag4742
ag4743
ag4743
ag4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p4761
(dp4762
g11
(lp4763
g4720
ag4720
ag4720
ag4721
ag4721
ag4722
ag4722
ag4723
ag4723
asg13
S'com.google.common.collect.Iterables$10'
p4764
sg15
(lp4765
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4766
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4767
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4768
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4769
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4770
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4771
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4772
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4773
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4774
asg17
(lp4775
g4736
ag4736
ag4736
ag4737
ag4737
ag4738
ag4738
ag4739
ag4739
asg19
(lp4776
g4741
ag4741
ag4741
ag4742
ag4742
ag4743
ag4743
ag4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p4777
(dp4778
g11
(lp4779
g4720
ag4720
ag4720
ag4721
ag4721
ag4722
ag4722
ag4723
ag4723
asg13
S'com.google.common.collect.Iterables$10$1'
p4780
sg15
(lp4781
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4782
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4783
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4784
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4785
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4786
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4787
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4788
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4789
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4790
asg17
(lp4791
g4736
ag4736
ag4736
ag4737
ag4737
ag4738
ag4738
ag4739
ag4739
asg19
(lp4792
g4741
ag4741
ag4741
ag4742
ag4742
ag4743
ag4743
ag4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p4793
(dp4794
g11
(lp4795
g4720
ag4720
ag4720
ag4721
ag4721
ag4722
ag4722
ag4723
ag4723
asg13
S'com.google.common.collect.Iterables$11'
p4796
sg15
(lp4797
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4798
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4799
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4800
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4801
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4802
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4803
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4804
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4805
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4806
asg17
(lp4807
g4736
ag4736
ag4736
ag4737
ag4737
ag4738
ag4738
ag4739
ag4739
asg19
(lp4808
g4741
ag4741
ag4741
ag4742
ag4742
ag4743
ag4743
ag4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p4809
(dp4810
g11
(lp4811
g4720
ag4720
ag4720
ag4721
ag4721
ag4722
ag4722
ag4723
ag4723
asg13
S'com.google.common.collect.Iterables$12'
p4812
sg15
(lp4813
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4814
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4815
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4816
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4817
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4818
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4819
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4820
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4821
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4822
asg17
(lp4823
g4736
ag4736
ag4736
ag4737
ag4737
ag4738
ag4738
ag4739
ag4739
asg19
(lp4824
g4741
ag4741
ag4741
ag4742
ag4742
ag4743
ag4743
ag4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p4825
(dp4826
g11
(lp4827
g4720
ag4720
ag4720
ag4721
ag4721
ag4722
ag4722
ag4723
ag4723
asg13
S'com.google.common.collect.Iterables$13'
p4828
sg15
(lp4829
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4830
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4831
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4832
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4833
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4834
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4835
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4836
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4837
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4838
asg17
(lp4839
g4736
ag4736
ag4736
ag4737
ag4737
ag4738
ag4738
ag4739
ag4739
asg19
(lp4840
g4741
ag4741
ag4741
ag4742
ag4742
ag4743
ag4743
ag4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p4841
(dp4842
g11
(lp4843
g4720
ag4720
ag4720
ag4721
ag4721
ag4722
ag4722
ag4723
ag4723
asg13
S'com.google.common.collect.Iterables$14'
p4844
sg15
(lp4845
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4846
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4847
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4848
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4849
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4850
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4851
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4852
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4853
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4854
asg17
(lp4855
g4736
ag4736
ag4736
ag4737
ag4737
ag4738
ag4738
ag4739
ag4739
asg19
(lp4856
g4741
ag4741
ag4741
ag4742
ag4742
ag4743
ag4743
ag4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p4857
(dp4858
g11
(lp4859
g4720
ag4720
ag4720
ag4721
ag4721
ag4722
ag4722
ag4723
ag4723
asg13
S'com.google.common.collect.Iterables$15'
p4860
sg15
(lp4861
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4862
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4863
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4864
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4865
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4866
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4867
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4868
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4869
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4870
asg17
(lp4871
g4736
ag4736
ag4736
ag4737
ag4737
ag4738
ag4738
ag4739
ag4739
asg19
(lp4872
g4741
ag4741
ag4741
ag4742
ag4742
ag4743
ag4743
ag4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p4873
(dp4874
g11
(lp4875
g4720
ag4720
ag4720
ag4721
ag4721
ag4722
ag4722
ag4723
ag4723
asg13
S'com.google.common.collect.Iterables$2'
p4876
sg15
(lp4877
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4878
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4879
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4880
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4881
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4882
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4883
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4884
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4885
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4886
asg17
(lp4887
g4736
ag4736
ag4736
ag4737
ag4737
ag4738
ag4738
ag4739
ag4739
asg19
(lp4888
g4741
ag4741
ag4741
ag4742
ag4742
ag4743
ag4743
ag4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p4889
(dp4890
g11
(lp4891
g4720
ag4720
ag4720
ag4721
ag4721
ag4722
ag4722
ag4723
ag4723
asg13
S'com.google.common.collect.Iterables$3'
p4892
sg15
(lp4893
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4894
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4895
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4896
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4897
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4898
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4899
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4900
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4901
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4902
asg17
(lp4903
g4736
ag4736
ag4736
ag4737
ag4737
ag4738
ag4738
ag4739
ag4739
asg19
(lp4904
g4741
ag4741
ag4741
ag4742
ag4742
ag4743
ag4743
ag4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p4905
(dp4906
g11
(lp4907
g4720
ag4720
ag4720
ag4721
ag4721
ag4722
ag4722
ag4723
ag4723
asg13
S'com.google.common.collect.Iterables$4'
p4908
sg15
(lp4909
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4910
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4911
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4912
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4913
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4914
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4915
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4916
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4917
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4918
asg17
(lp4919
g4736
ag4736
ag4736
ag4737
ag4737
ag4738
ag4738
ag4739
ag4739
asg19
(lp4920
g4741
ag4741
ag4741
ag4742
ag4742
ag4743
ag4743
ag4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p4921
(dp4922
g11
(lp4923
g4720
ag4720
ag4720
ag4721
ag4721
ag4722
ag4722
ag4723
ag4723
asg13
S'com.google.common.collect.Iterables$5'
p4924
sg15
(lp4925
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4926
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4927
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4928
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4929
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4930
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4931
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4932
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4933
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4934
asg17
(lp4935
g4736
ag4736
ag4736
ag4737
ag4737
ag4738
ag4738
ag4739
ag4739
asg19
(lp4936
g4741
ag4741
ag4741
ag4742
ag4742
ag4743
ag4743
ag4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p4937
(dp4938
g11
(lp4939
g4720
ag4720
ag4720
ag4721
ag4721
ag4722
ag4722
ag4723
ag4723
asg13
S'com.google.common.collect.Iterables$6'
p4940
sg15
(lp4941
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4942
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4943
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4944
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4945
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4946
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4947
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4948
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4949
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4950
asg17
(lp4951
g4736
ag4736
ag4736
ag4737
ag4737
ag4738
ag4738
ag4739
ag4739
asg19
(lp4952
g4741
ag4741
ag4741
ag4742
ag4742
ag4743
ag4743
ag4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p4953
(dp4954
g11
(lp4955
g4720
ag4720
ag4720
ag4721
ag4721
ag4722
ag4722
ag4723
ag4723
asg13
S'com.google.common.collect.Iterables$7'
p4956
sg15
(lp4957
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4958
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4959
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4960
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4961
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4962
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4963
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4964
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4965
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4966
asg17
(lp4967
g4736
ag4736
ag4736
ag4737
ag4737
ag4738
ag4738
ag4739
ag4739
asg19
(lp4968
g4741
ag4741
ag4741
ag4742
ag4742
ag4743
ag4743
ag4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p4969
(dp4970
g11
(lp4971
g4720
ag4720
ag4720
ag4721
ag4721
ag4722
ag4722
ag4723
ag4723
asg13
S'com.google.common.collect.Iterables$8'
p4972
sg15
(lp4973
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4974
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4975
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4976
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4977
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4978
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4979
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4980
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4981
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4982
asg17
(lp4983
g4736
ag4736
ag4736
ag4737
ag4737
ag4738
ag4738
ag4739
ag4739
asg19
(lp4984
g4741
ag4741
ag4741
ag4742
ag4742
ag4743
ag4743
ag4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p4985
(dp4986
g11
(lp4987
g4720
ag4720
ag4720
ag4721
ag4721
ag4722
ag4722
ag4723
ag4723
asg13
S'com.google.common.collect.Iterables$9'
p4988
sg15
(lp4989
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4990
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4991
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p4992
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4993
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p4994
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4995
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p4996
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4997
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p4998
asg17
(lp4999
g4736
ag4736
ag4736
ag4737
ag4737
ag4738
ag4738
ag4739
ag4739
asg19
(lp5000
g4741
ag4741
ag4741
ag4742
ag4742
ag4743
ag4743
ag4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5001
(dp5002
g11
(lp5003
g4720
ag4720
ag4720
ag4721
ag4721
ag4722
ag4722
ag4723
ag4723
asg13
S'com.google.common.collect.Iterables$ConsumingQueueIterator'
p5004
sg15
(lp5005
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p5006
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p5007
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p5008
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p5009
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p5010
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p5011
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p5012
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5013
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5014
asg17
(lp5015
g4736
ag4736
ag4736
ag4737
ag4737
ag4738
ag4738
ag4739
ag4739
asg19
(lp5016
g4741
ag4741
ag4741
ag4742
ag4742
ag4743
ag4743
ag4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5017
(dp5018
g11
(lp5019
g4720
ag4720
ag4720
ag4721
ag4721
ag4722
ag4722
ag4723
ag4723
asg13
S'com.google.common.collect.Iterables$UnmodifiableIterable'
p5020
sg15
(lp5021
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p5022
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p5023
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1596) created by **jens.von...@numberfour.eu** on 2013-11-29 at 03:56 PM_\u000a\u000a---\u000a\u000aThe List interface does not state that it must allow duplicate elements, it is only stated as the typical case:\u000a\u000a"Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare." (java.util.List, JavaDoc).\u000a\u000aWhen a list prohibits duplicates, \u000acom.google.common.collect.Iterables.removeIfFromRandomAccessList(List&lt;T>, Predicate<? super T>) \u000aleads to exceptions, because an element temporarily may be contained muiltple times in the list. \u000aThis is true in particular for EMF's org.eclipse.emf.common.util.AbstractEList&lt;E>, which does not allow duplicates.\u000a\u000aSince allowing of duplicates is not a hard constraint of the List interface, I would consider this a bug. In particular since this specialized method is called from com.google.common.collect.Iterables.removeIf(Iterable&lt;T>, Predicate<? super T>), so the client has little control over what's going to happen.\u000a
p5024
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p5025
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1543) created by **bedla.czech** on 2013-09-25 at 11:58 AM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aI have found strange behaviour of Iterables.removeIf method. When I remove items from iterable by frequency and having them nearby, every found duplicate item is removed even the last one. At a bottom you can find test snippets. There is difference between use of ArrayList and LinkedList.\u000a\u000aNote: I know that I should use Set for this kind of situations, but imagine that you do not have String list but list full of legacy uneditable s*it classes. Problem is inside Iterables.removeIfFromRandomAccessList method.\u000a\u000a<code language="java">\u000a&nbsp;&nbsp;&nbsp;&nbsp;@\ufeffTest\u000a&nbsp;&nbsp;&nbsp;&nbsp;public void testOk() throws Exception {\u000a\u000a```\u000a    final List<String> list = Lists.newArrayList("a", "b", "a");\u000a\u000a    System.out.println(list); // [a, b, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [b, a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testWrong() throws Exception {\u000a\u000a    final List<String> list = Lists.newArrayList("a", "a", "a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [] should be [a]\u000a\u000a}\u000a\u000a@Test\u000apublic void testOkWithLinkedList() throws Exception {\u000a\u000a    final List<String> list = Lists.newLinkedList();\u000a    list.add("a");\u000a    list.add("a");\u000a    list.add("a");\u000a\u000a    System.out.println(list); // [a, a, a]\u000a    Iterables.removeIf(list, new Predicate<String>() {\u000a        @Override\u000a        public boolean apply(String input) {\u000a            return Iterables.frequency(list, input) >= 2;\u000a        }\u000a    });\u000a    System.out.println(list); // [a]\u000a\u000a}\u000a```\u000a\u000a</code>\u000a
p5026
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p5027
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1558) created by **Maaartinus** on 2013-10-19 at 04:37 PM_\u000a\u000a---\u000a\u000aIn case the iterable shrinks in the meantime, the result of the class-accepting version of `Iterables.toArray`&nbsp;may contain nulls at its end.\u000a\u000aThe documentation says "return a newly-allocated array into which all the elements of the iterable have been copied", which actually doesn't prevent this. However, nobody expects `Iterables.toArray(a_not_null_allowing_set, some_class)`&nbsp;to contain several nulls.\u000a\u000aIn case you don't want to fix it, the documentation should state this very explicitly. Note that the other overload works fine.\u000a\u000aThe fix is trivial, just pass an empty array in place of the presized one. The only cost is the allocation of the empty array. A test is attached.\u000a
p5028
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5029
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5030
asg17
(lp5031
g4736
ag4736
ag4736
ag4737
ag4737
ag4738
ag4738
ag4739
ag4739
asg19
(lp5032
g4741
ag4741
ag4741
ag4742
ag4742
ag4743
ag4743
ag4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5033
(dp5034
g11
(lp5035
g4723
ag4723
asg13
S'com.google.common.collect.Iterators'
p5036
sg15
(lp5037
VI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5038
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5039
asg17
(lp5040
g4739
ag4739
asg19
(lp5041
g4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5042
(dp5043
g11
(lp5044
g4723
ag4723
asg13
S'com.google.common.collect.Iterators$1'
p5045
sg15
(lp5046
VI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5047
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5048
asg17
(lp5049
g4739
ag4739
asg19
(lp5050
g4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5051
(dp5052
g11
(lp5053
g4723
ag4723
asg13
S'com.google.common.collect.Iterators$10'
p5054
sg15
(lp5055
VI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5056
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5057
asg17
(lp5058
g4739
ag4739
asg19
(lp5059
g4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5060
(dp5061
g11
(lp5062
g4723
ag4723
asg13
S'com.google.common.collect.Iterators$11'
p5063
sg15
(lp5064
VI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5065
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5066
asg17
(lp5067
g4739
ag4739
asg19
(lp5068
g4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5069
(dp5070
g11
(lp5071
g4723
ag4723
asg13
S'com.google.common.collect.Iterators$12'
p5072
sg15
(lp5073
VI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5074
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5075
asg17
(lp5076
g4739
ag4739
asg19
(lp5077
g4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5078
(dp5079
g11
(lp5080
g4723
ag4723
asg13
S'com.google.common.collect.Iterators$13'
p5081
sg15
(lp5082
VI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5083
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5084
asg17
(lp5085
g4739
ag4739
asg19
(lp5086
g4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5087
(dp5088
g11
(lp5089
g4723
ag4723
asg13
S'com.google.common.collect.Iterators$14'
p5090
sg15
(lp5091
VI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5092
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5093
asg17
(lp5094
g4739
ag4739
asg19
(lp5095
g4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5096
(dp5097
g11
(lp5098
g4723
ag4723
asg13
S'com.google.common.collect.Iterators$2'
p5099
sg15
(lp5100
VI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5101
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5102
asg17
(lp5103
g4739
ag4739
asg19
(lp5104
g4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5105
(dp5106
g11
(lp5107
g4723
ag4723
asg13
S'com.google.common.collect.Iterators$3'
p5108
sg15
(lp5109
VI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5110
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5111
asg17
(lp5112
g4739
ag4739
asg19
(lp5113
g4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5114
(dp5115
g11
(lp5116
g4723
ag4723
asg13
S'com.google.common.collect.Iterators$4'
p5117
sg15
(lp5118
VI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5119
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5120
asg17
(lp5121
g4739
ag4739
asg19
(lp5122
g4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5123
(dp5124
g11
(lp5125
g4723
ag4723
asg13
S'com.google.common.collect.Iterators$5'
p5126
sg15
(lp5127
VI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5128
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5129
asg17
(lp5130
g4739
ag4739
asg19
(lp5131
g4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5132
(dp5133
g11
(lp5134
g4723
ag4723
asg13
S'com.google.common.collect.Iterators$6'
p5135
sg15
(lp5136
VI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5137
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5138
asg17
(lp5139
g4739
ag4739
asg19
(lp5140
g4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5141
(dp5142
g11
(lp5143
g4723
ag4723
asg13
S'com.google.common.collect.Iterators$7'
p5144
sg15
(lp5145
VI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5146
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5147
asg17
(lp5148
g4739
ag4739
asg19
(lp5149
g4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5150
(dp5151
g11
(lp5152
g4723
ag4723
asg13
S'com.google.common.collect.Iterators$8'
p5153
sg15
(lp5154
VI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5155
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5156
asg17
(lp5157
g4739
ag4739
asg19
(lp5158
g4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5159
(dp5160
g11
(lp5161
g4723
ag4723
asg13
S'com.google.common.collect.Iterators$9'
p5162
sg15
(lp5163
VI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5164
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5165
asg17
(lp5166
g4739
ag4739
asg19
(lp5167
g4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5168
(dp5169
g11
(lp5170
g4723
ag4723
asg13
S'com.google.common.collect.Iterators$MergingIterator'
p5171
sg15
(lp5172
VI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5173
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5174
asg17
(lp5175
g4739
ag4739
asg19
(lp5176
g4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5177
(dp5178
g11
(lp5179
g4723
ag4723
asg13
S'com.google.common.collect.Iterators$MergingIterator$1'
p5180
sg15
(lp5181
VI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5182
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5183
asg17
(lp5184
g4739
ag4739
asg19
(lp5185
g4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5186
(dp5187
g11
(lp5188
g4723
ag4723
asg13
S'com.google.common.collect.Iterators$PeekingImpl'
p5189
sg15
(lp5190
VI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5191
aVI ran into a situation where I was using recursion and lazy iteration to emulate the in-order traversal path of a binary tree, but wasn't able to use `Iterators.concat` due to its non gc friendly implementation.\u000a\u000a(Note: the amount of memory that should be needed to run this is `O(maxDepth)` or `O(log N)`)\u000a\u000aHere's code to trigger the issue, and a potential solution: https://gist.github.com/devinrsmith/121d9a5ebd460c3bbaa0\u000a
p5192
asg17
(lp5193
g4739
ag4739
asg19
(lp5194
g4744
ag4744
asg21
I0
sba(iArchitecture
Entity
p5195
(dp5196
g11
(lp5197
sg13
S'com.google.common.collect.LexicographicalOrdering'
p5198
sg15
(lp5199
sg17
(lp5200
sg19
(lp5201
sg21
I0
sba(iArchitecture
Entity
p5202
(dp5203
g11
(lp5204
sg13
S'com.google.common.collect.LexicographicalOrdering_CustomFieldSerializer'
p5205
sg15
(lp5206
sg17
(lp5207
sg19
(lp5208
sg21
I0
sba(iArchitecture
Entity
p5209
(dp5210
g11
(lp5211
sg13
S'com.google.common.collect.LinkedHashMultimap'
p5212
sg15
(lp5213
sg17
(lp5214
sg19
(lp5215
sg21
I0
sba(iArchitecture
Entity
p5216
(dp5217
g11
(lp5218
sg13
S'com.google.common.collect.LinkedHashMultimap$1'
p5219
sg15
(lp5220
sg17
(lp5221
sg19
(lp5222
sg21
I0
sba(iArchitecture
Entity
p5223
(dp5224
g11
(lp5225
sg13
S'com.google.common.collect.LinkedHashMultimap$ValueEntry'
p5226
sg15
(lp5227
sg17
(lp5228
sg19
(lp5229
sg21
I0
sba(iArchitecture
Entity
p5230
(dp5231
g11
(lp5232
sg13
S'com.google.common.collect.LinkedHashMultimap$ValueSet'
p5233
sg15
(lp5234
sg17
(lp5235
sg19
(lp5236
sg21
I0
sba(iArchitecture
Entity
p5237
(dp5238
g11
(lp5239
sg13
S'com.google.common.collect.LinkedHashMultimap$ValueSet$1'
p5240
sg15
(lp5241
sg17
(lp5242
sg19
(lp5243
sg21
I0
sba(iArchitecture
Entity
p5244
(dp5245
g11
(lp5246
sg13
S'com.google.common.collect.LinkedHashMultimap$ValueSetLink'
p5247
sg15
(lp5248
sg17
(lp5249
sg19
(lp5250
sg21
I0
sba(iArchitecture
Entity
p5251
(dp5252
g11
(lp5253
sg13
S'com.google.common.collect.LinkedHashMultimap_CustomFieldSerializer'
p5254
sg15
(lp5255
sg17
(lp5256
sg19
(lp5257
sg21
I0
sba(iArchitecture
Entity
p5258
(dp5259
g11
(lp5260
sg13
S'com.google.common.collect.LinkedHashMultiset'
p5261
sg15
(lp5262
sg17
(lp5263
sg19
(lp5264
sg21
I0
sba(iArchitecture
Entity
p5265
(dp5266
g11
(lp5267
sg13
S'com.google.common.collect.LinkedListMultimap'
p5268
sg15
(lp5269
sg17
(lp5270
sg19
(lp5271
sg21
I0
sba(iArchitecture
Entity
p5272
(dp5273
g11
(lp5274
sg13
S'com.google.common.collect.LinkedListMultimap$1'
p5275
sg15
(lp5276
sg17
(lp5277
sg19
(lp5278
sg21
I0
sba(iArchitecture
Entity
p5279
(dp5280
g11
(lp5281
sg13
S'com.google.common.collect.LinkedListMultimap$2'
p5282
sg15
(lp5283
sg17
(lp5284
sg19
(lp5285
sg21
I0
sba(iArchitecture
Entity
p5286
(dp5287
g11
(lp5288
sg13
S'com.google.common.collect.LinkedListMultimap$3'
p5289
sg15
(lp5290
sg17
(lp5291
sg19
(lp5292
sg21
I0
sba(iArchitecture
Entity
p5293
(dp5294
g11
(lp5295
sg13
S'com.google.common.collect.LinkedListMultimap$3$1'
p5296
sg15
(lp5297
sg17
(lp5298
sg19
(lp5299
sg21
I0
sba(iArchitecture
Entity
p5300
(dp5301
g11
(lp5302
sg13
S'com.google.common.collect.LinkedListMultimap$4'
p5303
sg15
(lp5304
sg17
(lp5305
sg19
(lp5306
sg21
I0
sba(iArchitecture
Entity
p5307
(dp5308
g11
(lp5309
sg13
S'com.google.common.collect.LinkedListMultimap$DistinctKeyIterator'
p5310
sg15
(lp5311
sg17
(lp5312
sg19
(lp5313
sg21
I0
sba(iArchitecture
Entity
p5314
(dp5315
g11
(lp5316
sg13
S'com.google.common.collect.LinkedListMultimap$KeyList'
p5317
sg15
(lp5318
sg17
(lp5319
sg19
(lp5320
sg21
I0
sba(iArchitecture
Entity
p5321
(dp5322
g11
(lp5323
sg13
S'com.google.common.collect.LinkedListMultimap$Node'
p5324
sg15
(lp5325
sg17
(lp5326
sg19
(lp5327
sg21
I0
sba(iArchitecture
Entity
p5328
(dp5329
g11
(lp5330
sg13
S'com.google.common.collect.LinkedListMultimap$NodeIterator'
p5331
sg15
(lp5332
sg17
(lp5333
sg19
(lp5334
sg21
I0
sba(iArchitecture
Entity
p5335
(dp5336
g11
(lp5337
sg13
S'com.google.common.collect.LinkedListMultimap$ValueForKeyIterator'
p5338
sg15
(lp5339
sg17
(lp5340
sg19
(lp5341
sg21
I0
sba(iArchitecture
Entity
p5342
(dp5343
g11
(lp5344
sg13
S'com.google.common.collect.LinkedListMultimap_CustomFieldSerializer'
p5345
sg15
(lp5346
sg17
(lp5347
sg19
(lp5348
sg21
I0
sba(iArchitecture
Entity
p5349
(dp5350
g11
(lp5351
sg13
S'com.google.common.collect.Lists'
p5352
sg15
(lp5353
sg17
(lp5354
sg19
(lp5355
sg21
I0
sba(iArchitecture
Entity
p5356
(dp5357
g11
(lp5358
sg13
S'com.google.common.collect.Lists$1'
p5359
sg15
(lp5360
sg17
(lp5361
sg19
(lp5362
sg21
I0
sba(iArchitecture
Entity
p5363
(dp5364
g11
(lp5365
sg13
S'com.google.common.collect.Lists$2'
p5366
sg15
(lp5367
sg17
(lp5368
sg19
(lp5369
sg21
I0
sba(iArchitecture
Entity
p5370
(dp5371
g11
(lp5372
sg13
S'com.google.common.collect.Lists$AbstractListWrapper'
p5373
sg15
(lp5374
sg17
(lp5375
sg19
(lp5376
sg21
I0
sba(iArchitecture
Entity
p5377
(dp5378
g11
(lp5379
sg13
S'com.google.common.collect.Lists$CharSequenceAsList'
p5380
sg15
(lp5381
sg17
(lp5382
sg19
(lp5383
sg21
I0
sba(iArchitecture
Entity
p5384
(dp5385
g11
(lp5386
sg13
S'com.google.common.collect.Lists$OnePlusArrayList'
p5387
sg15
(lp5388
sg17
(lp5389
sg19
(lp5390
sg21
I0
sba(iArchitecture
Entity
p5391
(dp5392
g11
(lp5393
sg13
S'com.google.common.collect.Lists$Partition'
p5394
sg15
(lp5395
sg17
(lp5396
sg19
(lp5397
sg21
I0
sba(iArchitecture
Entity
p5398
(dp5399
g11
(lp5400
sg13
S'com.google.common.collect.Lists$RandomAccessListWrapper'
p5401
sg15
(lp5402
sg17
(lp5403
sg19
(lp5404
sg21
I0
sba(iArchitecture
Entity
p5405
(dp5406
g11
(lp5407
sg13
S'com.google.common.collect.Lists$RandomAccessPartition'
p5408
sg15
(lp5409
sg17
(lp5410
sg19
(lp5411
sg21
I0
sba(iArchitecture
Entity
p5412
(dp5413
g11
(lp5414
sg13
S'com.google.common.collect.Lists$RandomAccessReverseList'
p5415
sg15
(lp5416
sg17
(lp5417
sg19
(lp5418
sg21
I0
sba(iArchitecture
Entity
p5419
(dp5420
g11
(lp5421
sg13
S'com.google.common.collect.Lists$ReverseList'
p5422
sg15
(lp5423
sg17
(lp5424
sg19
(lp5425
sg21
I0
sba(iArchitecture
Entity
p5426
(dp5427
g11
(lp5428
sg13
S'com.google.common.collect.Lists$ReverseList$1'
p5429
sg15
(lp5430
sg17
(lp5431
sg19
(lp5432
sg21
I0
sba(iArchitecture
Entity
p5433
(dp5434
g11
(lp5435
sg13
S'com.google.common.collect.Lists$StringAsImmutableList'
p5436
sg15
(lp5437
sg17
(lp5438
sg19
(lp5439
sg21
I0
sba(iArchitecture
Entity
p5440
(dp5441
g11
(lp5442
sg13
S'com.google.common.collect.Lists$TransformingRandomAccessList'
p5443
sg15
(lp5444
sg17
(lp5445
sg19
(lp5446
sg21
I0
sba(iArchitecture
Entity
p5447
(dp5448
g11
(lp5449
sg13
S'com.google.common.collect.Lists$TransformingRandomAccessList$1'
p5450
sg15
(lp5451
sg17
(lp5452
sg19
(lp5453
sg21
I0
sba(iArchitecture
Entity
p5454
(dp5455
g11
(lp5456
sg13
S'com.google.common.collect.Lists$TransformingSequentialList'
p5457
sg15
(lp5458
sg17
(lp5459
sg19
(lp5460
sg21
I0
sba(iArchitecture
Entity
p5461
(dp5462
g11
(lp5463
sg13
S'com.google.common.collect.Lists$TransformingSequentialList$1'
p5464
sg15
(lp5465
sg17
(lp5466
sg19
(lp5467
sg21
I0
sba(iArchitecture
Entity
p5468
(dp5469
g11
(lp5470
sg13
S'com.google.common.collect.Lists$TwoPlusArrayList'
p5471
sg15
(lp5472
sg17
(lp5473
sg19
(lp5474
sg21
I0
sba(iArchitecture
Entity
p5475
(dp5476
g11
(lp5477
sg13
S'com.google.common.collect.MapConstraint'
p5478
sg15
(lp5479
sg17
(lp5480
sg19
(lp5481
sg21
I0
sba(iArchitecture
Entity
p5482
(dp5483
g11
(lp5484
sg13
S'com.google.common.collect.MapConstraints'
p5485
sg15
(lp5486
sg17
(lp5487
sg19
(lp5488
sg21
I0
sba(iArchitecture
Entity
p5489
(dp5490
g11
(lp5491
sg13
S'com.google.common.collect.MapConstraints$1'
p5492
sg15
(lp5493
sg17
(lp5494
sg19
(lp5495
sg21
I0
sba(iArchitecture
Entity
p5496
(dp5497
g11
(lp5498
sg13
S'com.google.common.collect.MapConstraints$2'
p5499
sg15
(lp5500
sg17
(lp5501
sg19
(lp5502
sg21
I0
sba(iArchitecture
Entity
p5503
(dp5504
g11
(lp5505
sg13
S'com.google.common.collect.MapConstraints$2$1'
p5506
sg15
(lp5507
sg17
(lp5508
sg19
(lp5509
sg21
I0
sba(iArchitecture
Entity
p5510
(dp5511
g11
(lp5512
sg13
S'com.google.common.collect.MapConstraints$ConstrainedAsMapEntries'
p5513
sg15
(lp5514
sg17
(lp5515
sg19
(lp5516
sg21
I0
sba(iArchitecture
Entity
p5517
(dp5518
g11
(lp5519
sg13
S'com.google.common.collect.MapConstraints$ConstrainedAsMapEntries$1'
p5520
sg15
(lp5521
sg17
(lp5522
sg19
(lp5523
sg21
I0
sba(iArchitecture
Entity
p5524
(dp5525
g11
(lp5526
sg13
S'com.google.common.collect.MapConstraints$ConstrainedAsMapValues'
p5527
sg15
(lp5528
sg17
(lp5529
sg19
(lp5530
sg21
I0
sba(iArchitecture
Entity
p5531
(dp5532
g11
(lp5533
sg13
S'com.google.common.collect.MapConstraints$ConstrainedAsMapValues$1'
p5534
sg15
(lp5535
sg17
(lp5536
sg19
(lp5537
sg21
I0
sba(iArchitecture
Entity
p5538
(dp5539
g11
(lp5540
sg13
S'com.google.common.collect.MapConstraints$ConstrainedBiMap'
p5541
sg15
(lp5542
sg17
(lp5543
sg19
(lp5544
sg21
I0
sba(iArchitecture
Entity
p5545
(dp5546
g11
(lp5547
sg13
S'com.google.common.collect.MapConstraints$ConstrainedEntries'
p5548
sg15
(lp5549
sg17
(lp5550
sg19
(lp5551
sg21
I0
sba(iArchitecture
Entity
p5552
(dp5553
g11
(lp5554
sg13
S'com.google.common.collect.MapConstraints$ConstrainedEntries$1'
p5555
sg15
(lp5556
sg17
(lp5557
sg19
(lp5558
sg21
I0
sba(iArchitecture
Entity
p5559
(dp5560
g11
(lp5561
sg13
S'com.google.common.collect.MapConstraints$ConstrainedEntrySet'
p5562
sg15
(lp5563
sg17
(lp5564
sg19
(lp5565
sg21
I0
sba(iArchitecture
Entity
p5566
(dp5567
g11
(lp5568
sg13
S'com.google.common.collect.MapConstraints$ConstrainedListMultimap'
p5569
sg15
(lp5570
sg17
(lp5571
sg19
(lp5572
sg21
I0
sba(iArchitecture
Entity
p5573
(dp5574
g11
(lp5575
sg13
S'com.google.common.collect.MapConstraints$ConstrainedMap'
p5576
sg15
(lp5577
sg17
(lp5578
sg19
(lp5579
sg21
I0
sba(iArchitecture
Entity
p5580
(dp5581
g11
(lp5582
sg13
S'com.google.common.collect.MapConstraints$ConstrainedMultimap'
p5583
sg15
(lp5584
sg17
(lp5585
sg19
(lp5586
sg21
I0
sba(iArchitecture
Entity
p5587
(dp5588
g11
(lp5589
sg13
S'com.google.common.collect.MapConstraints$ConstrainedMultimap$1'
p5590
sg15
(lp5591
sg17
(lp5592
sg19
(lp5593
sg21
I0
sba(iArchitecture
Entity
p5594
(dp5595
g11
(lp5596
sg13
S'com.google.common.collect.MapConstraints$ConstrainedMultimap$2'
p5597
sg15
(lp5598
sg17
(lp5599
sg19
(lp5600
sg21
I0
sba(iArchitecture
Entity
p5601
(dp5602
g11
(lp5603
sg13
S'com.google.common.collect.MapConstraints$ConstrainedSetMultimap'
p5604
sg15
(lp5605
sg17
(lp5606
sg19
(lp5607
sg21
I0
sba(iArchitecture
Entity
p5608
(dp5609
g11
(lp5610
sg13
S'com.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap'
p5611
sg15
(lp5612
sg17
(lp5613
sg19
(lp5614
sg21
I0
sba(iArchitecture
Entity
p5615
(dp5616
g11
(lp5617
sg13
S'com.google.common.collect.MapConstraints$InverseConstraint'
p5618
sg15
(lp5619
sg17
(lp5620
sg19
(lp5621
sg21
I0
sba(iArchitecture
Entity
p5622
(dp5623
g11
(lp5624
sg13
S'com.google.common.collect.MapConstraints$NotNullMapConstraint'
p5625
sg15
(lp5626
sg17
(lp5627
sg19
(lp5628
sg21
I0
sba(iArchitecture
Entity
p5629
(dp5630
g11
(lp5631
sg13
S'com.google.common.collect.MapDifference'
p5632
sg15
(lp5633
sg17
(lp5634
sg19
(lp5635
sg21
I0
sba(iArchitecture
Entity
p5636
(dp5637
g11
(lp5638
sg13
S'com.google.common.collect.MapDifference$ValueDifference'
p5639
sg15
(lp5640
sg17
(lp5641
sg19
(lp5642
sg21
I0
sba(iArchitecture
Entity
p5643
(dp5644
g11
(lp5645
V1885
p5646
asg13
S'com.google.common.collect.MapMaker'
p5647
sg15
(lp5648
VMapMaker javadoc advertises "on-demand computation of values for keys not already present" but this doesn't appear to actually be possible.\u000a
p5649
asg17
(lp5650
(lp5651
I2
aasg19
(lp5652
VJavadoc error in MapMaker
p5653
asg21
I0
sba(iArchitecture
Entity
p5654
(dp5655
g11
(lp5656
g5646
asg13
S'com.google.common.collect.MapMaker$1'
p5657
sg15
(lp5658
VMapMaker javadoc advertises "on-demand computation of values for keys not already present" but this doesn't appear to actually be possible.\u000a
p5659
asg17
(lp5660
g5651
asg19
(lp5661
g5653
asg21
I0
sba(iArchitecture
Entity
p5662
(dp5663
g11
(lp5664
g5646
asg13
S'com.google.common.collect.MapMaker$ComputingMapAdapter'
p5665
sg15
(lp5666
VMapMaker javadoc advertises "on-demand computation of values for keys not already present" but this doesn't appear to actually be possible.\u000a
p5667
asg17
(lp5668
g5651
asg19
(lp5669
g5653
asg21
I0
sba(iArchitecture
Entity
p5670
(dp5671
g11
(lp5672
g5646
asg13
S'com.google.common.collect.MapMaker$NullComputingConcurrentMap'
p5673
sg15
(lp5674
VMapMaker javadoc advertises "on-demand computation of values for keys not already present" but this doesn't appear to actually be possible.\u000a
p5675
asg17
(lp5676
g5651
asg19
(lp5677
g5653
asg21
I0
sba(iArchitecture
Entity
p5678
(dp5679
g11
(lp5680
g5646
asg13
S'com.google.common.collect.MapMaker$NullConcurrentMap'
p5681
sg15
(lp5682
VMapMaker javadoc advertises "on-demand computation of values for keys not already present" but this doesn't appear to actually be possible.\u000a
p5683
asg17
(lp5684
g5651
asg19
(lp5685
g5653
asg21
I0
sba(iArchitecture
Entity
p5686
(dp5687
g11
(lp5688
g5646
asg13
S'com.google.common.collect.MapMaker$RemovalCause'
p5689
sg15
(lp5690
VMapMaker javadoc advertises "on-demand computation of values for keys not already present" but this doesn't appear to actually be possible.\u000a
p5691
asg17
(lp5692
g5651
asg19
(lp5693
g5653
asg21
I0
sba(iArchitecture
Entity
p5694
(dp5695
g11
(lp5696
g5646
asg13
S'com.google.common.collect.MapMaker$RemovalCause$1'
p5697
sg15
(lp5698
VMapMaker javadoc advertises "on-demand computation of values for keys not already present" but this doesn't appear to actually be possible.\u000a
p5699
asg17
(lp5700
g5651
asg19
(lp5701
g5653
asg21
I0
sba(iArchitecture
Entity
p5702
(dp5703
g11
(lp5704
g5646
asg13
S'com.google.common.collect.MapMaker$RemovalCause$2'
p5705
sg15
(lp5706
VMapMaker javadoc advertises "on-demand computation of values for keys not already present" but this doesn't appear to actually be possible.\u000a
p5707
asg17
(lp5708
g5651
asg19
(lp5709
g5653
asg21
I0
sba(iArchitecture
Entity
p5710
(dp5711
g11
(lp5712
g5646
asg13
S'com.google.common.collect.MapMaker$RemovalCause$3'
p5713
sg15
(lp5714
VMapMaker javadoc advertises "on-demand computation of values for keys not already present" but this doesn't appear to actually be possible.\u000a
p5715
asg17
(lp5716
g5651
asg19
(lp5717
g5653
asg21
I0
sba(iArchitecture
Entity
p5718
(dp5719
g11
(lp5720
g5646
asg13
S'com.google.common.collect.MapMaker$RemovalCause$4'
p5721
sg15
(lp5722
VMapMaker javadoc advertises "on-demand computation of values for keys not already present" but this doesn't appear to actually be possible.\u000a
p5723
asg17
(lp5724
g5651
asg19
(lp5725
g5653
asg21
I0
sba(iArchitecture
Entity
p5726
(dp5727
g11
(lp5728
g5646
asg13
S'com.google.common.collect.MapMaker$RemovalCause$5'
p5729
sg15
(lp5730
VMapMaker javadoc advertises "on-demand computation of values for keys not already present" but this doesn't appear to actually be possible.\u000a
p5731
asg17
(lp5732
g5651
asg19
(lp5733
g5653
asg21
I0
sba(iArchitecture
Entity
p5734
(dp5735
g11
(lp5736
g5646
asg13
S'com.google.common.collect.MapMaker$RemovalListener'
p5737
sg15
(lp5738
VMapMaker javadoc advertises "on-demand computation of values for keys not already present" but this doesn't appear to actually be possible.\u000a
p5739
asg17
(lp5740
g5651
asg19
(lp5741
g5653
asg21
I0
sba(iArchitecture
Entity
p5742
(dp5743
g11
(lp5744
g5646
asg13
S'com.google.common.collect.MapMaker$RemovalNotification'
p5745
sg15
(lp5746
VMapMaker javadoc advertises "on-demand computation of values for keys not already present" but this doesn't appear to actually be possible.\u000a
p5747
asg17
(lp5748
g5651
asg19
(lp5749
g5653
asg21
I0
sba(iArchitecture
Entity
p5750
(dp5751
g11
(lp5752
sg13
S'com.google.common.collect.MapMakerInternalMap'
p5753
sg15
(lp5754
sg17
(lp5755
sg19
(lp5756
sg21
I0
sba(iArchitecture
Entity
p5757
(dp5758
g11
(lp5759
sg13
S'com.google.common.collect.MapMakerInternalMap$1'
p5760
sg15
(lp5761
sg17
(lp5762
sg19
(lp5763
sg21
I0
sba(iArchitecture
Entity
p5764
(dp5765
g11
(lp5766
sg13
S'com.google.common.collect.MapMakerInternalMap$2'
p5767
sg15
(lp5768
sg17
(lp5769
sg19
(lp5770
sg21
I0
sba(iArchitecture
Entity
p5771
(dp5772
g11
(lp5773
sg13
S'com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry'
p5774
sg15
(lp5775
sg17
(lp5776
sg19
(lp5777
sg21
I0
sba(iArchitecture
Entity
p5778
(dp5779
g11
(lp5780
sg13
S'com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy'
p5781
sg15
(lp5782
sg17
(lp5783
sg19
(lp5784
sg21
I0
sba(iArchitecture
Entity
p5785
(dp5786
g11
(lp5787
sg13
S'com.google.common.collect.MapMakerInternalMap$CleanupMapTask'
p5788
sg15
(lp5789
sg17
(lp5790
sg19
(lp5791
sg21
I0
sba(iArchitecture
Entity
p5792
(dp5793
g11
(lp5794
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryFactory'
p5795
sg15
(lp5796
sg17
(lp5797
sg19
(lp5798
sg21
I0
sba(iArchitecture
Entity
p5799
(dp5800
g11
(lp5801
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryFactory$1'
p5802
sg15
(lp5803
sg17
(lp5804
sg19
(lp5805
sg21
I0
sba(iArchitecture
Entity
p5806
(dp5807
g11
(lp5808
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryFactory$2'
p5809
sg15
(lp5810
sg17
(lp5811
sg19
(lp5812
sg21
I0
sba(iArchitecture
Entity
p5813
(dp5814
g11
(lp5815
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryFactory$3'
p5816
sg15
(lp5817
sg17
(lp5818
sg19
(lp5819
sg21
I0
sba(iArchitecture
Entity
p5820
(dp5821
g11
(lp5822
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryFactory$4'
p5823
sg15
(lp5824
sg17
(lp5825
sg19
(lp5826
sg21
I0
sba(iArchitecture
Entity
p5827
(dp5828
g11
(lp5829
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryFactory$5'
p5830
sg15
(lp5831
sg17
(lp5832
sg19
(lp5833
sg21
I0
sba(iArchitecture
Entity
p5834
(dp5835
g11
(lp5836
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryFactory$6'
p5837
sg15
(lp5838
sg17
(lp5839
sg19
(lp5840
sg21
I0
sba(iArchitecture
Entity
p5841
(dp5842
g11
(lp5843
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryFactory$7'
p5844
sg15
(lp5845
sg17
(lp5846
sg19
(lp5847
sg21
I0
sba(iArchitecture
Entity
p5848
(dp5849
g11
(lp5850
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryFactory$8'
p5851
sg15
(lp5852
sg17
(lp5853
sg19
(lp5854
sg21
I0
sba(iArchitecture
Entity
p5855
(dp5856
g11
(lp5857
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryIterator'
p5858
sg15
(lp5859
sg17
(lp5860
sg19
(lp5861
sg21
I0
sba(iArchitecture
Entity
p5862
(dp5863
g11
(lp5864
sg13
S'com.google.common.collect.MapMakerInternalMap$EntrySet'
p5865
sg15
(lp5866
sg17
(lp5867
sg19
(lp5868
sg21
I0
sba(iArchitecture
Entity
p5869
(dp5870
g11
(lp5871
sg13
S'com.google.common.collect.MapMakerInternalMap$EvictionQueue'
p5872
sg15
(lp5873
sg17
(lp5874
sg19
(lp5875
sg21
I0
sba(iArchitecture
Entity
p5876
(dp5877
g11
(lp5878
sg13
S'com.google.common.collect.MapMakerInternalMap$EvictionQueue$1'
p5879
sg15
(lp5880
sg17
(lp5881
sg19
(lp5882
sg21
I0
sba(iArchitecture
Entity
p5883
(dp5884
g11
(lp5885
sg13
S'com.google.common.collect.MapMakerInternalMap$EvictionQueue$2'
p5886
sg15
(lp5887
sg17
(lp5888
sg19
(lp5889
sg21
I0
sba(iArchitecture
Entity
p5890
(dp5891
g11
(lp5892
sg13
S'com.google.common.collect.MapMakerInternalMap$ExpirationQueue'
p5893
sg15
(lp5894
sg17
(lp5895
sg19
(lp5896
sg21
I0
sba(iArchitecture
Entity
p5897
(dp5898
g11
(lp5899
sg13
S'com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1'
p5900
sg15
(lp5901
sg17
(lp5902
sg19
(lp5903
sg21
I0
sba(iArchitecture
Entity
p5904
(dp5905
g11
(lp5906
sg13
S'com.google.common.collect.MapMakerInternalMap$ExpirationQueue$2'
p5907
sg15
(lp5908
sg17
(lp5909
sg19
(lp5910
sg21
I0
sba(iArchitecture
Entity
p5911
(dp5912
g11
(lp5913
sg13
S'com.google.common.collect.MapMakerInternalMap$HashIterator'
p5914
sg15
(lp5915
sg17
(lp5916
sg19
(lp5917
sg21
I0
sba(iArchitecture
Entity
p5918
(dp5919
g11
(lp5920
sg13
S'com.google.common.collect.MapMakerInternalMap$KeyIterator'
p5921
sg15
(lp5922
sg17
(lp5923
sg19
(lp5924
sg21
I0
sba(iArchitecture
Entity
p5925
(dp5926
g11
(lp5927
sg13
S'com.google.common.collect.MapMakerInternalMap$KeySet'
p5928
sg15
(lp5929
sg17
(lp5930
sg19
(lp5931
sg21
I0
sba(iArchitecture
Entity
p5932
(dp5933
g11
(lp5934
sg13
S'com.google.common.collect.MapMakerInternalMap$NullEntry'
p5935
sg15
(lp5936
sg17
(lp5937
sg19
(lp5938
sg21
I0
sba(iArchitecture
Entity
p5939
(dp5940
g11
(lp5941
sg13
S'com.google.common.collect.MapMakerInternalMap$ReferenceEntry'
p5942
sg15
(lp5943
sg17
(lp5944
sg19
(lp5945
sg21
I0
sba(iArchitecture
Entity
p5946
(dp5947
g11
(lp5948
sg13
S'com.google.common.collect.MapMakerInternalMap$Segment'
p5949
sg15
(lp5950
sg17
(lp5951
sg19
(lp5952
sg21
I0
sba(iArchitecture
Entity
p5953
(dp5954
g11
(lp5955
sg13
S'com.google.common.collect.MapMakerInternalMap$SerializationProxy'
p5956
sg15
(lp5957
sg17
(lp5958
sg19
(lp5959
sg21
I0
sba(iArchitecture
Entity
p5960
(dp5961
g11
(lp5962
sg13
S'com.google.common.collect.MapMakerInternalMap$SoftEntry'
p5963
sg15
(lp5964
sg17
(lp5965
sg19
(lp5966
sg21
I0
sba(iArchitecture
Entity
p5967
(dp5968
g11
(lp5969
sg13
S'com.google.common.collect.MapMakerInternalMap$SoftEvictableEntry'
p5970
sg15
(lp5971
sg17
(lp5972
sg19
(lp5973
sg21
I0
sba(iArchitecture
Entity
p5974
(dp5975
g11
(lp5976
sg13
S'com.google.common.collect.MapMakerInternalMap$SoftExpirableEntry'
p5977
sg15
(lp5978
sg17
(lp5979
sg19
(lp5980
sg21
I0
sba(iArchitecture
Entity
p5981
(dp5982
g11
(lp5983
sg13
S'com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry'
p5984
sg15
(lp5985
sg17
(lp5986
sg19
(lp5987
sg21
I0
sba(iArchitecture
Entity
p5988
(dp5989
g11
(lp5990
sg13
S'com.google.common.collect.MapMakerInternalMap$SoftValueReference'
p5991
sg15
(lp5992
sg17
(lp5993
sg19
(lp5994
sg21
I0
sba(iArchitecture
Entity
p5995
(dp5996
g11
(lp5997
sg13
S'com.google.common.collect.MapMakerInternalMap$Strength'
p5998
sg15
(lp5999
sg17
(lp6000
sg19
(lp6001
sg21
I0
sba(iArchitecture
Entity
p6002
(dp6003
g11
(lp6004
sg13
S'com.google.common.collect.MapMakerInternalMap$Strength$1'
p6005
sg15
(lp6006
sg17
(lp6007
sg19
(lp6008
sg21
I0
sba(iArchitecture
Entity
p6009
(dp6010
g11
(lp6011
sg13
S'com.google.common.collect.MapMakerInternalMap$Strength$2'
p6012
sg15
(lp6013
sg17
(lp6014
sg19
(lp6015
sg21
I0
sba(iArchitecture
Entity
p6016
(dp6017
g11
(lp6018
sg13
S'com.google.common.collect.MapMakerInternalMap$Strength$3'
p6019
sg15
(lp6020
sg17
(lp6021
sg19
(lp6022
sg21
I0
sba(iArchitecture
Entity
p6023
(dp6024
g11
(lp6025
sg13
S'com.google.common.collect.MapMakerInternalMap$StrongEntry'
p6026
sg15
(lp6027
sg17
(lp6028
sg19
(lp6029
sg21
I0
sba(iArchitecture
Entity
p6030
(dp6031
g11
(lp6032
sg13
S'com.google.common.collect.MapMakerInternalMap$StrongEvictableEntry'
p6033
sg15
(lp6034
sg17
(lp6035
sg19
(lp6036
sg21
I0
sba(iArchitecture
Entity
p6037
(dp6038
g11
(lp6039
sg13
S'com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry'
p6040
sg15
(lp6041
sg17
(lp6042
sg19
(lp6043
sg21
I0
sba(iArchitecture
Entity
p6044
(dp6045
g11
(lp6046
sg13
S'com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry'
p6047
sg15
(lp6048
sg17
(lp6049
sg19
(lp6050
sg21
I0
sba(iArchitecture
Entity
p6051
(dp6052
g11
(lp6053
sg13
S'com.google.common.collect.MapMakerInternalMap$StrongValueReference'
p6054
sg15
(lp6055
sg17
(lp6056
sg19
(lp6057
sg21
I0
sba(iArchitecture
Entity
p6058
(dp6059
g11
(lp6060
sg13
S'com.google.common.collect.MapMakerInternalMap$ValueIterator'
p6061
sg15
(lp6062
sg17
(lp6063
sg19
(lp6064
sg21
I0
sba(iArchitecture
Entity
p6065
(dp6066
g11
(lp6067
sg13
S'com.google.common.collect.MapMakerInternalMap$ValueReference'
p6068
sg15
(lp6069
sg17
(lp6070
sg19
(lp6071
sg21
I0
sba(iArchitecture
Entity
p6072
(dp6073
g11
(lp6074
sg13
S'com.google.common.collect.MapMakerInternalMap$Values'
p6075
sg15
(lp6076
sg17
(lp6077
sg19
(lp6078
sg21
I0
sba(iArchitecture
Entity
p6079
(dp6080
g11
(lp6081
sg13
S'com.google.common.collect.MapMakerInternalMap$WeakEntry'
p6082
sg15
(lp6083
sg17
(lp6084
sg19
(lp6085
sg21
I0
sba(iArchitecture
Entity
p6086
(dp6087
g11
(lp6088
sg13
S'com.google.common.collect.MapMakerInternalMap$WeakEvictableEntry'
p6089
sg15
(lp6090
sg17
(lp6091
sg19
(lp6092
sg21
I0
sba(iArchitecture
Entity
p6093
(dp6094
g11
(lp6095
sg13
S'com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry'
p6096
sg15
(lp6097
sg17
(lp6098
sg19
(lp6099
sg21
I0
sba(iArchitecture
Entity
p6100
(dp6101
g11
(lp6102
sg13
S'com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry'
p6103
sg15
(lp6104
sg17
(lp6105
sg19
(lp6106
sg21
I0
sba(iArchitecture
Entity
p6107
(dp6108
g11
(lp6109
sg13
S'com.google.common.collect.MapMakerInternalMap$WeakValueReference'
p6110
sg15
(lp6111
sg17
(lp6112
sg19
(lp6113
sg21
I0
sba(iArchitecture
Entity
p6114
(dp6115
g11
(lp6116
sg13
S'com.google.common.collect.MapMakerInternalMap$WriteThroughEntry'
p6117
sg15
(lp6118
sg17
(lp6119
sg19
(lp6120
sg21
I0
sba(iArchitecture
Entity
p6121
(dp6122
g11
(lp6123
g3560
ag3560
asg13
S'com.google.common.collect.Maps'
p6124
sg15
(lp6125
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6126
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6127
asg17
(lp6128
g3566
ag3566
asg19
(lp6129
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6130
(dp6131
g11
(lp6132
g3560
ag3560
asg13
S'com.google.common.collect.Maps$1'
p6133
sg15
(lp6134
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6135
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6136
asg17
(lp6137
g3566
ag3566
asg19
(lp6138
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6139
(dp6140
g11
(lp6141
g3560
ag3560
asg13
S'com.google.common.collect.Maps$10'
p6142
sg15
(lp6143
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6144
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6145
asg17
(lp6146
g3566
ag3566
asg19
(lp6147
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6148
(dp6149
g11
(lp6150
g3560
ag3560
asg13
S'com.google.common.collect.Maps$11'
p6151
sg15
(lp6152
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6153
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6154
asg17
(lp6155
g3566
ag3566
asg19
(lp6156
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6157
(dp6158
g11
(lp6159
g3560
ag3560
asg13
S'com.google.common.collect.Maps$2'
p6160
sg15
(lp6161
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6162
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6163
asg17
(lp6164
g3566
ag3566
asg19
(lp6165
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6166
(dp6167
g11
(lp6168
g3560
ag3560
asg13
S'com.google.common.collect.Maps$3'
p6169
sg15
(lp6170
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6171
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6172
asg17
(lp6173
g3566
ag3566
asg19
(lp6174
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6175
(dp6176
g11
(lp6177
g3560
ag3560
asg13
S'com.google.common.collect.Maps$4'
p6178
sg15
(lp6179
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6180
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6181
asg17
(lp6182
g3566
ag3566
asg19
(lp6183
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6184
(dp6185
g11
(lp6186
g3560
ag3560
asg13
S'com.google.common.collect.Maps$5'
p6187
sg15
(lp6188
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6189
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6190
asg17
(lp6191
g3566
ag3566
asg19
(lp6192
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6193
(dp6194
g11
(lp6195
g3560
ag3560
asg13
S'com.google.common.collect.Maps$6'
p6196
sg15
(lp6197
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6198
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6199
asg17
(lp6200
g3566
ag3566
asg19
(lp6201
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6202
(dp6203
g11
(lp6204
g3560
ag3560
asg13
S'com.google.common.collect.Maps$7'
p6205
sg15
(lp6206
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6207
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6208
asg17
(lp6209
g3566
ag3566
asg19
(lp6210
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6211
(dp6212
g11
(lp6213
g3560
ag3560
asg13
S'com.google.common.collect.Maps$8'
p6214
sg15
(lp6215
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6216
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6217
asg17
(lp6218
g3566
ag3566
asg19
(lp6219
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6220
(dp6221
g11
(lp6222
g3560
ag3560
asg13
S'com.google.common.collect.Maps$9'
p6223
sg15
(lp6224
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6225
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6226
asg17
(lp6227
g3566
ag3566
asg19
(lp6228
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6229
(dp6230
g11
(lp6231
g3560
ag3560
asg13
S'com.google.common.collect.Maps$AbstractFilteredMap'
p6232
sg15
(lp6233
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6234
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6235
asg17
(lp6236
g3566
ag3566
asg19
(lp6237
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6238
(dp6239
g11
(lp6240
g3560
ag3560
asg13
S'com.google.common.collect.Maps$AsMapView'
p6241
sg15
(lp6242
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6243
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6244
asg17
(lp6245
g3566
ag3566
asg19
(lp6246
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6247
(dp6248
g11
(lp6249
g3560
ag3560
asg13
S'com.google.common.collect.Maps$AsMapView$1'
p6250
sg15
(lp6251
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6252
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6253
asg17
(lp6254
g3566
ag3566
asg19
(lp6255
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6256
(dp6257
g11
(lp6258
g3560
ag3560
asg13
S'com.google.common.collect.Maps$BiMapConverter'
p6259
sg15
(lp6260
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6261
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6262
asg17
(lp6263
g3566
ag3566
asg19
(lp6264
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6265
(dp6266
g11
(lp6267
g3560
ag3560
asg13
S'com.google.common.collect.Maps$DescendingMap'
p6268
sg15
(lp6269
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6270
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6271
asg17
(lp6272
g3566
ag3566
asg19
(lp6273
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6274
(dp6275
g11
(lp6276
g3560
ag3560
asg13
S'com.google.common.collect.Maps$DescendingMap$1'
p6277
sg15
(lp6278
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6279
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6280
asg17
(lp6281
g3566
ag3566
asg19
(lp6282
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6283
(dp6284
g11
(lp6285
g3560
ag3560
asg13
S'com.google.common.collect.Maps$EntryFunction'
p6286
sg15
(lp6287
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6288
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6289
asg17
(lp6290
g3566
ag3566
asg19
(lp6291
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6292
(dp6293
g11
(lp6294
g3560
ag3560
asg13
S'com.google.common.collect.Maps$EntryFunction$1'
p6295
sg15
(lp6296
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6297
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6298
asg17
(lp6299
g3566
ag3566
asg19
(lp6300
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6301
(dp6302
g11
(lp6303
g3560
ag3560
asg13
S'com.google.common.collect.Maps$EntryFunction$2'
p6304
sg15
(lp6305
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6306
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6307
asg17
(lp6308
g3566
ag3566
asg19
(lp6309
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6310
(dp6311
g11
(lp6312
g3560
ag3560
asg13
S'com.google.common.collect.Maps$EntrySet'
p6313
sg15
(lp6314
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6315
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6316
asg17
(lp6317
g3566
ag3566
asg19
(lp6318
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6319
(dp6320
g11
(lp6321
g3560
ag3560
asg13
S'com.google.common.collect.Maps$EntryTransformer'
p6322
sg15
(lp6323
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6324
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6325
asg17
(lp6326
g3566
ag3566
asg19
(lp6327
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6328
(dp6329
g11
(lp6330
g3560
ag3560
asg13
S'com.google.common.collect.Maps$FilteredEntryBiMap'
p6331
sg15
(lp6332
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6333
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6334
asg17
(lp6335
g3566
ag3566
asg19
(lp6336
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6337
(dp6338
g11
(lp6339
g3560
ag3560
asg13
S'com.google.common.collect.Maps$FilteredEntryBiMap$1'
p6340
sg15
(lp6341
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6342
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6343
asg17
(lp6344
g3566
ag3566
asg19
(lp6345
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6346
(dp6347
g11
(lp6348
g3560
ag3560
asg13
S'com.google.common.collect.Maps$FilteredEntryMap'
p6349
sg15
(lp6350
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6351
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6352
asg17
(lp6353
g3566
ag3566
asg19
(lp6354
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6355
(dp6356
g11
(lp6357
g3560
ag3560
asg13
S'com.google.common.collect.Maps$FilteredEntryMap$EntrySet'
p6358
sg15
(lp6359
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6360
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6361
asg17
(lp6362
g3566
ag3566
asg19
(lp6363
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6364
(dp6365
g11
(lp6366
g3560
ag3560
asg13
S'com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1'
p6367
sg15
(lp6368
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6369
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6370
asg17
(lp6371
g3566
ag3566
asg19
(lp6372
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6373
(dp6374
g11
(lp6375
g3560
ag3560
asg13
S'com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1'
p6376
sg15
(lp6377
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6378
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6379
asg17
(lp6380
g3566
ag3566
asg19
(lp6381
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6382
(dp6383
g11
(lp6384
g3560
ag3560
asg13
S'com.google.common.collect.Maps$FilteredEntryMap$KeySet'
p6385
sg15
(lp6386
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6387
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6388
asg17
(lp6389
g3566
ag3566
asg19
(lp6390
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6391
(dp6392
g11
(lp6393
g3560
ag3560
asg13
S'com.google.common.collect.Maps$FilteredEntryNavigableMap'
p6394
sg15
(lp6395
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6396
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6397
asg17
(lp6398
g3566
ag3566
asg19
(lp6399
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6400
(dp6401
g11
(lp6402
g3560
ag3560
asg13
S'com.google.common.collect.Maps$FilteredEntryNavigableMap$1'
p6403
sg15
(lp6404
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6405
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6406
asg17
(lp6407
g3566
ag3566
asg19
(lp6408
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6409
(dp6410
g11
(lp6411
g3560
ag3560
asg13
S'com.google.common.collect.Maps$FilteredEntrySortedMap'
p6412
sg15
(lp6413
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6414
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6415
asg17
(lp6416
g3566
ag3566
asg19
(lp6417
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6418
(dp6419
g11
(lp6420
g3560
ag3560
asg13
S'com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet'
p6421
sg15
(lp6422
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6423
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6424
asg17
(lp6425
g3566
ag3566
asg19
(lp6426
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6427
(dp6428
g11
(lp6429
g3560
ag3560
asg13
S'com.google.common.collect.Maps$FilteredKeyMap'
p6430
sg15
(lp6431
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6432
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6433
asg17
(lp6434
g3566
ag3566
asg19
(lp6435
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6436
(dp6437
g11
(lp6438
g3560
ag3560
asg13
S'com.google.common.collect.Maps$FilteredMapValues'
p6439
sg15
(lp6440
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6441
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6442
asg17
(lp6443
g3566
ag3566
asg19
(lp6444
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6445
(dp6446
g11
(lp6447
g3560
ag3560
asg13
S'com.google.common.collect.Maps$ImprovedAbstractMap'
p6448
sg15
(lp6449
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6450
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6451
asg17
(lp6452
g3566
ag3566
asg19
(lp6453
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6454
(dp6455
g11
(lp6456
g3560
ag3560
asg13
S'com.google.common.collect.Maps$KeySet'
p6457
sg15
(lp6458
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6459
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6460
asg17
(lp6461
g3566
ag3566
asg19
(lp6462
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6463
(dp6464
g11
(lp6465
g3560
ag3560
asg13
S'com.google.common.collect.Maps$MapDifferenceImpl'
p6466
sg15
(lp6467
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6468
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6469
asg17
(lp6470
g3566
ag3566
asg19
(lp6471
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6472
(dp6473
g11
(lp6474
g3560
ag3560
asg13
S'com.google.common.collect.Maps$NavigableAsMapView'
p6475
sg15
(lp6476
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6477
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6478
asg17
(lp6479
g3566
ag3566
asg19
(lp6480
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6481
(dp6482
g11
(lp6483
g3560
ag3560
asg13
S'com.google.common.collect.Maps$NavigableKeySet'
p6484
sg15
(lp6485
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6486
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6487
asg17
(lp6488
g3566
ag3566
asg19
(lp6489
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6490
(dp6491
g11
(lp6492
g3560
ag3560
asg13
S'com.google.common.collect.Maps$SortedAsMapView'
p6493
sg15
(lp6494
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6495
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6496
asg17
(lp6497
g3566
ag3566
asg19
(lp6498
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6499
(dp6500
g11
(lp6501
g3560
ag3560
asg13
S'com.google.common.collect.Maps$SortedKeySet'
p6502
sg15
(lp6503
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6504
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6505
asg17
(lp6506
g3566
ag3566
asg19
(lp6507
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6508
(dp6509
g11
(lp6510
g3560
ag3560
asg13
S'com.google.common.collect.Maps$SortedMapDifferenceImpl'
p6511
sg15
(lp6512
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6513
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6514
asg17
(lp6515
g3566
ag3566
asg19
(lp6516
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6517
(dp6518
g11
(lp6519
g3560
ag3560
asg13
S'com.google.common.collect.Maps$TransformedEntriesMap'
p6520
sg15
(lp6521
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6522
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6523
asg17
(lp6524
g3566
ag3566
asg19
(lp6525
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6526
(dp6527
g11
(lp6528
g3560
ag3560
asg13
S'com.google.common.collect.Maps$TransformedEntriesMap$1'
p6529
sg15
(lp6530
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6531
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6532
asg17
(lp6533
g3566
ag3566
asg19
(lp6534
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6535
(dp6536
g11
(lp6537
g3560
ag3560
asg13
S'com.google.common.collect.Maps$TransformedEntriesNavigableMap'
p6538
sg15
(lp6539
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6540
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6541
asg17
(lp6542
g3566
ag3566
asg19
(lp6543
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6544
(dp6545
g11
(lp6546
g3560
ag3560
asg13
S'com.google.common.collect.Maps$TransformedEntriesSortedMap'
p6547
sg15
(lp6548
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6549
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6550
asg17
(lp6551
g3566
ag3566
asg19
(lp6552
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6553
(dp6554
g11
(lp6555
g3560
ag3560
asg13
S'com.google.common.collect.Maps$UnmodifiableBiMap'
p6556
sg15
(lp6557
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6558
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6559
asg17
(lp6560
g3566
ag3566
asg19
(lp6561
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6562
(dp6563
g11
(lp6564
g3560
ag3560
asg13
S'com.google.common.collect.Maps$UnmodifiableEntries'
p6565
sg15
(lp6566
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6567
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6568
asg17
(lp6569
g3566
ag3566
asg19
(lp6570
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6571
(dp6572
g11
(lp6573
g3560
ag3560
asg13
S'com.google.common.collect.Maps$UnmodifiableEntries$1'
p6574
sg15
(lp6575
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6576
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6577
asg17
(lp6578
g3566
ag3566
asg19
(lp6579
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6580
(dp6581
g11
(lp6582
g3560
ag3560
asg13
S'com.google.common.collect.Maps$UnmodifiableEntrySet'
p6583
sg15
(lp6584
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6585
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6586
asg17
(lp6587
g3566
ag3566
asg19
(lp6588
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6589
(dp6590
g11
(lp6591
g3560
ag3560
asg13
S'com.google.common.collect.Maps$UnmodifiableNavigableMap'
p6592
sg15
(lp6593
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6594
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6595
asg17
(lp6596
g3566
ag3566
asg19
(lp6597
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6598
(dp6599
g11
(lp6600
g3560
ag3560
asg13
S'com.google.common.collect.Maps$ValueDifferenceImpl'
p6601
sg15
(lp6602
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6603
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6604
asg17
(lp6605
g3566
ag3566
asg19
(lp6606
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6607
(dp6608
g11
(lp6609
g3560
ag3560
asg13
S'com.google.common.collect.Maps$Values'
p6610
sg15
(lp6611
VWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6612
aVWould be keen to use these in non-`@Beta`. Are there any plans?\u000a
p6613
asg17
(lp6614
g3566
ag3566
asg19
(lp6615
g3568
ag3568
asg21
I0
sba(iArchitecture
Entity
p6616
(dp6617
g11
(lp6618
g102
asg13
S'com.google.common.collect.MinMaxPriorityQueue'
p6619
sg15
(lp6620
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p6621
asg17
(lp6622
g107
asg19
(lp6623
g109
asg21
I0
sba(iArchitecture
Entity
p6624
(dp6625
g11
(lp6626
g102
asg13
S'com.google.common.collect.MinMaxPriorityQueue$1'
p6627
sg15
(lp6628
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p6629
asg17
(lp6630
g107
asg19
(lp6631
g109
asg21
I0
sba(iArchitecture
Entity
p6632
(dp6633
g11
(lp6634
g102
asg13
S'com.google.common.collect.MinMaxPriorityQueue$Builder'
p6635
sg15
(lp6636
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p6637
asg17
(lp6638
g107
asg19
(lp6639
g109
asg21
I0
sba(iArchitecture
Entity
p6640
(dp6641
g11
(lp6642
g102
asg13
S'com.google.common.collect.MinMaxPriorityQueue$Heap'
p6643
sg15
(lp6644
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p6645
asg17
(lp6646
g107
asg19
(lp6647
g109
asg21
I0
sba(iArchitecture
Entity
p6648
(dp6649
g11
(lp6650
g102
asg13
S'com.google.common.collect.MinMaxPriorityQueue$MoveDesc'
p6651
sg15
(lp6652
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p6653
asg17
(lp6654
g107
asg19
(lp6655
g109
asg21
I0
sba(iArchitecture
Entity
p6656
(dp6657
g11
(lp6658
g102
asg13
S'com.google.common.collect.MinMaxPriorityQueue$QueueIterator'
p6659
sg15
(lp6660
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p6661
asg17
(lp6662
g107
asg19
(lp6663
g109
asg21
I0
sba(iArchitecture
Entity
p6664
(dp6665
g11
(lp6666
sg13
S'com.google.common.collect.MultimapBuilder'
p6667
sg15
(lp6668
sg17
(lp6669
sg19
(lp6670
sg21
I0
sba(iArchitecture
Entity
p6671
(dp6672
g11
(lp6673
sg13
S'com.google.common.collect.MultimapBuilder$1'
p6674
sg15
(lp6675
sg17
(lp6676
sg19
(lp6677
sg21
I0
sba(iArchitecture
Entity
p6678
(dp6679
g11
(lp6680
sg13
S'com.google.common.collect.MultimapBuilder$2'
p6681
sg15
(lp6682
sg17
(lp6683
sg19
(lp6684
sg21
I0
sba(iArchitecture
Entity
p6685
(dp6686
g11
(lp6687
sg13
S'com.google.common.collect.MultimapBuilder$3'
p6688
sg15
(lp6689
sg17
(lp6690
sg19
(lp6691
sg21
I0
sba(iArchitecture
Entity
p6692
(dp6693
g11
(lp6694
sg13
S'com.google.common.collect.MultimapBuilder$4'
p6695
sg15
(lp6696
sg17
(lp6697
sg19
(lp6698
sg21
I0
sba(iArchitecture
Entity
p6699
(dp6700
g11
(lp6701
sg13
S'com.google.common.collect.MultimapBuilder$ArrayListSupplier'
p6702
sg15
(lp6703
sg17
(lp6704
sg19
(lp6705
sg21
I0
sba(iArchitecture
Entity
p6706
(dp6707
g11
(lp6708
sg13
S'com.google.common.collect.MultimapBuilder$EnumSetSupplier'
p6709
sg15
(lp6710
sg17
(lp6711
sg19
(lp6712
sg21
I0
sba(iArchitecture
Entity
p6713
(dp6714
g11
(lp6715
sg13
S'com.google.common.collect.MultimapBuilder$HashSetSupplier'
p6716
sg15
(lp6717
sg17
(lp6718
sg19
(lp6719
sg21
I0
sba(iArchitecture
Entity
p6720
(dp6721
g11
(lp6722
sg13
S'com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier'
p6723
sg15
(lp6724
sg17
(lp6725
sg19
(lp6726
sg21
I0
sba(iArchitecture
Entity
p6727
(dp6728
g11
(lp6729
sg13
S'com.google.common.collect.MultimapBuilder$LinkedListSupplier'
p6730
sg15
(lp6731
sg17
(lp6732
sg19
(lp6733
sg21
I0
sba(iArchitecture
Entity
p6734
(dp6735
g11
(lp6736
sg13
S'com.google.common.collect.MultimapBuilder$ListMultimapBuilder'
p6737
sg15
(lp6738
sg17
(lp6739
sg19
(lp6740
sg21
I0
sba(iArchitecture
Entity
p6741
(dp6742
g11
(lp6743
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys'
p6744
sg15
(lp6745
sg17
(lp6746
sg19
(lp6747
sg21
I0
sba(iArchitecture
Entity
p6748
(dp6749
g11
(lp6750
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1'
p6751
sg15
(lp6752
sg17
(lp6753
sg19
(lp6754
sg21
I0
sba(iArchitecture
Entity
p6755
(dp6756
g11
(lp6757
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2'
p6758
sg15
(lp6759
sg17
(lp6760
sg19
(lp6761
sg21
I0
sba(iArchitecture
Entity
p6762
(dp6763
g11
(lp6764
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3'
p6765
sg15
(lp6766
sg17
(lp6767
sg19
(lp6768
sg21
I0
sba(iArchitecture
Entity
p6769
(dp6770
g11
(lp6771
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4'
p6772
sg15
(lp6773
sg17
(lp6774
sg19
(lp6775
sg21
I0
sba(iArchitecture
Entity
p6776
(dp6777
g11
(lp6778
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5'
p6779
sg15
(lp6780
sg17
(lp6781
sg19
(lp6782
sg21
I0
sba(iArchitecture
Entity
p6783
(dp6784
g11
(lp6785
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6'
p6786
sg15
(lp6787
sg17
(lp6788
sg19
(lp6789
sg21
I0
sba(iArchitecture
Entity
p6790
(dp6791
g11
(lp6792
sg13
S'com.google.common.collect.MultimapBuilder$SetMultimapBuilder'
p6793
sg15
(lp6794
sg17
(lp6795
sg19
(lp6796
sg21
I0
sba(iArchitecture
Entity
p6797
(dp6798
g11
(lp6799
sg13
S'com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder'
p6800
sg15
(lp6801
sg17
(lp6802
sg19
(lp6803
sg21
I0
sba(iArchitecture
Entity
p6804
(dp6805
g11
(lp6806
sg13
S'com.google.common.collect.MultimapBuilder$TreeSetSupplier'
p6807
sg15
(lp6808
sg17
(lp6809
sg19
(lp6810
sg21
I0
sba(iArchitecture
Entity
p6811
(dp6812
g11
(lp6813
sg13
S'com.google.common.collect.Multimap_CustomFieldSerializerBase'
p6814
sg15
(lp6815
sg17
(lp6816
sg19
(lp6817
sg21
I0
sba(iArchitecture
Entity
p6818
(dp6819
g11
(lp6820
sg13
S'com.google.common.collect.Multimaps'
p6821
sg15
(lp6822
sg17
(lp6823
sg19
(lp6824
sg21
I0
sba(iArchitecture
Entity
p6825
(dp6826
g11
(lp6827
sg13
S'com.google.common.collect.Multimaps$AsMap'
p6828
sg15
(lp6829
sg17
(lp6830
sg19
(lp6831
sg21
I0
sba(iArchitecture
Entity
p6832
(dp6833
g11
(lp6834
sg13
S'com.google.common.collect.Multimaps$AsMap$EntrySet'
p6835
sg15
(lp6836
sg17
(lp6837
sg19
(lp6838
sg21
I0
sba(iArchitecture
Entity
p6839
(dp6840
g11
(lp6841
sg13
S'com.google.common.collect.Multimaps$AsMap$EntrySet$1'
p6842
sg15
(lp6843
sg17
(lp6844
sg19
(lp6845
sg21
I0
sba(iArchitecture
Entity
p6846
(dp6847
g11
(lp6848
sg13
S'com.google.common.collect.Multimaps$CustomListMultimap'
p6849
sg15
(lp6850
sg17
(lp6851
sg19
(lp6852
sg21
I0
sba(iArchitecture
Entity
p6853
(dp6854
g11
(lp6855
sg13
S'com.google.common.collect.Multimaps$CustomMultimap'
p6856
sg15
(lp6857
sg17
(lp6858
sg19
(lp6859
sg21
I0
sba(iArchitecture
Entity
p6860
(dp6861
g11
(lp6862
sg13
S'com.google.common.collect.Multimaps$CustomSetMultimap'
p6863
sg15
(lp6864
sg17
(lp6865
sg19
(lp6866
sg21
I0
sba(iArchitecture
Entity
p6867
(dp6868
g11
(lp6869
sg13
S'com.google.common.collect.Multimaps$CustomSortedSetMultimap'
p6870
sg15
(lp6871
sg17
(lp6872
sg19
(lp6873
sg21
I0
sba(iArchitecture
Entity
p6874
(dp6875
g11
(lp6876
sg13
S'com.google.common.collect.Multimaps$Entries'
p6877
sg15
(lp6878
sg17
(lp6879
sg19
(lp6880
sg21
I0
sba(iArchitecture
Entity
p6881
(dp6882
g11
(lp6883
sg13
S'com.google.common.collect.Multimaps$Keys'
p6884
sg15
(lp6885
sg17
(lp6886
sg19
(lp6887
sg21
I0
sba(iArchitecture
Entity
p6888
(dp6889
g11
(lp6890
sg13
S'com.google.common.collect.Multimaps$Keys$1'
p6891
sg15
(lp6892
sg17
(lp6893
sg19
(lp6894
sg21
I0
sba(iArchitecture
Entity
p6895
(dp6896
g11
(lp6897
sg13
S'com.google.common.collect.Multimaps$Keys$1$1'
p6898
sg15
(lp6899
sg17
(lp6900
sg19
(lp6901
sg21
I0
sba(iArchitecture
Entity
p6902
(dp6903
g11
(lp6904
sg13
S'com.google.common.collect.Multimaps$Keys$KeysEntrySet'
p6905
sg15
(lp6906
sg17
(lp6907
sg19
(lp6908
sg21
I0
sba(iArchitecture
Entity
p6909
(dp6910
g11
(lp6911
sg13
S'com.google.common.collect.Multimaps$MapMultimap'
p6912
sg15
(lp6913
sg17
(lp6914
sg19
(lp6915
sg21
I0
sba(iArchitecture
Entity
p6916
(dp6917
g11
(lp6918
sg13
S'com.google.common.collect.Multimaps$MapMultimap$1'
p6919
sg15
(lp6920
sg17
(lp6921
sg19
(lp6922
sg21
I0
sba(iArchitecture
Entity
p6923
(dp6924
g11
(lp6925
sg13
S'com.google.common.collect.Multimaps$MapMultimap$1$1'
p6926
sg15
(lp6927
sg17
(lp6928
sg19
(lp6929
sg21
I0
sba(iArchitecture
Entity
p6930
(dp6931
g11
(lp6932
sg13
S'com.google.common.collect.Multimaps$TransformedEntriesListMultimap'
p6933
sg15
(lp6934
sg17
(lp6935
sg19
(lp6936
sg21
I0
sba(iArchitecture
Entity
p6937
(dp6938
g11
(lp6939
sg13
S'com.google.common.collect.Multimaps$TransformedEntriesMultimap'
p6940
sg15
(lp6941
sg17
(lp6942
sg19
(lp6943
sg21
I0
sba(iArchitecture
Entity
p6944
(dp6945
g11
(lp6946
sg13
S'com.google.common.collect.Multimaps$TransformedEntriesMultimap$1'
p6947
sg15
(lp6948
sg17
(lp6949
sg19
(lp6950
sg21
I0
sba(iArchitecture
Entity
p6951
(dp6952
g11
(lp6953
sg13
S'com.google.common.collect.Multimaps$UnmodifiableListMultimap'
p6954
sg15
(lp6955
sg17
(lp6956
sg19
(lp6957
sg21
I0
sba(iArchitecture
Entity
p6958
(dp6959
g11
(lp6960
sg13
S'com.google.common.collect.Multimaps$UnmodifiableMultimap'
p6961
sg15
(lp6962
sg17
(lp6963
sg19
(lp6964
sg21
I0
sba(iArchitecture
Entity
p6965
(dp6966
g11
(lp6967
sg13
S'com.google.common.collect.Multimaps$UnmodifiableMultimap$1'
p6968
sg15
(lp6969
sg17
(lp6970
sg19
(lp6971
sg21
I0
sba(iArchitecture
Entity
p6972
(dp6973
g11
(lp6974
sg13
S'com.google.common.collect.Multimaps$UnmodifiableSetMultimap'
p6975
sg15
(lp6976
sg17
(lp6977
sg19
(lp6978
sg21
I0
sba(iArchitecture
Entity
p6979
(dp6980
g11
(lp6981
sg13
S'com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap'
p6982
sg15
(lp6983
sg17
(lp6984
sg19
(lp6985
sg21
I0
sba(iArchitecture
Entity
p6986
(dp6987
g11
(lp6988
sg13
S'com.google.common.collect.Multisets'
p6989
sg15
(lp6990
sg17
(lp6991
sg19
(lp6992
sg21
I0
sba(iArchitecture
Entity
p6993
(dp6994
g11
(lp6995
sg13
S'com.google.common.collect.Multisets$1'
p6996
sg15
(lp6997
sg17
(lp6998
sg19
(lp6999
sg21
I0
sba(iArchitecture
Entity
p7000
(dp7001
g11
(lp7002
sg13
S'com.google.common.collect.Multisets$1$1'
p7003
sg15
(lp7004
sg17
(lp7005
sg19
(lp7006
sg21
I0
sba(iArchitecture
Entity
p7007
(dp7008
g11
(lp7009
sg13
S'com.google.common.collect.Multisets$2'
p7010
sg15
(lp7011
sg17
(lp7012
sg19
(lp7013
sg21
I0
sba(iArchitecture
Entity
p7014
(dp7015
g11
(lp7016
sg13
S'com.google.common.collect.Multisets$2$1'
p7017
sg15
(lp7018
sg17
(lp7019
sg19
(lp7020
sg21
I0
sba(iArchitecture
Entity
p7021
(dp7022
g11
(lp7023
sg13
S'com.google.common.collect.Multisets$3'
p7024
sg15
(lp7025
sg17
(lp7026
sg19
(lp7027
sg21
I0
sba(iArchitecture
Entity
p7028
(dp7029
g11
(lp7030
sg13
S'com.google.common.collect.Multisets$3$1'
p7031
sg15
(lp7032
sg17
(lp7033
sg19
(lp7034
sg21
I0
sba(iArchitecture
Entity
p7035
(dp7036
g11
(lp7037
sg13
S'com.google.common.collect.Multisets$4'
p7038
sg15
(lp7039
sg17
(lp7040
sg19
(lp7041
sg21
I0
sba(iArchitecture
Entity
p7042
(dp7043
g11
(lp7044
sg13
S'com.google.common.collect.Multisets$4$1'
p7045
sg15
(lp7046
sg17
(lp7047
sg19
(lp7048
sg21
I0
sba(iArchitecture
Entity
p7049
(dp7050
g11
(lp7051
sg13
S'com.google.common.collect.Multisets$5'
p7052
sg15
(lp7053
sg17
(lp7054
sg19
(lp7055
sg21
I0
sba(iArchitecture
Entity
p7056
(dp7057
g11
(lp7058
sg13
S'com.google.common.collect.Multisets$AbstractEntry'
p7059
sg15
(lp7060
sg17
(lp7061
sg19
(lp7062
sg21
I0
sba(iArchitecture
Entity
p7063
(dp7064
g11
(lp7065
sg13
S'com.google.common.collect.Multisets$ElementSet'
p7066
sg15
(lp7067
sg17
(lp7068
sg19
(lp7069
sg21
I0
sba(iArchitecture
Entity
p7070
(dp7071
g11
(lp7072
sg13
S'com.google.common.collect.Multisets$ElementSet$1'
p7073
sg15
(lp7074
sg17
(lp7075
sg19
(lp7076
sg21
I0
sba(iArchitecture
Entity
p7077
(dp7078
g11
(lp7079
sg13
S'com.google.common.collect.Multisets$EntrySet'
p7080
sg15
(lp7081
sg17
(lp7082
sg19
(lp7083
sg21
I0
sba(iArchitecture
Entity
p7084
(dp7085
g11
(lp7086
sg13
S'com.google.common.collect.Multisets$FilteredMultiset'
p7087
sg15
(lp7088
sg17
(lp7089
sg19
(lp7090
sg21
I0
sba(iArchitecture
Entity
p7091
(dp7092
g11
(lp7093
sg13
S'com.google.common.collect.Multisets$FilteredMultiset$1'
p7094
sg15
(lp7095
sg17
(lp7096
sg19
(lp7097
sg21
I0
sba(iArchitecture
Entity
p7098
(dp7099
g11
(lp7100
sg13
S'com.google.common.collect.Multisets$ImmutableEntry'
p7101
sg15
(lp7102
sg17
(lp7103
sg19
(lp7104
sg21
I0
sba(iArchitecture
Entity
p7105
(dp7106
g11
(lp7107
sg13
S'com.google.common.collect.Multisets$MultisetIteratorImpl'
p7108
sg15
(lp7109
sg17
(lp7110
sg19
(lp7111
sg21
I0
sba(iArchitecture
Entity
p7112
(dp7113
g11
(lp7114
sg13
S'com.google.common.collect.Multisets$UnmodifiableMultiset'
p7115
sg15
(lp7116
sg17
(lp7117
sg19
(lp7118
sg21
I0
sba(iArchitecture
Entity
p7119
(dp7120
g11
(lp7121
V1437
p7122
ag7122
asg13
S'com.google.common.collect.MutableClassToInstanceMap'
p7123
sg15
(lp7124
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1437) created by **mike.rumpf** on 2013-05-31 at 06:11 AM_\u000a\u000a---\u000a\u000aMutableClassToInstanceMap defines a serialVersionUID but itself does not implement Serializable. This is inconsistent to other guava collection types.\u000a
p7125
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1437) created by **mike.rumpf** on 2013-05-31 at 06:11 AM_\u000a\u000a---\u000a\u000aMutableClassToInstanceMap defines a serialVersionUID but itself does not implement Serializable. This is inconsistent to other guava collection types.\u000a
p7126
asg17
(lp7127
(lp7128
I0
aag7128
asg19
(lp7129
VMutableClassToInstanceMap should implement Serializable
p7130
ag7130
asg21
I0
sba(iArchitecture
Entity
p7131
(dp7132
g11
(lp7133
g7122
ag7122
asg13
S'com.google.common.collect.MutableClassToInstanceMap$1'
p7134
sg15
(lp7135
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1437) created by **mike.rumpf** on 2013-05-31 at 06:11 AM_\u000a\u000a---\u000a\u000aMutableClassToInstanceMap defines a serialVersionUID but itself does not implement Serializable. This is inconsistent to other guava collection types.\u000a
p7136
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1437) created by **mike.rumpf** on 2013-05-31 at 06:11 AM_\u000a\u000a---\u000a\u000aMutableClassToInstanceMap defines a serialVersionUID but itself does not implement Serializable. This is inconsistent to other guava collection types.\u000a
p7137
asg17
(lp7138
g7128
ag7128
asg19
(lp7139
g7130
ag7130
asg21
I0
sba(iArchitecture
Entity
p7140
(dp7141
g11
(lp7142
g102
aV1451
p7143
asg13
S'com.google.common.collect.NaturalOrdering'
p7144
sg15
(lp7145
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p7146
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1451) created by **drothmaler** on 2013-06-18 at 01:46 PM_\u000a\u000a---\u000a\u000aI think it would be good to extend the NaturalOrdering and ReverseNaturalOrdering implementations, to hold instances of their nullsFirst() and nullsLast() versions too.\u000aThis is because things like Ordering.natural().nullsFirst() are frequently used and currently there will be created a NullsFirstOrdering/NullsLastOrdering instance each time, you access it. \u000a\u000aIn many cases this will not be a problem, but if you use it inside a compareTo or compare method (e.g. in combination with the ComparisonChain as suggested in Issue 500 & Issue 556), it really makes a difference whether you use a share instance, or not.\u000a
p7147
asg17
(lp7148
g107
a(lp7149
I3
aasg19
(lp7150
g109
aVUse Singleton instances for nullable natural Orderings
p7151
asg21
I0
sba(iArchitecture
Entity
p7152
(dp7153
g11
(lp7154
sg13
S'com.google.common.collect.NaturalOrdering_CustomFieldSerializer'
p7155
sg15
(lp7156
sg17
(lp7157
sg19
(lp7158
sg21
I0
sba(iArchitecture
Entity
p7159
(dp7160
g11
(lp7161
sg13
S'com.google.common.collect.NullsFirstOrdering'
p7162
sg15
(lp7163
sg17
(lp7164
sg19
(lp7165
sg21
I0
sba(iArchitecture
Entity
p7166
(dp7167
g11
(lp7168
sg13
S'com.google.common.collect.NullsFirstOrdering_CustomFieldSerializer'
p7169
sg15
(lp7170
sg17
(lp7171
sg19
(lp7172
sg21
I0
sba(iArchitecture
Entity
p7173
(dp7174
g11
(lp7175
sg13
S'com.google.common.collect.NullsLastOrdering'
p7176
sg15
(lp7177
sg17
(lp7178
sg19
(lp7179
sg21
I0
sba(iArchitecture
Entity
p7180
(dp7181
g11
(lp7182
sg13
S'com.google.common.collect.NullsLastOrdering_CustomFieldSerializer'
p7183
sg15
(lp7184
sg17
(lp7185
sg19
(lp7186
sg21
I0
sba(iArchitecture
Entity
p7187
(dp7188
g11
(lp7189
V1342
p7190
ag7190
ag7190
asg13
S'com.google.common.collect.Ordering'
p7191
sg15
(lp7192
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\u000a\u000a---\u000a\u000aIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\u000a\u000aWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\u000a
p7193
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\u000a\u000a---\u000a\u000aIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\u000a\u000aWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\u000a
p7194
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\u000a\u000a---\u000a\u000aIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\u000a\u000aWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\u000a
p7195
asg17
(lp7196
(lp7197
I2
aag7197
ag7197
asg19
(lp7198
VAdd docs to Ordering to give guidance how to parse and understand long chains of calls
p7199
ag7199
ag7199
asg21
I0
sba(iArchitecture
Entity
p7200
(dp7201
g11
(lp7202
g7190
ag7190
ag7190
asg13
S'com.google.common.collect.Ordering$ArbitraryOrdering'
p7203
sg15
(lp7204
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\u000a\u000a---\u000a\u000aIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\u000a\u000aWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\u000a
p7205
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\u000a\u000a---\u000a\u000aIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\u000a\u000aWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\u000a
p7206
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\u000a\u000a---\u000a\u000aIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\u000a\u000aWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\u000a
p7207
asg17
(lp7208
g7197
ag7197
ag7197
asg19
(lp7209
g7199
ag7199
ag7199
asg21
I0
sba(iArchitecture
Entity
p7210
(dp7211
g11
(lp7212
g7190
ag7190
ag7190
asg13
S'com.google.common.collect.Ordering$ArbitraryOrdering$1'
p7213
sg15
(lp7214
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\u000a\u000a---\u000a\u000aIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\u000a\u000aWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\u000a
p7215
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\u000a\u000a---\u000a\u000aIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\u000a\u000aWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\u000a
p7216
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\u000a\u000a---\u000a\u000aIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\u000a\u000aWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\u000a
p7217
asg17
(lp7218
g7197
ag7197
ag7197
asg19
(lp7219
g7199
ag7199
ag7199
asg21
I0
sba(iArchitecture
Entity
p7220
(dp7221
g11
(lp7222
g7190
ag7190
ag7190
asg13
S'com.google.common.collect.Ordering$ArbitraryOrderingHolder'
p7223
sg15
(lp7224
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\u000a\u000a---\u000a\u000aIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\u000a\u000aWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\u000a
p7225
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\u000a\u000a---\u000a\u000aIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\u000a\u000aWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\u000a
p7226
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\u000a\u000a---\u000a\u000aIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\u000a\u000aWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\u000a
p7227
asg17
(lp7228
g7197
ag7197
ag7197
asg19
(lp7229
g7199
ag7199
ag7199
asg21
I0
sba(iArchitecture
Entity
p7230
(dp7231
g11
(lp7232
g7190
ag7190
ag7190
asg13
S'com.google.common.collect.Ordering$IncomparableValueException'
p7233
sg15
(lp7234
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\u000a\u000a---\u000a\u000aIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\u000a\u000aWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\u000a
p7235
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\u000a\u000a---\u000a\u000aIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\u000a\u000aWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\u000a
p7236
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1342) created by **kevinb@google.com** on 2013-03-15 at 05:18 PM_\u000a\u000a---\u000a\u000aIt's very hard to figure out what Ordering.natural().nullsFirst().reverse().lexicographical().reverse().nullsLast() means.\u000a\u000aWe can make it a lot easier for the user by walking through how we read and interpret a few salient examples.\u000a
p7237
asg17
(lp7238
g7197
ag7197
ag7197
asg19
(lp7239
g7199
ag7199
ag7199
asg21
I0
sba(iArchitecture
Entity
p7240
(dp7241
g11
(lp7242
sg13
S'com.google.common.collect.PeekingIterator'
p7243
sg15
(lp7244
sg17
(lp7245
sg19
(lp7246
sg21
I0
sba(iArchitecture
Entity
p7247
(dp7248
g11
(lp7249
V1328
p7250
asg13
S'com.google.common.collect.Platform'
p7251
sg15
(lp7252
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1328) created by **gokhanoner** on 2013-03-11 at 03:23 PM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aprivate static final ImmutableSet&lt;String> ISLEM_EB_FIELDS = ImmutableSet.of("ISLBLG");\u000a\u000aFor above desc, a singletonImmutableSet is created. When I try\u000a\u000aISLEM_EB_FIELDS.toArray(new String[0])\u000a\u000aon V13.0.1, ist OK but in v14, it throw class not found exception for\u000a\u000acom.google.common.collect.GwtPlatform.java\u000a\u000aI tried it on a GWT application.\u000a
p7253
asg17
(lp7254
(lp7255
I1
aasg19
(lp7256
VImmutableSet.toArray issue on singletonImmutableSet for v14
p7257
asg21
I0
sba(iArchitecture
Entity
p7258
(dp7259
g11
(lp7260
sg13
S'com.google.common.collect.Range'
p7261
sg15
(lp7262
sg17
(lp7263
sg19
(lp7264
sg21
I0
sba(iArchitecture
Entity
p7265
(dp7266
g11
(lp7267
sg13
S'com.google.common.collect.Range$1'
p7268
sg15
(lp7269
sg17
(lp7270
sg19
(lp7271
sg21
I0
sba(iArchitecture
Entity
p7272
(dp7273
g11
(lp7274
sg13
S'com.google.common.collect.Range$2'
p7275
sg15
(lp7276
sg17
(lp7277
sg19
(lp7278
sg21
I0
sba(iArchitecture
Entity
p7279
(dp7280
g11
(lp7281
sg13
S'com.google.common.collect.Range$3'
p7282
sg15
(lp7283
sg17
(lp7284
sg19
(lp7285
sg21
I0
sba(iArchitecture
Entity
p7286
(dp7287
g11
(lp7288
sg13
S'com.google.common.collect.Range$4'
p7289
sg15
(lp7290
sg17
(lp7291
sg19
(lp7292
sg21
I0
sba(iArchitecture
Entity
p7293
(dp7294
g11
(lp7295
sg13
S'com.google.common.collect.RangeMap'
p7296
sg15
(lp7297
sg17
(lp7298
sg19
(lp7299
sg21
I0
sba(iArchitecture
Entity
p7300
(dp7301
g11
(lp7302
sg13
S'com.google.common.collect.RangeSet'
p7303
sg15
(lp7304
sg17
(lp7305
sg19
(lp7306
sg21
I0
sba(iArchitecture
Entity
p7307
(dp7308
g11
(lp7309
V2196
p7310
asg13
S'com.google.common.collect.RegularContiguousSet'
p7311
sg15
(lp7312
VLet a < x < b:\u000a- [x].intersection([x]) should return [x], returns [],\u000a- [x].intersection([a..b]) should return [x], returns [],\u000a- [a..b].intersection([x]) should return [x], returns [],\u000a- [a..x].intersection([x..b]) should return [x], returns [].\u000a\u000aI'll create a PR in a minute.\u000a
p7313
asg17
(lp7314
(lp7315
I1
aasg19
(lp7316
VContiguousSet.intersection doesn't handle singleton results.
p7317
asg21
I0
sba(iArchitecture
Entity
p7318
(dp7319
g11
(lp7320
g7310
asg13
S'com.google.common.collect.RegularContiguousSet$1'
p7321
sg15
(lp7322
VLet a < x < b:\u000a- [x].intersection([x]) should return [x], returns [],\u000a- [x].intersection([a..b]) should return [x], returns [],\u000a- [a..b].intersection([x]) should return [x], returns [],\u000a- [a..x].intersection([x..b]) should return [x], returns [].\u000a\u000aI'll create a PR in a minute.\u000a
p7323
asg17
(lp7324
g7315
asg19
(lp7325
g7317
asg21
I0
sba(iArchitecture
Entity
p7326
(dp7327
g11
(lp7328
g7310
asg13
S'com.google.common.collect.RegularContiguousSet$2'
p7329
sg15
(lp7330
VLet a < x < b:\u000a- [x].intersection([x]) should return [x], returns [],\u000a- [x].intersection([a..b]) should return [x], returns [],\u000a- [a..b].intersection([x]) should return [x], returns [],\u000a- [a..x].intersection([x..b]) should return [x], returns [].\u000a\u000aI'll create a PR in a minute.\u000a
p7331
asg17
(lp7332
g7315
asg19
(lp7333
g7317
asg21
I0
sba(iArchitecture
Entity
p7334
(dp7335
g11
(lp7336
g7310
asg13
S'com.google.common.collect.RegularContiguousSet$SerializedForm'
p7337
sg15
(lp7338
VLet a < x < b:\u000a- [x].intersection([x]) should return [x], returns [],\u000a- [x].intersection([a..b]) should return [x], returns [],\u000a- [a..b].intersection([x]) should return [x], returns [],\u000a- [a..x].intersection([x..b]) should return [x], returns [].\u000a\u000aI'll create a PR in a minute.\u000a
p7339
asg17
(lp7340
g7315
asg19
(lp7341
g7317
asg21
I0
sba(iArchitecture
Entity
p7342
(dp7343
g11
(lp7344
sg13
S'com.google.common.collect.RegularImmutableBiMap'
p7345
sg15
(lp7346
sg17
(lp7347
sg19
(lp7348
sg21
I0
sba(iArchitecture
Entity
p7349
(dp7350
g11
(lp7351
sg13
S'com.google.common.collect.RegularImmutableBiMap$1'
p7352
sg15
(lp7353
sg17
(lp7354
sg19
(lp7355
sg21
I0
sba(iArchitecture
Entity
p7356
(dp7357
g11
(lp7358
sg13
S'com.google.common.collect.RegularImmutableBiMap$Inverse'
p7359
sg15
(lp7360
sg17
(lp7361
sg19
(lp7362
sg21
I0
sba(iArchitecture
Entity
p7363
(dp7364
g11
(lp7365
sg13
S'com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet'
p7366
sg15
(lp7367
sg17
(lp7368
sg19
(lp7369
sg21
I0
sba(iArchitecture
Entity
p7370
(dp7371
g11
(lp7372
sg13
S'com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1'
p7373
sg15
(lp7374
sg17
(lp7375
sg19
(lp7376
sg21
I0
sba(iArchitecture
Entity
p7377
(dp7378
g11
(lp7379
sg13
S'com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm'
p7380
sg15
(lp7381
sg17
(lp7382
sg19
(lp7383
sg21
I0
sba(iArchitecture
Entity
p7384
(dp7385
g11
(lp7386
sg13
S'com.google.common.collect.RegularImmutableBiMap$NonTerminalBiMapEntry'
p7387
sg15
(lp7388
sg17
(lp7389
sg19
(lp7390
sg21
I0
sba(iArchitecture
Entity
p7391
(dp7392
g11
(lp7393
sg13
S'com.google.common.collect.RegularImmutableBiMap_CustomFieldSerializer'
p7394
sg15
(lp7395
sg17
(lp7396
sg19
(lp7397
sg21
I0
sba(iArchitecture
Entity
p7398
(dp7399
g11
(lp7400
g4145
asg13
S'com.google.common.collect.RegularImmutableList'
p7401
sg15
(lp7402
VImmutableList contains following code since version 15.0\u000a\u000a private static final ImmutableList<Object> EMPTY =\u000a      new RegularImmutableList<Object>(ObjectArrays.EMPTY_ARRAY);\u000a
p7403
asg17
(lp7404
g4151
asg19
(lp7405
g4153
asg21
I0
sba(iArchitecture
Entity
p7406
(dp7407
g11
(lp7408
sg13
S'com.google.common.collect.RegularImmutableList_CustomFieldSerializer'
p7409
sg15
(lp7410
sg17
(lp7411
sg19
(lp7412
sg21
I0
sba(iArchitecture
Entity
p7413
(dp7414
g11
(lp7415
sg13
S'com.google.common.collect.RegularImmutableMap'
p7416
sg15
(lp7417
sg17
(lp7418
sg19
(lp7419
sg21
I0
sba(iArchitecture
Entity
p7420
(dp7421
g11
(lp7422
sg13
S'com.google.common.collect.RegularImmutableMap$1'
p7423
sg15
(lp7424
sg17
(lp7425
sg19
(lp7426
sg21
I0
sba(iArchitecture
Entity
p7427
(dp7428
g11
(lp7429
sg13
S'com.google.common.collect.RegularImmutableMap$EntrySet'
p7430
sg15
(lp7431
sg17
(lp7432
sg19
(lp7433
sg21
I0
sba(iArchitecture
Entity
p7434
(dp7435
g11
(lp7436
sg13
S'com.google.common.collect.RegularImmutableMap$NonTerminalMapEntry'
p7437
sg15
(lp7438
sg17
(lp7439
sg19
(lp7440
sg21
I0
sba(iArchitecture
Entity
p7441
(dp7442
g11
(lp7443
sg13
S'com.google.common.collect.RegularImmutableMultiset'
p7444
sg15
(lp7445
sg17
(lp7446
sg19
(lp7447
sg21
I0
sba(iArchitecture
Entity
p7448
(dp7449
g11
(lp7450
sg13
S'com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer'
p7451
sg15
(lp7452
sg17
(lp7453
sg19
(lp7454
sg21
I0
sba(iArchitecture
Entity
p7455
(dp7456
g11
(lp7457
sg13
S'com.google.common.collect.RegularImmutableSet'
p7458
sg15
(lp7459
sg17
(lp7460
sg19
(lp7461
sg21
I0
sba(iArchitecture
Entity
p7462
(dp7463
g11
(lp7464
sg13
S'com.google.common.collect.RegularImmutableSet_CustomFieldSerializer'
p7465
sg15
(lp7466
sg17
(lp7467
sg19
(lp7468
sg21
I0
sba(iArchitecture
Entity
p7469
(dp7470
g11
(lp7471
sg13
S'com.google.common.collect.RegularImmutableSortedMap'
p7472
sg15
(lp7473
sg17
(lp7474
sg19
(lp7475
sg21
I0
sba(iArchitecture
Entity
p7476
(dp7477
g11
(lp7478
sg13
S'com.google.common.collect.RegularImmutableSortedMap$1'
p7479
sg15
(lp7480
sg17
(lp7481
sg19
(lp7482
sg21
I0
sba(iArchitecture
Entity
p7483
(dp7484
g11
(lp7485
sg13
S'com.google.common.collect.RegularImmutableSortedMap$EntrySet'
p7486
sg15
(lp7487
sg17
(lp7488
sg19
(lp7489
sg21
I0
sba(iArchitecture
Entity
p7490
(dp7491
g11
(lp7492
sg13
S'com.google.common.collect.RegularImmutableSortedMap$EntrySet$1'
p7493
sg15
(lp7494
sg17
(lp7495
sg19
(lp7496
sg21
I0
sba(iArchitecture
Entity
p7497
(dp7498
g11
(lp7499
sg13
S'com.google.common.collect.RegularImmutableSortedMap_CustomFieldSerializer'
p7500
sg15
(lp7501
sg17
(lp7502
sg19
(lp7503
sg21
I0
sba(iArchitecture
Entity
p7504
(dp7505
g11
(lp7506
sg13
S'com.google.common.collect.RegularImmutableSortedMultiset'
p7507
sg15
(lp7508
sg17
(lp7509
sg19
(lp7510
sg21
I0
sba(iArchitecture
Entity
p7511
(dp7512
g11
(lp7513
sg13
S'com.google.common.collect.RegularImmutableSortedSet'
p7514
sg15
(lp7515
sg17
(lp7516
sg19
(lp7517
sg21
I0
sba(iArchitecture
Entity
p7518
(dp7519
g11
(lp7520
sg13
S'com.google.common.collect.RegularImmutableSortedSet_CustomFieldSerializer'
p7521
sg15
(lp7522
sg17
(lp7523
sg19
(lp7524
sg21
I0
sba(iArchitecture
Entity
p7525
(dp7526
g11
(lp7527
sg13
S'com.google.common.collect.RegularImmutableTable'
p7528
sg15
(lp7529
sg17
(lp7530
sg19
(lp7531
sg21
I0
sba(iArchitecture
Entity
p7532
(dp7533
g11
(lp7534
sg13
S'com.google.common.collect.RegularImmutableTable$1'
p7535
sg15
(lp7536
sg17
(lp7537
sg19
(lp7538
sg21
I0
sba(iArchitecture
Entity
p7539
(dp7540
g11
(lp7541
sg13
S'com.google.common.collect.RegularImmutableTable$CellSet'
p7542
sg15
(lp7543
sg17
(lp7544
sg19
(lp7545
sg21
I0
sba(iArchitecture
Entity
p7546
(dp7547
g11
(lp7548
sg13
S'com.google.common.collect.RegularImmutableTable$CellSet$1'
p7549
sg15
(lp7550
sg17
(lp7551
sg19
(lp7552
sg21
I0
sba(iArchitecture
Entity
p7553
(dp7554
g11
(lp7555
sg13
S'com.google.common.collect.RegularImmutableTable$Values'
p7556
sg15
(lp7557
sg17
(lp7558
sg19
(lp7559
sg21
I0
sba(iArchitecture
Entity
p7560
(dp7561
g11
(lp7562
g102
asg13
S'com.google.common.collect.ReverseNaturalOrdering'
p7563
sg15
(lp7564
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p7565
asg17
(lp7566
g107
asg19
(lp7567
g109
asg21
I0
sba(iArchitecture
Entity
p7568
(dp7569
g11
(lp7570
sg13
S'com.google.common.collect.ReverseNaturalOrdering_CustomFieldSerializer'
p7571
sg15
(lp7572
sg17
(lp7573
sg19
(lp7574
sg21
I0
sba(iArchitecture
Entity
p7575
(dp7576
g11
(lp7577
sg13
S'com.google.common.collect.ReverseOrdering'
p7578
sg15
(lp7579
sg17
(lp7580
sg19
(lp7581
sg21
I0
sba(iArchitecture
Entity
p7582
(dp7583
g11
(lp7584
sg13
S'com.google.common.collect.ReverseOrdering_CustomFieldSerializer'
p7585
sg15
(lp7586
sg17
(lp7587
sg19
(lp7588
sg21
I0
sba(iArchitecture
Entity
p7589
(dp7590
g11
(lp7591
sg13
S'com.google.common.collect.RowSortedTable'
p7592
sg15
(lp7593
sg17
(lp7594
sg19
(lp7595
sg21
I0
sba(iArchitecture
Entity
p7596
(dp7597
g11
(lp7598
sg13
S'com.google.common.collect.Serialization'
p7599
sg15
(lp7600
sg17
(lp7601
sg19
(lp7602
sg21
I0
sba(iArchitecture
Entity
p7603
(dp7604
g11
(lp7605
sg13
S'com.google.common.collect.Serialization$1'
p7606
sg15
(lp7607
sg17
(lp7608
sg19
(lp7609
sg21
I0
sba(iArchitecture
Entity
p7610
(dp7611
g11
(lp7612
sg13
S'com.google.common.collect.Serialization$FieldSetter'
p7613
sg15
(lp7614
sg17
(lp7615
sg19
(lp7616
sg21
I0
sba(iArchitecture
Entity
p7617
(dp7618
g11
(lp7619
sg13
S'com.google.common.collect.SetMultimap'
p7620
sg15
(lp7621
sg17
(lp7622
sg19
(lp7623
sg21
I0
sba(iArchitecture
Entity
p7624
(dp7625
g11
(lp7626
V1001
p7627
ag7627
asg13
S'com.google.common.collect.Sets'
p7628
sg15
(lp7629
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7630
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7631
asg17
(lp7632
(lp7633
I0
aag7633
asg19
(lp7634
VReimplement and deprecate Sets.newSetFromMap (but no removing it)
p7635
ag7635
asg21
I0
sba(iArchitecture
Entity
p7636
(dp7637
g11
(lp7638
g7627
ag7627
asg13
S'com.google.common.collect.Sets$1'
p7639
sg15
(lp7640
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7641
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7642
asg17
(lp7643
g7633
ag7633
asg19
(lp7644
g7635
ag7635
asg21
I0
sba(iArchitecture
Entity
p7645
(dp7646
g11
(lp7647
g7627
ag7627
asg13
S'com.google.common.collect.Sets$2'
p7648
sg15
(lp7649
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7650
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7651
asg17
(lp7652
g7633
ag7633
asg19
(lp7653
g7635
ag7635
asg21
I0
sba(iArchitecture
Entity
p7654
(dp7655
g11
(lp7656
g7627
ag7627
asg13
S'com.google.common.collect.Sets$3'
p7657
sg15
(lp7658
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7659
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7660
asg17
(lp7661
g7633
ag7633
asg19
(lp7662
g7635
ag7635
asg21
I0
sba(iArchitecture
Entity
p7663
(dp7664
g11
(lp7665
g7627
ag7627
asg13
S'com.google.common.collect.Sets$CartesianSet'
p7666
sg15
(lp7667
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7668
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7669
asg17
(lp7670
g7633
ag7633
asg19
(lp7671
g7635
ag7635
asg21
I0
sba(iArchitecture
Entity
p7672
(dp7673
g11
(lp7674
g7627
ag7627
asg13
S'com.google.common.collect.Sets$CartesianSet$1'
p7675
sg15
(lp7676
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7677
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7678
asg17
(lp7679
g7633
ag7633
asg19
(lp7680
g7635
ag7635
asg21
I0
sba(iArchitecture
Entity
p7681
(dp7682
g11
(lp7683
g7627
ag7627
asg13
S'com.google.common.collect.Sets$DescendingSet'
p7684
sg15
(lp7685
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7686
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7687
asg17
(lp7688
g7633
ag7633
asg19
(lp7689
g7635
ag7635
asg21
I0
sba(iArchitecture
Entity
p7690
(dp7691
g11
(lp7692
g7627
ag7627
asg13
S'com.google.common.collect.Sets$FilteredNavigableSet'
p7693
sg15
(lp7694
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7695
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7696
asg17
(lp7697
g7633
ag7633
asg19
(lp7698
g7635
ag7635
asg21
I0
sba(iArchitecture
Entity
p7699
(dp7700
g11
(lp7701
g7627
ag7627
asg13
S'com.google.common.collect.Sets$FilteredSet'
p7702
sg15
(lp7703
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7704
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7705
asg17
(lp7706
g7633
ag7633
asg19
(lp7707
g7635
ag7635
asg21
I0
sba(iArchitecture
Entity
p7708
(dp7709
g11
(lp7710
g7627
ag7627
asg13
S'com.google.common.collect.Sets$FilteredSortedSet'
p7711
sg15
(lp7712
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7713
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7714
asg17
(lp7715
g7633
ag7633
asg19
(lp7716
g7635
ag7635
asg21
I0
sba(iArchitecture
Entity
p7717
(dp7718
g11
(lp7719
g7627
ag7627
asg13
S'com.google.common.collect.Sets$ImprovedAbstractSet'
p7720
sg15
(lp7721
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7722
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7723
asg17
(lp7724
g7633
ag7633
asg19
(lp7725
g7635
ag7635
asg21
I0
sba(iArchitecture
Entity
p7726
(dp7727
g11
(lp7728
g7627
ag7627
asg13
S'com.google.common.collect.Sets$PowerSet'
p7729
sg15
(lp7730
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7731
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7732
asg17
(lp7733
g7633
ag7633
asg19
(lp7734
g7635
ag7635
asg21
I0
sba(iArchitecture
Entity
p7735
(dp7736
g11
(lp7737
g7627
ag7627
asg13
S'com.google.common.collect.Sets$PowerSet$1'
p7738
sg15
(lp7739
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7740
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7741
asg17
(lp7742
g7633
ag7633
asg19
(lp7743
g7635
ag7635
asg21
I0
sba(iArchitecture
Entity
p7744
(dp7745
g11
(lp7746
g7627
ag7627
asg13
S'com.google.common.collect.Sets$SetView'
p7747
sg15
(lp7748
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7749
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7750
asg17
(lp7751
g7633
ag7633
asg19
(lp7752
g7635
ag7635
asg21
I0
sba(iArchitecture
Entity
p7753
(dp7754
g11
(lp7755
g7627
ag7627
asg13
S'com.google.common.collect.Sets$SubSet'
p7756
sg15
(lp7757
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7758
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7759
asg17
(lp7760
g7633
ag7633
asg19
(lp7761
g7635
ag7635
asg21
I0
sba(iArchitecture
Entity
p7762
(dp7763
g11
(lp7764
g7627
ag7627
asg13
S'com.google.common.collect.Sets$SubSet$1'
p7765
sg15
(lp7766
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7767
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7768
asg17
(lp7769
g7633
ag7633
asg19
(lp7770
g7635
ag7635
asg21
I0
sba(iArchitecture
Entity
p7771
(dp7772
g11
(lp7773
g7627
ag7627
asg13
S'com.google.common.collect.Sets$UnmodifiableNavigableSet'
p7774
sg15
(lp7775
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7776
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1001) created by **kevinb@google.com** on 2012-05-11 at 04:32 PM_\u000a\u000a---\u000a\u000aNow that Guava requires JDK 6, we can probably reimplement Sets.newSetFromMap as a pass-through to Collections.newSetFromMap(), and deprecate it.  However,\u000a\u000a(a) no sense doing that until after the backport is worked out, and\u000a\u000a(b) I don't think we can do the usual "schedule for deletion in 18 months" thing. For the time being, I think we need to ensure that the relationship between guava and guava5 is that of a purely compatible superset. Otherwise libraries that build against guava5 in order to be available to their JDK 5 users may break when used by JDK 6 users (who use guava instead of guava5).\u000a\u000aNot sure for which other libraries we might have a similar situation.\u000a
p7777
asg17
(lp7778
g7633
ag7633
asg19
(lp7779
g7635
ag7635
asg21
I0
sba(iArchitecture
Entity
p7780
(dp7781
g11
(lp7782
sg13
S'com.google.common.collect.SingletonImmutableBiMap'
p7783
sg15
(lp7784
sg17
(lp7785
sg19
(lp7786
sg21
I0
sba(iArchitecture
Entity
p7787
(dp7788
g11
(lp7789
sg13
S'com.google.common.collect.SingletonImmutableList'
p7790
sg15
(lp7791
sg17
(lp7792
sg19
(lp7793
sg21
I0
sba(iArchitecture
Entity
p7794
(dp7795
g11
(lp7796
sg13
S'com.google.common.collect.SingletonImmutableList_CustomFieldSerializer'
p7797
sg15
(lp7798
sg17
(lp7799
sg19
(lp7800
sg21
I0
sba(iArchitecture
Entity
p7801
(dp7802
g11
(lp7803
sg13
S'com.google.common.collect.SingletonImmutableSet'
p7804
sg15
(lp7805
sg17
(lp7806
sg19
(lp7807
sg21
I0
sba(iArchitecture
Entity
p7808
(dp7809
g11
(lp7810
sg13
S'com.google.common.collect.SingletonImmutableSet_CustomFieldSerializer'
p7811
sg15
(lp7812
sg17
(lp7813
sg19
(lp7814
sg21
I0
sba(iArchitecture
Entity
p7815
(dp7816
g11
(lp7817
sg13
S'com.google.common.collect.SingletonImmutableTable'
p7818
sg15
(lp7819
sg17
(lp7820
sg19
(lp7821
sg21
I0
sba(iArchitecture
Entity
p7822
(dp7823
g11
(lp7824
sg13
S'com.google.common.collect.SingletonImmutableTable_CustomFieldSerializer'
p7825
sg15
(lp7826
sg17
(lp7827
sg19
(lp7828
sg21
I0
sba(iArchitecture
Entity
p7829
(dp7830
g11
(lp7831
sg13
S'com.google.common.collect.SortedIterable'
p7832
sg15
(lp7833
sg17
(lp7834
sg19
(lp7835
sg21
I0
sba(iArchitecture
Entity
p7836
(dp7837
g11
(lp7838
sg13
S'com.google.common.collect.SortedIterables'
p7839
sg15
(lp7840
sg17
(lp7841
sg19
(lp7842
sg21
I0
sba(iArchitecture
Entity
p7843
(dp7844
g11
(lp7845
sg13
S'com.google.common.collect.SortedLists'
p7846
sg15
(lp7847
sg17
(lp7848
sg19
(lp7849
sg21
I0
sba(iArchitecture
Entity
p7850
(dp7851
g11
(lp7852
sg13
S'com.google.common.collect.SortedLists$1'
p7853
sg15
(lp7854
sg17
(lp7855
sg19
(lp7856
sg21
I0
sba(iArchitecture
Entity
p7857
(dp7858
g11
(lp7859
sg13
S'com.google.common.collect.SortedLists$KeyAbsentBehavior'
p7860
sg15
(lp7861
sg17
(lp7862
sg19
(lp7863
sg21
I0
sba(iArchitecture
Entity
p7864
(dp7865
g11
(lp7866
sg13
S'com.google.common.collect.SortedLists$KeyAbsentBehavior$1'
p7867
sg15
(lp7868
sg17
(lp7869
sg19
(lp7870
sg21
I0
sba(iArchitecture
Entity
p7871
(dp7872
g11
(lp7873
sg13
S'com.google.common.collect.SortedLists$KeyAbsentBehavior$2'
p7874
sg15
(lp7875
sg17
(lp7876
sg19
(lp7877
sg21
I0
sba(iArchitecture
Entity
p7878
(dp7879
g11
(lp7880
sg13
S'com.google.common.collect.SortedLists$KeyAbsentBehavior$3'
p7881
sg15
(lp7882
sg17
(lp7883
sg19
(lp7884
sg21
I0
sba(iArchitecture
Entity
p7885
(dp7886
g11
(lp7887
sg13
S'com.google.common.collect.SortedLists$KeyPresentBehavior'
p7888
sg15
(lp7889
sg17
(lp7890
sg19
(lp7891
sg21
I0
sba(iArchitecture
Entity
p7892
(dp7893
g11
(lp7894
sg13
S'com.google.common.collect.SortedLists$KeyPresentBehavior$1'
p7895
sg15
(lp7896
sg17
(lp7897
sg19
(lp7898
sg21
I0
sba(iArchitecture
Entity
p7899
(dp7900
g11
(lp7901
sg13
S'com.google.common.collect.SortedLists$KeyPresentBehavior$2'
p7902
sg15
(lp7903
sg17
(lp7904
sg19
(lp7905
sg21
I0
sba(iArchitecture
Entity
p7906
(dp7907
g11
(lp7908
sg13
S'com.google.common.collect.SortedLists$KeyPresentBehavior$3'
p7909
sg15
(lp7910
sg17
(lp7911
sg19
(lp7912
sg21
I0
sba(iArchitecture
Entity
p7913
(dp7914
g11
(lp7915
sg13
S'com.google.common.collect.SortedLists$KeyPresentBehavior$4'
p7916
sg15
(lp7917
sg17
(lp7918
sg19
(lp7919
sg21
I0
sba(iArchitecture
Entity
p7920
(dp7921
g11
(lp7922
sg13
S'com.google.common.collect.SortedLists$KeyPresentBehavior$5'
p7923
sg15
(lp7924
sg17
(lp7925
sg19
(lp7926
sg21
I0
sba(iArchitecture
Entity
p7927
(dp7928
g11
(lp7929
sg13
S'com.google.common.collect.SortedMapDifference'
p7930
sg15
(lp7931
sg17
(lp7932
sg19
(lp7933
sg21
I0
sba(iArchitecture
Entity
p7934
(dp7935
g11
(lp7936
sg13
S'com.google.common.collect.SortedMultiset'
p7937
sg15
(lp7938
sg17
(lp7939
sg19
(lp7940
sg21
I0
sba(iArchitecture
Entity
p7941
(dp7942
g11
(lp7943
sg13
S'com.google.common.collect.SortedMultisetBridge'
p7944
sg15
(lp7945
sg17
(lp7946
sg19
(lp7947
sg21
I0
sba(iArchitecture
Entity
p7948
(dp7949
g11
(lp7950
sg13
S'com.google.common.collect.SortedMultisets'
p7951
sg15
(lp7952
sg17
(lp7953
sg19
(lp7954
sg21
I0
sba(iArchitecture
Entity
p7955
(dp7956
g11
(lp7957
sg13
S'com.google.common.collect.SortedMultisets$ElementSet'
p7958
sg15
(lp7959
sg17
(lp7960
sg19
(lp7961
sg21
I0
sba(iArchitecture
Entity
p7962
(dp7963
g11
(lp7964
sg13
S'com.google.common.collect.SortedMultisets$NavigableElementSet'
p7965
sg15
(lp7966
sg17
(lp7967
sg19
(lp7968
sg21
I0
sba(iArchitecture
Entity
p7969
(dp7970
g11
(lp7971
sg13
S'com.google.common.collect.SortedSetMultimap'
p7972
sg15
(lp7973
sg17
(lp7974
sg19
(lp7975
sg21
I0
sba(iArchitecture
Entity
p7976
(dp7977
g11
(lp7978
sg13
S'com.google.common.collect.SparseImmutableTable'
p7979
sg15
(lp7980
sg17
(lp7981
sg19
(lp7982
sg21
I0
sba(iArchitecture
Entity
p7983
(dp7984
g11
(lp7985
sg13
S'com.google.common.collect.SparseImmutableTable_CustomFieldSerializer'
p7986
sg15
(lp7987
sg17
(lp7988
sg19
(lp7989
sg21
I0
sba(iArchitecture
Entity
p7990
(dp7991
g11
(lp7992
sg13
S'com.google.common.collect.StandardRowSortedTable'
p7993
sg15
(lp7994
sg17
(lp7995
sg19
(lp7996
sg21
I0
sba(iArchitecture
Entity
p7997
(dp7998
g11
(lp7999
sg13
S'com.google.common.collect.StandardRowSortedTable$1'
p8000
sg15
(lp8001
sg17
(lp8002
sg19
(lp8003
sg21
I0
sba(iArchitecture
Entity
p8004
(dp8005
g11
(lp8006
sg13
S'com.google.common.collect.StandardRowSortedTable$RowSortedMap'
p8007
sg15
(lp8008
sg17
(lp8009
sg19
(lp8010
sg21
I0
sba(iArchitecture
Entity
p8011
(dp8012
g11
(lp8013
sg13
S'com.google.common.collect.StandardTable'
p8014
sg15
(lp8015
sg17
(lp8016
sg19
(lp8017
sg21
I0
sba(iArchitecture
Entity
p8018
(dp8019
g11
(lp8020
sg13
S'com.google.common.collect.StandardTable$1'
p8021
sg15
(lp8022
sg17
(lp8023
sg19
(lp8024
sg21
I0
sba(iArchitecture
Entity
p8025
(dp8026
g11
(lp8027
sg13
S'com.google.common.collect.StandardTable$CellIterator'
p8028
sg15
(lp8029
sg17
(lp8030
sg19
(lp8031
sg21
I0
sba(iArchitecture
Entity
p8032
(dp8033
g11
(lp8034
sg13
S'com.google.common.collect.StandardTable$Column'
p8035
sg15
(lp8036
sg17
(lp8037
sg19
(lp8038
sg21
I0
sba(iArchitecture
Entity
p8039
(dp8040
g11
(lp8041
sg13
S'com.google.common.collect.StandardTable$Column$EntrySet'
p8042
sg15
(lp8043
sg17
(lp8044
sg19
(lp8045
sg21
I0
sba(iArchitecture
Entity
p8046
(dp8047
g11
(lp8048
sg13
S'com.google.common.collect.StandardTable$Column$EntrySetIterator'
p8049
sg15
(lp8050
sg17
(lp8051
sg19
(lp8052
sg21
I0
sba(iArchitecture
Entity
p8053
(dp8054
g11
(lp8055
sg13
S'com.google.common.collect.StandardTable$Column$EntrySetIterator$1'
p8056
sg15
(lp8057
sg17
(lp8058
sg19
(lp8059
sg21
I0
sba(iArchitecture
Entity
p8060
(dp8061
g11
(lp8062
sg13
S'com.google.common.collect.StandardTable$Column$KeySet'
p8063
sg15
(lp8064
sg17
(lp8065
sg19
(lp8066
sg21
I0
sba(iArchitecture
Entity
p8067
(dp8068
g11
(lp8069
sg13
S'com.google.common.collect.StandardTable$Column$Values'
p8070
sg15
(lp8071
sg17
(lp8072
sg19
(lp8073
sg21
I0
sba(iArchitecture
Entity
p8074
(dp8075
g11
(lp8076
sg13
S'com.google.common.collect.StandardTable$ColumnKeyIterator'
p8077
sg15
(lp8078
sg17
(lp8079
sg19
(lp8080
sg21
I0
sba(iArchitecture
Entity
p8081
(dp8082
g11
(lp8083
sg13
S'com.google.common.collect.StandardTable$ColumnKeySet'
p8084
sg15
(lp8085
sg17
(lp8086
sg19
(lp8087
sg21
I0
sba(iArchitecture
Entity
p8088
(dp8089
g11
(lp8090
sg13
S'com.google.common.collect.StandardTable$ColumnMap'
p8091
sg15
(lp8092
sg17
(lp8093
sg19
(lp8094
sg21
I0
sba(iArchitecture
Entity
p8095
(dp8096
g11
(lp8097
sg13
S'com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet'
p8098
sg15
(lp8099
sg17
(lp8100
sg19
(lp8101
sg21
I0
sba(iArchitecture
Entity
p8102
(dp8103
g11
(lp8104
sg13
S'com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1'
p8105
sg15
(lp8106
sg17
(lp8107
sg19
(lp8108
sg21
I0
sba(iArchitecture
Entity
p8109
(dp8110
g11
(lp8111
sg13
S'com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues'
p8112
sg15
(lp8113
sg17
(lp8114
sg19
(lp8115
sg21
I0
sba(iArchitecture
Entity
p8116
(dp8117
g11
(lp8118
sg13
S'com.google.common.collect.StandardTable$Row'
p8119
sg15
(lp8120
sg17
(lp8121
sg19
(lp8122
sg21
I0
sba(iArchitecture
Entity
p8123
(dp8124
g11
(lp8125
sg13
S'com.google.common.collect.StandardTable$Row$RowEntrySet'
p8126
sg15
(lp8127
sg17
(lp8128
sg19
(lp8129
sg21
I0
sba(iArchitecture
Entity
p8130
(dp8131
g11
(lp8132
sg13
S'com.google.common.collect.StandardTable$Row$RowEntrySet$1'
p8133
sg15
(lp8134
sg17
(lp8135
sg19
(lp8136
sg21
I0
sba(iArchitecture
Entity
p8137
(dp8138
g11
(lp8139
sg13
S'com.google.common.collect.StandardTable$Row$RowEntrySet$1$1'
p8140
sg15
(lp8141
sg17
(lp8142
sg19
(lp8143
sg21
I0
sba(iArchitecture
Entity
p8144
(dp8145
g11
(lp8146
sg13
S'com.google.common.collect.StandardTable$RowMap'
p8147
sg15
(lp8148
sg17
(lp8149
sg19
(lp8150
sg21
I0
sba(iArchitecture
Entity
p8151
(dp8152
g11
(lp8153
sg13
S'com.google.common.collect.StandardTable$RowMap$EntrySet'
p8154
sg15
(lp8155
sg17
(lp8156
sg19
(lp8157
sg21
I0
sba(iArchitecture
Entity
p8158
(dp8159
g11
(lp8160
sg13
S'com.google.common.collect.StandardTable$RowMap$EntrySet$1'
p8161
sg15
(lp8162
sg17
(lp8163
sg19
(lp8164
sg21
I0
sba(iArchitecture
Entity
p8165
(dp8166
g11
(lp8167
sg13
S'com.google.common.collect.StandardTable$TableSet'
p8168
sg15
(lp8169
sg17
(lp8170
sg19
(lp8171
sg21
I0
sba(iArchitecture
Entity
p8172
(dp8173
g11
(lp8174
sg13
S'com.google.common.collect.Synchronized'
p8175
sg15
(lp8176
sg17
(lp8177
sg19
(lp8178
sg21
I0
sba(iArchitecture
Entity
p8179
(dp8180
g11
(lp8181
sg13
S'com.google.common.collect.Synchronized$1'
p8182
sg15
(lp8183
sg17
(lp8184
sg19
(lp8185
sg21
I0
sba(iArchitecture
Entity
p8186
(dp8187
g11
(lp8188
sg13
S'com.google.common.collect.Synchronized$SynchronizedAsMap'
p8189
sg15
(lp8190
sg17
(lp8191
sg19
(lp8192
sg21
I0
sba(iArchitecture
Entity
p8193
(dp8194
g11
(lp8195
sg13
S'com.google.common.collect.Synchronized$SynchronizedAsMapEntries'
p8196
sg15
(lp8197
sg17
(lp8198
sg19
(lp8199
sg21
I0
sba(iArchitecture
Entity
p8200
(dp8201
g11
(lp8202
sg13
S'com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1'
p8203
sg15
(lp8204
sg17
(lp8205
sg19
(lp8206
sg21
I0
sba(iArchitecture
Entity
p8207
(dp8208
g11
(lp8209
sg13
S'com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1'
p8210
sg15
(lp8211
sg17
(lp8212
sg19
(lp8213
sg21
I0
sba(iArchitecture
Entity
p8214
(dp8215
g11
(lp8216
sg13
S'com.google.common.collect.Synchronized$SynchronizedAsMapValues'
p8217
sg15
(lp8218
sg17
(lp8219
sg19
(lp8220
sg21
I0
sba(iArchitecture
Entity
p8221
(dp8222
g11
(lp8223
sg13
S'com.google.common.collect.Synchronized$SynchronizedAsMapValues$1'
p8224
sg15
(lp8225
sg17
(lp8226
sg19
(lp8227
sg21
I0
sba(iArchitecture
Entity
p8228
(dp8229
g11
(lp8230
sg13
S'com.google.common.collect.Synchronized$SynchronizedBiMap'
p8231
sg15
(lp8232
sg17
(lp8233
sg19
(lp8234
sg21
I0
sba(iArchitecture
Entity
p8235
(dp8236
g11
(lp8237
sg13
S'com.google.common.collect.Synchronized$SynchronizedCollection'
p8238
sg15
(lp8239
sg17
(lp8240
sg19
(lp8241
sg21
I0
sba(iArchitecture
Entity
p8242
(dp8243
g11
(lp8244
sg13
S'com.google.common.collect.Synchronized$SynchronizedDeque'
p8245
sg15
(lp8246
sg17
(lp8247
sg19
(lp8248
sg21
I0
sba(iArchitecture
Entity
p8249
(dp8250
g11
(lp8251
sg13
S'com.google.common.collect.Synchronized$SynchronizedEntry'
p8252
sg15
(lp8253
sg17
(lp8254
sg19
(lp8255
sg21
I0
sba(iArchitecture
Entity
p8256
(dp8257
g11
(lp8258
sg13
S'com.google.common.collect.Synchronized$SynchronizedList'
p8259
sg15
(lp8260
sg17
(lp8261
sg19
(lp8262
sg21
I0
sba(iArchitecture
Entity
p8263
(dp8264
g11
(lp8265
sg13
S'com.google.common.collect.Synchronized$SynchronizedListMultimap'
p8266
sg15
(lp8267
sg17
(lp8268
sg19
(lp8269
sg21
I0
sba(iArchitecture
Entity
p8270
(dp8271
g11
(lp8272
sg13
S'com.google.common.collect.Synchronized$SynchronizedMap'
p8273
sg15
(lp8274
sg17
(lp8275
sg19
(lp8276
sg21
I0
sba(iArchitecture
Entity
p8277
(dp8278
g11
(lp8279
sg13
S'com.google.common.collect.Synchronized$SynchronizedMultimap'
p8280
sg15
(lp8281
sg17
(lp8282
sg19
(lp8283
sg21
I0
sba(iArchitecture
Entity
p8284
(dp8285
g11
(lp8286
sg13
S'com.google.common.collect.Synchronized$SynchronizedMultiset'
p8287
sg15
(lp8288
sg17
(lp8289
sg19
(lp8290
sg21
I0
sba(iArchitecture
Entity
p8291
(dp8292
g11
(lp8293
sg13
S'com.google.common.collect.Synchronized$SynchronizedNavigableMap'
p8294
sg15
(lp8295
sg17
(lp8296
sg19
(lp8297
sg21
I0
sba(iArchitecture
Entity
p8298
(dp8299
g11
(lp8300
sg13
S'com.google.common.collect.Synchronized$SynchronizedNavigableSet'
p8301
sg15
(lp8302
sg17
(lp8303
sg19
(lp8304
sg21
I0
sba(iArchitecture
Entity
p8305
(dp8306
g11
(lp8307
sg13
S'com.google.common.collect.Synchronized$SynchronizedObject'
p8308
sg15
(lp8309
sg17
(lp8310
sg19
(lp8311
sg21
I0
sba(iArchitecture
Entity
p8312
(dp8313
g11
(lp8314
sg13
S'com.google.common.collect.Synchronized$SynchronizedQueue'
p8315
sg15
(lp8316
sg17
(lp8317
sg19
(lp8318
sg21
I0
sba(iArchitecture
Entity
p8319
(dp8320
g11
(lp8321
sg13
S'com.google.common.collect.Synchronized$SynchronizedRandomAccessList'
p8322
sg15
(lp8323
sg17
(lp8324
sg19
(lp8325
sg21
I0
sba(iArchitecture
Entity
p8326
(dp8327
g11
(lp8328
sg13
S'com.google.common.collect.Synchronized$SynchronizedSet'
p8329
sg15
(lp8330
sg17
(lp8331
sg19
(lp8332
sg21
I0
sba(iArchitecture
Entity
p8333
(dp8334
g11
(lp8335
sg13
S'com.google.common.collect.Synchronized$SynchronizedSetMultimap'
p8336
sg15
(lp8337
sg17
(lp8338
sg19
(lp8339
sg21
I0
sba(iArchitecture
Entity
p8340
(dp8341
g11
(lp8342
sg13
S'com.google.common.collect.Synchronized$SynchronizedSortedMap'
p8343
sg15
(lp8344
sg17
(lp8345
sg19
(lp8346
sg21
I0
sba(iArchitecture
Entity
p8347
(dp8348
g11
(lp8349
sg13
S'com.google.common.collect.Synchronized$SynchronizedSortedSet'
p8350
sg15
(lp8351
sg17
(lp8352
sg19
(lp8353
sg21
I0
sba(iArchitecture
Entity
p8354
(dp8355
g11
(lp8356
sg13
S'com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap'
p8357
sg15
(lp8358
sg17
(lp8359
sg19
(lp8360
sg21
I0
sba(iArchitecture
Entity
p8361
(dp8362
g11
(lp8363
sg13
S'com.google.common.collect.Table'
p8364
sg15
(lp8365
sg17
(lp8366
sg19
(lp8367
sg21
I0
sba(iArchitecture
Entity
p8368
(dp8369
g11
(lp8370
sg13
S'com.google.common.collect.Table$Cell'
p8371
sg15
(lp8372
sg17
(lp8373
sg19
(lp8374
sg21
I0
sba(iArchitecture
Entity
p8375
(dp8376
g11
(lp8377
sg13
S'com.google.common.collect.Table_CustomFieldSerializerBase'
p8378
sg15
(lp8379
sg17
(lp8380
sg19
(lp8381
sg21
I0
sba(iArchitecture
Entity
p8382
(dp8383
g11
(lp8384
sg13
S'com.google.common.collect.Tables'
p8385
sg15
(lp8386
sg17
(lp8387
sg19
(lp8388
sg21
I0
sba(iArchitecture
Entity
p8389
(dp8390
g11
(lp8391
sg13
S'com.google.common.collect.Tables$1'
p8392
sg15
(lp8393
sg17
(lp8394
sg19
(lp8395
sg21
I0
sba(iArchitecture
Entity
p8396
(dp8397
g11
(lp8398
sg13
S'com.google.common.collect.Tables$AbstractCell'
p8399
sg15
(lp8400
sg17
(lp8401
sg19
(lp8402
sg21
I0
sba(iArchitecture
Entity
p8403
(dp8404
g11
(lp8405
sg13
S'com.google.common.collect.Tables$ImmutableCell'
p8406
sg15
(lp8407
sg17
(lp8408
sg19
(lp8409
sg21
I0
sba(iArchitecture
Entity
p8410
(dp8411
g11
(lp8412
sg13
S'com.google.common.collect.Tables$TransformedTable'
p8413
sg15
(lp8414
sg17
(lp8415
sg19
(lp8416
sg21
I0
sba(iArchitecture
Entity
p8417
(dp8418
g11
(lp8419
sg13
S'com.google.common.collect.Tables$TransformedTable$1'
p8420
sg15
(lp8421
sg17
(lp8422
sg19
(lp8423
sg21
I0
sba(iArchitecture
Entity
p8424
(dp8425
g11
(lp8426
sg13
S'com.google.common.collect.Tables$TransformedTable$2'
p8427
sg15
(lp8428
sg17
(lp8429
sg19
(lp8430
sg21
I0
sba(iArchitecture
Entity
p8431
(dp8432
g11
(lp8433
sg13
S'com.google.common.collect.Tables$TransformedTable$3'
p8434
sg15
(lp8435
sg17
(lp8436
sg19
(lp8437
sg21
I0
sba(iArchitecture
Entity
p8438
(dp8439
g11
(lp8440
sg13
S'com.google.common.collect.Tables$TransposeTable'
p8441
sg15
(lp8442
sg17
(lp8443
sg19
(lp8444
sg21
I0
sba(iArchitecture
Entity
p8445
(dp8446
g11
(lp8447
sg13
S'com.google.common.collect.Tables$TransposeTable$1'
p8448
sg15
(lp8449
sg17
(lp8450
sg19
(lp8451
sg21
I0
sba(iArchitecture
Entity
p8452
(dp8453
g11
(lp8454
sg13
S'com.google.common.collect.Tables$UnmodifiableRowSortedMap'
p8455
sg15
(lp8456
sg17
(lp8457
sg19
(lp8458
sg21
I0
sba(iArchitecture
Entity
p8459
(dp8460
g11
(lp8461
sg13
S'com.google.common.collect.Tables$UnmodifiableTable'
p8462
sg15
(lp8463
sg17
(lp8464
sg19
(lp8465
sg21
I0
sba(iArchitecture
Entity
p8466
(dp8467
g11
(lp8468
sg13
S'com.google.common.collect.TransformedIterator'
p8469
sg15
(lp8470
sg17
(lp8471
sg19
(lp8472
sg21
I0
sba(iArchitecture
Entity
p8473
(dp8474
g11
(lp8475
sg13
S'com.google.common.collect.TransformedListIterator'
p8476
sg15
(lp8477
sg17
(lp8478
sg19
(lp8479
sg21
I0
sba(iArchitecture
Entity
p8480
(dp8481
g11
(lp8482
sg13
S'com.google.common.collect.TreeBasedTable'
p8483
sg15
(lp8484
sg17
(lp8485
sg19
(lp8486
sg21
I0
sba(iArchitecture
Entity
p8487
(dp8488
g11
(lp8489
sg13
S'com.google.common.collect.TreeBasedTable$1'
p8490
sg15
(lp8491
sg17
(lp8492
sg19
(lp8493
sg21
I0
sba(iArchitecture
Entity
p8494
(dp8495
g11
(lp8496
sg13
S'com.google.common.collect.TreeBasedTable$2'
p8497
sg15
(lp8498
sg17
(lp8499
sg19
(lp8500
sg21
I0
sba(iArchitecture
Entity
p8501
(dp8502
g11
(lp8503
sg13
S'com.google.common.collect.TreeBasedTable$Factory'
p8504
sg15
(lp8505
sg17
(lp8506
sg19
(lp8507
sg21
I0
sba(iArchitecture
Entity
p8508
(dp8509
g11
(lp8510
sg13
S'com.google.common.collect.TreeBasedTable$TreeRow'
p8511
sg15
(lp8512
sg17
(lp8513
sg19
(lp8514
sg21
I0
sba(iArchitecture
Entity
p8515
(dp8516
g11
(lp8517
sg13
S'com.google.common.collect.TreeBasedTable_CustomFieldSerializer'
p8518
sg15
(lp8519
sg17
(lp8520
sg19
(lp8521
sg21
I0
sba(iArchitecture
Entity
p8522
(dp8523
g11
(lp8524
sg13
S'com.google.common.collect.TreeMultimap'
p8525
sg15
(lp8526
sg17
(lp8527
sg19
(lp8528
sg21
I0
sba(iArchitecture
Entity
p8529
(dp8530
g11
(lp8531
sg13
S'com.google.common.collect.TreeMultiset'
p8532
sg15
(lp8533
sg17
(lp8534
sg19
(lp8535
sg21
I0
sba(iArchitecture
Entity
p8536
(dp8537
g11
(lp8538
sg13
S'com.google.common.collect.TreeMultiset$1'
p8539
sg15
(lp8540
sg17
(lp8541
sg19
(lp8542
sg21
I0
sba(iArchitecture
Entity
p8543
(dp8544
g11
(lp8545
sg13
S'com.google.common.collect.TreeMultiset$2'
p8546
sg15
(lp8547
sg17
(lp8548
sg19
(lp8549
sg21
I0
sba(iArchitecture
Entity
p8550
(dp8551
g11
(lp8552
sg13
S'com.google.common.collect.TreeMultiset$3'
p8553
sg15
(lp8554
sg17
(lp8555
sg19
(lp8556
sg21
I0
sba(iArchitecture
Entity
p8557
(dp8558
g11
(lp8559
sg13
S'com.google.common.collect.TreeMultiset$4'
p8560
sg15
(lp8561
sg17
(lp8562
sg19
(lp8563
sg21
I0
sba(iArchitecture
Entity
p8564
(dp8565
g11
(lp8566
sg13
S'com.google.common.collect.TreeMultiset$Aggregate'
p8567
sg15
(lp8568
sg17
(lp8569
sg19
(lp8570
sg21
I0
sba(iArchitecture
Entity
p8571
(dp8572
g11
(lp8573
sg13
S'com.google.common.collect.TreeMultiset$Aggregate$1'
p8574
sg15
(lp8575
sg17
(lp8576
sg19
(lp8577
sg21
I0
sba(iArchitecture
Entity
p8578
(dp8579
g11
(lp8580
sg13
S'com.google.common.collect.TreeMultiset$Aggregate$2'
p8581
sg15
(lp8582
sg17
(lp8583
sg19
(lp8584
sg21
I0
sba(iArchitecture
Entity
p8585
(dp8586
g11
(lp8587
sg13
S'com.google.common.collect.TreeMultiset$AvlNode'
p8588
sg15
(lp8589
sg17
(lp8590
sg19
(lp8591
sg21
I0
sba(iArchitecture
Entity
p8592
(dp8593
g11
(lp8594
sg13
S'com.google.common.collect.TreeMultiset$Reference'
p8595
sg15
(lp8596
sg17
(lp8597
sg19
(lp8598
sg21
I0
sba(iArchitecture
Entity
p8599
(dp8600
g11
(lp8601
g102
asg13
S'com.google.common.collect.TreeRangeMap'
p8602
sg15
(lp8603
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p8604
asg17
(lp8605
g107
asg19
(lp8606
g109
asg21
I0
sba(iArchitecture
Entity
p8607
(dp8608
g11
(lp8609
g102
asg13
S'com.google.common.collect.TreeRangeMap$1'
p8610
sg15
(lp8611
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p8612
asg17
(lp8613
g107
asg19
(lp8614
g109
asg21
I0
sba(iArchitecture
Entity
p8615
(dp8616
g11
(lp8617
g102
asg13
S'com.google.common.collect.TreeRangeMap$AsMapOfRanges'
p8618
sg15
(lp8619
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p8620
asg17
(lp8621
g107
asg19
(lp8622
g109
asg21
I0
sba(iArchitecture
Entity
p8623
(dp8624
g11
(lp8625
g102
asg13
S'com.google.common.collect.TreeRangeMap$AsMapOfRanges$1'
p8626
sg15
(lp8627
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p8628
asg17
(lp8629
g107
asg19
(lp8630
g109
asg21
I0
sba(iArchitecture
Entity
p8631
(dp8632
g11
(lp8633
g102
asg13
S'com.google.common.collect.TreeRangeMap$RangeMapEntry'
p8634
sg15
(lp8635
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p8636
asg17
(lp8637
g107
asg19
(lp8638
g109
asg21
I0
sba(iArchitecture
Entity
p8639
(dp8640
g11
(lp8641
g102
asg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap'
p8642
sg15
(lp8643
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p8644
asg17
(lp8645
g107
asg19
(lp8646
g109
asg21
I0
sba(iArchitecture
Entity
p8647
(dp8648
g11
(lp8649
g102
asg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap'
p8650
sg15
(lp8651
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p8652
asg17
(lp8653
g107
asg19
(lp8654
g109
asg21
I0
sba(iArchitecture
Entity
p8655
(dp8656
g11
(lp8657
g102
asg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1'
p8658
sg15
(lp8659
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p8660
asg17
(lp8661
g107
asg19
(lp8662
g109
asg21
I0
sba(iArchitecture
Entity
p8663
(dp8664
g11
(lp8665
g102
asg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2'
p8666
sg15
(lp8667
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p8668
asg17
(lp8669
g107
asg19
(lp8670
g109
asg21
I0
sba(iArchitecture
Entity
p8671
(dp8672
g11
(lp8673
g102
asg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2$1'
p8674
sg15
(lp8675
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p8676
asg17
(lp8677
g107
asg19
(lp8678
g109
asg21
I0
sba(iArchitecture
Entity
p8679
(dp8680
g11
(lp8681
g102
asg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$3'
p8682
sg15
(lp8683
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p8684
asg17
(lp8685
g107
asg19
(lp8686
g109
asg21
I0
sba(iArchitecture
Entity
p8687
(dp8688
g11
(lp8689
sg13
S'com.google.common.collect.TreeRangeSet'
p8690
sg15
(lp8691
sg17
(lp8692
sg19
(lp8693
sg21
I0
sba(iArchitecture
Entity
p8694
(dp8695
g11
(lp8696
sg13
S'com.google.common.collect.TreeRangeSet$1'
p8697
sg15
(lp8698
sg17
(lp8699
sg19
(lp8700
sg21
I0
sba(iArchitecture
Entity
p8701
(dp8702
g11
(lp8703
sg13
S'com.google.common.collect.TreeRangeSet$AsRanges'
p8704
sg15
(lp8705
sg17
(lp8706
sg19
(lp8707
sg21
I0
sba(iArchitecture
Entity
p8708
(dp8709
g11
(lp8710
sg13
S'com.google.common.collect.TreeRangeSet$Complement'
p8711
sg15
(lp8712
sg17
(lp8713
sg19
(lp8714
sg21
I0
sba(iArchitecture
Entity
p8715
(dp8716
g11
(lp8717
sg13
S'com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound'
p8718
sg15
(lp8719
sg17
(lp8720
sg19
(lp8721
sg21
I0
sba(iArchitecture
Entity
p8722
(dp8723
g11
(lp8724
sg13
S'com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$1'
p8725
sg15
(lp8726
sg17
(lp8727
sg19
(lp8728
sg21
I0
sba(iArchitecture
Entity
p8729
(dp8730
g11
(lp8731
sg13
S'com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$2'
p8732
sg15
(lp8733
sg17
(lp8734
sg19
(lp8735
sg21
I0
sba(iArchitecture
Entity
p8736
(dp8737
g11
(lp8738
sg13
S'com.google.common.collect.TreeRangeSet$RangesByUpperBound'
p8739
sg15
(lp8740
sg17
(lp8741
sg19
(lp8742
sg21
I0
sba(iArchitecture
Entity
p8743
(dp8744
g11
(lp8745
sg13
S'com.google.common.collect.TreeRangeSet$RangesByUpperBound$1'
p8746
sg15
(lp8747
sg17
(lp8748
sg19
(lp8749
sg21
I0
sba(iArchitecture
Entity
p8750
(dp8751
g11
(lp8752
sg13
S'com.google.common.collect.TreeRangeSet$RangesByUpperBound$2'
p8753
sg15
(lp8754
sg17
(lp8755
sg19
(lp8756
sg21
I0
sba(iArchitecture
Entity
p8757
(dp8758
g11
(lp8759
sg13
S'com.google.common.collect.TreeRangeSet$SubRangeSet'
p8760
sg15
(lp8761
sg17
(lp8762
sg19
(lp8763
sg21
I0
sba(iArchitecture
Entity
p8764
(dp8765
g11
(lp8766
sg13
S'com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound'
p8767
sg15
(lp8768
sg17
(lp8769
sg19
(lp8770
sg21
I0
sba(iArchitecture
Entity
p8771
(dp8772
g11
(lp8773
sg13
S'com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$1'
p8774
sg15
(lp8775
sg17
(lp8776
sg19
(lp8777
sg21
I0
sba(iArchitecture
Entity
p8778
(dp8779
g11
(lp8780
sg13
S'com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$2'
p8781
sg15
(lp8782
sg17
(lp8783
sg19
(lp8784
sg21
I0
sba(iArchitecture
Entity
p8785
(dp8786
g11
(lp8787
sg13
S'com.google.common.collect.TreeTraverser'
p8788
sg15
(lp8789
sg17
(lp8790
sg19
(lp8791
sg21
I0
sba(iArchitecture
Entity
p8792
(dp8793
g11
(lp8794
sg13
S'com.google.common.collect.TreeTraverser$1'
p8795
sg15
(lp8796
sg17
(lp8797
sg19
(lp8798
sg21
I0
sba(iArchitecture
Entity
p8799
(dp8800
g11
(lp8801
sg13
S'com.google.common.collect.TreeTraverser$2'
p8802
sg15
(lp8803
sg17
(lp8804
sg19
(lp8805
sg21
I0
sba(iArchitecture
Entity
p8806
(dp8807
g11
(lp8808
sg13
S'com.google.common.collect.TreeTraverser$3'
p8809
sg15
(lp8810
sg17
(lp8811
sg19
(lp8812
sg21
I0
sba(iArchitecture
Entity
p8813
(dp8814
g11
(lp8815
sg13
S'com.google.common.collect.TreeTraverser$BreadthFirstIterator'
p8816
sg15
(lp8817
sg17
(lp8818
sg19
(lp8819
sg21
I0
sba(iArchitecture
Entity
p8820
(dp8821
g11
(lp8822
sg13
S'com.google.common.collect.TreeTraverser$PostOrderIterator'
p8823
sg15
(lp8824
sg17
(lp8825
sg19
(lp8826
sg21
I0
sba(iArchitecture
Entity
p8827
(dp8828
g11
(lp8829
sg13
S'com.google.common.collect.TreeTraverser$PostOrderNode'
p8830
sg15
(lp8831
sg17
(lp8832
sg19
(lp8833
sg21
I0
sba(iArchitecture
Entity
p8834
(dp8835
g11
(lp8836
sg13
S'com.google.common.collect.TreeTraverser$PreOrderIterator'
p8837
sg15
(lp8838
sg17
(lp8839
sg19
(lp8840
sg21
I0
sba(iArchitecture
Entity
p8841
(dp8842
g11
(lp8843
sg13
S'com.google.common.collect.UnmodifiableIterator'
p8844
sg15
(lp8845
sg17
(lp8846
sg19
(lp8847
sg21
I0
sba(iArchitecture
Entity
p8848
(dp8849
g11
(lp8850
sg13
S'com.google.common.collect.UnmodifiableListIterator'
p8851
sg15
(lp8852
sg17
(lp8853
sg19
(lp8854
sg21
I0
sba(iArchitecture
Entity
p8855
(dp8856
g11
(lp8857
sg13
S'com.google.common.collect.UnmodifiableSortedMultiset'
p8858
sg15
(lp8859
sg17
(lp8860
sg19
(lp8861
sg21
I0
sba(iArchitecture
Entity
p8862
(dp8863
g11
(lp8864
g102
asg13
S'com.google.common.collect.UsingToStringOrdering'
p8865
sg15
(lp8866
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p8867
asg17
(lp8868
g107
asg19
(lp8869
g109
asg21
I0
sba(iArchitecture
Entity
p8870
(dp8871
g11
(lp8872
sg13
S'com.google.common.collect.UsingToStringOrdering_CustomFieldSerializer'
p8873
sg15
(lp8874
sg17
(lp8875
sg19
(lp8876
sg21
I0
sba(iArchitecture
Entity
p8877
(dp8878
g11
(lp8879
sg13
S'com.google.common.collect.WellBehavedMap'
p8880
sg15
(lp8881
sg17
(lp8882
sg19
(lp8883
sg21
I0
sba(iArchitecture
Entity
p8884
(dp8885
g11
(lp8886
sg13
S'com.google.common.collect.WellBehavedMap$1'
p8887
sg15
(lp8888
sg17
(lp8889
sg19
(lp8890
sg21
I0
sba(iArchitecture
Entity
p8891
(dp8892
g11
(lp8893
sg13
S'com.google.common.collect.WellBehavedMap$EntrySet'
p8894
sg15
(lp8895
sg17
(lp8896
sg19
(lp8897
sg21
I0
sba(iArchitecture
Entity
p8898
(dp8899
g11
(lp8900
sg13
S'com.google.common.collect.WellBehavedMap$EntrySet$1'
p8901
sg15
(lp8902
sg17
(lp8903
sg19
(lp8904
sg21
I0
sba(iArchitecture
Entity
p8905
(dp8906
g11
(lp8907
sg13
S'com.google.common.collect.WellBehavedMap$EntrySet$1$1'
p8908
sg15
(lp8909
sg17
(lp8910
sg19
(lp8911
sg21
I0
sba(iArchitecture
Entity
p8912
(dp8913
g11
(lp8914
sg13
S'com.google.common.io.CountingInputStream'
p8915
sg15
(lp8916
sg17
(lp8917
sg19
(lp8918
sg21
I0
sba(iArchitecture
Entity
p8919
(dp8920
g11
(lp8921
sg13
S'com.google.common.io.CountingOutputStream'
p8922
sg15
(lp8923
sg17
(lp8924
sg19
(lp8925
sg21
I0
sba(iArchitecture
Entity
p8926
(dp8927
g11
(lp8928
sg13
S'com.google.common.io.Flushables'
p8929
sg15
(lp8930
sg17
(lp8931
sg19
(lp8932
sg21
I0
sba(iArchitecture
Entity
p8933
(dp8934
g11
(lp8935
sg13
S'com.google.common.testing.TestLogHandler'
p8936
sg15
(lp8937
sg17
(lp8938
sg19
(lp8939
sg21
I0
sba(iArchitecture
Entity
p8940
(dp8941
g11
(lp8942
sg13
S'com.google.common.util.concurrent.ForwardingBlockingQueue'
p8943
sg15
(lp8944
sg17
(lp8945
sg19
(lp8946
sg21
I0
sba(iArchitecture
Entity
p8947
(dp8948
g11
(lp8949
sg13
S'com.google.gwt.user.client.rpc.SerializationException'
p8950
sg15
(lp8951
sg17
(lp8952
sg19
(lp8953
sg21
I0
sba(iArchitecture
Entity
p8954
(dp8955
g11
(lp8956
sg13
S'com.google.gwt.user.client.rpc.SerializationStreamReader'
p8957
sg15
(lp8958
sg17
(lp8959
sg19
(lp8960
sg21
I0
sba(iArchitecture
Entity
p8961
(dp8962
g11
(lp8963
sg13
S'com.google.gwt.user.client.rpc.SerializationStreamWriter'
p8964
sg15
(lp8965
sg17
(lp8966
sg19
(lp8967
sg21
I0
sba(iArchitecture
Entity
p8968
(dp8969
g11
(lp8970
sg13
S'com.google.gwt.user.client.rpc.core.java.util.Collection_CustomFieldSerializerBase'
p8971
sg15
(lp8972
sg17
(lp8973
sg19
(lp8974
sg21
I0
sbasg1055
(lp8975
g2132
ag2139
ag2146
ag2155
ag2164
ag2171
ag2178
ag2185
ag2192
ag2199
ag2206
ag2213
ag2220
ag2227
ag2234
ag2241
ag2248
ag2255
ag2262
ag2269
ag2276
ag2284
ag2292
ag2300
ag2308
ag2316
ag2324
ag2332
ag2340
ag2348
ag2356
ag2364
ag2372
ag2380
ag2388
ag2396
ag2404
ag2412
ag2420
ag2428
ag2436
ag2444
ag2452
ag2460
ag2468
ag2476
ag2483
ag2490
ag2497
ag2504
ag2511
ag2518
ag2525
ag2532
ag2539
ag2546
ag2553
ag2560
ag2567
ag2574
ag2581
ag2588
ag2595
ag2602
ag2609
ag2616
ag2623
ag2630
ag2637
ag2645
ag2652
ag2659
ag2666
ag2673
ag2680
ag2687
ag2694
ag2701
ag2708
ag2715
ag2722
ag2729
ag2736
ag2743
ag2750
ag2757
ag2764
ag2771
ag2778
ag2785
ag2792
ag2799
ag2806
ag2813
ag2820
ag2827
ag2834
ag2841
ag2848
ag2855
ag2862
ag2869
ag2876
ag2883
ag2890
ag2897
ag2904
ag2911
ag2918
ag2925
ag2932
ag2939
ag2946
ag2954
ag2962
ag2970
ag2978
ag2986
ag2994
ag3001
ag3008
ag3015
ag3022
ag3029
ag3036
ag3043
ag3050
ag3057
ag3064
ag3071
ag3078
ag3085
ag3092
ag3099
ag3107
ag3115
ag3123
ag3131
ag3139
ag3147
ag3154
ag3161
ag3168
ag3175
ag3182
ag3189
ag3196
ag3203
ag3210
ag3217
ag3224
ag3231
ag3238
ag3245
ag3253
ag3261
ag3269
ag3277
ag3284
ag3291
ag3298
ag3305
ag3312
ag3320
ag3327
ag3335
ag3343
ag3350
ag3357
ag3364
ag3371
ag3378
ag3385
ag3392
ag3399
ag3406
ag3413
ag3420
ag3427
ag3434
ag3441
ag3448
ag3455
ag3462
ag3469
ag3476
ag3483
ag3490
ag3497
ag3504
ag3511
ag3518
ag3525
ag3532
ag3539
ag3546
ag3553
ag3561
ag3572
ag3581
ag3590
ag3597
ag3604
ag3611
ag3618
ag3625
ag3632
ag3639
ag3646
ag3653
ag3660
ag3667
ag3674
ag3681
ag3688
ag3695
ag3702
ag3709
ag3716
ag3723
ag3730
ag3737
ag3744
ag3751
ag3758
ag3765
ag3772
ag3779
ag3786
ag3793
ag3800
ag3807
ag3814
ag3821
ag3828
ag3835
ag3842
ag3849
ag3856
ag3863
ag3870
ag3877
ag3884
ag3891
ag3898
ag3905
ag3912
ag3919
ag3926
ag3933
ag3940
ag3947
ag3954
ag3961
ag3968
ag3975
ag3982
ag3989
ag3996
ag4003
ag4010
ag4017
ag4024
ag4031
ag4039
ag4047
ag4054
ag4061
ag4068
ag4075
ag4082
ag4089
ag4096
ag4103
ag4110
ag4117
ag4124
ag4131
ag4138
ag4146
ag4157
ag4166
ag4175
ag4184
ag4193
ag4200
ag4207
ag4215
ag4225
ag4233
ag4241
ag4249
ag4256
ag4263
ag4270
ag4277
ag4284
ag4291
ag4298
ag4305
ag4312
ag4319
ag4326
ag4333
ag4340
ag4347
ag4354
ag4361
ag4368
ag4375
ag4382
ag4389
ag4396
ag4403
ag4410
ag4417
ag4424
ag4431
ag4438
ag4445
ag4452
ag4459
ag4466
ag4473
ag4480
ag4487
ag4494
ag4501
ag4508
ag4515
ag4522
ag4529
ag4536
ag4543
ag4550
ag4557
ag4564
ag4571
ag4578
ag4585
ag4592
ag4599
ag4606
ag4613
ag4620
ag4627
ag4634
ag4642
ag4650
ag4657
ag4664
ag4671
ag4678
ag4685
ag4692
ag4699
ag4706
ag4713
ag4724
ag4748
ag4764
ag4780
ag4796
ag4812
ag4828
ag4844
ag4860
ag4876
ag4892
ag4908
ag4924
ag4940
ag4956
ag4972
ag4988
ag5004
ag5020
ag5036
ag5045
ag5054
ag5063
ag5072
ag5081
ag5090
ag5099
ag5108
ag5117
ag5126
ag5135
ag5144
ag5153
ag5162
ag5171
ag5180
ag5189
ag5198
ag5205
ag5212
ag5219
ag5226
ag5233
ag5240
ag5247
ag5254
ag5261
ag5268
ag5275
ag5282
ag5289
ag5296
ag5303
ag5310
ag5317
ag5324
ag5331
ag5338
ag5345
ag5352
ag5359
ag5366
ag5373
ag5380
ag5387
ag5394
ag5401
ag5408
ag5415
ag5422
ag5429
ag5436
ag5443
ag5450
ag5457
ag5464
ag5471
ag5478
ag5485
ag5492
ag5499
ag5506
ag5513
ag5520
ag5527
ag5534
ag5541
ag5548
ag5555
ag5562
ag5569
ag5576
ag5583
ag5590
ag5597
ag5604
ag5611
ag5618
ag5625
ag5632
ag5639
ag5647
ag5657
ag5665
ag5673
ag5681
ag5689
ag5697
ag5705
ag5713
ag5721
ag5729
ag5737
ag5745
ag5753
ag5760
ag5767
ag5774
ag5781
ag5788
ag5795
ag5802
ag5809
ag5816
ag5823
ag5830
ag5837
ag5844
ag5851
ag5858
ag5865
ag5872
ag5879
ag5886
ag5893
ag5900
ag5907
ag5914
ag5921
ag5928
ag5935
ag5942
ag5949
ag5956
ag5963
ag5970
ag5977
ag5984
ag5991
ag5998
ag6005
ag6012
ag6019
ag6026
ag6033
ag6040
ag6047
ag6054
ag6061
ag6068
ag6075
ag6082
ag6089
ag6096
ag6103
ag6110
ag6117
ag6124
ag6133
ag6142
ag6151
ag6160
ag6169
ag6178
ag6187
ag6196
ag6205
ag6214
ag6223
ag6232
ag6241
ag6250
ag6259
ag6268
ag6277
ag6286
ag6295
ag6304
ag6313
ag6322
ag6331
ag6340
ag6349
ag6358
ag6367
ag6376
ag6385
ag6394
ag6403
ag6412
ag6421
ag6430
ag6439
ag6448
ag6457
ag6466
ag6475
ag6484
ag6493
ag6502
ag6511
ag6520
ag6529
ag6538
ag6547
ag6556
ag6565
ag6574
ag6583
ag6592
ag6601
ag6610
ag6619
ag6627
ag6635
ag6643
ag6651
ag6659
ag6667
ag6674
ag6681
ag6688
ag6695
ag6702
ag6709
ag6716
ag6723
ag6730
ag6737
ag6744
ag6751
ag6758
ag6765
ag6772
ag6779
ag6786
ag6793
ag6800
ag6807
ag6814
ag6821
ag6828
ag6835
ag6842
ag6849
ag6856
ag6863
ag6870
ag6877
ag6884
ag6891
ag6898
ag6905
ag6912
ag6919
ag6926
ag6933
ag6940
ag6947
ag6954
ag6961
ag6968
ag6975
ag6982
ag6989
ag6996
ag7003
ag7010
ag7017
ag7024
ag7031
ag7038
ag7045
ag7052
ag7059
ag7066
ag7073
ag7080
ag7087
ag7094
ag7101
ag7108
ag7115
ag7123
ag7134
ag7144
ag7155
ag7162
ag7169
ag7176
ag7183
ag7191
ag7203
ag7213
ag7223
ag7233
ag7243
ag7251
ag7261
ag7268
ag7275
ag7282
ag7289
ag7296
ag7303
ag7311
ag7321
ag7329
ag7337
ag7345
ag7352
ag7359
ag7366
ag7373
ag7380
ag7387
ag7394
ag7401
ag7409
ag7416
ag7423
ag7430
ag7437
ag7444
ag7451
ag7458
ag7465
ag7472
ag7479
ag7486
ag7493
ag7500
ag7507
ag7514
ag7521
ag7528
ag7535
ag7542
ag7549
ag7556
ag7563
ag7571
ag7578
ag7585
ag7592
ag7599
ag7606
ag7613
ag7620
ag7628
ag7639
ag7648
ag7657
ag7666
ag7675
ag7684
ag7693
ag7702
ag7711
ag7720
ag7729
ag7738
ag7747
ag7756
ag7765
ag7774
ag7783
ag7790
ag7797
ag7804
ag7811
ag7818
ag7825
ag7832
ag7839
ag7846
ag7853
ag7860
ag7867
ag7874
ag7881
ag7888
ag7895
ag7902
ag7909
ag7916
ag7923
ag7930
ag7937
ag7944
ag7951
ag7958
ag7965
ag7972
ag7979
ag7986
ag7993
ag8000
ag8007
ag8014
ag8021
ag8028
ag8035
ag8042
ag8049
ag8056
ag8063
ag8070
ag8077
ag8084
ag8091
ag8098
ag8105
ag8112
ag8119
ag8126
ag8133
ag8140
ag8147
ag8154
ag8161
ag8168
ag8175
ag8182
ag8189
ag8196
ag8203
ag8210
ag8217
ag8224
ag8231
ag8238
ag8245
ag8252
ag8259
ag8266
ag8273
ag8280
ag8287
ag8294
ag8301
ag8308
ag8315
ag8322
ag8329
ag8336
ag8343
ag8350
ag8357
ag8364
ag8371
ag8378
ag8385
ag8392
ag8399
ag8406
ag8413
ag8420
ag8427
ag8434
ag8441
ag8448
ag8455
ag8462
ag8469
ag8476
ag8483
ag8490
ag8497
ag8504
ag8511
ag8518
ag8525
ag8532
ag8539
ag8546
ag8553
ag8560
ag8567
ag8574
ag8581
ag8588
ag8595
ag8602
ag8610
ag8618
ag8626
ag8634
ag8642
ag8650
ag8658
ag8666
ag8674
ag8682
ag8690
ag8697
ag8704
ag8711
ag8718
ag8725
ag8732
ag8739
ag8746
ag8753
ag8760
ag8767
ag8774
ag8781
ag8788
ag8795
ag8802
ag8809
ag8816
ag8823
ag8830
ag8837
ag8844
ag8851
ag8858
ag8865
ag8873
ag8880
ag8887
ag8894
ag8901
ag8908
ag8915
ag8922
ag8929
ag8936
ag8943
ag8950
ag8957
ag8964
ag8971
asg21
I0
sg1057
S'com.google.common.collect.ss'
p8976
sba(iArchitecture
Cluster
p8977
(dp8978
g7
(lp8979
(iArchitecture
Entity
p8980
(dp8981
g11
(lp8982
sg13
S'com.google.common.collect.testing.features.SetFeature'
p8983
sg15
(lp8984
sg17
(lp8985
sg19
(lp8986
sg21
I0
sba(iArchitecture
Entity
p8987
(dp8988
g11
(lp8989
sg13
S'com.google.common.collect.testing.features.SetFeature$Require'
p8990
sg15
(lp8991
sg17
(lp8992
sg19
(lp8993
sg21
I0
sbasg1055
(lp8994
g8983
ag8990
asg21
I0
sg1057
S'com.google.common.collect.testing.features.ss'
p8995
sba(iArchitecture
Cluster
p8996
(dp8997
g7
(lp8998
(iArchitecture
Entity
p8999
(dp9000
g11
(lp9001
sg13
S'com.google.common.collect.ArrayListMultimap_CustomFieldSerializer'
p9002
sg15
(lp9003
sg17
(lp9004
sg19
(lp9005
sg21
I0
sba(iArchitecture
Entity
p9006
(dp9007
g11
(lp9008
sg13
S'com.google.common.collect.BiMap'
p9009
sg15
(lp9010
sg17
(lp9011
sg19
(lp9012
sg21
I0
sba(iArchitecture
Entity
p9013
(dp9014
g11
(lp9015
g7310
asg13
S'com.google.common.collect.ContiguousSet'
p9016
sg15
(lp9017
VLet a < x < b:\u000a- [x].intersection([x]) should return [x], returns [],\u000a- [x].intersection([a..b]) should return [x], returns [],\u000a- [a..b].intersection([x]) should return [x], returns [],\u000a- [a..x].intersection([x..b]) should return [x], returns [].\u000a\u000aI'll create a PR in a minute.\u000a
p9018
asg17
(lp9019
g7315
asg19
(lp9020
g7317
asg21
I0
sba(iArchitecture
Entity
p9021
(dp9022
g11
(lp9023
sg13
S'com.google.common.collect.EnumMultiset'
p9024
sg15
(lp9025
sg17
(lp9026
sg19
(lp9027
sg21
I0
sba(iArchitecture
Entity
p9028
(dp9029
g11
(lp9030
sg13
S'com.google.common.collect.ExplicitOrdering_CustomFieldSerializer'
p9031
sg15
(lp9032
sg17
(lp9033
sg19
(lp9034
sg21
I0
sba(iArchitecture
Entity
p9035
(dp9036
g11
(lp9037
sg13
S'com.google.common.collect.HashMultimap_CustomFieldSerializer'
p9038
sg15
(lp9039
sg17
(lp9040
sg19
(lp9041
sg21
I0
sba(iArchitecture
Entity
p9042
(dp9043
g11
(lp9044
sg13
S'com.google.common.collect.HashMultiset'
p9045
sg15
(lp9046
sg17
(lp9047
sg19
(lp9048
sg21
I0
sba(iArchitecture
Entity
p9049
(dp9050
g11
(lp9051
sg13
S'com.google.common.collect.HashMultiset_CustomFieldSerializer'
p9052
sg15
(lp9053
sg17
(lp9054
sg19
(lp9055
sg21
I0
sba(iArchitecture
Entity
p9056
(dp9057
g11
(lp9058
sg13
S'com.google.common.collect.ImmutableCollection'
p9059
sg15
(lp9060
sg17
(lp9061
sg19
(lp9062
sg21
I0
sba(iArchitecture
Entity
p9063
(dp9064
g11
(lp9065
sg13
S'com.google.common.collect.ImmutableCollection$ArrayBasedBuilder'
p9066
sg15
(lp9067
sg17
(lp9068
sg19
(lp9069
sg21
I0
sba(iArchitecture
Entity
p9070
(dp9071
g11
(lp9072
sg13
S'com.google.common.collect.ImmutableCollection$Builder'
p9073
sg15
(lp9074
sg17
(lp9075
sg19
(lp9076
sg21
I0
sba(iArchitecture
Entity
p9077
(dp9078
g11
(lp9079
sg13
S'com.google.common.collect.ImmutableEnumMap_CustomFieldSerializer'
p9080
sg15
(lp9081
sg17
(lp9082
sg19
(lp9083
sg21
I0
sba(iArchitecture
Entity
p9084
(dp9085
g11
(lp9086
g4214
asg13
S'com.google.common.collect.ImmutableMap'
p9087
sg15
(lp9088
VI'm a [Spoon](https://github.com/INRIA/spoon) contributor, an open source project to analyse and transform Java source code. This project have a dependency to [JDT](https://eclipse.org/jdt/) to compile target source code. Recently, I tried to analyse Guava with Spoon but JDT can't compile our project.\u000a\u000aWhat is the problem?\u000a\u000aIn [`ImmutableMap`](https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableMap.java) class, we have these methods:\u000a\u000a``` java\u000a// If the map is an EnumMap, it must have key type K for some <K extends Enum<K>>.\u000a@SuppressWarnings({"unchecked", "rawtypes"})\u000aprivate static <K, V> ImmutableMap<K, V> copyOfEnumMapUnsafe(Map<? extends K, ? extends V> map) {\u000a    return copyOfEnumMap((EnumMap) map);\u000a}\u000a\u000aprivate static <K extends Enum<K>, V> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\u000a    EnumMap<K, V> copy = new EnumMap<K, V>(original);\u000a    for (Map.Entry<?, ?> entry : copy.entrySet()) {\u000a        checkEntryNotNull(entry.getKey(), entry.getValue());\u000a    }\u000a    return ImmutableEnumMap.asImmutable(copy);\u000a}\u000a```\u000a\u000aThis code is valid but there is an error from JDT:\u000a\u000a> Type mismatch: cannot convert from `<Enum<Enum<K>>>` to `<K>`\u000a\u000aBefore the creation of this issue, I reported the bug in the bugtracker of JDT (issue [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404)). In 2 words, the conclusion was that: "Yes, JDT don't support this usage of Java but there is a better practice". This better practice is explained [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404#c3):\u000a\u000a``` java\u000aprivate static <K extends Enum<K>> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\u000a    return copyOfEnumMap((EnumMap<K,?>) map);\u000a}\u000a```\u000a\u000aI tried some tricky solutions but, unfortunately, this solution can't be applied in your project. So I come to notify you that your project can't be compiled by JDT.\u000a
p9089
asg17
(lp9090
g4219
asg19
(lp9091
g4221
asg21
I0
sba(iArchitecture
Entity
p9092
(dp9093
g11
(lp9094
g4214
asg13
S'com.google.common.collect.ImmutableMap$Builder'
p9095
sg15
(lp9096
VI'm a [Spoon](https://github.com/INRIA/spoon) contributor, an open source project to analyse and transform Java source code. This project have a dependency to [JDT](https://eclipse.org/jdt/) to compile target source code. Recently, I tried to analyse Guava with Spoon but JDT can't compile our project.\u000a\u000aWhat is the problem?\u000a\u000aIn [`ImmutableMap`](https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableMap.java) class, we have these methods:\u000a\u000a``` java\u000a// If the map is an EnumMap, it must have key type K for some <K extends Enum<K>>.\u000a@SuppressWarnings({"unchecked", "rawtypes"})\u000aprivate static <K, V> ImmutableMap<K, V> copyOfEnumMapUnsafe(Map<? extends K, ? extends V> map) {\u000a    return copyOfEnumMap((EnumMap) map);\u000a}\u000a\u000aprivate static <K extends Enum<K>, V> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\u000a    EnumMap<K, V> copy = new EnumMap<K, V>(original);\u000a    for (Map.Entry<?, ?> entry : copy.entrySet()) {\u000a        checkEntryNotNull(entry.getKey(), entry.getValue());\u000a    }\u000a    return ImmutableEnumMap.asImmutable(copy);\u000a}\u000a```\u000a\u000aThis code is valid but there is an error from JDT:\u000a\u000a> Type mismatch: cannot convert from `<Enum<Enum<K>>>` to `<K>`\u000a\u000aBefore the creation of this issue, I reported the bug in the bugtracker of JDT (issue [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404)). In 2 words, the conclusion was that: "Yes, JDT don't support this usage of Java but there is a better practice". This better practice is explained [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404#c3):\u000a\u000a``` java\u000aprivate static <K extends Enum<K>> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\u000a    return copyOfEnumMap((EnumMap<K,?>) map);\u000a}\u000a```\u000a\u000aI tried some tricky solutions but, unfortunately, this solution can't be applied in your project. So I come to notify you that your project can't be compiled by JDT.\u000a
p9097
asg17
(lp9098
g4219
asg19
(lp9099
g4221
asg21
I0
sba(iArchitecture
Entity
p9100
(dp9101
g11
(lp9102
g4214
asg13
S'com.google.common.collect.ImmutableMap$SerializedForm'
p9103
sg15
(lp9104
VI'm a [Spoon](https://github.com/INRIA/spoon) contributor, an open source project to analyse and transform Java source code. This project have a dependency to [JDT](https://eclipse.org/jdt/) to compile target source code. Recently, I tried to analyse Guava with Spoon but JDT can't compile our project.\u000a\u000aWhat is the problem?\u000a\u000aIn [`ImmutableMap`](https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableMap.java) class, we have these methods:\u000a\u000a``` java\u000a// If the map is an EnumMap, it must have key type K for some <K extends Enum<K>>.\u000a@SuppressWarnings({"unchecked", "rawtypes"})\u000aprivate static <K, V> ImmutableMap<K, V> copyOfEnumMapUnsafe(Map<? extends K, ? extends V> map) {\u000a    return copyOfEnumMap((EnumMap) map);\u000a}\u000a\u000aprivate static <K extends Enum<K>, V> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\u000a    EnumMap<K, V> copy = new EnumMap<K, V>(original);\u000a    for (Map.Entry<?, ?> entry : copy.entrySet()) {\u000a        checkEntryNotNull(entry.getKey(), entry.getValue());\u000a    }\u000a    return ImmutableEnumMap.asImmutable(copy);\u000a}\u000a```\u000a\u000aThis code is valid but there is an error from JDT:\u000a\u000a> Type mismatch: cannot convert from `<Enum<Enum<K>>>` to `<K>`\u000a\u000aBefore the creation of this issue, I reported the bug in the bugtracker of JDT (issue [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404)). In 2 words, the conclusion was that: "Yes, JDT don't support this usage of Java but there is a better practice". This better practice is explained [here](https://bugs.eclipse.org/bugs/show_bug.cgi?id=469404#c3):\u000a\u000a``` java\u000aprivate static <K extends Enum<K>> ImmutableMap<K, V> copyOfEnumMap(EnumMap<K, ? extends V> original) {\u000a    return copyOfEnumMap((EnumMap<K,?>) map);\u000a}\u000a```\u000a\u000aI tried some tricky solutions but, unfortunately, this solution can't be applied in your project. So I come to notify you that your project can't be compiled by JDT.\u000a
p9105
asg17
(lp9106
g4219
asg19
(lp9107
g4221
asg21
I0
sba(iArchitecture
Entity
p9108
(dp9109
g11
(lp9110
sg13
S'com.google.common.collect.ImmutableMapEntry'
p9111
sg15
(lp9112
sg17
(lp9113
sg19
(lp9114
sg21
I0
sba(iArchitecture
Entity
p9115
(dp9116
g11
(lp9117
sg13
S'com.google.common.collect.ImmutableMapEntry$TerminalEntry'
p9118
sg15
(lp9119
sg17
(lp9120
sg19
(lp9121
sg21
I0
sba(iArchitecture
Entity
p9122
(dp9123
g11
(lp9124
g102
asg13
S'com.google.common.collect.ImmutableSortedSet$Builder'
p9125
sg15
(lp9126
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p9127
asg17
(lp9128
g107
asg19
(lp9129
g109
asg21
I0
sba(iArchitecture
Entity
p9130
(dp9131
g11
(lp9132
sg13
S'com.google.common.collect.LinkedHashMultiset_CustomFieldSerializer'
p9133
sg15
(lp9134
sg17
(lp9135
sg19
(lp9136
sg21
I0
sba(iArchitecture
Entity
p9137
(dp9138
g11
(lp9139
sg13
S'com.google.common.collect.ListMultimap'
p9140
sg15
(lp9141
sg17
(lp9142
sg19
(lp9143
sg21
I0
sba(iArchitecture
Entity
p9144
(dp9145
g11
(lp9146
sg13
S'com.google.common.collect.Multimap'
p9147
sg15
(lp9148
sg17
(lp9149
sg19
(lp9150
sg21
I0
sba(iArchitecture
Entity
p9151
(dp9152
g11
(lp9153
sg13
S'com.google.common.collect.Multiset'
p9154
sg15
(lp9155
sg17
(lp9156
sg19
(lp9157
sg21
I0
sba(iArchitecture
Entity
p9158
(dp9159
g11
(lp9160
sg13
S'com.google.common.collect.Multiset$Entry'
p9161
sg15
(lp9162
sg17
(lp9163
sg19
(lp9164
sg21
I0
sba(iArchitecture
Entity
p9165
(dp9166
g11
(lp9167
sg13
S'com.google.common.collect.Multiset_CustomFieldSerializerBase'
p9168
sg15
(lp9169
sg17
(lp9170
sg19
(lp9171
sg21
I0
sba(iArchitecture
Entity
p9172
(dp9173
g11
(lp9174
sg13
S'com.google.common.collect.ObjectArrays'
p9175
sg15
(lp9176
sg17
(lp9177
sg19
(lp9178
sg21
I0
sba(iArchitecture
Entity
p9179
(dp9180
g11
(lp9181
sg13
S'com.google.common.collect.RegularImmutableAsList'
p9182
sg15
(lp9183
sg17
(lp9184
sg19
(lp9185
sg21
I0
sba(iArchitecture
Entity
p9186
(dp9187
g11
(lp9188
sg13
S'com.google.common.collect.RegularImmutableAsList_CustomFieldSerializer'
p9189
sg15
(lp9190
sg17
(lp9191
sg19
(lp9192
sg21
I0
sba(iArchitecture
Entity
p9193
(dp9194
g11
(lp9195
sg13
S'com.google.common.collect.RegularImmutableMap_CustomFieldSerializer'
p9196
sg15
(lp9197
sg17
(lp9198
sg19
(lp9199
sg21
I0
sba(iArchitecture
Entity
p9200
(dp9201
g11
(lp9202
sg13
S'com.google.common.collect.TreeMultimap_CustomFieldSerializer'
p9203
sg15
(lp9204
sg17
(lp9205
sg19
(lp9206
sg21
I0
sba(iArchitecture
Entity
p9207
(dp9208
g11
(lp9209
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$KnownOrder'
p9210
sg15
(lp9211
sg17
(lp9212
sg19
(lp9213
sg21
I0
sba(iArchitecture
Entity
p9214
(dp9215
g11
(lp9216
sg13
S'com.google.common.collect.testing.AnEnum'
p9217
sg15
(lp9218
sg17
(lp9219
sg19
(lp9220
sg21
I0
sba(iArchitecture
Entity
p9221
(dp9222
g11
(lp9223
sg13
S'com.google.common.collect.testing.DerivedGenerator'
p9224
sg15
(lp9225
sg17
(lp9226
sg19
(lp9227
sg21
I0
sba(iArchitecture
Entity
p9228
(dp9229
g11
(lp9230
sg13
S'com.google.common.collect.testing.IteratorFeature'
p9231
sg15
(lp9232
sg17
(lp9233
sg19
(lp9234
sg21
I0
sba(iArchitecture
Entity
p9235
(dp9236
g11
(lp9237
sg13
S'com.google.common.collect.testing.IteratorTester'
p9238
sg15
(lp9239
sg17
(lp9240
sg19
(lp9241
sg21
I0
sba(iArchitecture
Entity
p9242
(dp9243
g11
(lp9244
sg13
S'com.google.common.collect.testing.SampleElements'
p9245
sg15
(lp9246
sg17
(lp9247
sg19
(lp9248
sg21
I0
sba(iArchitecture
Entity
p9249
(dp9250
g11
(lp9251
sg13
S'com.google.common.collect.testing.SampleElements$Chars'
p9252
sg15
(lp9253
sg17
(lp9254
sg19
(lp9255
sg21
I0
sba(iArchitecture
Entity
p9256
(dp9257
g11
(lp9258
sg13
S'com.google.common.collect.testing.SampleElements$Collider'
p9259
sg15
(lp9260
sg17
(lp9261
sg19
(lp9262
sg21
I0
sba(iArchitecture
Entity
p9263
(dp9264
g11
(lp9265
sg13
S'com.google.common.collect.testing.SampleElements$Colliders'
p9266
sg15
(lp9267
sg17
(lp9268
sg19
(lp9269
sg21
I0
sba(iArchitecture
Entity
p9270
(dp9271
g11
(lp9272
sg13
S'com.google.common.collect.testing.SampleElements$Enums'
p9273
sg15
(lp9274
sg17
(lp9275
sg19
(lp9276
sg21
I0
sba(iArchitecture
Entity
p9277
(dp9278
g11
(lp9279
sg13
S'com.google.common.collect.testing.SampleElements$Ints'
p9280
sg15
(lp9281
sg17
(lp9282
sg19
(lp9283
sg21
I0
sba(iArchitecture
Entity
p9284
(dp9285
g11
(lp9286
sg13
S'com.google.common.collect.testing.SampleElements$Strings'
p9287
sg15
(lp9288
sg17
(lp9289
sg19
(lp9290
sg21
I0
sba(iArchitecture
Entity
p9291
(dp9292
g11
(lp9293
sg13
S'com.google.common.collect.testing.SampleElements$Unhashables'
p9294
sg15
(lp9295
sg17
(lp9296
sg19
(lp9297
sg21
I0
sba(iArchitecture
Entity
p9298
(dp9299
g11
(lp9300
sg13
S'com.google.common.collect.testing.TestCharacterListGenerator'
p9301
sg15
(lp9302
sg17
(lp9303
sg19
(lp9304
sg21
I0
sba(iArchitecture
Entity
p9305
(dp9306
g11
(lp9307
sg13
S'com.google.common.collect.testing.TestCollectionGenerator'
p9308
sg15
(lp9309
sg17
(lp9310
sg19
(lp9311
sg21
I0
sba(iArchitecture
Entity
p9312
(dp9313
g11
(lp9314
sg13
S'com.google.common.collect.testing.TestCollidingSetGenerator'
p9315
sg15
(lp9316
sg17
(lp9317
sg19
(lp9318
sg21
I0
sba(iArchitecture
Entity
p9319
(dp9320
g11
(lp9321
sg13
S'com.google.common.collect.testing.TestContainerGenerator'
p9322
sg15
(lp9323
sg17
(lp9324
sg19
(lp9325
sg21
I0
sba(iArchitecture
Entity
p9326
(dp9327
g11
(lp9328
sg13
S'com.google.common.collect.testing.TestEnumMapGenerator'
p9329
sg15
(lp9330
sg17
(lp9331
sg19
(lp9332
sg21
I0
sba(iArchitecture
Entity
p9333
(dp9334
g11
(lp9335
sg13
S'com.google.common.collect.testing.TestListGenerator'
p9336
sg15
(lp9337
sg17
(lp9338
sg19
(lp9339
sg21
I0
sba(iArchitecture
Entity
p9340
(dp9341
g11
(lp9342
sg13
S'com.google.common.collect.testing.TestStringCollectionGenerator'
p9343
sg15
(lp9344
sg17
(lp9345
sg19
(lp9346
sg21
I0
sba(iArchitecture
Entity
p9347
(dp9348
g11
(lp9349
sg13
S'com.google.common.collect.testing.TestStringSortedSetGenerator'
p9350
sg15
(lp9351
sg17
(lp9352
sg19
(lp9353
sg21
I0
sba(iArchitecture
Entity
p9354
(dp9355
g11
(lp9356
sg13
S'com.google.common.collect.testing.TestSubjectGenerator'
p9357
sg15
(lp9358
sg17
(lp9359
sg19
(lp9360
sg21
I0
sba(iArchitecture
Entity
p9361
(dp9362
g11
(lp9363
sg13
S'com.google.common.collect.testing.TestUnhashableCollectionGenerator'
p9364
sg15
(lp9365
sg17
(lp9366
sg19
(lp9367
sg21
I0
sba(iArchitecture
Entity
p9368
(dp9369
g11
(lp9370
sg13
S'com.google.common.collect.testing.UnhashableObject'
p9371
sg15
(lp9372
sg17
(lp9373
sg19
(lp9374
sg21
I0
sba(iArchitecture
Entity
p9375
(dp9376
g11
(lp9377
sg13
S'com.google.common.collect.testing.features.MapFeature'
p9378
sg15
(lp9379
sg17
(lp9380
sg19
(lp9381
sg21
I0
sba(iArchitecture
Entity
p9382
(dp9383
g11
(lp9384
sg13
S'com.google.common.collect.testing.features.MapFeature$Require'
p9385
sg15
(lp9386
sg17
(lp9387
sg19
(lp9388
sg21
I0
sba(iArchitecture
Entity
p9389
(dp9390
g11
(lp9391
sg13
S'com.google.common.collect.testing.google.AbstractBiMapTester'
p9392
sg15
(lp9393
sg17
(lp9394
sg19
(lp9395
sg21
I0
sba(iArchitecture
Entity
p9396
(dp9397
g11
(lp9398
sg13
S'com.google.common.collect.testing.google.AbstractListMultimapTester'
p9399
sg15
(lp9400
sg17
(lp9401
sg19
(lp9402
sg21
I0
sba(iArchitecture
Entity
p9403
(dp9404
g11
(lp9405
sg13
S'com.google.common.collect.testing.google.AbstractMultimapTester'
p9406
sg15
(lp9407
sg17
(lp9408
sg19
(lp9409
sg21
I0
sba(iArchitecture
Entity
p9410
(dp9411
g11
(lp9412
sg13
S'com.google.common.collect.testing.google.AbstractMultisetSetCountTester'
p9413
sg15
(lp9414
sg17
(lp9415
sg19
(lp9416
sg21
I0
sba(iArchitecture
Entity
p9417
(dp9418
g11
(lp9419
sg13
S'com.google.common.collect.testing.google.AbstractMultisetTester'
p9420
sg15
(lp9421
sg17
(lp9422
sg19
(lp9423
sg21
I0
sba(iArchitecture
Entity
p9424
(dp9425
g11
(lp9426
sg13
S'com.google.common.collect.testing.google.BiMapClearTester'
p9427
sg15
(lp9428
sg17
(lp9429
sg19
(lp9430
sg21
I0
sba(iArchitecture
Entity
p9431
(dp9432
g11
(lp9433
sg13
S'com.google.common.collect.testing.google.BiMapGenerators'
p9434
sg15
(lp9435
sg17
(lp9436
sg19
(lp9437
sg21
I0
sba(iArchitecture
Entity
p9438
(dp9439
g11
(lp9440
sg13
S'com.google.common.collect.testing.google.BiMapGenerators$ImmutableBiMapCopyOfGenerator'
p9441
sg15
(lp9442
sg17
(lp9443
sg19
(lp9444
sg21
I0
sba(iArchitecture
Entity
p9445
(dp9446
g11
(lp9447
sg13
S'com.google.common.collect.testing.google.BiMapGenerators$ImmutableBiMapGenerator'
p9448
sg15
(lp9449
sg17
(lp9450
sg19
(lp9451
sg21
I0
sba(iArchitecture
Entity
p9452
(dp9453
g11
(lp9454
sg13
S'com.google.common.collect.testing.google.BiMapInverseTester'
p9455
sg15
(lp9456
sg17
(lp9457
sg19
(lp9458
sg21
I0
sba(iArchitecture
Entity
p9459
(dp9460
g11
(lp9461
sg13
S'com.google.common.collect.testing.google.BiMapInverseTester$BiMapPair'
p9462
sg15
(lp9463
sg17
(lp9464
sg19
(lp9465
sg21
I0
sba(iArchitecture
Entity
p9466
(dp9467
g11
(lp9468
sg13
S'com.google.common.collect.testing.google.BiMapPutTester'
p9469
sg15
(lp9470
sg17
(lp9471
sg19
(lp9472
sg21
I0
sba(iArchitecture
Entity
p9473
(dp9474
g11
(lp9475
sg13
S'com.google.common.collect.testing.google.BiMapRemoveTester'
p9476
sg15
(lp9477
sg17
(lp9478
sg19
(lp9479
sg21
I0
sba(iArchitecture
Entity
p9480
(dp9481
g11
(lp9482
sg13
S'com.google.common.collect.testing.google.BiMapTestSuiteBuilder'
p9483
sg15
(lp9484
sg17
(lp9485
sg19
(lp9486
sg21
I0
sba(iArchitecture
Entity
p9487
(dp9488
g11
(lp9489
sg13
S'com.google.common.collect.testing.google.BiMapTestSuiteBuilder$NoRecurse'
p9490
sg15
(lp9491
sg17
(lp9492
sg19
(lp9493
sg21
I0
sba(iArchitecture
Entity
p9494
(dp9495
g11
(lp9496
sg13
S'com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators'
p9497
sg15
(lp9498
sg17
(lp9499
sg19
(lp9500
sg21
I0
sba(iArchitecture
Entity
p9501
(dp9502
g11
(lp9503
sg13
S'com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators$BiMapValueSetGenerator'
p9504
sg15
(lp9505
sg17
(lp9506
sg19
(lp9507
sg21
I0
sba(iArchitecture
Entity
p9508
(dp9509
g11
(lp9510
sg13
S'com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators$InverseBiMapGenerator'
p9511
sg15
(lp9512
sg17
(lp9513
sg19
(lp9514
sg21
I0
sba(iArchitecture
Entity
p9515
(dp9516
g11
(lp9517
sg13
S'com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators$MapGenerator'
p9518
sg15
(lp9519
sg17
(lp9520
sg19
(lp9521
sg21
I0
sba(iArchitecture
Entity
p9522
(dp9523
g11
(lp9524
sg13
S'com.google.common.collect.testing.google.ListGenerators'
p9525
sg15
(lp9526
sg17
(lp9527
sg19
(lp9528
sg21
I0
sba(iArchitecture
Entity
p9529
(dp9530
g11
(lp9531
sg13
S'com.google.common.collect.testing.google.ListGenerators$1'
p9532
sg15
(lp9533
sg17
(lp9534
sg19
(lp9535
sg21
I0
sba(iArchitecture
Entity
p9536
(dp9537
g11
(lp9538
sg13
S'com.google.common.collect.testing.google.ListGenerators$BuilderAddAllListGenerator'
p9539
sg15
(lp9540
sg17
(lp9541
sg19
(lp9542
sg21
I0
sba(iArchitecture
Entity
p9543
(dp9544
g11
(lp9545
sg13
S'com.google.common.collect.testing.google.ListGenerators$BuilderAddListGenerator'
p9546
sg15
(lp9547
sg17
(lp9548
sg19
(lp9549
sg21
I0
sba(iArchitecture
Entity
p9550
(dp9551
g11
(lp9552
sg13
S'com.google.common.collect.testing.google.ListGenerators$BuilderReversedListGenerator'
p9553
sg15
(lp9554
sg17
(lp9555
sg19
(lp9556
sg21
I0
sba(iArchitecture
Entity
p9557
(dp9558
g11
(lp9559
sg13
S'com.google.common.collect.testing.google.ListGenerators$CharactersOfCharSequenceGenerator'
p9560
sg15
(lp9561
sg17
(lp9562
sg19
(lp9563
sg21
I0
sba(iArchitecture
Entity
p9564
(dp9565
g11
(lp9566
sg13
S'com.google.common.collect.testing.google.ListGenerators$CharactersOfStringGenerator'
p9567
sg15
(lp9568
sg17
(lp9569
sg19
(lp9570
sg21
I0
sba(iArchitecture
Entity
p9571
(dp9572
g11
(lp9573
sg13
S'com.google.common.collect.testing.google.ListGenerators$ImmutableListHeadSubListGenerator'
p9574
sg15
(lp9575
sg17
(lp9576
sg19
(lp9577
sg21
I0
sba(iArchitecture
Entity
p9578
(dp9579
g11
(lp9580
sg13
S'com.google.common.collect.testing.google.ListGenerators$ImmutableListMiddleSubListGenerator'
p9581
sg15
(lp9582
sg17
(lp9583
sg19
(lp9584
sg21
I0
sba(iArchitecture
Entity
p9585
(dp9586
g11
(lp9587
sg13
S'com.google.common.collect.testing.google.ListGenerators$ImmutableListOfGenerator'
p9588
sg15
(lp9589
sg17
(lp9590
sg19
(lp9591
sg21
I0
sba(iArchitecture
Entity
p9592
(dp9593
g11
(lp9594
sg13
S'com.google.common.collect.testing.google.ListGenerators$ImmutableListTailSubListGenerator'
p9595
sg15
(lp9596
sg17
(lp9597
sg19
(lp9598
sg21
I0
sba(iArchitecture
Entity
p9599
(dp9600
g11
(lp9601
sg13
S'com.google.common.collect.testing.google.ListGenerators$TestUnhashableListGenerator'
p9602
sg15
(lp9603
sg17
(lp9604
sg19
(lp9605
sg21
I0
sba(iArchitecture
Entity
p9606
(dp9607
g11
(lp9608
sg13
S'com.google.common.collect.testing.google.ListGenerators$UnhashableElementsImmutableListGenerator'
p9609
sg15
(lp9610
sg17
(lp9611
sg19
(lp9612
sg21
I0
sba(iArchitecture
Entity
p9613
(dp9614
g11
(lp9615
sg13
S'com.google.common.collect.testing.google.ListMultimapAsMapTester'
p9616
sg15
(lp9617
sg17
(lp9618
sg19
(lp9619
sg21
I0
sba(iArchitecture
Entity
p9620
(dp9621
g11
(lp9622
sg13
S'com.google.common.collect.testing.google.ListMultimapEqualsTester'
p9623
sg15
(lp9624
sg17
(lp9625
sg19
(lp9626
sg21
I0
sba(iArchitecture
Entity
p9627
(dp9628
g11
(lp9629
sg13
S'com.google.common.collect.testing.google.ListMultimapPutAllTester'
p9630
sg15
(lp9631
sg17
(lp9632
sg19
(lp9633
sg21
I0
sba(iArchitecture
Entity
p9634
(dp9635
g11
(lp9636
sg13
S'com.google.common.collect.testing.google.ListMultimapPutTester'
p9637
sg15
(lp9638
sg17
(lp9639
sg19
(lp9640
sg21
I0
sba(iArchitecture
Entity
p9641
(dp9642
g11
(lp9643
sg13
S'com.google.common.collect.testing.google.ListMultimapRemoveTester'
p9644
sg15
(lp9645
sg17
(lp9646
sg19
(lp9647
sg21
I0
sba(iArchitecture
Entity
p9648
(dp9649
g11
(lp9650
sg13
S'com.google.common.collect.testing.google.ListMultimapReplaceValuesTester'
p9651
sg15
(lp9652
sg17
(lp9653
sg19
(lp9654
sg21
I0
sba(iArchitecture
Entity
p9655
(dp9656
g11
(lp9657
sg13
S'com.google.common.collect.testing.google.ListMultimapTestSuiteBuilder'
p9658
sg15
(lp9659
sg17
(lp9660
sg19
(lp9661
sg21
I0
sba(iArchitecture
Entity
p9662
(dp9663
g11
(lp9664
sg13
S'com.google.common.collect.testing.google.ListMultimapTestSuiteBuilder$MultimapAsMapGetGenerator'
p9665
sg15
(lp9666
sg17
(lp9667
sg19
(lp9668
sg21
I0
sba(iArchitecture
Entity
p9669
(dp9670
g11
(lp9671
sg13
S'com.google.common.collect.testing.google.ListMultimapTestSuiteBuilder$MultimapGetGenerator'
p9672
sg15
(lp9673
sg17
(lp9674
sg19
(lp9675
sg21
I0
sba(iArchitecture
Entity
p9676
(dp9677
g11
(lp9678
sg13
S'com.google.common.collect.testing.google.MapGenerators'
p9679
sg15
(lp9680
sg17
(lp9681
sg19
(lp9682
sg21
I0
sba(iArchitecture
Entity
p9683
(dp9684
g11
(lp9685
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableEnumMapGenerator'
p9686
sg15
(lp9687
sg17
(lp9688
sg19
(lp9689
sg21
I0
sba(iArchitecture
Entity
p9690
(dp9691
g11
(lp9692
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfEnumMapGenerator'
p9693
sg15
(lp9694
sg17
(lp9695
sg19
(lp9696
sg21
I0
sba(iArchitecture
Entity
p9697
(dp9698
g11
(lp9699
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfEnumMapGenerator$1'
p9700
sg15
(lp9701
sg17
(lp9702
sg19
(lp9703
sg21
I0
sba(iArchitecture
Entity
p9704
(dp9705
g11
(lp9706
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfGenerator'
p9707
sg15
(lp9708
sg17
(lp9709
sg19
(lp9710
sg21
I0
sba(iArchitecture
Entity
p9711
(dp9712
g11
(lp9713
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapEntryListGenerator'
p9714
sg15
(lp9715
sg17
(lp9716
sg19
(lp9717
sg21
I0
sba(iArchitecture
Entity
p9718
(dp9719
g11
(lp9720
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapGenerator'
p9721
sg15
(lp9722
sg17
(lp9723
sg19
(lp9724
sg21
I0
sba(iArchitecture
Entity
p9725
(dp9726
g11
(lp9727
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapKeyListGenerator'
p9728
sg15
(lp9729
sg17
(lp9730
sg19
(lp9731
sg21
I0
sba(iArchitecture
Entity
p9732
(dp9733
g11
(lp9734
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapUnhashableValuesGenerator'
p9735
sg15
(lp9736
sg17
(lp9737
sg19
(lp9738
sg21
I0
sba(iArchitecture
Entity
p9739
(dp9740
g11
(lp9741
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapValueListGenerator'
p9742
sg15
(lp9743
sg17
(lp9744
sg19
(lp9745
sg21
I0
sba(iArchitecture
Entity
p9746
(dp9747
g11
(lp9748
sg13
S'com.google.common.collect.testing.google.MultimapAsMapGetTester'
p9749
sg15
(lp9750
sg17
(lp9751
sg19
(lp9752
sg21
I0
sba(iArchitecture
Entity
p9753
(dp9754
g11
(lp9755
sg13
S'com.google.common.collect.testing.google.MultimapAsMapTester'
p9756
sg15
(lp9757
sg17
(lp9758
sg19
(lp9759
sg21
I0
sba(iArchitecture
Entity
p9760
(dp9761
g11
(lp9762
sg13
S'com.google.common.collect.testing.google.MultimapClearTester'
p9763
sg15
(lp9764
sg17
(lp9765
sg19
(lp9766
sg21
I0
sba(iArchitecture
Entity
p9767
(dp9768
g11
(lp9769
sg13
S'com.google.common.collect.testing.google.MultimapContainsEntryTester'
p9770
sg15
(lp9771
sg17
(lp9772
sg19
(lp9773
sg21
I0
sba(iArchitecture
Entity
p9774
(dp9775
g11
(lp9776
sg13
S'com.google.common.collect.testing.google.MultimapContainsKeyTester'
p9777
sg15
(lp9778
sg17
(lp9779
sg19
(lp9780
sg21
I0
sba(iArchitecture
Entity
p9781
(dp9782
g11
(lp9783
sg13
S'com.google.common.collect.testing.google.MultimapContainsValueTester'
p9784
sg15
(lp9785
sg17
(lp9786
sg19
(lp9787
sg21
I0
sba(iArchitecture
Entity
p9788
(dp9789
g11
(lp9790
sg13
S'com.google.common.collect.testing.google.MultimapEntriesTester'
p9791
sg15
(lp9792
sg17
(lp9793
sg19
(lp9794
sg21
I0
sba(iArchitecture
Entity
p9795
(dp9796
g11
(lp9797
sg13
S'com.google.common.collect.testing.google.MultimapEqualsTester'
p9798
sg15
(lp9799
sg17
(lp9800
sg19
(lp9801
sg21
I0
sba(iArchitecture
Entity
p9802
(dp9803
g11
(lp9804
sg13
S'com.google.common.collect.testing.google.MultimapFeature'
p9805
sg15
(lp9806
sg17
(lp9807
sg19
(lp9808
sg21
I0
sba(iArchitecture
Entity
p9809
(dp9810
g11
(lp9811
sg13
S'com.google.common.collect.testing.google.MultimapFeature$Require'
p9812
sg15
(lp9813
sg17
(lp9814
sg19
(lp9815
sg21
I0
sba(iArchitecture
Entity
p9816
(dp9817
g11
(lp9818
sg13
S'com.google.common.collect.testing.google.MultimapGetTester'
p9819
sg15
(lp9820
sg17
(lp9821
sg19
(lp9822
sg21
I0
sba(iArchitecture
Entity
p9823
(dp9824
g11
(lp9825
sg13
S'com.google.common.collect.testing.google.MultimapKeySetTester'
p9826
sg15
(lp9827
sg17
(lp9828
sg19
(lp9829
sg21
I0
sba(iArchitecture
Entity
p9830
(dp9831
g11
(lp9832
sg13
S'com.google.common.collect.testing.google.MultimapKeysTester'
p9833
sg15
(lp9834
sg17
(lp9835
sg19
(lp9836
sg21
I0
sba(iArchitecture
Entity
p9837
(dp9838
g11
(lp9839
sg13
S'com.google.common.collect.testing.google.MultimapPutAllMultimapTester'
p9840
sg15
(lp9841
sg17
(lp9842
sg19
(lp9843
sg21
I0
sba(iArchitecture
Entity
p9844
(dp9845
g11
(lp9846
sg13
S'com.google.common.collect.testing.google.MultimapPutIterableTester'
p9847
sg15
(lp9848
sg17
(lp9849
sg19
(lp9850
sg21
I0
sba(iArchitecture
Entity
p9851
(dp9852
g11
(lp9853
sg13
S'com.google.common.collect.testing.google.MultimapPutIterableTester$1'
p9854
sg15
(lp9855
sg17
(lp9856
sg19
(lp9857
sg21
I0
sba(iArchitecture
Entity
p9858
(dp9859
g11
(lp9860
sg13
S'com.google.common.collect.testing.google.MultimapPutIterableTester$2'
p9861
sg15
(lp9862
sg17
(lp9863
sg19
(lp9864
sg21
I0
sba(iArchitecture
Entity
p9865
(dp9866
g11
(lp9867
sg13
S'com.google.common.collect.testing.google.MultimapPutIterableTester$3'
p9868
sg15
(lp9869
sg17
(lp9870
sg19
(lp9871
sg21
I0
sba(iArchitecture
Entity
p9872
(dp9873
g11
(lp9874
sg13
S'com.google.common.collect.testing.google.MultimapPutIterableTester$4'
p9875
sg15
(lp9876
sg17
(lp9877
sg19
(lp9878
sg21
I0
sba(iArchitecture
Entity
p9879
(dp9880
g11
(lp9881
sg13
S'com.google.common.collect.testing.google.MultimapPutTester'
p9882
sg15
(lp9883
sg17
(lp9884
sg19
(lp9885
sg21
I0
sba(iArchitecture
Entity
p9886
(dp9887
g11
(lp9888
sg13
S'com.google.common.collect.testing.google.MultimapRemoveAllTester'
p9889
sg15
(lp9890
sg17
(lp9891
sg19
(lp9892
sg21
I0
sba(iArchitecture
Entity
p9893
(dp9894
g11
(lp9895
sg13
S'com.google.common.collect.testing.google.MultimapRemoveEntryTester'
p9896
sg15
(lp9897
sg17
(lp9898
sg19
(lp9899
sg21
I0
sba(iArchitecture
Entity
p9900
(dp9901
g11
(lp9902
sg13
S'com.google.common.collect.testing.google.MultimapReplaceValuesTester'
p9903
sg15
(lp9904
sg17
(lp9905
sg19
(lp9906
sg21
I0
sba(iArchitecture
Entity
p9907
(dp9908
g11
(lp9909
sg13
S'com.google.common.collect.testing.google.MultimapSizeTester'
p9910
sg15
(lp9911
sg17
(lp9912
sg19
(lp9913
sg21
I0
sba(iArchitecture
Entity
p9914
(dp9915
g11
(lp9916
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder'
p9917
sg15
(lp9918
sg17
(lp9919
sg19
(lp9920
sg21
I0
sba(iArchitecture
Entity
p9921
(dp9922
g11
(lp9923
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$AsMapGenerator'
p9924
sg15
(lp9925
sg17
(lp9926
sg19
(lp9927
sg21
I0
sba(iArchitecture
Entity
p9928
(dp9929
g11
(lp9930
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$EntriesGenerator'
p9931
sg15
(lp9932
sg17
(lp9933
sg19
(lp9934
sg21
I0
sba(iArchitecture
Entity
p9935
(dp9936
g11
(lp9937
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator'
p9938
sg15
(lp9939
sg17
(lp9940
sg19
(lp9941
sg21
I0
sba(iArchitecture
Entity
p9942
(dp9943
g11
(lp9944
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$MultimapAsMapGetGenerator'
p9945
sg15
(lp9946
sg17
(lp9947
sg19
(lp9948
sg21
I0
sba(iArchitecture
Entity
p9949
(dp9950
g11
(lp9951
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$MultimapGetGenerator'
p9952
sg15
(lp9953
sg17
(lp9954
sg19
(lp9955
sg21
I0
sba(iArchitecture
Entity
p9956
(dp9957
g11
(lp9958
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$ReserializedMultimapGenerator'
p9959
sg15
(lp9960
sg17
(lp9961
sg19
(lp9962
sg21
I0
sba(iArchitecture
Entity
p9963
(dp9964
g11
(lp9965
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$ValuesGenerator'
p9966
sg15
(lp9967
sg17
(lp9968
sg19
(lp9969
sg21
I0
sba(iArchitecture
Entity
p9970
(dp9971
g11
(lp9972
sg13
S'com.google.common.collect.testing.google.MultimapToStringTester'
p9973
sg15
(lp9974
sg17
(lp9975
sg19
(lp9976
sg21
I0
sba(iArchitecture
Entity
p9977
(dp9978
g11
(lp9979
sg13
S'com.google.common.collect.testing.google.MultimapValuesTester'
p9980
sg15
(lp9981
sg17
(lp9982
sg19
(lp9983
sg21
I0
sba(iArchitecture
Entity
p9984
(dp9985
g11
(lp9986
sg13
S'com.google.common.collect.testing.google.MultisetAddTester'
p9987
sg15
(lp9988
sg17
(lp9989
sg19
(lp9990
sg21
I0
sba(iArchitecture
Entity
p9991
(dp9992
g11
(lp9993
sg13
S'com.google.common.collect.testing.google.MultisetContainsTester'
p9994
sg15
(lp9995
sg17
(lp9996
sg19
(lp9997
sg21
I0
sba(iArchitecture
Entity
p9998
(dp9999
g11
(lp10000
sg13
S'com.google.common.collect.testing.google.MultisetCountTester'
p10001
sg15
(lp10002
sg17
(lp10003
sg19
(lp10004
sg21
I0
sba(iArchitecture
Entity
p10005
(dp10006
g11
(lp10007
sg13
S'com.google.common.collect.testing.google.MultisetElementSetTester'
p10008
sg15
(lp10009
sg17
(lp10010
sg19
(lp10011
sg21
I0
sba(iArchitecture
Entity
p10012
(dp10013
g11
(lp10014
sg13
S'com.google.common.collect.testing.google.MultisetEntrySetTester'
p10015
sg15
(lp10016
sg17
(lp10017
sg19
(lp10018
sg21
I0
sba(iArchitecture
Entity
p10019
(dp10020
g11
(lp10021
sg13
S'com.google.common.collect.testing.google.MultisetEqualsTester'
p10022
sg15
(lp10023
sg17
(lp10024
sg19
(lp10025
sg21
I0
sba(iArchitecture
Entity
p10026
(dp10027
g11
(lp10028
sg13
S'com.google.common.collect.testing.google.MultisetFeature'
p10029
sg15
(lp10030
sg17
(lp10031
sg19
(lp10032
sg21
I0
sba(iArchitecture
Entity
p10033
(dp10034
g11
(lp10035
sg13
S'com.google.common.collect.testing.google.MultisetFeature$Require'
p10036
sg15
(lp10037
sg17
(lp10038
sg19
(lp10039
sg21
I0
sba(iArchitecture
Entity
p10040
(dp10041
g11
(lp10042
sg13
S'com.google.common.collect.testing.google.MultisetIteratorTester'
p10043
sg15
(lp10044
sg17
(lp10045
sg19
(lp10046
sg21
I0
sba(iArchitecture
Entity
p10047
(dp10048
g11
(lp10049
sg13
S'com.google.common.collect.testing.google.MultisetIteratorTester$1'
p10050
sg15
(lp10051
sg17
(lp10052
sg19
(lp10053
sg21
I0
sba(iArchitecture
Entity
p10054
(dp10055
g11
(lp10056
sg13
S'com.google.common.collect.testing.google.MultisetIteratorTester$2'
p10057
sg15
(lp10058
sg17
(lp10059
sg19
(lp10060
sg21
I0
sba(iArchitecture
Entity
p10061
(dp10062
g11
(lp10063
sg13
S'com.google.common.collect.testing.google.MultisetIteratorTester$3'
p10064
sg15
(lp10065
sg17
(lp10066
sg19
(lp10067
sg21
I0
sba(iArchitecture
Entity
p10068
(dp10069
g11
(lp10070
sg13
S'com.google.common.collect.testing.google.MultisetIteratorTester$4'
p10071
sg15
(lp10072
sg17
(lp10073
sg19
(lp10074
sg21
I0
sba(iArchitecture
Entity
p10075
(dp10076
g11
(lp10077
g102
asg13
S'com.google.common.collect.testing.google.MultisetNavigationTester'
p10078
sg15
(lp10079
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p10080
asg17
(lp10081
g107
asg19
(lp10082
g109
asg21
I0
sba(iArchitecture
Entity
p10083
(dp10084
g11
(lp10085
g102
asg13
S'com.google.common.collect.testing.google.MultisetNavigationTester$1'
p10086
sg15
(lp10087
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p10088
asg17
(lp10089
g107
asg19
(lp10090
g109
asg21
I0
sba(iArchitecture
Entity
p10091
(dp10092
g11
(lp10093
g102
asg13
S'com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec'
p10094
sg15
(lp10095
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p10096
asg17
(lp10097
g107
asg19
(lp10098
g109
asg21
I0
sba(iArchitecture
Entity
p10099
(dp10100
g11
(lp10101
g102
asg13
S'com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$1'
p10102
sg15
(lp10103
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p10104
asg17
(lp10105
g107
asg19
(lp10106
g109
asg21
I0
sba(iArchitecture
Entity
p10107
(dp10108
g11
(lp10109
g102
asg13
S'com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$2'
p10110
sg15
(lp10111
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p10112
asg17
(lp10113
g107
asg19
(lp10114
g109
asg21
I0
sba(iArchitecture
Entity
p10115
(dp10116
g11
(lp10117
g102
asg13
S'com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$3'
p10118
sg15
(lp10119
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p10120
asg17
(lp10121
g107
asg19
(lp10122
g109
asg21
I0
sba(iArchitecture
Entity
p10123
(dp10124
g11
(lp10125
g102
asg13
S'com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$4'
p10126
sg15
(lp10127
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p10128
asg17
(lp10129
g107
asg19
(lp10130
g109
asg21
I0
sba(iArchitecture
Entity
p10131
(dp10132
g11
(lp10133
sg13
S'com.google.common.collect.testing.google.MultisetReadsTester'
p10134
sg15
(lp10135
sg17
(lp10136
sg19
(lp10137
sg21
I0
sba(iArchitecture
Entity
p10138
(dp10139
g11
(lp10140
sg13
S'com.google.common.collect.testing.google.MultisetRemoveTester'
p10141
sg15
(lp10142
sg17
(lp10143
sg19
(lp10144
sg21
I0
sba(iArchitecture
Entity
p10145
(dp10146
g11
(lp10147
sg13
S'com.google.common.collect.testing.google.MultisetSerializationTester'
p10148
sg15
(lp10149
sg17
(lp10150
sg19
(lp10151
sg21
I0
sba(iArchitecture
Entity
p10152
(dp10153
g11
(lp10154
sg13
S'com.google.common.collect.testing.google.MultisetSetCountConditionallyTester'
p10155
sg15
(lp10156
sg17
(lp10157
sg19
(lp10158
sg21
I0
sba(iArchitecture
Entity
p10159
(dp10160
g11
(lp10161
sg13
S'com.google.common.collect.testing.google.MultisetSetCountUnconditionallyTester'
p10162
sg15
(lp10163
sg17
(lp10164
sg19
(lp10165
sg21
I0
sba(iArchitecture
Entity
p10166
(dp10167
g11
(lp10168
sg13
S'com.google.common.collect.testing.google.MultisetTestSuiteBuilder'
p10169
sg15
(lp10170
sg17
(lp10171
sg19
(lp10172
sg21
I0
sba(iArchitecture
Entity
p10173
(dp10174
g11
(lp10175
sg13
S'com.google.common.collect.testing.google.MultisetTestSuiteBuilder$1'
p10176
sg15
(lp10177
sg17
(lp10178
sg19
(lp10179
sg21
I0
sba(iArchitecture
Entity
p10180
(dp10181
g11
(lp10182
sg13
S'com.google.common.collect.testing.google.MultisetTestSuiteBuilder$ElementSetGenerator'
p10183
sg15
(lp10184
sg17
(lp10185
sg19
(lp10186
sg21
I0
sba(iArchitecture
Entity
p10187
(dp10188
g11
(lp10189
sg13
S'com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator'
p10190
sg15
(lp10191
sg17
(lp10192
sg19
(lp10193
sg21
I0
sba(iArchitecture
Entity
p10194
(dp10195
g11
(lp10196
sg13
S'com.google.common.collect.testing.google.MultisetTestSuiteBuilder$NoRecurse'
p10197
sg15
(lp10198
sg17
(lp10199
sg19
(lp10200
sg21
I0
sba(iArchitecture
Entity
p10201
(dp10202
g11
(lp10203
sg13
S'com.google.common.collect.testing.google.MultisetTestSuiteBuilder$ReserializedMultisetGenerator'
p10204
sg15
(lp10205
sg17
(lp10206
sg19
(lp10207
sg21
I0
sba(iArchitecture
Entity
p10208
(dp10209
g11
(lp10210
sg13
S'com.google.common.collect.testing.google.SetGenerators'
p10211
sg15
(lp10212
sg17
(lp10213
sg19
(lp10214
sg21
I0
sba(iArchitecture
Entity
p10215
(dp10216
g11
(lp10217
sg13
S'com.google.common.collect.testing.google.SetGenerators$1'
p10218
sg15
(lp10219
sg17
(lp10220
sg19
(lp10221
sg21
I0
sba(iArchitecture
Entity
p10222
(dp10223
g11
(lp10224
sg13
S'com.google.common.collect.testing.google.SetGenerators$AbstractContiguousSetGenerator'
p10225
sg15
(lp10226
sg17
(lp10227
sg19
(lp10228
sg21
I0
sba(iArchitecture
Entity
p10229
(dp10230
g11
(lp10231
sg13
S'com.google.common.collect.testing.google.SetGenerators$ContiguousSetDescendingGenerator'
p10232
sg15
(lp10233
sg17
(lp10234
sg19
(lp10235
sg21
I0
sba(iArchitecture
Entity
p10236
(dp10237
g11
(lp10238
sg13
S'com.google.common.collect.testing.google.SetGenerators$ContiguousSetGenerator'
p10239
sg15
(lp10240
sg17
(lp10241
sg19
(lp10242
sg21
I0
sba(iArchitecture
Entity
p10243
(dp10244
g11
(lp10245
sg13
S'com.google.common.collect.testing.google.SetGenerators$ContiguousSetHeadsetGenerator'
p10246
sg15
(lp10247
sg17
(lp10248
sg19
(lp10249
sg21
I0
sba(iArchitecture
Entity
p10250
(dp10251
g11
(lp10252
sg13
S'com.google.common.collect.testing.google.SetGenerators$ContiguousSetSubsetGenerator'
p10253
sg15
(lp10254
sg17
(lp10255
sg19
(lp10256
sg21
I0
sba(iArchitecture
Entity
p10257
(dp10258
g11
(lp10259
sg13
S'com.google.common.collect.testing.google.SetGenerators$ContiguousSetTailsetGenerator'
p10260
sg15
(lp10261
sg17
(lp10262
sg19
(lp10263
sg21
I0
sba(iArchitecture
Entity
p10264
(dp10265
g11
(lp10266
sg13
S'com.google.common.collect.testing.google.SetGenerators$DegeneratedImmutableSetGenerator'
p10267
sg15
(lp10268
sg17
(lp10269
sg19
(lp10270
sg21
I0
sba(iArchitecture
Entity
p10271
(dp10272
g11
(lp10273
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSetAsListGenerator'
p10274
sg15
(lp10275
sg17
(lp10276
sg19
(lp10277
sg21
I0
sba(iArchitecture
Entity
p10278
(dp10279
g11
(lp10280
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSetCopyOfGenerator'
p10281
sg15
(lp10282
sg17
(lp10283
sg19
(lp10284
sg21
I0
sba(iArchitecture
Entity
p10285
(dp10286
g11
(lp10287
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSetWithBadHashesGenerator'
p10288
sg15
(lp10289
sg17
(lp10290
sg19
(lp10291
sg21
I0
sba(iArchitecture
Entity
p10292
(dp10293
g11
(lp10294
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetAsListGenerator'
p10295
sg15
(lp10296
sg17
(lp10297
sg19
(lp10298
sg21
I0
sba(iArchitecture
Entity
p10299
(dp10300
g11
(lp10301
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetAsListSubListGenerator'
p10302
sg15
(lp10303
sg17
(lp10304
sg19
(lp10305
sg21
I0
sba(iArchitecture
Entity
p10306
(dp10307
g11
(lp10308
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetCopyOfGenerator'
p10309
sg15
(lp10310
sg17
(lp10311
sg19
(lp10312
sg21
I0
sba(iArchitecture
Entity
p10313
(dp10314
g11
(lp10315
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetDescendingAsListGenerator'
p10316
sg15
(lp10317
sg17
(lp10318
sg19
(lp10319
sg21
I0
sba(iArchitecture
Entity
p10320
(dp10321
g11
(lp10322
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetDescendingGenerator'
p10323
sg15
(lp10324
sg17
(lp10325
sg19
(lp10326
sg21
I0
sba(iArchitecture
Entity
p10327
(dp10328
g11
(lp10329
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetExplicitComparator'
p10330
sg15
(lp10331
sg17
(lp10332
sg19
(lp10333
sg21
I0
sba(iArchitecture
Entity
p10334
(dp10335
g11
(lp10336
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetExplicitSuperclassComparatorGenerator'
p10337
sg15
(lp10338
sg17
(lp10339
sg19
(lp10340
sg21
I0
sba(iArchitecture
Entity
p10341
(dp10342
g11
(lp10343
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetHeadsetGenerator'
p10344
sg15
(lp10345
sg17
(lp10346
sg19
(lp10347
sg21
I0
sba(iArchitecture
Entity
p10348
(dp10349
g11
(lp10350
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetReversedOrderGenerator'
p10351
sg15
(lp10352
sg17
(lp10353
sg19
(lp10354
sg21
I0
sba(iArchitecture
Entity
p10355
(dp10356
g11
(lp10357
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetSubsetAsListGenerator'
p10358
sg15
(lp10359
sg17
(lp10360
sg19
(lp10361
sg21
I0
sba(iArchitecture
Entity
p10362
(dp10363
g11
(lp10364
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetSubsetAsListSubListGenerator'
p10365
sg15
(lp10366
sg17
(lp10367
sg19
(lp10368
sg21
I0
sba(iArchitecture
Entity
p10369
(dp10370
g11
(lp10371
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetSubsetGenerator'
p10372
sg15
(lp10373
sg17
(lp10374
sg19
(lp10375
sg21
I0
sba(iArchitecture
Entity
p10376
(dp10377
g11
(lp10378
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetTailsetGenerator'
p10379
sg15
(lp10380
sg17
(lp10381
sg19
(lp10382
sg21
I0
sba(iArchitecture
Entity
p10383
(dp10384
g11
(lp10385
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetUnhashableGenerator'
p10386
sg15
(lp10387
sg17
(lp10388
sg19
(lp10389
sg21
I0
sba(iArchitecture
Entity
p10390
(dp10391
g11
(lp10392
sg13
S'com.google.common.collect.testing.google.SetGenerators$TestUnhashableSetGenerator'
p10393
sg15
(lp10394
sg17
(lp10395
sg19
(lp10396
sg21
I0
sba(iArchitecture
Entity
p10397
(dp10398
g11
(lp10399
sg13
S'com.google.common.collect.testing.google.SetMultimapAsMapTester'
p10400
sg15
(lp10401
sg17
(lp10402
sg19
(lp10403
sg21
I0
sba(iArchitecture
Entity
p10404
(dp10405
g11
(lp10406
sg13
S'com.google.common.collect.testing.google.SetMultimapEqualsTester'
p10407
sg15
(lp10408
sg17
(lp10409
sg19
(lp10410
sg21
I0
sba(iArchitecture
Entity
p10411
(dp10412
g11
(lp10413
sg13
S'com.google.common.collect.testing.google.SetMultimapPutAllTester'
p10414
sg15
(lp10415
sg17
(lp10416
sg19
(lp10417
sg21
I0
sba(iArchitecture
Entity
p10418
(dp10419
g11
(lp10420
sg13
S'com.google.common.collect.testing.google.SetMultimapPutTester'
p10421
sg15
(lp10422
sg17
(lp10423
sg19
(lp10424
sg21
I0
sba(iArchitecture
Entity
p10425
(dp10426
g11
(lp10427
sg13
S'com.google.common.collect.testing.google.SetMultimapReplaceValuesTester'
p10428
sg15
(lp10429
sg17
(lp10430
sg19
(lp10431
sg21
I0
sba(iArchitecture
Entity
p10432
(dp10433
g11
(lp10434
sg13
S'com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder'
p10435
sg15
(lp10436
sg17
(lp10437
sg19
(lp10438
sg21
I0
sba(iArchitecture
Entity
p10439
(dp10440
g11
(lp10441
sg13
S'com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder$EntriesGenerator'
p10442
sg15
(lp10443
sg17
(lp10444
sg19
(lp10445
sg21
I0
sba(iArchitecture
Entity
p10446
(dp10447
g11
(lp10448
sg13
S'com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder$MultimapAsMapGetGenerator'
p10449
sg15
(lp10450
sg17
(lp10451
sg19
(lp10452
sg21
I0
sba(iArchitecture
Entity
p10453
(dp10454
g11
(lp10455
sg13
S'com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder$MultimapGetGenerator'
p10456
sg15
(lp10457
sg17
(lp10458
sg19
(lp10459
sg21
I0
sba(iArchitecture
Entity
p10460
(dp10461
g11
(lp10462
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators'
p10463
sg15
(lp10464
sg17
(lp10465
sg19
(lp10466
sg21
I0
sba(iArchitecture
Entity
p10467
(dp10468
g11
(lp10469
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapEntryListGenerator'
p10470
sg15
(lp10471
sg17
(lp10472
sg19
(lp10473
sg21
I0
sba(iArchitecture
Entity
p10474
(dp10475
g11
(lp10476
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapEntryListGenerator$1'
p10477
sg15
(lp10478
sg17
(lp10479
sg19
(lp10480
sg21
I0
sba(iArchitecture
Entity
p10481
(dp10482
g11
(lp10483
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapGenerator'
p10484
sg15
(lp10485
sg17
(lp10486
sg19
(lp10487
sg21
I0
sba(iArchitecture
Entity
p10488
(dp10489
g11
(lp10490
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapKeyListGenerator'
p10491
sg15
(lp10492
sg17
(lp10493
sg19
(lp10494
sg21
I0
sba(iArchitecture
Entity
p10495
(dp10496
g11
(lp10497
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapValueListGenerator'
p10498
sg15
(lp10499
sg17
(lp10500
sg19
(lp10501
sg21
I0
sba(iArchitecture
Entity
p10502
(dp10503
g11
(lp10504
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder'
p10505
sg15
(lp10506
sg17
(lp10507
sg19
(lp10508
sg21
I0
sba(iArchitecture
Entity
p10509
(dp10510
g11
(lp10511
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$1'
p10512
sg15
(lp10513
sg17
(lp10514
sg19
(lp10515
sg21
I0
sba(iArchitecture
Entity
p10516
(dp10517
g11
(lp10518
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$2'
p10519
sg15
(lp10520
sg17
(lp10521
sg19
(lp10522
sg21
I0
sba(iArchitecture
Entity
p10523
(dp10524
g11
(lp10525
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$3'
p10526
sg15
(lp10527
sg17
(lp10528
sg19
(lp10529
sg21
I0
sba(iArchitecture
Entity
p10530
(dp10531
g11
(lp10532
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$Bound'
p10533
sg15
(lp10534
sg17
(lp10535
sg19
(lp10536
sg21
I0
sba(iArchitecture
Entity
p10537
(dp10538
g11
(lp10539
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$ForwardingTestMultisetGenerator'
p10540
sg15
(lp10541
sg17
(lp10542
sg19
(lp10543
sg21
I0
sba(iArchitecture
Entity
p10544
(dp10545
g11
(lp10546
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$NoRecurse'
p10547
sg15
(lp10548
sg17
(lp10549
sg19
(lp10550
sg21
I0
sba(iArchitecture
Entity
p10551
(dp10552
g11
(lp10553
sg13
S'com.google.common.collect.testing.google.SortedSetMultimapAsMapTester'
p10554
sg15
(lp10555
sg17
(lp10556
sg19
(lp10557
sg21
I0
sba(iArchitecture
Entity
p10558
(dp10559
g11
(lp10560
sg13
S'com.google.common.collect.testing.google.SortedSetMultimapGetTester'
p10561
sg15
(lp10562
sg17
(lp10563
sg19
(lp10564
sg21
I0
sba(iArchitecture
Entity
p10565
(dp10566
g11
(lp10567
sg13
S'com.google.common.collect.testing.google.SortedSetMultimapTestSuiteBuilder'
p10568
sg15
(lp10569
sg17
(lp10570
sg19
(lp10571
sg21
I0
sba(iArchitecture
Entity
p10572
(dp10573
g11
(lp10574
sg13
S'com.google.common.collect.testing.google.TestBiMapGenerator'
p10575
sg15
(lp10576
sg17
(lp10577
sg19
(lp10578
sg21
I0
sba(iArchitecture
Entity
p10579
(dp10580
g11
(lp10581
sg13
S'com.google.common.collect.testing.google.TestEnumMultisetGenerator'
p10582
sg15
(lp10583
sg17
(lp10584
sg19
(lp10585
sg21
I0
sba(iArchitecture
Entity
p10586
(dp10587
g11
(lp10588
sg13
S'com.google.common.collect.testing.google.TestListMultimapGenerator'
p10589
sg15
(lp10590
sg17
(lp10591
sg19
(lp10592
sg21
I0
sba(iArchitecture
Entity
p10593
(dp10594
g11
(lp10595
sg13
S'com.google.common.collect.testing.google.TestMultimapGenerator'
p10596
sg15
(lp10597
sg17
(lp10598
sg19
(lp10599
sg21
I0
sba(iArchitecture
Entity
p10600
(dp10601
g11
(lp10602
sg13
S'com.google.common.collect.testing.google.TestMultisetGenerator'
p10603
sg15
(lp10604
sg17
(lp10605
sg19
(lp10606
sg21
I0
sba(iArchitecture
Entity
p10607
(dp10608
g11
(lp10609
sg13
S'com.google.common.collect.testing.google.TestSetMultimapGenerator'
p10610
sg15
(lp10611
sg17
(lp10612
sg19
(lp10613
sg21
I0
sba(iArchitecture
Entity
p10614
(dp10615
g11
(lp10616
sg13
S'com.google.common.collect.testing.google.TestStringBiMapGenerator'
p10617
sg15
(lp10618
sg17
(lp10619
sg19
(lp10620
sg21
I0
sba(iArchitecture
Entity
p10621
(dp10622
g11
(lp10623
sg13
S'com.google.common.collect.testing.google.TestStringListMultimapGenerator'
p10624
sg15
(lp10625
sg17
(lp10626
sg19
(lp10627
sg21
I0
sba(iArchitecture
Entity
p10628
(dp10629
g11
(lp10630
sg13
S'com.google.common.collect.testing.google.UnmodifiableCollectionTests'
p10631
sg15
(lp10632
sg17
(lp10633
sg19
(lp10634
sg21
I0
sba(iArchitecture
Entity
p10635
(dp10636
g11
(lp10637
sg13
S'com.google.common.collect.testing.google.UnmodifiableCollectionTests$1'
p10638
sg15
(lp10639
sg17
(lp10640
sg19
(lp10641
sg21
I0
sba(iArchitecture
Entity
p10642
(dp10643
g11
(lp10644
sg13
S'com.google.common.collect.testing.testers.SetCreationTester'
p10645
sg15
(lp10646
sg17
(lp10647
sg19
(lp10648
sg21
I0
sba(iArchitecture
Entity
p10649
(dp10650
g11
(lp10651
sg13
S'com.google.common.truth.CollectionSubject'
p10652
sg15
(lp10653
sg17
(lp10654
sg19
(lp10655
sg21
I0
sba(iArchitecture
Entity
p10656
(dp10657
g11
(lp10658
sg13
S'com.google.common.truth.CollectionSubject$Has'
p10659
sg15
(lp10660
sg17
(lp10661
sg19
(lp10662
sg21
I0
sba(iArchitecture
Entity
p10663
(dp10664
g11
(lp10665
sg13
S'com.google.common.truth.IntegerSubject'
p10666
sg15
(lp10667
sg17
(lp10668
sg19
(lp10669
sg21
I0
sba(iArchitecture
Entity
p10670
(dp10671
g11
(lp10672
sg13
S'com.google.common.truth.ListSubject'
p10673
sg15
(lp10674
sg17
(lp10675
sg19
(lp10676
sg21
I0
sba(iArchitecture
Entity
p10677
(dp10678
g11
(lp10679
sg13
S'com.google.common.truth.MapSubject'
p10680
sg15
(lp10681
sg17
(lp10682
sg19
(lp10683
sg21
I0
sba(iArchitecture
Entity
p10684
(dp10685
g11
(lp10686
sg13
S'com.google.common.truth.Ordered'
p10687
sg15
(lp10688
sg17
(lp10689
sg19
(lp10690
sg21
I0
sba(iArchitecture
Entity
p10691
(dp10692
g11
(lp10693
sg13
S'com.google.common.truth.Truth'
p10694
sg15
(lp10695
sg17
(lp10696
sg19
(lp10697
sg21
I0
sba(iArchitecture
Entity
p10698
(dp10699
g11
(lp10700
sg13
S'com.google.gwt.user.client.rpc.core.java.util.Map_CustomFieldSerializerBase'
p10701
sg15
(lp10702
sg17
(lp10703
sg19
(lp10704
sg21
I0
sba(iArchitecture
Entity
p10705
(dp10706
g11
(lp10707
sg13
S'junit.framework.TestSuite'
p10708
sg15
(lp10709
sg17
(lp10710
sg19
(lp10711
sg21
I0
sbasg1055
(lp10712
g9002
ag9009
ag9016
ag9024
ag9031
ag9038
ag9045
ag9052
ag9059
ag9066
ag9073
ag9080
ag9087
ag9095
ag9103
ag9111
ag9118
ag9125
ag9133
ag9140
ag9147
ag9154
ag9161
ag9168
ag9175
ag9182
ag9189
ag9196
ag9203
ag9210
ag9217
ag9224
ag9231
ag9238
ag9245
ag9252
ag9259
ag9266
ag9273
ag9280
ag9287
ag9294
ag9301
ag9308
ag9315
ag9322
ag9329
ag9336
ag9343
ag9350
ag9357
ag9364
ag9371
ag9378
ag9385
ag9392
ag9399
ag9406
ag9413
ag9420
ag9427
ag9434
ag9441
ag9448
ag9455
ag9462
ag9469
ag9476
ag9483
ag9490
ag9497
ag9504
ag9511
ag9518
ag9525
ag9532
ag9539
ag9546
ag9553
ag9560
ag9567
ag9574
ag9581
ag9588
ag9595
ag9602
ag9609
ag9616
ag9623
ag9630
ag9637
ag9644
ag9651
ag9658
ag9665
ag9672
ag9679
ag9686
ag9693
ag9700
ag9707
ag9714
ag9721
ag9728
ag9735
ag9742
ag9749
ag9756
ag9763
ag9770
ag9777
ag9784
ag9791
ag9798
ag9805
ag9812
ag9819
ag9826
ag9833
ag9840
ag9847
ag9854
ag9861
ag9868
ag9875
ag9882
ag9889
ag9896
ag9903
ag9910
ag9917
ag9924
ag9931
ag9938
ag9945
ag9952
ag9959
ag9966
ag9973
ag9980
ag9987
ag9994
ag10001
ag10008
ag10015
ag10022
ag10029
ag10036
ag10043
ag10050
ag10057
ag10064
ag10071
ag10078
ag10086
ag10094
ag10102
ag10110
ag10118
ag10126
ag10134
ag10141
ag10148
ag10155
ag10162
ag10169
ag10176
ag10183
ag10190
ag10197
ag10204
ag10211
ag10218
ag10225
ag10232
ag10239
ag10246
ag10253
ag10260
ag10267
ag10274
ag10281
ag10288
ag10295
ag10302
ag10309
ag10316
ag10323
ag10330
ag10337
ag10344
ag10351
ag10358
ag10365
ag10372
ag10379
ag10386
ag10393
ag10400
ag10407
ag10414
ag10421
ag10428
ag10435
ag10442
ag10449
ag10456
ag10463
ag10470
ag10477
ag10484
ag10491
ag10498
ag10505
ag10512
ag10519
ag10526
ag10533
ag10540
ag10547
ag10554
ag10561
ag10568
ag10575
ag10582
ag10589
ag10596
ag10603
ag10610
ag10617
ag10624
ag10631
ag10638
ag10645
ag10652
ag10659
ag10666
ag10673
ag10680
ag10687
ag10694
ag10701
ag10708
asg21
I0
sg1057
S'com.google.common.collect.testing.google.ss'
p10713
sba(iArchitecture
Cluster
p10714
(dp10715
g7
(lp10716
(iArchitecture
Entity
p10717
(dp10718
g11
(lp10719
sg13
S'com.google.common.annotations.GwtCompatible'
p10720
sg15
(lp10721
sg17
(lp10722
sg19
(lp10723
sg21
I0
sba(iArchitecture
Entity
p10724
(dp10725
g11
(lp10726
sg13
S'com.google.common.base.Absent_CustomFieldSerializer'
p10727
sg15
(lp10728
sg17
(lp10729
sg19
(lp10730
sg21
I0
sba(iArchitecture
Entity
p10731
(dp10732
g11
(lp10733
sg13
S'com.google.common.collect.ForwardingImmutableCollection'
p10734
sg15
(lp10735
sg17
(lp10736
sg19
(lp10737
sg21
I0
sba(iArchitecture
Entity
p10738
(dp10739
g11
(lp10740
sg13
S'com.google.common.collect.ForwardingImmutableList'
p10741
sg15
(lp10742
sg17
(lp10743
sg19
(lp10744
sg21
I0
sba(iArchitecture
Entity
p10745
(dp10746
g11
(lp10747
sg13
S'com.google.common.collect.ForwardingImmutableMap'
p10748
sg15
(lp10749
sg17
(lp10750
sg19
(lp10751
sg21
I0
sba(iArchitecture
Entity
p10752
(dp10753
g11
(lp10754
sg13
S'com.google.common.collect.ForwardingImmutableSet'
p10755
sg15
(lp10756
sg17
(lp10757
sg19
(lp10758
sg21
I0
sba(iArchitecture
Entity
p10759
(dp10760
g11
(lp10761
sg13
S'com.google.common.collect.ForwardingListMultimap'
p10762
sg15
(lp10763
sg17
(lp10764
sg19
(lp10765
sg21
I0
sba(iArchitecture
Entity
p10766
(dp10767
g11
(lp10768
g7250
ag7250
asg13
S'com.google.common.collect.GwtPlatform'
p10769
sg15
(lp10770
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1328) created by **gokhanoner** on 2013-03-11 at 03:23 PM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aprivate static final ImmutableSet&lt;String> ISLEM_EB_FIELDS = ImmutableSet.of("ISLBLG");\u000a\u000aFor above desc, a singletonImmutableSet is created. When I try\u000a\u000aISLEM_EB_FIELDS.toArray(new String[0])\u000a\u000aon V13.0.1, ist OK but in v14, it throw class not found exception for\u000a\u000acom.google.common.collect.GwtPlatform.java\u000a\u000aI tried it on a GWT application.\u000a
p10771
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1328) created by **gokhanoner** on 2013-03-11 at 03:23 PM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aprivate static final ImmutableSet&lt;String> ISLEM_EB_FIELDS = ImmutableSet.of("ISLBLG");\u000a\u000aFor above desc, a singletonImmutableSet is created. When I try\u000a\u000aISLEM_EB_FIELDS.toArray(new String[0])\u000a\u000aon V13.0.1, ist OK but in v14, it throw class not found exception for\u000a\u000acom.google.common.collect.GwtPlatform.java\u000a\u000aI tried it on a GWT application.\u000a
p10772
asg17
(lp10773
g7255
ag7255
asg19
(lp10774
g7257
ag7257
asg21
I0
sba(iArchitecture
Entity
p10775
(dp10776
g11
(lp10777
sg13
S'com.google.common.collect.testing.AbstractCollectionTestSuiteBuilder'
p10778
sg15
(lp10779
sg17
(lp10780
sg19
(lp10781
sg21
I0
sba(iArchitecture
Entity
p10782
(dp10783
g11
(lp10784
sg13
S'com.google.common.collect.testing.AbstractCollectionTester'
p10785
sg15
(lp10786
sg17
(lp10787
sg19
(lp10788
sg21
I0
sba(iArchitecture
Entity
p10789
(dp10790
g11
(lp10791
sg13
S'com.google.common.collect.testing.AbstractContainerTester'
p10792
sg15
(lp10793
sg17
(lp10794
sg19
(lp10795
sg21
I0
sba(iArchitecture
Entity
p10796
(dp10797
g11
(lp10798
sg13
S'com.google.common.collect.testing.AbstractContainerTester$1'
p10799
sg15
(lp10800
sg17
(lp10801
sg19
(lp10802
sg21
I0
sba(iArchitecture
Entity
p10803
(dp10804
g11
(lp10805
sg13
S'com.google.common.collect.testing.AbstractContainerTester$ArrayWithDuplicate'
p10806
sg15
(lp10807
sg17
(lp10808
sg19
(lp10809
sg21
I0
sba(iArchitecture
Entity
p10810
(dp10811
g11
(lp10812
sg13
S'com.google.common.collect.testing.AbstractIteratorTester'
p10813
sg15
(lp10814
sg17
(lp10815
sg19
(lp10816
sg21
I0
sba(iArchitecture
Entity
p10817
(dp10818
g11
(lp10819
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$1'
p10820
sg15
(lp10821
sg17
(lp10822
sg19
(lp10823
sg21
I0
sba(iArchitecture
Entity
p10824
(dp10825
g11
(lp10826
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$10'
p10827
sg15
(lp10828
sg17
(lp10829
sg19
(lp10830
sg21
I0
sba(iArchitecture
Entity
p10831
(dp10832
g11
(lp10833
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$11'
p10834
sg15
(lp10835
sg17
(lp10836
sg19
(lp10837
sg21
I0
sba(iArchitecture
Entity
p10838
(dp10839
g11
(lp10840
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$12'
p10841
sg15
(lp10842
sg17
(lp10843
sg19
(lp10844
sg21
I0
sba(iArchitecture
Entity
p10845
(dp10846
g11
(lp10847
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$13'
p10848
sg15
(lp10849
sg17
(lp10850
sg19
(lp10851
sg21
I0
sba(iArchitecture
Entity
p10852
(dp10853
g11
(lp10854
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$14'
p10855
sg15
(lp10856
sg17
(lp10857
sg19
(lp10858
sg21
I0
sba(iArchitecture
Entity
p10859
(dp10860
g11
(lp10861
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$2'
p10862
sg15
(lp10863
sg17
(lp10864
sg19
(lp10865
sg21
I0
sba(iArchitecture
Entity
p10866
(dp10867
g11
(lp10868
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$3'
p10869
sg15
(lp10870
sg17
(lp10871
sg19
(lp10872
sg21
I0
sba(iArchitecture
Entity
p10873
(dp10874
g11
(lp10875
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$4'
p10876
sg15
(lp10877
sg17
(lp10878
sg19
(lp10879
sg21
I0
sba(iArchitecture
Entity
p10880
(dp10881
g11
(lp10882
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$5'
p10883
sg15
(lp10884
sg17
(lp10885
sg19
(lp10886
sg21
I0
sba(iArchitecture
Entity
p10887
(dp10888
g11
(lp10889
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$6'
p10890
sg15
(lp10891
sg17
(lp10892
sg19
(lp10893
sg21
I0
sba(iArchitecture
Entity
p10894
(dp10895
g11
(lp10896
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$7'
p10897
sg15
(lp10898
sg17
(lp10899
sg19
(lp10900
sg21
I0
sba(iArchitecture
Entity
p10901
(dp10902
g11
(lp10903
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$8'
p10904
sg15
(lp10905
sg17
(lp10906
sg19
(lp10907
sg21
I0
sba(iArchitecture
Entity
p10908
(dp10909
g11
(lp10910
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$9'
p10911
sg15
(lp10912
sg17
(lp10913
sg19
(lp10914
sg21
I0
sba(iArchitecture
Entity
p10915
(dp10916
g11
(lp10917
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation'
p10918
sg15
(lp10919
sg17
(lp10920
sg19
(lp10921
sg21
I0
sba(iArchitecture
Entity
p10922
(dp10923
g11
(lp10924
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator'
p10925
sg15
(lp10926
sg17
(lp10927
sg19
(lp10928
sg21
I0
sba(iArchitecture
Entity
p10929
(dp10930
g11
(lp10931
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException'
p10932
sg15
(lp10933
sg17
(lp10934
sg19
(lp10935
sg21
I0
sba(iArchitecture
Entity
p10936
(dp10937
g11
(lp10938
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$Stimulus'
p10939
sg15
(lp10940
sg17
(lp10941
sg19
(lp10942
sg21
I0
sba(iArchitecture
Entity
p10943
(dp10944
g11
(lp10945
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$UnknownElementException'
p10946
sg15
(lp10947
sg17
(lp10948
sg19
(lp10949
sg21
I0
sba(iArchitecture
Entity
p10950
(dp10951
g11
(lp10952
sg13
S'com.google.common.collect.testing.AbstractMapTester'
p10953
sg15
(lp10954
sg17
(lp10955
sg19
(lp10956
sg21
I0
sba(iArchitecture
Entity
p10957
(dp10958
g11
(lp10959
sg13
S'com.google.common.collect.testing.AbstractTester'
p10960
sg15
(lp10961
sg17
(lp10962
sg19
(lp10963
sg21
I0
sba(iArchitecture
Entity
p10964
(dp10965
g11
(lp10966
sg13
S'com.google.common.collect.testing.BaseComparable'
p10967
sg15
(lp10968
sg17
(lp10969
sg19
(lp10970
sg21
I0
sba(iArchitecture
Entity
p10971
(dp10972
g11
(lp10973
sg13
S'com.google.common.collect.testing.CollectionTestSuiteBuilder'
p10974
sg15
(lp10975
sg17
(lp10976
sg19
(lp10977
sg21
I0
sba(iArchitecture
Entity
p10978
(dp10979
g11
(lp10980
sg13
S'com.google.common.collect.testing.CollectionTestSuiteBuilder$1'
p10981
sg15
(lp10982
sg17
(lp10983
sg19
(lp10984
sg21
I0
sba(iArchitecture
Entity
p10985
(dp10986
g11
(lp10987
sg13
S'com.google.common.collect.testing.CollectionTestSuiteBuilder$ReserializedCollectionGenerator'
p10988
sg15
(lp10989
sg17
(lp10990
sg19
(lp10991
sg21
I0
sba(iArchitecture
Entity
p10992
(dp10993
g11
(lp10994
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators'
p10995
sg15
(lp10996
sg17
(lp10997
sg19
(lp10998
sg21
I0
sba(iArchitecture
Entity
p10999
(dp11000
g11
(lp11001
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$Bound'
p11002
sg15
(lp11003
sg17
(lp11004
sg19
(lp11005
sg21
I0
sba(iArchitecture
Entity
p11006
(dp11007
g11
(lp11008
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$ForwardingTestMapGenerator'
p11009
sg15
(lp11010
sg17
(lp11011
sg19
(lp11012
sg21
I0
sba(iArchitecture
Entity
p11013
(dp11014
g11
(lp11015
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$MapEntrySetGenerator'
p11016
sg15
(lp11017
sg17
(lp11018
sg19
(lp11019
sg21
I0
sba(iArchitecture
Entity
p11020
(dp11021
g11
(lp11022
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$MapKeySetGenerator'
p11023
sg15
(lp11024
sg17
(lp11025
sg19
(lp11026
sg21
I0
sba(iArchitecture
Entity
p11027
(dp11028
g11
(lp11029
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$MapSortedKeySetGenerator'
p11030
sg15
(lp11031
sg17
(lp11032
sg19
(lp11033
sg21
I0
sba(iArchitecture
Entity
p11034
(dp11035
g11
(lp11036
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator'
p11037
sg15
(lp11038
sg17
(lp11039
sg19
(lp11040
sg21
I0
sba(iArchitecture
Entity
p11041
(dp11042
g11
(lp11043
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator$1'
p11044
sg15
(lp11045
sg17
(lp11046
sg19
(lp11047
sg21
I0
sba(iArchitecture
Entity
p11048
(dp11049
g11
(lp11050
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$SortedMapSubmapTestMapGenerator'
p11051
sg15
(lp11052
sg17
(lp11053
sg19
(lp11054
sg21
I0
sba(iArchitecture
Entity
p11055
(dp11056
g11
(lp11057
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$SortedSetSubsetTestSetGenerator'
p11058
sg15
(lp11059
sg17
(lp11060
sg19
(lp11061
sg21
I0
sba(iArchitecture
Entity
p11062
(dp11063
g11
(lp11064
sg13
S'com.google.common.collect.testing.DerivedComparable'
p11065
sg15
(lp11066
sg17
(lp11067
sg19
(lp11068
sg21
I0
sba(iArchitecture
Entity
p11069
(dp11070
g11
(lp11071
sg13
S'com.google.common.collect.testing.DerivedIteratorTestSuiteBuilder'
p11072
sg15
(lp11073
sg17
(lp11074
sg19
(lp11075
sg21
I0
sba(iArchitecture
Entity
p11076
(dp11077
g11
(lp11078
sg13
S'com.google.common.collect.testing.DerivedTestIteratorGenerator'
p11079
sg15
(lp11080
sg17
(lp11081
sg19
(lp11082
sg21
I0
sba(iArchitecture
Entity
p11083
(dp11084
g11
(lp11085
sg13
S'com.google.common.collect.testing.ExampleIteratorTester'
p11086
sg15
(lp11087
sg17
(lp11088
sg19
(lp11089
sg21
I0
sba(iArchitecture
Entity
p11090
(dp11091
g11
(lp11092
sg13
S'com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder'
p11093
sg15
(lp11094
sg17
(lp11095
sg19
(lp11096
sg21
I0
sba(iArchitecture
Entity
p11097
(dp11098
g11
(lp11099
sg13
S'com.google.common.collect.testing.Helpers'
p11100
sg15
(lp11101
sg17
(lp11102
sg19
(lp11103
sg21
I0
sba(iArchitecture
Entity
p11104
(dp11105
g11
(lp11106
sg13
S'com.google.common.collect.testing.Helpers$1'
p11107
sg15
(lp11108
sg17
(lp11109
sg19
(lp11110
sg21
I0
sba(iArchitecture
Entity
p11111
(dp11112
g11
(lp11113
sg13
S'com.google.common.collect.testing.Helpers$1$1'
p11114
sg15
(lp11115
sg17
(lp11116
sg19
(lp11117
sg21
I0
sba(iArchitecture
Entity
p11118
(dp11119
g11
(lp11120
sg13
S'com.google.common.collect.testing.Helpers$2'
p11121
sg15
(lp11122
sg17
(lp11123
sg19
(lp11124
sg21
I0
sba(iArchitecture
Entity
p11125
(dp11126
g11
(lp11127
sg13
S'com.google.common.collect.testing.Helpers$3'
p11128
sg15
(lp11129
sg17
(lp11130
sg19
(lp11131
sg21
I0
sba(iArchitecture
Entity
p11132
(dp11133
g11
(lp11134
sg13
S'com.google.common.collect.testing.Helpers$4'
p11135
sg15
(lp11136
sg17
(lp11137
sg19
(lp11138
sg21
I0
sba(iArchitecture
Entity
p11139
(dp11140
g11
(lp11141
sg13
S'com.google.common.collect.testing.Helpers$5'
p11142
sg15
(lp11143
sg17
(lp11144
sg19
(lp11145
sg21
I0
sba(iArchitecture
Entity
p11146
(dp11147
g11
(lp11148
sg13
S'com.google.common.collect.testing.Helpers$6'
p11149
sg15
(lp11150
sg17
(lp11151
sg19
(lp11152
sg21
I0
sba(iArchitecture
Entity
p11153
(dp11154
g11
(lp11155
sg13
S'com.google.common.collect.testing.Helpers$GwtTransient'
p11156
sg15
(lp11157
sg17
(lp11158
sg19
(lp11159
sg21
I0
sba(iArchitecture
Entity
p11160
(dp11161
g11
(lp11162
sg13
S'com.google.common.collect.testing.Helpers$NullsBefore'
p11163
sg15
(lp11164
sg17
(lp11165
sg19
(lp11166
sg21
I0
sba(iArchitecture
Entity
p11167
(dp11168
g11
(lp11169
sg13
S'com.google.common.collect.testing.Helpers$NullsBeforeB'
p11170
sg15
(lp11171
sg17
(lp11172
sg19
(lp11173
sg21
I0
sba(iArchitecture
Entity
p11174
(dp11175
g11
(lp11176
sg13
S'com.google.common.collect.testing.Helpers$NullsBeforeTwo'
p11177
sg15
(lp11178
sg17
(lp11179
sg19
(lp11180
sg21
I0
sba(iArchitecture
Entity
p11181
(dp11182
g11
(lp11183
sg13
S'com.google.common.collect.testing.IteratorTestSuiteBuilder'
p11184
sg15
(lp11185
sg17
(lp11186
sg19
(lp11187
sg21
I0
sba(iArchitecture
Entity
p11188
(dp11189
g11
(lp11190
sg13
S'com.google.common.collect.testing.ListTestSuiteBuilder'
p11191
sg15
(lp11192
sg17
(lp11193
sg19
(lp11194
sg21
I0
sba(iArchitecture
Entity
p11195
(dp11196
g11
(lp11197
sg13
S'com.google.common.collect.testing.ListTestSuiteBuilder$1'
p11198
sg15
(lp11199
sg17
(lp11200
sg19
(lp11201
sg21
I0
sba(iArchitecture
Entity
p11202
(dp11203
g11
(lp11204
sg13
S'com.google.common.collect.testing.ListTestSuiteBuilder$ReserializedListGenerator'
p11205
sg15
(lp11206
sg17
(lp11207
sg19
(lp11208
sg21
I0
sba(iArchitecture
Entity
p11209
(dp11210
g11
(lp11211
sg13
S'com.google.common.collect.testing.MapInterfaceTest'
p11212
sg15
(lp11213
sg17
(lp11214
sg19
(lp11215
sg21
I0
sba(iArchitecture
Entity
p11216
(dp11217
g11
(lp11218
sg13
S'com.google.common.collect.testing.MapInterfaceTest$1'
p11219
sg15
(lp11220
sg17
(lp11221
sg19
(lp11222
sg21
I0
sba(iArchitecture
Entity
p11223
(dp11224
g11
(lp11225
sg13
S'com.google.common.collect.testing.MapInterfaceTest$IncompatibleKeyType'
p11226
sg15
(lp11227
sg17
(lp11228
sg19
(lp11229
sg21
I0
sba(iArchitecture
Entity
p11230
(dp11231
g11
(lp11232
sg13
S'com.google.common.collect.testing.MapTestSuiteBuilder'
p11233
sg15
(lp11234
sg17
(lp11235
sg19
(lp11236
sg21
I0
sba(iArchitecture
Entity
p11237
(dp11238
g11
(lp11239
sg13
S'com.google.common.collect.testing.MapTestSuiteBuilder$ReserializedMapGenerator'
p11240
sg15
(lp11241
sg17
(lp11242
sg19
(lp11243
sg21
I0
sba(iArchitecture
Entity
p11244
(dp11245
g11
(lp11246
sg13
S'com.google.common.collect.testing.MinimalCollection'
p11247
sg15
(lp11248
sg17
(lp11249
sg19
(lp11250
sg21
I0
sba(iArchitecture
Entity
p11251
(dp11252
g11
(lp11253
sg13
S'com.google.common.collect.testing.MinimalIterable'
p11254
sg15
(lp11255
sg17
(lp11256
sg19
(lp11257
sg21
I0
sba(iArchitecture
Entity
p11258
(dp11259
g11
(lp11260
sg13
S'com.google.common.collect.testing.MinimalSet'
p11261
sg15
(lp11262
sg17
(lp11263
sg19
(lp11264
sg21
I0
sba(iArchitecture
Entity
p11265
(dp11266
g11
(lp11267
sg13
S'com.google.common.collect.testing.NavigableMapTestSuiteBuilder'
p11268
sg15
(lp11269
sg17
(lp11270
sg19
(lp11271
sg21
I0
sba(iArchitecture
Entity
p11272
(dp11273
g11
(lp11274
sg13
S'com.google.common.collect.testing.NavigableMapTestSuiteBuilder$1'
p11275
sg15
(lp11276
sg17
(lp11277
sg19
(lp11278
sg21
I0
sba(iArchitecture
Entity
p11279
(dp11280
g11
(lp11281
sg13
S'com.google.common.collect.testing.NavigableMapTestSuiteBuilder$ForwardingTestMapGenerator'
p11282
sg15
(lp11283
sg17
(lp11284
sg19
(lp11285
sg21
I0
sba(iArchitecture
Entity
p11286
(dp11287
g11
(lp11288
sg13
S'com.google.common.collect.testing.NavigableMapTestSuiteBuilder$NavigableMapSubmapTestMapGenerator'
p11289
sg15
(lp11290
sg17
(lp11291
sg19
(lp11292
sg21
I0
sba(iArchitecture
Entity
p11293
(dp11294
g11
(lp11295
sg13
S'com.google.common.collect.testing.NavigableSetTestSuiteBuilder'
p11296
sg15
(lp11297
sg17
(lp11298
sg19
(lp11299
sg21
I0
sba(iArchitecture
Entity
p11300
(dp11301
g11
(lp11302
sg13
S'com.google.common.collect.testing.NavigableSetTestSuiteBuilder$1'
p11303
sg15
(lp11304
sg17
(lp11305
sg19
(lp11306
sg21
I0
sba(iArchitecture
Entity
p11307
(dp11308
g11
(lp11309
sg13
S'com.google.common.collect.testing.NavigableSetTestSuiteBuilder$NavigableSetSubsetTestSetGenerator'
p11310
sg15
(lp11311
sg17
(lp11312
sg19
(lp11313
sg21
I0
sba(iArchitecture
Entity
p11314
(dp11315
g11
(lp11316
sg13
S'com.google.common.collect.testing.OneSizeGenerator'
p11317
sg15
(lp11318
sg17
(lp11319
sg19
(lp11320
sg21
I0
sba(iArchitecture
Entity
p11321
(dp11322
g11
(lp11323
sg13
S'com.google.common.collect.testing.OneSizeTestContainerGenerator'
p11324
sg15
(lp11325
sg17
(lp11326
sg19
(lp11327
sg21
I0
sba(iArchitecture
Entity
p11328
(dp11329
g11
(lp11330
sg13
S'com.google.common.collect.testing.PerCollectionSizeTestSuiteBuilder'
p11331
sg15
(lp11332
sg17
(lp11333
sg19
(lp11334
sg21
I0
sba(iArchitecture
Entity
p11335
(dp11336
g11
(lp11337
sg13
S'com.google.common.collect.testing.PerCollectionSizeTestSuiteBuilder$OneSizeTestSuiteBuilder'
p11338
sg15
(lp11339
sg17
(lp11340
sg19
(lp11341
sg21
I0
sba(iArchitecture
Entity
p11342
(dp11343
g11
(lp11344
g7250
ag940
asg13
S'com.google.common.collect.testing.Platform'
p11345
sg15
(lp11346
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1328) created by **gokhanoner** on 2013-03-11 at 03:23 PM_\u000a\u000a---\u000a\u000aHi,\u000a\u000aprivate static final ImmutableSet&lt;String> ISLEM_EB_FIELDS = ImmutableSet.of("ISLBLG");\u000a\u000aFor above desc, a singletonImmutableSet is created. When I try\u000a\u000aISLEM_EB_FIELDS.toArray(new String[0])\u000a\u000aon V13.0.1, ist OK but in v14, it throw class not found exception for\u000a\u000acom.google.common.collect.GwtPlatform.java\u000a\u000aI tried it on a GWT application.\u000a
p11347
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p11348
asg17
(lp11349
g7255
ag952
asg19
(lp11350
g7257
ag956
asg21
I0
sba(iArchitecture
Entity
p11351
(dp11352
g11
(lp11353
sg13
S'com.google.common.collect.testing.QueueTestSuiteBuilder'
p11354
sg15
(lp11355
sg17
(lp11356
sg19
(lp11357
sg21
I0
sba(iArchitecture
Entity
p11358
(dp11359
g11
(lp11360
sg13
S'com.google.common.collect.testing.ReserializingTestCollectionGenerator'
p11361
sg15
(lp11362
sg17
(lp11363
sg19
(lp11364
sg21
I0
sba(iArchitecture
Entity
p11365
(dp11366
g11
(lp11367
sg13
S'com.google.common.collect.testing.ReserializingTestSetGenerator'
p11368
sg15
(lp11369
sg17
(lp11370
sg19
(lp11371
sg21
I0
sba(iArchitecture
Entity
p11372
(dp11373
g11
(lp11374
sg13
S'com.google.common.collect.testing.SafeTreeMap'
p11375
sg15
(lp11376
sg17
(lp11377
sg19
(lp11378
sg21
I0
sba(iArchitecture
Entity
p11379
(dp11380
g11
(lp11381
sg13
S'com.google.common.collect.testing.SafeTreeMap$1'
p11382
sg15
(lp11383
sg17
(lp11384
sg19
(lp11385
sg21
I0
sba(iArchitecture
Entity
p11386
(dp11387
g11
(lp11388
sg13
S'com.google.common.collect.testing.SafeTreeMap$2'
p11389
sg15
(lp11390
sg17
(lp11391
sg19
(lp11392
sg21
I0
sba(iArchitecture
Entity
p11393
(dp11394
g11
(lp11395
sg13
S'com.google.common.collect.testing.SafeTreeSet'
p11396
sg15
(lp11397
sg17
(lp11398
sg19
(lp11399
sg21
I0
sba(iArchitecture
Entity
p11400
(dp11401
g11
(lp11402
sg13
S'com.google.common.collect.testing.SafeTreeSet$1'
p11403
sg15
(lp11404
sg17
(lp11405
sg19
(lp11406
sg21
I0
sba(iArchitecture
Entity
p11407
(dp11408
g11
(lp11409
sg13
S'com.google.common.collect.testing.SetTestSuiteBuilder'
p11410
sg15
(lp11411
sg17
(lp11412
sg19
(lp11413
sg21
I0
sba(iArchitecture
Entity
p11414
(dp11415
g11
(lp11416
sg13
S'com.google.common.collect.testing.SetTestSuiteBuilder$1'
p11417
sg15
(lp11418
sg17
(lp11419
sg19
(lp11420
sg21
I0
sba(iArchitecture
Entity
p11421
(dp11422
g11
(lp11423
sg13
S'com.google.common.collect.testing.SetTestSuiteBuilder$ReserializedSetGenerator'
p11424
sg15
(lp11425
sg17
(lp11426
sg19
(lp11427
sg21
I0
sba(iArchitecture
Entity
p11428
(dp11429
g11
(lp11430
sg13
S'com.google.common.collect.testing.SortedMapInterfaceTest'
p11431
sg15
(lp11432
sg17
(lp11433
sg19
(lp11434
sg21
I0
sba(iArchitecture
Entity
p11435
(dp11436
g11
(lp11437
sg13
S'com.google.common.collect.testing.SortedMapTestSuiteBuilder'
p11438
sg15
(lp11439
sg17
(lp11440
sg19
(lp11441
sg21
I0
sba(iArchitecture
Entity
p11442
(dp11443
g11
(lp11444
sg13
S'com.google.common.collect.testing.SortedMapTestSuiteBuilder$NoRecurse'
p11445
sg15
(lp11446
sg17
(lp11447
sg19
(lp11448
sg21
I0
sba(iArchitecture
Entity
p11449
(dp11450
g11
(lp11451
sg13
S'com.google.common.collect.testing.SortedSetTestSuiteBuilder'
p11452
sg15
(lp11453
sg17
(lp11454
sg19
(lp11455
sg21
I0
sba(iArchitecture
Entity
p11456
(dp11457
g11
(lp11458
sg13
S'com.google.common.collect.testing.TestEnumSetGenerator'
p11459
sg15
(lp11460
sg17
(lp11461
sg19
(lp11462
sg21
I0
sba(iArchitecture
Entity
p11463
(dp11464
g11
(lp11465
sg13
S'com.google.common.collect.testing.TestIntegerSetGenerator'
p11466
sg15
(lp11467
sg17
(lp11468
sg19
(lp11469
sg21
I0
sba(iArchitecture
Entity
p11470
(dp11471
g11
(lp11472
sg13
S'com.google.common.collect.testing.TestIntegerSortedSetGenerator'
p11473
sg15
(lp11474
sg17
(lp11475
sg19
(lp11476
sg21
I0
sba(iArchitecture
Entity
p11477
(dp11478
g11
(lp11479
sg13
S'com.google.common.collect.testing.TestIteratorGenerator'
p11480
sg15
(lp11481
sg17
(lp11482
sg19
(lp11483
sg21
I0
sba(iArchitecture
Entity
p11484
(dp11485
g11
(lp11486
sg13
S'com.google.common.collect.testing.TestMapEntrySetGenerator'
p11487
sg15
(lp11488
sg17
(lp11489
sg19
(lp11490
sg21
I0
sba(iArchitecture
Entity
p11491
(dp11492
g11
(lp11493
sg13
S'com.google.common.collect.testing.TestMapGenerator'
p11494
sg15
(lp11495
sg17
(lp11496
sg19
(lp11497
sg21
I0
sba(iArchitecture
Entity
p11498
(dp11499
g11
(lp11500
sg13
S'com.google.common.collect.testing.TestQueueGenerator'
p11501
sg15
(lp11502
sg17
(lp11503
sg19
(lp11504
sg21
I0
sba(iArchitecture
Entity
p11505
(dp11506
g11
(lp11507
sg13
S'com.google.common.collect.testing.TestSetGenerator'
p11508
sg15
(lp11509
sg17
(lp11510
sg19
(lp11511
sg21
I0
sba(iArchitecture
Entity
p11512
(dp11513
g11
(lp11514
sg13
S'com.google.common.collect.testing.TestSortedMapGenerator'
p11515
sg15
(lp11516
sg17
(lp11517
sg19
(lp11518
sg21
I0
sba(iArchitecture
Entity
p11519
(dp11520
g11
(lp11521
sg13
S'com.google.common.collect.testing.TestSortedSetGenerator'
p11522
sg15
(lp11523
sg17
(lp11524
sg19
(lp11525
sg21
I0
sba(iArchitecture
Entity
p11526
(dp11527
g11
(lp11528
sg13
S'com.google.common.collect.testing.TestStringListGenerator'
p11529
sg15
(lp11530
sg17
(lp11531
sg19
(lp11532
sg21
I0
sba(iArchitecture
Entity
p11533
(dp11534
g11
(lp11535
sg13
S'com.google.common.collect.testing.TestStringMapGenerator'
p11536
sg15
(lp11537
sg17
(lp11538
sg19
(lp11539
sg21
I0
sba(iArchitecture
Entity
p11540
(dp11541
g11
(lp11542
sg13
S'com.google.common.collect.testing.TestStringQueueGenerator'
p11543
sg15
(lp11544
sg17
(lp11545
sg19
(lp11546
sg21
I0
sba(iArchitecture
Entity
p11547
(dp11548
g11
(lp11549
sg13
S'com.google.common.collect.testing.TestStringSetGenerator'
p11550
sg15
(lp11551
sg17
(lp11552
sg19
(lp11553
sg21
I0
sba(iArchitecture
Entity
p11554
(dp11555
g11
(lp11556
sg13
S'com.google.common.collect.testing.TestStringSortedMapGenerator'
p11557
sg15
(lp11558
sg17
(lp11559
sg19
(lp11560
sg21
I0
sba(iArchitecture
Entity
p11561
(dp11562
g11
(lp11563
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil'
p11564
sg15
(lp11565
sg17
(lp11566
sg19
(lp11567
sg21
I0
sba(iArchitecture
Entity
p11568
(dp11569
g11
(lp11570
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$1'
p11571
sg15
(lp11572
sg17
(lp11573
sg19
(lp11574
sg21
I0
sba(iArchitecture
Entity
p11575
(dp11576
g11
(lp11577
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$10'
p11578
sg15
(lp11579
sg17
(lp11580
sg19
(lp11581
sg21
I0
sba(iArchitecture
Entity
p11582
(dp11583
g11
(lp11584
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$10$1'
p11585
sg15
(lp11586
sg17
(lp11587
sg19
(lp11588
sg21
I0
sba(iArchitecture
Entity
p11589
(dp11590
g11
(lp11591
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$2'
p11592
sg15
(lp11593
sg17
(lp11594
sg19
(lp11595
sg21
I0
sba(iArchitecture
Entity
p11596
(dp11597
g11
(lp11598
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$3'
p11599
sg15
(lp11600
sg17
(lp11601
sg19
(lp11602
sg21
I0
sba(iArchitecture
Entity
p11603
(dp11604
g11
(lp11605
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$4'
p11606
sg15
(lp11607
sg17
(lp11608
sg19
(lp11609
sg21
I0
sba(iArchitecture
Entity
p11610
(dp11611
g11
(lp11612
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$5'
p11613
sg15
(lp11614
sg17
(lp11615
sg19
(lp11616
sg21
I0
sba(iArchitecture
Entity
p11617
(dp11618
g11
(lp11619
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$6'
p11620
sg15
(lp11621
sg17
(lp11622
sg19
(lp11623
sg21
I0
sba(iArchitecture
Entity
p11624
(dp11625
g11
(lp11626
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$7'
p11627
sg15
(lp11628
sg17
(lp11629
sg19
(lp11630
sg21
I0
sba(iArchitecture
Entity
p11631
(dp11632
g11
(lp11633
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$8'
p11634
sg15
(lp11635
sg17
(lp11636
sg19
(lp11637
sg21
I0
sba(iArchitecture
Entity
p11638
(dp11639
g11
(lp11640
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$9'
p11641
sg15
(lp11642
sg17
(lp11643
sg19
(lp11644
sg21
I0
sba(iArchitecture
Entity
p11645
(dp11646
g11
(lp11647
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$9$1'
p11648
sg15
(lp11649
sg17
(lp11650
sg19
(lp11651
sg21
I0
sba(iArchitecture
Entity
p11652
(dp11653
g11
(lp11654
V149
p11655
asg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil'
p11656
sg15
(lp11657
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\u000a\u000a---\u000a\u000aThe test framework is thorough beyond belief for those interfaces that it\u000acovers. Are there any plans for widening coverage to some of the more\u000aspecific collection framework interfaces? ConcurrentMap is the first that\u000asprings to mind, NavigableMap, Deque, SortedSet and the like might be\u000auseful too. Obviously, providing testing for the _concurrency_ part of this\u000ais a whole different ballgame, but it would be a great start to be able to\u000atest at least the single-threaded behaviour.\u000a\u000aMore generally (perhaps this belongs in a separate issue), are there any\u000aplans to make it easier to hook into the framework to test other types? As\u000aa concrete example, I was playing with adding supplyIfAbsent(K,\u000aCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\u000a(after sorting out tests for the other four ConcurrentMap methods) it would\u000ahelp to have some changes in, for example,\u000a&nbsp;&nbsp;&nbsp;\u005c* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\u000a&nbsp;&nbsp;&nbsp;\u005c* TestStringMapGenerator#create(Entry[]) for the same reason\u000a&nbsp;&nbsp;&nbsp;\u005c* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\u000alist, since Arrays#asList is inconveniently immutable.\u000a
p11658
asg17
(lp11659
(lp11660
I5
aasg19
(lp11661
Vadd testfw support for ConcurrentMap interface methods
p11662
asg21
I0
sba(iArchitecture
Entity
p11663
(dp11664
g11
(lp11665
g11655
asg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$1'
p11666
sg15
(lp11667
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\u000a\u000a---\u000a\u000aThe test framework is thorough beyond belief for those interfaces that it\u000acovers. Are there any plans for widening coverage to some of the more\u000aspecific collection framework interfaces? ConcurrentMap is the first that\u000asprings to mind, NavigableMap, Deque, SortedSet and the like might be\u000auseful too. Obviously, providing testing for the _concurrency_ part of this\u000ais a whole different ballgame, but it would be a great start to be able to\u000atest at least the single-threaded behaviour.\u000a\u000aMore generally (perhaps this belongs in a separate issue), are there any\u000aplans to make it easier to hook into the framework to test other types? As\u000aa concrete example, I was playing with adding supplyIfAbsent(K,\u000aCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\u000a(after sorting out tests for the other four ConcurrentMap methods) it would\u000ahelp to have some changes in, for example,\u000a&nbsp;&nbsp;&nbsp;\u005c* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\u000a&nbsp;&nbsp;&nbsp;\u005c* TestStringMapGenerator#create(Entry[]) for the same reason\u000a&nbsp;&nbsp;&nbsp;\u005c* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\u000alist, since Arrays#asList is inconveniently immutable.\u000a
p11668
asg17
(lp11669
g11660
asg19
(lp11670
g11662
asg21
I0
sba(iArchitecture
Entity
p11671
(dp11672
g11
(lp11673
g11655
asg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$10'
p11674
sg15
(lp11675
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\u000a\u000a---\u000a\u000aThe test framework is thorough beyond belief for those interfaces that it\u000acovers. Are there any plans for widening coverage to some of the more\u000aspecific collection framework interfaces? ConcurrentMap is the first that\u000asprings to mind, NavigableMap, Deque, SortedSet and the like might be\u000auseful too. Obviously, providing testing for the _concurrency_ part of this\u000ais a whole different ballgame, but it would be a great start to be able to\u000atest at least the single-threaded behaviour.\u000a\u000aMore generally (perhaps this belongs in a separate issue), are there any\u000aplans to make it easier to hook into the framework to test other types? As\u000aa concrete example, I was playing with adding supplyIfAbsent(K,\u000aCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\u000a(after sorting out tests for the other four ConcurrentMap methods) it would\u000ahelp to have some changes in, for example,\u000a&nbsp;&nbsp;&nbsp;\u005c* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\u000a&nbsp;&nbsp;&nbsp;\u005c* TestStringMapGenerator#create(Entry[]) for the same reason\u000a&nbsp;&nbsp;&nbsp;\u005c* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\u000alist, since Arrays#asList is inconveniently immutable.\u000a
p11676
asg17
(lp11677
g11660
asg19
(lp11678
g11662
asg21
I0
sba(iArchitecture
Entity
p11679
(dp11680
g11
(lp11681
g11655
asg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$2'
p11682
sg15
(lp11683
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\u000a\u000a---\u000a\u000aThe test framework is thorough beyond belief for those interfaces that it\u000acovers. Are there any plans for widening coverage to some of the more\u000aspecific collection framework interfaces? ConcurrentMap is the first that\u000asprings to mind, NavigableMap, Deque, SortedSet and the like might be\u000auseful too. Obviously, providing testing for the _concurrency_ part of this\u000ais a whole different ballgame, but it would be a great start to be able to\u000atest at least the single-threaded behaviour.\u000a\u000aMore generally (perhaps this belongs in a separate issue), are there any\u000aplans to make it easier to hook into the framework to test other types? As\u000aa concrete example, I was playing with adding supplyIfAbsent(K,\u000aCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\u000a(after sorting out tests for the other four ConcurrentMap methods) it would\u000ahelp to have some changes in, for example,\u000a&nbsp;&nbsp;&nbsp;\u005c* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\u000a&nbsp;&nbsp;&nbsp;\u005c* TestStringMapGenerator#create(Entry[]) for the same reason\u000a&nbsp;&nbsp;&nbsp;\u005c* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\u000alist, since Arrays#asList is inconveniently immutable.\u000a
p11684
asg17
(lp11685
g11660
asg19
(lp11686
g11662
asg21
I0
sba(iArchitecture
Entity
p11687
(dp11688
g11
(lp11689
g11655
asg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$3'
p11690
sg15
(lp11691
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\u000a\u000a---\u000a\u000aThe test framework is thorough beyond belief for those interfaces that it\u000acovers. Are there any plans for widening coverage to some of the more\u000aspecific collection framework interfaces? ConcurrentMap is the first that\u000asprings to mind, NavigableMap, Deque, SortedSet and the like might be\u000auseful too. Obviously, providing testing for the _concurrency_ part of this\u000ais a whole different ballgame, but it would be a great start to be able to\u000atest at least the single-threaded behaviour.\u000a\u000aMore generally (perhaps this belongs in a separate issue), are there any\u000aplans to make it easier to hook into the framework to test other types? As\u000aa concrete example, I was playing with adding supplyIfAbsent(K,\u000aCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\u000a(after sorting out tests for the other four ConcurrentMap methods) it would\u000ahelp to have some changes in, for example,\u000a&nbsp;&nbsp;&nbsp;\u005c* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\u000a&nbsp;&nbsp;&nbsp;\u005c* TestStringMapGenerator#create(Entry[]) for the same reason\u000a&nbsp;&nbsp;&nbsp;\u005c* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\u000alist, since Arrays#asList is inconveniently immutable.\u000a
p11692
asg17
(lp11693
g11660
asg19
(lp11694
g11662
asg21
I0
sba(iArchitecture
Entity
p11695
(dp11696
g11
(lp11697
g11655
asg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$4'
p11698
sg15
(lp11699
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\u000a\u000a---\u000a\u000aThe test framework is thorough beyond belief for those interfaces that it\u000acovers. Are there any plans for widening coverage to some of the more\u000aspecific collection framework interfaces? ConcurrentMap is the first that\u000asprings to mind, NavigableMap, Deque, SortedSet and the like might be\u000auseful too. Obviously, providing testing for the _concurrency_ part of this\u000ais a whole different ballgame, but it would be a great start to be able to\u000atest at least the single-threaded behaviour.\u000a\u000aMore generally (perhaps this belongs in a separate issue), are there any\u000aplans to make it easier to hook into the framework to test other types? As\u000aa concrete example, I was playing with adding supplyIfAbsent(K,\u000aCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\u000a(after sorting out tests for the other four ConcurrentMap methods) it would\u000ahelp to have some changes in, for example,\u000a&nbsp;&nbsp;&nbsp;\u005c* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\u000a&nbsp;&nbsp;&nbsp;\u005c* TestStringMapGenerator#create(Entry[]) for the same reason\u000a&nbsp;&nbsp;&nbsp;\u005c* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\u000alist, since Arrays#asList is inconveniently immutable.\u000a
p11700
asg17
(lp11701
g11660
asg19
(lp11702
g11662
asg21
I0
sba(iArchitecture
Entity
p11703
(dp11704
g11
(lp11705
g11655
asg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$5'
p11706
sg15
(lp11707
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\u000a\u000a---\u000a\u000aThe test framework is thorough beyond belief for those interfaces that it\u000acovers. Are there any plans for widening coverage to some of the more\u000aspecific collection framework interfaces? ConcurrentMap is the first that\u000asprings to mind, NavigableMap, Deque, SortedSet and the like might be\u000auseful too. Obviously, providing testing for the _concurrency_ part of this\u000ais a whole different ballgame, but it would be a great start to be able to\u000atest at least the single-threaded behaviour.\u000a\u000aMore generally (perhaps this belongs in a separate issue), are there any\u000aplans to make it easier to hook into the framework to test other types? As\u000aa concrete example, I was playing with adding supplyIfAbsent(K,\u000aCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\u000a(after sorting out tests for the other four ConcurrentMap methods) it would\u000ahelp to have some changes in, for example,\u000a&nbsp;&nbsp;&nbsp;\u005c* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\u000a&nbsp;&nbsp;&nbsp;\u005c* TestStringMapGenerator#create(Entry[]) for the same reason\u000a&nbsp;&nbsp;&nbsp;\u005c* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\u000alist, since Arrays#asList is inconveniently immutable.\u000a
p11708
asg17
(lp11709
g11660
asg19
(lp11710
g11662
asg21
I0
sba(iArchitecture
Entity
p11711
(dp11712
g11
(lp11713
g11655
asg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$6'
p11714
sg15
(lp11715
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\u000a\u000a---\u000a\u000aThe test framework is thorough beyond belief for those interfaces that it\u000acovers. Are there any plans for widening coverage to some of the more\u000aspecific collection framework interfaces? ConcurrentMap is the first that\u000asprings to mind, NavigableMap, Deque, SortedSet and the like might be\u000auseful too. Obviously, providing testing for the _concurrency_ part of this\u000ais a whole different ballgame, but it would be a great start to be able to\u000atest at least the single-threaded behaviour.\u000a\u000aMore generally (perhaps this belongs in a separate issue), are there any\u000aplans to make it easier to hook into the framework to test other types? As\u000aa concrete example, I was playing with adding supplyIfAbsent(K,\u000aCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\u000a(after sorting out tests for the other four ConcurrentMap methods) it would\u000ahelp to have some changes in, for example,\u000a&nbsp;&nbsp;&nbsp;\u005c* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\u000a&nbsp;&nbsp;&nbsp;\u005c* TestStringMapGenerator#create(Entry[]) for the same reason\u000a&nbsp;&nbsp;&nbsp;\u005c* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\u000alist, since Arrays#asList is inconveniently immutable.\u000a
p11716
asg17
(lp11717
g11660
asg19
(lp11718
g11662
asg21
I0
sba(iArchitecture
Entity
p11719
(dp11720
g11
(lp11721
g11655
asg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$7'
p11722
sg15
(lp11723
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\u000a\u000a---\u000a\u000aThe test framework is thorough beyond belief for those interfaces that it\u000acovers. Are there any plans for widening coverage to some of the more\u000aspecific collection framework interfaces? ConcurrentMap is the first that\u000asprings to mind, NavigableMap, Deque, SortedSet and the like might be\u000auseful too. Obviously, providing testing for the _concurrency_ part of this\u000ais a whole different ballgame, but it would be a great start to be able to\u000atest at least the single-threaded behaviour.\u000a\u000aMore generally (perhaps this belongs in a separate issue), are there any\u000aplans to make it easier to hook into the framework to test other types? As\u000aa concrete example, I was playing with adding supplyIfAbsent(K,\u000aCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\u000a(after sorting out tests for the other four ConcurrentMap methods) it would\u000ahelp to have some changes in, for example,\u000a&nbsp;&nbsp;&nbsp;\u005c* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\u000a&nbsp;&nbsp;&nbsp;\u005c* TestStringMapGenerator#create(Entry[]) for the same reason\u000a&nbsp;&nbsp;&nbsp;\u005c* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\u000alist, since Arrays#asList is inconveniently immutable.\u000a
p11724
asg17
(lp11725
g11660
asg19
(lp11726
g11662
asg21
I0
sba(iArchitecture
Entity
p11727
(dp11728
g11
(lp11729
g11655
asg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$8'
p11730
sg15
(lp11731
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\u000a\u000a---\u000a\u000aThe test framework is thorough beyond belief for those interfaces that it\u000acovers. Are there any plans for widening coverage to some of the more\u000aspecific collection framework interfaces? ConcurrentMap is the first that\u000asprings to mind, NavigableMap, Deque, SortedSet and the like might be\u000auseful too. Obviously, providing testing for the _concurrency_ part of this\u000ais a whole different ballgame, but it would be a great start to be able to\u000atest at least the single-threaded behaviour.\u000a\u000aMore generally (perhaps this belongs in a separate issue), are there any\u000aplans to make it easier to hook into the framework to test other types? As\u000aa concrete example, I was playing with adding supplyIfAbsent(K,\u000aCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\u000a(after sorting out tests for the other four ConcurrentMap methods) it would\u000ahelp to have some changes in, for example,\u000a&nbsp;&nbsp;&nbsp;\u005c* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\u000a&nbsp;&nbsp;&nbsp;\u005c* TestStringMapGenerator#create(Entry[]) for the same reason\u000a&nbsp;&nbsp;&nbsp;\u005c* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\u000alist, since Arrays#asList is inconveniently immutable.\u000a
p11732
asg17
(lp11733
g11660
asg19
(lp11734
g11662
asg21
I0
sba(iArchitecture
Entity
p11735
(dp11736
g11
(lp11737
g11655
asg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$9'
p11738
sg15
(lp11739
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\u000a\u000a---\u000a\u000aThe test framework is thorough beyond belief for those interfaces that it\u000acovers. Are there any plans for widening coverage to some of the more\u000aspecific collection framework interfaces? ConcurrentMap is the first that\u000asprings to mind, NavigableMap, Deque, SortedSet and the like might be\u000auseful too. Obviously, providing testing for the _concurrency_ part of this\u000ais a whole different ballgame, but it would be a great start to be able to\u000atest at least the single-threaded behaviour.\u000a\u000aMore generally (perhaps this belongs in a separate issue), are there any\u000aplans to make it easier to hook into the framework to test other types? As\u000aa concrete example, I was playing with adding supplyIfAbsent(K,\u000aCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\u000a(after sorting out tests for the other four ConcurrentMap methods) it would\u000ahelp to have some changes in, for example,\u000a&nbsp;&nbsp;&nbsp;\u005c* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\u000a&nbsp;&nbsp;&nbsp;\u005c* TestStringMapGenerator#create(Entry[]) for the same reason\u000a&nbsp;&nbsp;&nbsp;\u005c* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\u000alist, since Arrays#asList is inconveniently immutable.\u000a
p11740
asg17
(lp11741
g11660
asg19
(lp11742
g11662
asg21
I0
sba(iArchitecture
Entity
p11743
(dp11744
g11
(lp11745
g11655
asg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$NullFriendlyComparator'
p11746
sg15
(lp11747
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\u000a\u000a---\u000a\u000aThe test framework is thorough beyond belief for those interfaces that it\u000acovers. Are there any plans for widening coverage to some of the more\u000aspecific collection framework interfaces? ConcurrentMap is the first that\u000asprings to mind, NavigableMap, Deque, SortedSet and the like might be\u000auseful too. Obviously, providing testing for the _concurrency_ part of this\u000ais a whole different ballgame, but it would be a great start to be able to\u000atest at least the single-threaded behaviour.\u000a\u000aMore generally (perhaps this belongs in a separate issue), are there any\u000aplans to make it easier to hook into the framework to test other types? As\u000aa concrete example, I was playing with adding supplyIfAbsent(K,\u000aCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\u000a(after sorting out tests for the other four ConcurrentMap methods) it would\u000ahelp to have some changes in, for example,\u000a&nbsp;&nbsp;&nbsp;\u005c* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\u000a&nbsp;&nbsp;&nbsp;\u005c* TestStringMapGenerator#create(Entry[]) for the same reason\u000a&nbsp;&nbsp;&nbsp;\u005c* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\u000alist, since Arrays#asList is inconveniently immutable.\u000a
p11748
asg17
(lp11749
g11660
asg19
(lp11750
g11662
asg21
I0
sba(iArchitecture
Entity
p11751
(dp11752
g11
(lp11753
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil'
p11754
sg15
(lp11755
sg17
(lp11756
sg19
(lp11757
sg21
I0
sba(iArchitecture
Entity
p11758
(dp11759
g11
(lp11760
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil$1'
p11761
sg15
(lp11762
sg17
(lp11763
sg19
(lp11764
sg21
I0
sba(iArchitecture
Entity
p11765
(dp11766
g11
(lp11767
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil$2'
p11768
sg15
(lp11769
sg17
(lp11770
sg19
(lp11771
sg21
I0
sba(iArchitecture
Entity
p11772
(dp11773
g11
(lp11774
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil$3'
p11775
sg15
(lp11776
sg17
(lp11777
sg19
(lp11778
sg21
I0
sba(iArchitecture
Entity
p11779
(dp11780
g11
(lp11781
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil$4'
p11782
sg15
(lp11783
sg17
(lp11784
sg19
(lp11785
sg21
I0
sba(iArchitecture
Entity
p11786
(dp11787
g11
(lp11788
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil$5'
p11789
sg15
(lp11790
sg17
(lp11791
sg19
(lp11792
sg21
I0
sba(iArchitecture
Entity
p11793
(dp11794
g11
(lp11795
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil$6'
p11796
sg15
(lp11797
sg17
(lp11798
sg19
(lp11799
sg21
I0
sba(iArchitecture
Entity
p11800
(dp11801
g11
(lp11802
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil'
p11803
sg15
(lp11804
sg17
(lp11805
sg19
(lp11806
sg21
I0
sba(iArchitecture
Entity
p11807
(dp11808
g11
(lp11809
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$1'
p11810
sg15
(lp11811
sg17
(lp11812
sg19
(lp11813
sg21
I0
sba(iArchitecture
Entity
p11814
(dp11815
g11
(lp11816
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$10'
p11817
sg15
(lp11818
sg17
(lp11819
sg19
(lp11820
sg21
I0
sba(iArchitecture
Entity
p11821
(dp11822
g11
(lp11823
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$11'
p11824
sg15
(lp11825
sg17
(lp11826
sg19
(lp11827
sg21
I0
sba(iArchitecture
Entity
p11828
(dp11829
g11
(lp11830
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$11$1'
p11831
sg15
(lp11832
sg17
(lp11833
sg19
(lp11834
sg21
I0
sba(iArchitecture
Entity
p11835
(dp11836
g11
(lp11837
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$12'
p11838
sg15
(lp11839
sg17
(lp11840
sg19
(lp11841
sg21
I0
sba(iArchitecture
Entity
p11842
(dp11843
g11
(lp11844
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$13'
p11845
sg15
(lp11846
sg17
(lp11847
sg19
(lp11848
sg21
I0
sba(iArchitecture
Entity
p11849
(dp11850
g11
(lp11851
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$14'
p11852
sg15
(lp11853
sg17
(lp11854
sg19
(lp11855
sg21
I0
sba(iArchitecture
Entity
p11856
(dp11857
g11
(lp11858
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$2'
p11859
sg15
(lp11860
sg17
(lp11861
sg19
(lp11862
sg21
I0
sba(iArchitecture
Entity
p11863
(dp11864
g11
(lp11865
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$3'
p11866
sg15
(lp11867
sg17
(lp11868
sg19
(lp11869
sg21
I0
sba(iArchitecture
Entity
p11870
(dp11871
g11
(lp11872
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$4'
p11873
sg15
(lp11874
sg17
(lp11875
sg19
(lp11876
sg21
I0
sba(iArchitecture
Entity
p11877
(dp11878
g11
(lp11879
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$5'
p11880
sg15
(lp11881
sg17
(lp11882
sg19
(lp11883
sg21
I0
sba(iArchitecture
Entity
p11884
(dp11885
g11
(lp11886
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$6'
p11887
sg15
(lp11888
sg17
(lp11889
sg19
(lp11890
sg21
I0
sba(iArchitecture
Entity
p11891
(dp11892
g11
(lp11893
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$7'
p11894
sg15
(lp11895
sg17
(lp11896
sg19
(lp11897
sg21
I0
sba(iArchitecture
Entity
p11898
(dp11899
g11
(lp11900
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$8'
p11901
sg15
(lp11902
sg17
(lp11903
sg19
(lp11904
sg21
I0
sba(iArchitecture
Entity
p11905
(dp11906
g11
(lp11907
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$9'
p11908
sg15
(lp11909
sg17
(lp11910
sg19
(lp11911
sg21
I0
sba(iArchitecture
Entity
p11912
(dp11913
g11
(lp11914
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$NullFriendlyComparator'
p11915
sg15
(lp11916
sg17
(lp11917
sg19
(lp11918
sg21
I0
sba(iArchitecture
Entity
p11919
(dp11920
g11
(lp11921
sg13
S'com.google.common.collect.testing.WrongType'
p11922
sg15
(lp11923
sg17
(lp11924
sg19
(lp11925
sg21
I0
sba(iArchitecture
Entity
p11926
(dp11927
g11
(lp11928
sg13
S'com.google.common.collect.testing.features.CollectionFeature'
p11929
sg15
(lp11930
sg17
(lp11931
sg19
(lp11932
sg21
I0
sba(iArchitecture
Entity
p11933
(dp11934
g11
(lp11935
sg13
S'com.google.common.collect.testing.features.CollectionFeature$Require'
p11936
sg15
(lp11937
sg17
(lp11938
sg19
(lp11939
sg21
I0
sba(iArchitecture
Entity
p11940
(dp11941
g11
(lp11942
sg13
S'com.google.common.collect.testing.features.CollectionSize'
p11943
sg15
(lp11944
sg17
(lp11945
sg19
(lp11946
sg21
I0
sba(iArchitecture
Entity
p11947
(dp11948
g11
(lp11949
sg13
S'com.google.common.collect.testing.features.CollectionSize$Require'
p11950
sg15
(lp11951
sg17
(lp11952
sg19
(lp11953
sg21
I0
sba(iArchitecture
Entity
p11954
(dp11955
g11
(lp11956
sg13
S'com.google.common.collect.testing.features.ConflictingRequirementsException'
p11957
sg15
(lp11958
sg17
(lp11959
sg19
(lp11960
sg21
I0
sba(iArchitecture
Entity
p11961
(dp11962
g11
(lp11963
g940
ag940
asg13
S'com.google.common.collect.testing.features.Feature'
p11964
sg15
(lp11965
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p11966
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p11967
asg17
(lp11968
g952
ag952
asg19
(lp11969
g956
ag956
asg21
I0
sba(iArchitecture
Entity
p11970
(dp11971
g11
(lp11972
g940
asg13
S'com.google.common.collect.testing.features.FeatureUtil'
p11973
sg15
(lp11974
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p11975
asg17
(lp11976
g952
asg19
(lp11977
g956
asg21
I0
sba(iArchitecture
Entity
p11978
(dp11979
g11
(lp11980
sg13
S'com.google.common.collect.testing.features.ListFeature'
p11981
sg15
(lp11982
sg17
(lp11983
sg19
(lp11984
sg21
I0
sba(iArchitecture
Entity
p11985
(dp11986
g11
(lp11987
sg13
S'com.google.common.collect.testing.features.ListFeature$Require'
p11988
sg15
(lp11989
sg17
(lp11990
sg19
(lp11991
sg21
I0
sba(iArchitecture
Entity
p11992
(dp11993
g11
(lp11994
sg13
S'com.google.common.collect.testing.features.TesterAnnotation'
p11995
sg15
(lp11996
sg17
(lp11997
sg19
(lp11998
sg21
I0
sba(iArchitecture
Entity
p11999
(dp12000
g11
(lp12001
sg13
S'com.google.common.collect.testing.features.TesterRequirements'
p12002
sg15
(lp12003
sg17
(lp12004
sg19
(lp12005
sg21
I0
sba(iArchitecture
Entity
p12006
(dp12007
g11
(lp12008
sg13
S'com.google.common.collect.testing.google.TestStringMultisetGenerator'
p12009
sg15
(lp12010
sg17
(lp12011
sg19
(lp12012
sg21
I0
sba(iArchitecture
Entity
p12013
(dp12014
g11
(lp12015
sg13
S'com.google.common.collect.testing.google.TestStringSetMultimapGenerator'
p12016
sg15
(lp12017
sg17
(lp12018
sg19
(lp12019
sg21
I0
sba(iArchitecture
Entity
p12020
(dp12021
g11
(lp12022
sg13
S'com.google.common.collect.testing.testers.AbstractListIndexOfTester'
p12023
sg15
(lp12024
sg17
(lp12025
sg19
(lp12026
sg21
I0
sba(iArchitecture
Entity
p12027
(dp12028
g11
(lp12029
sg13
S'com.google.common.collect.testing.testers.AbstractListTester'
p12030
sg15
(lp12031
sg17
(lp12032
sg19
(lp12033
sg21
I0
sba(iArchitecture
Entity
p12034
(dp12035
g11
(lp12036
sg13
S'com.google.common.collect.testing.testers.AbstractQueueTester'
p12037
sg15
(lp12038
sg17
(lp12039
sg19
(lp12040
sg21
I0
sba(iArchitecture
Entity
p12041
(dp12042
g11
(lp12043
sg13
S'com.google.common.collect.testing.testers.AbstractSetTester'
p12044
sg15
(lp12045
sg17
(lp12046
sg19
(lp12047
sg21
I0
sba(iArchitecture
Entity
p12048
(dp12049
g11
(lp12050
sg13
S'com.google.common.collect.testing.testers.CollectionAddAllTester'
p12051
sg15
(lp12052
sg17
(lp12053
sg19
(lp12054
sg21
I0
sba(iArchitecture
Entity
p12055
(dp12056
g11
(lp12057
sg13
S'com.google.common.collect.testing.testers.CollectionAddTester'
p12058
sg15
(lp12059
sg17
(lp12060
sg19
(lp12061
sg21
I0
sba(iArchitecture
Entity
p12062
(dp12063
g11
(lp12064
sg13
S'com.google.common.collect.testing.testers.CollectionClearTester'
p12065
sg15
(lp12066
sg17
(lp12067
sg19
(lp12068
sg21
I0
sba(iArchitecture
Entity
p12069
(dp12070
g11
(lp12071
sg13
S'com.google.common.collect.testing.testers.CollectionContainsAllTester'
p12072
sg15
(lp12073
sg17
(lp12074
sg19
(lp12075
sg21
I0
sba(iArchitecture
Entity
p12076
(dp12077
g11
(lp12078
sg13
S'com.google.common.collect.testing.testers.CollectionContainsTester'
p12079
sg15
(lp12080
sg17
(lp12081
sg19
(lp12082
sg21
I0
sba(iArchitecture
Entity
p12083
(dp12084
g11
(lp12085
sg13
S'com.google.common.collect.testing.testers.CollectionCreationTester'
p12086
sg15
(lp12087
sg17
(lp12088
sg19
(lp12089
sg21
I0
sba(iArchitecture
Entity
p12090
(dp12091
g11
(lp12092
sg13
S'com.google.common.collect.testing.testers.CollectionEqualsTester'
p12093
sg15
(lp12094
sg17
(lp12095
sg19
(lp12096
sg21
I0
sba(iArchitecture
Entity
p12097
(dp12098
g11
(lp12099
sg13
S'com.google.common.collect.testing.testers.CollectionIsEmptyTester'
p12100
sg15
(lp12101
sg17
(lp12102
sg19
(lp12103
sg21
I0
sba(iArchitecture
Entity
p12104
(dp12105
g11
(lp12106
sg13
S'com.google.common.collect.testing.testers.CollectionRemoveAllTester'
p12107
sg15
(lp12108
sg17
(lp12109
sg19
(lp12110
sg21
I0
sba(iArchitecture
Entity
p12111
(dp12112
g11
(lp12113
sg13
S'com.google.common.collect.testing.testers.CollectionRemoveTester'
p12114
sg15
(lp12115
sg17
(lp12116
sg19
(lp12117
sg21
I0
sba(iArchitecture
Entity
p12118
(dp12119
g11
(lp12120
sg13
S'com.google.common.collect.testing.testers.CollectionSerializationEqualTester'
p12121
sg15
(lp12122
sg17
(lp12123
sg19
(lp12124
sg21
I0
sba(iArchitecture
Entity
p12125
(dp12126
g11
(lp12127
sg13
S'com.google.common.collect.testing.testers.CollectionSerializationTester'
p12128
sg15
(lp12129
sg17
(lp12130
sg19
(lp12131
sg21
I0
sba(iArchitecture
Entity
p12132
(dp12133
g11
(lp12134
sg13
S'com.google.common.collect.testing.testers.CollectionSizeTester'
p12135
sg15
(lp12136
sg17
(lp12137
sg19
(lp12138
sg21
I0
sba(iArchitecture
Entity
p12139
(dp12140
g11
(lp12141
sg13
S'com.google.common.collect.testing.testers.CollectionToArrayTester'
p12142
sg15
(lp12143
sg17
(lp12144
sg19
(lp12145
sg21
I0
sba(iArchitecture
Entity
p12146
(dp12147
g11
(lp12148
sg13
S'com.google.common.collect.testing.testers.CollectionToStringTester'
p12149
sg15
(lp12150
sg17
(lp12151
sg19
(lp12152
sg21
I0
sba(iArchitecture
Entity
p12153
(dp12154
g11
(lp12155
sg13
S'com.google.common.collect.testing.testers.ListAddAllAtIndexTester'
p12156
sg15
(lp12157
sg17
(lp12158
sg19
(lp12159
sg21
I0
sba(iArchitecture
Entity
p12160
(dp12161
g11
(lp12162
sg13
S'com.google.common.collect.testing.testers.ListAddAllTester'
p12163
sg15
(lp12164
sg17
(lp12165
sg19
(lp12166
sg21
I0
sba(iArchitecture
Entity
p12167
(dp12168
g11
(lp12169
sg13
S'com.google.common.collect.testing.testers.ListAddAtIndexTester'
p12170
sg15
(lp12171
sg17
(lp12172
sg19
(lp12173
sg21
I0
sba(iArchitecture
Entity
p12174
(dp12175
g11
(lp12176
sg13
S'com.google.common.collect.testing.testers.ListAddTester'
p12177
sg15
(lp12178
sg17
(lp12179
sg19
(lp12180
sg21
I0
sba(iArchitecture
Entity
p12181
(dp12182
g11
(lp12183
sg13
S'com.google.common.collect.testing.testers.ListCreationTester'
p12184
sg15
(lp12185
sg17
(lp12186
sg19
(lp12187
sg21
I0
sba(iArchitecture
Entity
p12188
(dp12189
g11
(lp12190
sg13
S'com.google.common.collect.testing.testers.ListEqualsTester'
p12191
sg15
(lp12192
sg17
(lp12193
sg19
(lp12194
sg21
I0
sba(iArchitecture
Entity
p12195
(dp12196
g11
(lp12197
sg13
S'com.google.common.collect.testing.testers.ListGetTester'
p12198
sg15
(lp12199
sg17
(lp12200
sg19
(lp12201
sg21
I0
sba(iArchitecture
Entity
p12202
(dp12203
g11
(lp12204
sg13
S'com.google.common.collect.testing.testers.ListHashCodeTester'
p12205
sg15
(lp12206
sg17
(lp12207
sg19
(lp12208
sg21
I0
sba(iArchitecture
Entity
p12209
(dp12210
g11
(lp12211
sg13
S'com.google.common.collect.testing.testers.ListIndexOfTester'
p12212
sg15
(lp12213
sg17
(lp12214
sg19
(lp12215
sg21
I0
sba(iArchitecture
Entity
p12216
(dp12217
g11
(lp12218
sg13
S'com.google.common.collect.testing.testers.ListLastIndexOfTester'
p12219
sg15
(lp12220
sg17
(lp12221
sg19
(lp12222
sg21
I0
sba(iArchitecture
Entity
p12223
(dp12224
g11
(lp12225
sg13
S'com.google.common.collect.testing.testers.ListRemoveAllTester'
p12226
sg15
(lp12227
sg17
(lp12228
sg19
(lp12229
sg21
I0
sba(iArchitecture
Entity
p12230
(dp12231
g11
(lp12232
sg13
S'com.google.common.collect.testing.testers.ListRemoveAtIndexTester'
p12233
sg15
(lp12234
sg17
(lp12235
sg19
(lp12236
sg21
I0
sba(iArchitecture
Entity
p12237
(dp12238
g11
(lp12239
sg13
S'com.google.common.collect.testing.testers.ListRemoveTester'
p12240
sg15
(lp12241
sg17
(lp12242
sg19
(lp12243
sg21
I0
sba(iArchitecture
Entity
p12244
(dp12245
g11
(lp12246
sg13
S'com.google.common.collect.testing.testers.ListRetainAllTester'
p12247
sg15
(lp12248
sg17
(lp12249
sg19
(lp12250
sg21
I0
sba(iArchitecture
Entity
p12251
(dp12252
g11
(lp12253
sg13
S'com.google.common.collect.testing.testers.ListSetTester'
p12254
sg15
(lp12255
sg17
(lp12256
sg19
(lp12257
sg21
I0
sba(iArchitecture
Entity
p12258
(dp12259
g11
(lp12260
sg13
S'com.google.common.collect.testing.testers.ListSubListTester'
p12261
sg15
(lp12262
sg17
(lp12263
sg19
(lp12264
sg21
I0
sba(iArchitecture
Entity
p12265
(dp12266
g11
(lp12267
sg13
S'com.google.common.collect.testing.testers.ListToArrayTester'
p12268
sg15
(lp12269
sg17
(lp12270
sg19
(lp12271
sg21
I0
sba(iArchitecture
Entity
p12272
(dp12273
g11
(lp12274
sg13
S'com.google.common.collect.testing.testers.MapClearTester'
p12275
sg15
(lp12276
sg17
(lp12277
sg19
(lp12278
sg21
I0
sba(iArchitecture
Entity
p12279
(dp12280
g11
(lp12281
sg13
S'com.google.common.collect.testing.testers.MapContainsKeyTester'
p12282
sg15
(lp12283
sg17
(lp12284
sg19
(lp12285
sg21
I0
sba(iArchitecture
Entity
p12286
(dp12287
g11
(lp12288
sg13
S'com.google.common.collect.testing.testers.MapContainsValueTester'
p12289
sg15
(lp12290
sg17
(lp12291
sg19
(lp12292
sg21
I0
sba(iArchitecture
Entity
p12293
(dp12294
g11
(lp12295
sg13
S'com.google.common.collect.testing.testers.MapCreationTester'
p12296
sg15
(lp12297
sg17
(lp12298
sg19
(lp12299
sg21
I0
sba(iArchitecture
Entity
p12300
(dp12301
g11
(lp12302
sg13
S'com.google.common.collect.testing.testers.MapEqualsTester'
p12303
sg15
(lp12304
sg17
(lp12305
sg19
(lp12306
sg21
I0
sba(iArchitecture
Entity
p12307
(dp12308
g11
(lp12309
sg13
S'com.google.common.collect.testing.testers.MapGetTester'
p12310
sg15
(lp12311
sg17
(lp12312
sg19
(lp12313
sg21
I0
sba(iArchitecture
Entity
p12314
(dp12315
g11
(lp12316
sg13
S'com.google.common.collect.testing.testers.MapHashCodeTester'
p12317
sg15
(lp12318
sg17
(lp12319
sg19
(lp12320
sg21
I0
sba(iArchitecture
Entity
p12321
(dp12322
g11
(lp12323
sg13
S'com.google.common.collect.testing.testers.MapIsEmptyTester'
p12324
sg15
(lp12325
sg17
(lp12326
sg19
(lp12327
sg21
I0
sba(iArchitecture
Entity
p12328
(dp12329
g11
(lp12330
sg13
S'com.google.common.collect.testing.testers.MapPutAllTester'
p12331
sg15
(lp12332
sg17
(lp12333
sg19
(lp12334
sg21
I0
sba(iArchitecture
Entity
p12335
(dp12336
g11
(lp12337
sg13
S'com.google.common.collect.testing.testers.MapPutTester'
p12338
sg15
(lp12339
sg17
(lp12340
sg19
(lp12341
sg21
I0
sba(iArchitecture
Entity
p12342
(dp12343
g11
(lp12344
sg13
S'com.google.common.collect.testing.testers.MapRemoveTester'
p12345
sg15
(lp12346
sg17
(lp12347
sg19
(lp12348
sg21
I0
sba(iArchitecture
Entity
p12349
(dp12350
g11
(lp12351
sg13
S'com.google.common.collect.testing.testers.MapSerializationTester'
p12352
sg15
(lp12353
sg17
(lp12354
sg19
(lp12355
sg21
I0
sba(iArchitecture
Entity
p12356
(dp12357
g11
(lp12358
sg13
S'com.google.common.collect.testing.testers.MapSizeTester'
p12359
sg15
(lp12360
sg17
(lp12361
sg19
(lp12362
sg21
I0
sba(iArchitecture
Entity
p12363
(dp12364
g11
(lp12365
sg13
S'com.google.common.collect.testing.testers.MapToStringTester'
p12366
sg15
(lp12367
sg17
(lp12368
sg19
(lp12369
sg21
I0
sba(iArchitecture
Entity
p12370
(dp12371
g11
(lp12372
sg13
S'com.google.common.collect.testing.testers.NavigableMapNavigationTester'
p12373
sg15
(lp12374
sg17
(lp12375
sg19
(lp12376
sg21
I0
sba(iArchitecture
Entity
p12377
(dp12378
g11
(lp12379
sg13
S'com.google.common.collect.testing.testers.NavigableSetNavigationTester'
p12380
sg15
(lp12381
sg17
(lp12382
sg19
(lp12383
sg21
I0
sba(iArchitecture
Entity
p12384
(dp12385
g11
(lp12386
g940
asg13
S'com.google.common.collect.testing.testers.Platform'
p12387
sg15
(lp12388
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p12389
asg17
(lp12390
g952
asg19
(lp12391
g956
asg21
I0
sba(iArchitecture
Entity
p12392
(dp12393
g11
(lp12394
sg13
S'com.google.common.collect.testing.testers.QueueElementTester'
p12395
sg15
(lp12396
sg17
(lp12397
sg19
(lp12398
sg21
I0
sba(iArchitecture
Entity
p12399
(dp12400
g11
(lp12401
sg13
S'com.google.common.collect.testing.testers.QueueOfferTester'
p12402
sg15
(lp12403
sg17
(lp12404
sg19
(lp12405
sg21
I0
sba(iArchitecture
Entity
p12406
(dp12407
g11
(lp12408
sg13
S'com.google.common.collect.testing.testers.QueuePeekTester'
p12409
sg15
(lp12410
sg17
(lp12411
sg19
(lp12412
sg21
I0
sba(iArchitecture
Entity
p12413
(dp12414
g11
(lp12415
sg13
S'com.google.common.collect.testing.testers.QueuePollTester'
p12416
sg15
(lp12417
sg17
(lp12418
sg19
(lp12419
sg21
I0
sba(iArchitecture
Entity
p12420
(dp12421
g11
(lp12422
sg13
S'com.google.common.collect.testing.testers.QueueRemoveTester'
p12423
sg15
(lp12424
sg17
(lp12425
sg19
(lp12426
sg21
I0
sba(iArchitecture
Entity
p12427
(dp12428
g11
(lp12429
sg13
S'com.google.common.collect.testing.testers.SetAddAllTester'
p12430
sg15
(lp12431
sg17
(lp12432
sg19
(lp12433
sg21
I0
sba(iArchitecture
Entity
p12434
(dp12435
g11
(lp12436
sg13
S'com.google.common.collect.testing.testers.SetAddTester'
p12437
sg15
(lp12438
sg17
(lp12439
sg19
(lp12440
sg21
I0
sba(iArchitecture
Entity
p12441
(dp12442
g11
(lp12443
sg13
S'com.google.common.collect.testing.testers.SetEqualsTester'
p12444
sg15
(lp12445
sg17
(lp12446
sg19
(lp12447
sg21
I0
sba(iArchitecture
Entity
p12448
(dp12449
g11
(lp12450
sg13
S'com.google.common.collect.testing.testers.SetHashCodeTester'
p12451
sg15
(lp12452
sg17
(lp12453
sg19
(lp12454
sg21
I0
sba(iArchitecture
Entity
p12455
(dp12456
g11
(lp12457
sg13
S'com.google.common.collect.testing.testers.SetRemoveTester'
p12458
sg15
(lp12459
sg17
(lp12460
sg19
(lp12461
sg21
I0
sba(iArchitecture
Entity
p12462
(dp12463
g11
(lp12464
sg13
S'com.google.common.collect.testing.testers.SortedSetNavigationTester'
p12465
sg15
(lp12466
sg17
(lp12467
sg19
(lp12468
sg21
I0
sba(iArchitecture
Entity
p12469
(dp12470
g11
(lp12471
sg13
S'com.google.common.net.HttpHeaders'
p12472
sg15
(lp12473
sg17
(lp12474
sg19
(lp12475
sg21
I0
sba(iArchitecture
Entity
p12476
(dp12477
g11
(lp12478
sg13
S'com.google.common.testing.SloppyTearDown'
p12479
sg15
(lp12480
sg17
(lp12481
sg19
(lp12482
sg21
I0
sba(iArchitecture
Entity
p12483
(dp12484
g11
(lp12485
sg13
S'com.google.common.util.concurrent.testing.MockFutureListener'
p12486
sg15
(lp12487
sg17
(lp12488
sg19
(lp12489
sg21
I0
sba(iArchitecture
Entity
p12490
(dp12491
g11
(lp12492
sg13
S'junit.framework.Assert'
p12493
sg15
(lp12494
sg17
(lp12495
sg19
(lp12496
sg21
I0
sba(iArchitecture
Entity
p12497
(dp12498
g11
(lp12499
sg13
S'junit.framework.Test'
p12500
sg15
(lp12501
sg17
(lp12502
sg19
(lp12503
sg21
I0
sba(iArchitecture
Entity
p12504
(dp12505
g11
(lp12506
sg13
S'junit.framework.TestCase'
p12507
sg15
(lp12508
sg17
(lp12509
sg19
(lp12510
sg21
I0
sbasg1055
(lp12511
g10720
ag10727
ag10734
ag10741
ag10748
ag10755
ag10762
ag10769
ag10778
ag10785
ag10792
ag10799
ag10806
ag10813
ag10820
ag10827
ag10834
ag10841
ag10848
ag10855
ag10862
ag10869
ag10876
ag10883
ag10890
ag10897
ag10904
ag10911
ag10918
ag10925
ag10932
ag10939
ag10946
ag10953
ag10960
ag10967
ag10974
ag10981
ag10988
ag10995
ag11002
ag11009
ag11016
ag11023
ag11030
ag11037
ag11044
ag11051
ag11058
ag11065
ag11072
ag11079
ag11086
ag11093
ag11100
ag11107
ag11114
ag11121
ag11128
ag11135
ag11142
ag11149
ag11156
ag11163
ag11170
ag11177
ag11184
ag11191
ag11198
ag11205
ag11212
ag11219
ag11226
ag11233
ag11240
ag11247
ag11254
ag11261
ag11268
ag11275
ag11282
ag11289
ag11296
ag11303
ag11310
ag11317
ag11324
ag11331
ag11338
ag11345
ag11354
ag11361
ag11368
ag11375
ag11382
ag11389
ag11396
ag11403
ag11410
ag11417
ag11424
ag11431
ag11438
ag11445
ag11452
ag11459
ag11466
ag11473
ag11480
ag11487
ag11494
ag11501
ag11508
ag11515
ag11522
ag11529
ag11536
ag11543
ag11550
ag11557
ag11564
ag11571
ag11578
ag11585
ag11592
ag11599
ag11606
ag11613
ag11620
ag11627
ag11634
ag11641
ag11648
ag11656
ag11666
ag11674
ag11682
ag11690
ag11698
ag11706
ag11714
ag11722
ag11730
ag11738
ag11746
ag11754
ag11761
ag11768
ag11775
ag11782
ag11789
ag11796
ag11803
ag11810
ag11817
ag11824
ag11831
ag11838
ag11845
ag11852
ag11859
ag11866
ag11873
ag11880
ag11887
ag11894
ag11901
ag11908
ag11915
ag11922
ag11929
ag11936
ag11943
ag11950
ag11957
ag11964
ag11973
ag11981
ag11988
ag11995
ag12002
ag12009
ag12016
ag12023
ag12030
ag12037
ag12044
ag12051
ag12058
ag12065
ag12072
ag12079
ag12086
ag12093
ag12100
ag12107
ag12114
ag12121
ag12128
ag12135
ag12142
ag12149
ag12156
ag12163
ag12170
ag12177
ag12184
ag12191
ag12198
ag12205
ag12212
ag12219
ag12226
ag12233
ag12240
ag12247
ag12254
ag12261
ag12268
ag12275
ag12282
ag12289
ag12296
ag12303
ag12310
ag12317
ag12324
ag12331
ag12338
ag12345
ag12352
ag12359
ag12366
ag12373
ag12380
ag12387
ag12395
ag12402
ag12409
ag12416
ag12423
ag12430
ag12437
ag12444
ag12451
ag12458
ag12465
ag12472
ag12479
ag12486
ag12493
ag12500
ag12507
asg21
I0
sg1057
S'com.google.common.collect.testing.ss'
p12512
sba(iArchitecture
Cluster
p12513
(dp12514
g7
(lp12515
(iArchitecture
Entity
p12516
(dp12517
g11
(lp12518
sg13
S'com.google.common.collect.testing.ListIteratorTester'
p12519
sg15
(lp12520
sg17
(lp12521
sg19
(lp12522
sg21
I0
sba(iArchitecture
Entity
p12523
(dp12524
g11
(lp12525
sg13
S'com.google.common.collect.testing.testers.CollectionIteratorTester'
p12526
sg15
(lp12527
sg17
(lp12528
sg19
(lp12529
sg21
I0
sba(iArchitecture
Entity
p12530
(dp12531
g11
(lp12532
sg13
S'com.google.common.collect.testing.testers.CollectionIteratorTester$1'
p12533
sg15
(lp12534
sg17
(lp12535
sg19
(lp12536
sg21
I0
sba(iArchitecture
Entity
p12537
(dp12538
g11
(lp12539
sg13
S'com.google.common.collect.testing.testers.CollectionRetainAllTester'
p12540
sg15
(lp12541
sg17
(lp12542
sg19
(lp12543
sg21
I0
sba(iArchitecture
Entity
p12544
(dp12545
g11
(lp12546
sg13
S'com.google.common.collect.testing.testers.CollectionRetainAllTester$1'
p12547
sg15
(lp12548
sg17
(lp12549
sg19
(lp12550
sg21
I0
sba(iArchitecture
Entity
p12551
(dp12552
g11
(lp12553
sg13
S'com.google.common.collect.testing.testers.CollectionRetainAllTester$Target'
p12554
sg15
(lp12555
sg17
(lp12556
sg19
(lp12557
sg21
I0
sba(iArchitecture
Entity
p12558
(dp12559
g11
(lp12560
sg13
S'com.google.common.collect.testing.testers.ListListIteratorTester'
p12561
sg15
(lp12562
sg17
(lp12563
sg19
(lp12564
sg21
I0
sba(iArchitecture
Entity
p12565
(dp12566
g11
(lp12567
sg13
S'com.google.common.collect.testing.testers.ListListIteratorTester$1'
p12568
sg15
(lp12569
sg17
(lp12570
sg19
(lp12571
sg21
I0
sba(iArchitecture
Entity
p12572
(dp12573
g11
(lp12574
g11655
asg13
S'com.google.common.collect.testing.testers.MapEntrySetTester'
p12575
sg15
(lp12576
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\u000a\u000a---\u000a\u000aThe test framework is thorough beyond belief for those interfaces that it\u000acovers. Are there any plans for widening coverage to some of the more\u000aspecific collection framework interfaces? ConcurrentMap is the first that\u000asprings to mind, NavigableMap, Deque, SortedSet and the like might be\u000auseful too. Obviously, providing testing for the _concurrency_ part of this\u000ais a whole different ballgame, but it would be a great start to be able to\u000atest at least the single-threaded behaviour.\u000a\u000aMore generally (perhaps this belongs in a separate issue), are there any\u000aplans to make it easier to hook into the framework to test other types? As\u000aa concrete example, I was playing with adding supplyIfAbsent(K,\u000aCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\u000a(after sorting out tests for the other four ConcurrentMap methods) it would\u000ahelp to have some changes in, for example,\u000a&nbsp;&nbsp;&nbsp;\u005c* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\u000a&nbsp;&nbsp;&nbsp;\u005c* TestStringMapGenerator#create(Entry[]) for the same reason\u000a&nbsp;&nbsp;&nbsp;\u005c* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\u000alist, since Arrays#asList is inconveniently immutable.\u000a
p12577
asg17
(lp12578
g11660
asg19
(lp12579
g11662
asg21
I0
sba(iArchitecture
Entity
p12580
(dp12581
g11
(lp12582
g11655
asg13
S'com.google.common.collect.testing.testers.MapEntrySetTester$IncomparableType'
p12583
sg15
(lp12584
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=149) created by **joe.kearney%morganst...@gtempaccount.com** on 2009-04-14 at 03:22 PM_\u000a\u000a---\u000a\u000aThe test framework is thorough beyond belief for those interfaces that it\u000acovers. Are there any plans for widening coverage to some of the more\u000aspecific collection framework interfaces? ConcurrentMap is the first that\u000asprings to mind, NavigableMap, Deque, SortedSet and the like might be\u000auseful too. Obviously, providing testing for the _concurrency_ part of this\u000ais a whole different ballgame, but it would be a great start to be able to\u000atest at least the single-threaded behaviour.\u000a\u000aMore generally (perhaps this belongs in a separate issue), are there any\u000aplans to make it easier to hook into the framework to test other types? As\u000aa concrete example, I was playing with adding supplyIfAbsent(K,\u000aCallable/Future&lt;V>) to ConcurrentMap. To cleanly use the test framework\u000a(after sorting out tests for the other four ConcurrentMap methods) it would\u000ahelp to have some changes in, for example,\u000a&nbsp;&nbsp;&nbsp;\u005c* AbstractMapTester#getMap() to avoid the downcasts to my Map subtype\u000a&nbsp;&nbsp;&nbsp;\u005c* TestStringMapGenerator#create(Entry[]) for the same reason\u000a&nbsp;&nbsp;&nbsp;\u005c* MapTestSuiteBuilder#getTesters to make it easier to add testers to the\u000alist, since Arrays#asList is inconveniently immutable.\u000a
p12585
asg17
(lp12586
g11660
asg19
(lp12587
g11662
asg21
I0
sba(iArchitecture
Entity
p12588
(dp12589
g11
(lp12590
sg13
S'com.google.common.collect.testing.testers.SortedMapNavigationTester'
p12591
sg15
(lp12592
sg17
(lp12593
sg19
(lp12594
sg21
I0
sba(iArchitecture
Entity
p12595
(dp12596
g11
(lp12597
sg13
S'com.google.common.collect.testing.testers.SortedMapNavigationTester$1'
p12598
sg15
(lp12599
sg17
(lp12600
sg19
(lp12601
sg21
I0
sbasg1055
(lp12602
g12519
ag12526
ag12533
ag12540
ag12547
ag12554
ag12561
ag12568
ag12575
ag12583
ag12591
ag12598
asg21
I0
sg1057
S'com.google.common.collect.testing.testers.ss'
p12603
sba(iArchitecture
Cluster
p12604
(dp12605
g7
(lp12606
(iArchitecture
Entity
p12607
(dp12608
g11
(lp12609
sg13
S'com.google.common.escape.ArrayBasedCharEscaper'
p12610
sg15
(lp12611
sg17
(lp12612
sg19
(lp12613
sg21
I0
sba(iArchitecture
Entity
p12614
(dp12615
g11
(lp12616
sg13
S'com.google.common.escape.ArrayBasedEscaperMap'
p12617
sg15
(lp12618
sg17
(lp12619
sg19
(lp12620
sg21
I0
sba(iArchitecture
Entity
p12621
(dp12622
g11
(lp12623
sg13
S'com.google.common.escape.CharEscaper'
p12624
sg15
(lp12625
sg17
(lp12626
sg19
(lp12627
sg21
I0
sba(iArchitecture
Entity
p12628
(dp12629
g11
(lp12630
sg13
S'com.google.common.escape.CharEscaperBuilder'
p12631
sg15
(lp12632
sg17
(lp12633
sg19
(lp12634
sg21
I0
sba(iArchitecture
Entity
p12635
(dp12636
g11
(lp12637
sg13
S'com.google.common.escape.CharEscaperBuilder$CharArrayDecorator'
p12638
sg15
(lp12639
sg17
(lp12640
sg19
(lp12641
sg21
I0
sba(iArchitecture
Entity
p12642
(dp12643
g11
(lp12644
sg13
S'com.google.common.escape.Escaper'
p12645
sg15
(lp12646
sg17
(lp12647
sg19
(lp12648
sg21
I0
sba(iArchitecture
Entity
p12649
(dp12650
g11
(lp12651
sg13
S'com.google.common.escape.Escaper$1'
p12652
sg15
(lp12653
sg17
(lp12654
sg19
(lp12655
sg21
I0
sba(iArchitecture
Entity
p12656
(dp12657
g11
(lp12658
sg13
S'com.google.common.escape.Escapers'
p12659
sg15
(lp12660
sg17
(lp12661
sg19
(lp12662
sg21
I0
sba(iArchitecture
Entity
p12663
(dp12664
g11
(lp12665
sg13
S'com.google.common.escape.Escapers$1'
p12666
sg15
(lp12667
sg17
(lp12668
sg19
(lp12669
sg21
I0
sba(iArchitecture
Entity
p12670
(dp12671
g11
(lp12672
sg13
S'com.google.common.escape.Escapers$2'
p12673
sg15
(lp12674
sg17
(lp12675
sg19
(lp12676
sg21
I0
sba(iArchitecture
Entity
p12677
(dp12678
g11
(lp12679
sg13
S'com.google.common.escape.Escapers$Builder'
p12680
sg15
(lp12681
sg17
(lp12682
sg19
(lp12683
sg21
I0
sba(iArchitecture
Entity
p12684
(dp12685
g11
(lp12686
sg13
S'com.google.common.escape.Escapers$Builder$1'
p12687
sg15
(lp12688
sg17
(lp12689
sg19
(lp12690
sg21
I0
sba(iArchitecture
Entity
p12691
(dp12692
g11
(lp12693
sg13
S'com.google.common.escape.Platform'
p12694
sg15
(lp12695
sg17
(lp12696
sg19
(lp12697
sg21
I0
sba(iArchitecture
Entity
p12698
(dp12699
g11
(lp12700
sg13
S'com.google.common.escape.Platform$1'
p12701
sg15
(lp12702
sg17
(lp12703
sg19
(lp12704
sg21
I0
sba(iArchitecture
Entity
p12705
(dp12706
g11
(lp12707
g102
asg13
S'com.google.common.escape.UnicodeEscaper'
p12708
sg15
(lp12709
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p12710
asg17
(lp12711
g107
asg19
(lp12712
g109
asg21
I0
sba(iArchitecture
Entity
p12713
(dp12714
g11
(lp12715
sg13
S'com.google.common.escape.testing.EscaperAsserts'
p12716
sg15
(lp12717
sg17
(lp12718
sg19
(lp12719
sg21
I0
sba(iArchitecture
Entity
p12720
(dp12721
g11
(lp12722
sg13
S'com.google.common.html.HtmlEscapers'
p12723
sg15
(lp12724
sg17
(lp12725
sg19
(lp12726
sg21
I0
sba(iArchitecture
Entity
p12727
(dp12728
g11
(lp12729
sg13
S'com.google.common.xml.XmlEscapers'
p12730
sg15
(lp12731
sg17
(lp12732
sg19
(lp12733
sg21
I0
sbasg1055
(lp12734
g12610
ag12617
ag12624
ag12631
ag12638
ag12645
ag12652
ag12659
ag12666
ag12673
ag12680
ag12687
ag12694
ag12701
ag12708
ag12716
ag12723
ag12730
asg21
I0
sg1057
S'com.google.common.escape.ss'
p12735
sba(iArchitecture
Cluster
p12736
(dp12737
g7
(lp12738
(iArchitecture
Entity
p12739
(dp12740
g11
(lp12741
sg13
S'com.google.common.eventbus.AllowConcurrentEvents'
p12742
sg15
(lp12743
sg17
(lp12744
sg19
(lp12745
sg21
I0
sba(iArchitecture
Entity
p12746
(dp12747
g11
(lp12748
sg13
S'com.google.common.eventbus.AnnotatedSubscriberFinder'
p12749
sg15
(lp12750
sg17
(lp12751
sg19
(lp12752
sg21
I0
sba(iArchitecture
Entity
p12753
(dp12754
g11
(lp12755
sg13
S'com.google.common.eventbus.AnnotatedSubscriberFinder$1'
p12756
sg15
(lp12757
sg17
(lp12758
sg19
(lp12759
sg21
I0
sba(iArchitecture
Entity
p12760
(dp12761
g11
(lp12762
sg13
S'com.google.common.eventbus.AnnotatedSubscriberFinder$MethodIdentifier'
p12763
sg15
(lp12764
sg17
(lp12765
sg19
(lp12766
sg21
I0
sba(iArchitecture
Entity
p12767
(dp12768
g11
(lp12769
sg13
S'com.google.common.eventbus.AsyncEventBus'
p12770
sg15
(lp12771
sg17
(lp12772
sg19
(lp12773
sg21
I0
sba(iArchitecture
Entity
p12774
(dp12775
g11
(lp12776
sg13
S'com.google.common.eventbus.AsyncEventBus$1'
p12777
sg15
(lp12778
sg17
(lp12779
sg19
(lp12780
sg21
I0
sba(iArchitecture
Entity
p12781
(dp12782
g11
(lp12783
sg13
S'com.google.common.eventbus.DeadEvent'
p12784
sg15
(lp12785
sg17
(lp12786
sg19
(lp12787
sg21
I0
sba(iArchitecture
Entity
p12788
(dp12789
g11
(lp12790
g940
asg13
S'com.google.common.eventbus.EventBus'
p12791
sg15
(lp12792
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p12793
asg17
(lp12794
g952
asg19
(lp12795
g956
asg21
I0
sba(iArchitecture
Entity
p12796
(dp12797
g11
(lp12798
g940
asg13
S'com.google.common.eventbus.EventBus$1'
p12799
sg15
(lp12800
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p12801
asg17
(lp12802
g952
asg19
(lp12803
g956
asg21
I0
sba(iArchitecture
Entity
p12804
(dp12805
g11
(lp12806
g940
asg13
S'com.google.common.eventbus.EventBus$2'
p12807
sg15
(lp12808
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p12809
asg17
(lp12810
g952
asg19
(lp12811
g956
asg21
I0
sba(iArchitecture
Entity
p12812
(dp12813
g11
(lp12814
g940
asg13
S'com.google.common.eventbus.EventBus$3'
p12815
sg15
(lp12816
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p12817
asg17
(lp12818
g952
asg19
(lp12819
g956
asg21
I0
sba(iArchitecture
Entity
p12820
(dp12821
g11
(lp12822
g940
asg13
S'com.google.common.eventbus.EventBus$EventWithSubscriber'
p12823
sg15
(lp12824
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p12825
asg17
(lp12826
g952
asg19
(lp12827
g956
asg21
I0
sba(iArchitecture
Entity
p12828
(dp12829
g11
(lp12830
g940
asg13
S'com.google.common.eventbus.EventBus$LoggingSubscriberExceptionHandler'
p12831
sg15
(lp12832
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p12833
asg17
(lp12834
g952
asg19
(lp12835
g956
asg21
I0
sba(iArchitecture
Entity
p12836
(dp12837
g11
(lp12838
sg13
S'com.google.common.eventbus.EventSubscriber'
p12839
sg15
(lp12840
sg17
(lp12841
sg19
(lp12842
sg21
I0
sba(iArchitecture
Entity
p12843
(dp12844
g11
(lp12845
sg13
S'com.google.common.eventbus.Subscribe'
p12846
sg15
(lp12847
sg17
(lp12848
sg19
(lp12849
sg21
I0
sba(iArchitecture
Entity
p12850
(dp12851
g11
(lp12852
sg13
S'com.google.common.eventbus.SubscriberExceptionContext'
p12853
sg15
(lp12854
sg17
(lp12855
sg19
(lp12856
sg21
I0
sba(iArchitecture
Entity
p12857
(dp12858
g11
(lp12859
sg13
S'com.google.common.eventbus.SubscriberExceptionHandler'
p12860
sg15
(lp12861
sg17
(lp12862
sg19
(lp12863
sg21
I0
sba(iArchitecture
Entity
p12864
(dp12865
g11
(lp12866
sg13
S'com.google.common.eventbus.SubscriberFindingStrategy'
p12867
sg15
(lp12868
sg17
(lp12869
sg19
(lp12870
sg21
I0
sba(iArchitecture
Entity
p12871
(dp12872
g11
(lp12873
sg13
S'com.google.common.eventbus.SynchronizedEventSubscriber'
p12874
sg15
(lp12875
sg17
(lp12876
sg19
(lp12877
sg21
I0
sbasg1055
(lp12878
g12742
ag12749
ag12756
ag12763
ag12770
ag12777
ag12784
ag12791
ag12799
ag12807
ag12815
ag12823
ag12831
ag12839
ag12846
ag12853
ag12860
ag12867
ag12874
asg21
I0
sg1057
S'com.google.common.eventbus.ss'
p12879
sba(iArchitecture
Cluster
p12880
(dp12881
g7
(lp12882
(iArchitecture
Entity
p12883
(dp12884
g11
(lp12885
sg13
S'com.google.common.hash.AbstractByteHasher'
p12886
sg15
(lp12887
sg17
(lp12888
sg19
(lp12889
sg21
I0
sba(iArchitecture
Entity
p12890
(dp12891
g11
(lp12892
sg13
S'com.google.common.hash.AbstractCompositeHashFunction'
p12893
sg15
(lp12894
sg17
(lp12895
sg19
(lp12896
sg21
I0
sba(iArchitecture
Entity
p12897
(dp12898
g11
(lp12899
sg13
S'com.google.common.hash.AbstractCompositeHashFunction$1'
p12900
sg15
(lp12901
sg17
(lp12902
sg19
(lp12903
sg21
I0
sba(iArchitecture
Entity
p12904
(dp12905
g11
(lp12906
sg13
S'com.google.common.hash.AbstractHasher'
p12907
sg15
(lp12908
sg17
(lp12909
sg19
(lp12910
sg21
I0
sba(iArchitecture
Entity
p12911
(dp12912
g11
(lp12913
sg13
S'com.google.common.hash.AbstractNonStreamingHashFunction'
p12914
sg15
(lp12915
sg17
(lp12916
sg19
(lp12917
sg21
I0
sba(iArchitecture
Entity
p12918
(dp12919
g11
(lp12920
sg13
S'com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher'
p12921
sg15
(lp12922
sg17
(lp12923
sg19
(lp12924
sg21
I0
sba(iArchitecture
Entity
p12925
(dp12926
g11
(lp12927
sg13
S'com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream'
p12928
sg15
(lp12929
sg17
(lp12930
sg19
(lp12931
sg21
I0
sba(iArchitecture
Entity
p12932
(dp12933
g11
(lp12934
sg13
S'com.google.common.hash.AbstractStreamingHashFunction'
p12935
sg15
(lp12936
sg17
(lp12937
sg19
(lp12938
sg21
I0
sba(iArchitecture
Entity
p12939
(dp12940
g11
(lp12941
sg13
S'com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher'
p12942
sg15
(lp12943
sg17
(lp12944
sg19
(lp12945
sg21
I0
sba(iArchitecture
Entity
p12946
(dp12947
g11
(lp12948
sg13
S'com.google.common.hash.BloomFilter'
p12949
sg15
(lp12950
sg17
(lp12951
sg19
(lp12952
sg21
I0
sba(iArchitecture
Entity
p12953
(dp12954
g11
(lp12955
sg13
S'com.google.common.hash.BloomFilter$1'
p12956
sg15
(lp12957
sg17
(lp12958
sg19
(lp12959
sg21
I0
sba(iArchitecture
Entity
p12960
(dp12961
g11
(lp12962
sg13
S'com.google.common.hash.BloomFilter$SerialForm'
p12963
sg15
(lp12964
sg17
(lp12965
sg19
(lp12966
sg21
I0
sba(iArchitecture
Entity
p12967
(dp12968
g11
(lp12969
sg13
S'com.google.common.hash.BloomFilter$Strategy'
p12970
sg15
(lp12971
sg17
(lp12972
sg19
(lp12973
sg21
I0
sba(iArchitecture
Entity
p12974
(dp12975
g11
(lp12976
sg13
S'com.google.common.hash.BloomFilterStrategies'
p12977
sg15
(lp12978
sg17
(lp12979
sg19
(lp12980
sg21
I0
sba(iArchitecture
Entity
p12981
(dp12982
g11
(lp12983
sg13
S'com.google.common.hash.BloomFilterStrategies$1'
p12984
sg15
(lp12985
sg17
(lp12986
sg19
(lp12987
sg21
I0
sba(iArchitecture
Entity
p12988
(dp12989
g11
(lp12990
sg13
S'com.google.common.hash.BloomFilterStrategies$2'
p12991
sg15
(lp12992
sg17
(lp12993
sg19
(lp12994
sg21
I0
sba(iArchitecture
Entity
p12995
(dp12996
g11
(lp12997
sg13
S'com.google.common.hash.BloomFilterStrategies$BitArray'
p12998
sg15
(lp12999
sg17
(lp13000
sg19
(lp13001
sg21
I0
sba(iArchitecture
Entity
p13002
(dp13003
g11
(lp13004
sg13
S'com.google.common.hash.ChecksumHashFunction'
p13005
sg15
(lp13006
sg17
(lp13007
sg19
(lp13008
sg21
I0
sba(iArchitecture
Entity
p13009
(dp13010
g11
(lp13011
sg13
S'com.google.common.hash.ChecksumHashFunction$1'
p13012
sg15
(lp13013
sg17
(lp13014
sg19
(lp13015
sg21
I0
sba(iArchitecture
Entity
p13016
(dp13017
g11
(lp13018
sg13
S'com.google.common.hash.ChecksumHashFunction$ChecksumHasher'
p13019
sg15
(lp13020
sg17
(lp13021
sg19
(lp13022
sg21
I0
sba(iArchitecture
Entity
p13023
(dp13024
g11
(lp13025
sg13
S'com.google.common.hash.Crc32cHashFunction'
p13026
sg15
(lp13027
sg17
(lp13028
sg19
(lp13029
sg21
I0
sba(iArchitecture
Entity
p13030
(dp13031
g11
(lp13032
sg13
S'com.google.common.hash.Crc32cHashFunction$Crc32cHasher'
p13033
sg15
(lp13034
sg17
(lp13035
sg19
(lp13036
sg21
I0
sba(iArchitecture
Entity
p13037
(dp13038
g11
(lp13039
sg13
S'com.google.common.hash.Funnel'
p13040
sg15
(lp13041
sg17
(lp13042
sg19
(lp13043
sg21
I0
sba(iArchitecture
Entity
p13044
(dp13045
g11
(lp13046
sg13
S'com.google.common.hash.Funnels'
p13047
sg15
(lp13048
sg17
(lp13049
sg19
(lp13050
sg21
I0
sba(iArchitecture
Entity
p13051
(dp13052
g11
(lp13053
sg13
S'com.google.common.hash.Funnels$ByteArrayFunnel'
p13054
sg15
(lp13055
sg17
(lp13056
sg19
(lp13057
sg21
I0
sba(iArchitecture
Entity
p13058
(dp13059
g11
(lp13060
sg13
S'com.google.common.hash.Funnels$IntegerFunnel'
p13061
sg15
(lp13062
sg17
(lp13063
sg19
(lp13064
sg21
I0
sba(iArchitecture
Entity
p13065
(dp13066
g11
(lp13067
sg13
S'com.google.common.hash.Funnels$LongFunnel'
p13068
sg15
(lp13069
sg17
(lp13070
sg19
(lp13071
sg21
I0
sba(iArchitecture
Entity
p13072
(dp13073
g11
(lp13074
sg13
S'com.google.common.hash.Funnels$SequentialFunnel'
p13075
sg15
(lp13076
sg17
(lp13077
sg19
(lp13078
sg21
I0
sba(iArchitecture
Entity
p13079
(dp13080
g11
(lp13081
sg13
S'com.google.common.hash.Funnels$SinkAsStream'
p13082
sg15
(lp13083
sg17
(lp13084
sg19
(lp13085
sg21
I0
sba(iArchitecture
Entity
p13086
(dp13087
g11
(lp13088
sg13
S'com.google.common.hash.Funnels$StringCharsetFunnel'
p13089
sg15
(lp13090
sg17
(lp13091
sg19
(lp13092
sg21
I0
sba(iArchitecture
Entity
p13093
(dp13094
g11
(lp13095
sg13
S'com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm'
p13096
sg15
(lp13097
sg17
(lp13098
sg19
(lp13099
sg21
I0
sba(iArchitecture
Entity
p13100
(dp13101
g11
(lp13102
sg13
S'com.google.common.hash.Funnels$UnencodedCharsFunnel'
p13103
sg15
(lp13104
sg17
(lp13105
sg19
(lp13106
sg21
I0
sba(iArchitecture
Entity
p13107
(dp13108
g11
(lp13109
sg13
S'com.google.common.hash.HashCode'
p13110
sg15
(lp13111
sg17
(lp13112
sg19
(lp13113
sg21
I0
sba(iArchitecture
Entity
p13114
(dp13115
g11
(lp13116
sg13
S'com.google.common.hash.HashCode$BytesHashCode'
p13117
sg15
(lp13118
sg17
(lp13119
sg19
(lp13120
sg21
I0
sba(iArchitecture
Entity
p13121
(dp13122
g11
(lp13123
sg13
S'com.google.common.hash.HashCode$IntHashCode'
p13124
sg15
(lp13125
sg17
(lp13126
sg19
(lp13127
sg21
I0
sba(iArchitecture
Entity
p13128
(dp13129
g11
(lp13130
sg13
S'com.google.common.hash.HashCode$LongHashCode'
p13131
sg15
(lp13132
sg17
(lp13133
sg19
(lp13134
sg21
I0
sba(iArchitecture
Entity
p13135
(dp13136
g11
(lp13137
sg13
S'com.google.common.hash.HashFunction'
p13138
sg15
(lp13139
sg17
(lp13140
sg19
(lp13141
sg21
I0
sba(iArchitecture
Entity
p13142
(dp13143
g11
(lp13144
sg13
S'com.google.common.hash.Hasher'
p13145
sg15
(lp13146
sg17
(lp13147
sg19
(lp13148
sg21
I0
sba(iArchitecture
Entity
p13149
(dp13150
g11
(lp13151
g940
asg13
S'com.google.common.hash.Hashing'
p13152
sg15
(lp13153
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p13154
asg17
(lp13155
g952
asg19
(lp13156
g956
asg21
I0
sba(iArchitecture
Entity
p13157
(dp13158
g11
(lp13159
g940
asg13
S'com.google.common.hash.Hashing$1'
p13160
sg15
(lp13161
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p13162
asg17
(lp13163
g952
asg19
(lp13164
g956
asg21
I0
sba(iArchitecture
Entity
p13165
(dp13166
g11
(lp13167
g940
asg13
S'com.google.common.hash.Hashing$Adler32Holder'
p13168
sg15
(lp13169
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p13170
asg17
(lp13171
g952
asg19
(lp13172
g956
asg21
I0
sba(iArchitecture
Entity
p13173
(dp13174
g11
(lp13175
g940
asg13
S'com.google.common.hash.Hashing$ChecksumType'
p13176
sg15
(lp13177
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p13178
asg17
(lp13179
g952
asg19
(lp13180
g956
asg21
I0
sba(iArchitecture
Entity
p13181
(dp13182
g11
(lp13183
g940
asg13
S'com.google.common.hash.Hashing$ChecksumType$1'
p13184
sg15
(lp13185
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p13186
asg17
(lp13187
g952
asg19
(lp13188
g956
asg21
I0
sba(iArchitecture
Entity
p13189
(dp13190
g11
(lp13191
g940
asg13
S'com.google.common.hash.Hashing$ChecksumType$2'
p13192
sg15
(lp13193
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p13194
asg17
(lp13195
g952
asg19
(lp13196
g956
asg21
I0
sba(iArchitecture
Entity
p13197
(dp13198
g11
(lp13199
g940
asg13
S'com.google.common.hash.Hashing$ConcatenatedHashFunction'
p13200
sg15
(lp13201
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p13202
asg17
(lp13203
g952
asg19
(lp13204
g956
asg21
I0
sba(iArchitecture
Entity
p13205
(dp13206
g11
(lp13207
g940
asg13
S'com.google.common.hash.Hashing$Crc32Holder'
p13208
sg15
(lp13209
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p13210
asg17
(lp13211
g952
asg19
(lp13212
g956
asg21
I0
sba(iArchitecture
Entity
p13213
(dp13214
g11
(lp13215
g940
asg13
S'com.google.common.hash.Hashing$Crc32cHolder'
p13216
sg15
(lp13217
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p13218
asg17
(lp13219
g952
asg19
(lp13220
g956
asg21
I0
sba(iArchitecture
Entity
p13221
(dp13222
g11
(lp13223
g940
asg13
S'com.google.common.hash.Hashing$LinearCongruentialGenerator'
p13224
sg15
(lp13225
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p13226
asg17
(lp13227
g952
asg19
(lp13228
g956
asg21
I0
sba(iArchitecture
Entity
p13229
(dp13230
g11
(lp13231
g940
asg13
S'com.google.common.hash.Hashing$Md5Holder'
p13232
sg15
(lp13233
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p13234
asg17
(lp13235
g952
asg19
(lp13236
g956
asg21
I0
sba(iArchitecture
Entity
p13237
(dp13238
g11
(lp13239
g940
asg13
S'com.google.common.hash.Hashing$Murmur3_128Holder'
p13240
sg15
(lp13241
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p13242
asg17
(lp13243
g952
asg19
(lp13244
g956
asg21
I0
sba(iArchitecture
Entity
p13245
(dp13246
g11
(lp13247
g940
asg13
S'com.google.common.hash.Hashing$Murmur3_32Holder'
p13248
sg15
(lp13249
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p13250
asg17
(lp13251
g952
asg19
(lp13252
g956
asg21
I0
sba(iArchitecture
Entity
p13253
(dp13254
g11
(lp13255
g940
asg13
S'com.google.common.hash.Hashing$Sha1Holder'
p13256
sg15
(lp13257
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p13258
asg17
(lp13259
g952
asg19
(lp13260
g956
asg21
I0
sba(iArchitecture
Entity
p13261
(dp13262
g11
(lp13263
g940
asg13
S'com.google.common.hash.Hashing$Sha256Holder'
p13264
sg15
(lp13265
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p13266
asg17
(lp13267
g952
asg19
(lp13268
g956
asg21
I0
sba(iArchitecture
Entity
p13269
(dp13270
g11
(lp13271
g940
asg13
S'com.google.common.hash.Hashing$Sha512Holder'
p13272
sg15
(lp13273
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p13274
asg17
(lp13275
g952
asg19
(lp13276
g956
asg21
I0
sba(iArchitecture
Entity
p13277
(dp13278
g11
(lp13279
g940
asg13
S'com.google.common.hash.Hashing$SipHash24Holder'
p13280
sg15
(lp13281
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p13282
asg17
(lp13283
g952
asg19
(lp13284
g956
asg21
I0
sba(iArchitecture
Entity
p13285
(dp13286
g11
(lp13287
sg13
S'com.google.common.hash.MessageDigestHashFunction'
p13288
sg15
(lp13289
sg17
(lp13290
sg19
(lp13291
sg21
I0
sba(iArchitecture
Entity
p13292
(dp13293
g11
(lp13294
sg13
S'com.google.common.hash.MessageDigestHashFunction$1'
p13295
sg15
(lp13296
sg17
(lp13297
sg19
(lp13298
sg21
I0
sba(iArchitecture
Entity
p13299
(dp13300
g11
(lp13301
sg13
S'com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher'
p13302
sg15
(lp13303
sg17
(lp13304
sg19
(lp13305
sg21
I0
sba(iArchitecture
Entity
p13306
(dp13307
g11
(lp13308
sg13
S'com.google.common.hash.MessageDigestHashFunction$SerializedForm'
p13309
sg15
(lp13310
sg17
(lp13311
sg19
(lp13312
sg21
I0
sba(iArchitecture
Entity
p13313
(dp13314
g11
(lp13315
sg13
S'com.google.common.hash.Murmur3_128HashFunction'
p13316
sg15
(lp13317
sg17
(lp13318
sg19
(lp13319
sg21
I0
sba(iArchitecture
Entity
p13320
(dp13321
g11
(lp13322
sg13
S'com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher'
p13323
sg15
(lp13324
sg17
(lp13325
sg19
(lp13326
sg21
I0
sba(iArchitecture
Entity
p13327
(dp13328
g11
(lp13329
sg13
S'com.google.common.hash.Murmur3_32HashFunction'
p13330
sg15
(lp13331
sg17
(lp13332
sg19
(lp13333
sg21
I0
sba(iArchitecture
Entity
p13334
(dp13335
g11
(lp13336
sg13
S'com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher'
p13337
sg15
(lp13338
sg17
(lp13339
sg19
(lp13340
sg21
I0
sba(iArchitecture
Entity
p13341
(dp13342
g11
(lp13343
sg13
S'com.google.common.hash.PrimitiveSink'
p13344
sg15
(lp13345
sg17
(lp13346
sg19
(lp13347
sg21
I0
sba(iArchitecture
Entity
p13348
(dp13349
g11
(lp13350
sg13
S'com.google.common.hash.SipHashFunction'
p13351
sg15
(lp13352
sg17
(lp13353
sg19
(lp13354
sg21
I0
sba(iArchitecture
Entity
p13355
(dp13356
g11
(lp13357
sg13
S'com.google.common.hash.SipHashFunction$SipHasher'
p13358
sg15
(lp13359
sg17
(lp13360
sg19
(lp13361
sg21
I0
sbasg1055
(lp13362
g12886
ag12893
ag12900
ag12907
ag12914
ag12921
ag12928
ag12935
ag12942
ag12949
ag12956
ag12963
ag12970
ag12977
ag12984
ag12991
ag12998
ag13005
ag13012
ag13019
ag13026
ag13033
ag13040
ag13047
ag13054
ag13061
ag13068
ag13075
ag13082
ag13089
ag13096
ag13103
ag13110
ag13117
ag13124
ag13131
ag13138
ag13145
ag13152
ag13160
ag13168
ag13176
ag13184
ag13192
ag13200
ag13208
ag13216
ag13224
ag13232
ag13240
ag13248
ag13256
ag13264
ag13272
ag13280
ag13288
ag13295
ag13302
ag13309
ag13316
ag13323
ag13330
ag13337
ag13344
ag13351
ag13358
asg21
I0
sg1057
S'com.google.common.hash.ss'
p13363
sba(iArchitecture
Cluster
p13364
(dp13365
g7
(lp13366
(iArchitecture
Entity
p13367
(dp13368
g11
(lp13369
sg13
S'com.google.common.io.AppendableWriter'
p13370
sg15
(lp13371
sg17
(lp13372
sg19
(lp13373
sg21
I0
sba(iArchitecture
Entity
p13374
(dp13375
g11
(lp13376
V1947
p13377
ag13377
ag13377
ag13377
ag13377
asg13
S'com.google.common.io.BaseEncoding'
p13378
sg15
(lp13379
VWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13380
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13381
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13382
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13383
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13384
asg17
(lp13385
(lp13386
I0
aag13386
ag13386
ag13386
ag13386
asg19
(lp13387
VImprove invalid character exceptions from BaseEncoding
p13388
ag13388
ag13388
ag13388
ag13388
asg21
I0
sba(iArchitecture
Entity
p13389
(dp13390
g11
(lp13391
g13377
ag13377
ag13377
ag13377
ag13377
asg13
S'com.google.common.io.BaseEncoding$1'
p13392
sg15
(lp13393
VWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13394
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13395
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13396
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13397
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13398
asg17
(lp13399
g13386
ag13386
ag13386
ag13386
ag13386
asg19
(lp13400
g13388
ag13388
ag13388
ag13388
ag13388
asg21
I0
sba(iArchitecture
Entity
p13401
(dp13402
g11
(lp13403
g13377
ag13377
ag13377
ag13377
ag13377
asg13
S'com.google.common.io.BaseEncoding$2'
p13404
sg15
(lp13405
VWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13406
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13407
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13408
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13409
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13410
asg17
(lp13411
g13386
ag13386
ag13386
ag13386
ag13386
asg19
(lp13412
g13388
ag13388
ag13388
ag13388
ag13388
asg21
I0
sba(iArchitecture
Entity
p13413
(dp13414
g11
(lp13415
g13377
ag13377
ag13377
ag13377
ag13377
asg13
S'com.google.common.io.BaseEncoding$3'
p13416
sg15
(lp13417
VWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13418
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13419
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13420
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13421
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13422
asg17
(lp13423
g13386
ag13386
ag13386
ag13386
ag13386
asg19
(lp13424
g13388
ag13388
ag13388
ag13388
ag13388
asg21
I0
sba(iArchitecture
Entity
p13425
(dp13426
g11
(lp13427
g13377
ag13377
ag13377
ag13377
ag13377
asg13
S'com.google.common.io.BaseEncoding$4'
p13428
sg15
(lp13429
VWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13430
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13431
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13432
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13433
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13434
asg17
(lp13435
g13386
ag13386
ag13386
ag13386
ag13386
asg19
(lp13436
g13388
ag13388
ag13388
ag13388
ag13388
asg21
I0
sba(iArchitecture
Entity
p13437
(dp13438
g11
(lp13439
g13377
ag13377
ag13377
ag13377
ag13377
asg13
S'com.google.common.io.BaseEncoding$Alphabet'
p13440
sg15
(lp13441
VWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13442
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13443
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13444
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13445
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13446
asg17
(lp13447
g13386
ag13386
ag13386
ag13386
ag13386
asg19
(lp13448
g13388
ag13388
ag13388
ag13388
ag13388
asg21
I0
sba(iArchitecture
Entity
p13449
(dp13450
g11
(lp13451
g13377
ag13377
ag13377
ag13377
ag13377
asg13
S'com.google.common.io.BaseEncoding$DecodingException'
p13452
sg15
(lp13453
VWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13454
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13455
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13456
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13457
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13458
asg17
(lp13459
g13386
ag13386
ag13386
ag13386
ag13386
asg19
(lp13460
g13388
ag13388
ag13388
ag13388
ag13388
asg21
I0
sba(iArchitecture
Entity
p13461
(dp13462
g11
(lp13463
g13377
ag13377
ag13377
ag13377
ag13377
asg13
S'com.google.common.io.BaseEncoding$SeparatedBaseEncoding'
p13464
sg15
(lp13465
VWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13466
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13467
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13468
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13469
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13470
asg17
(lp13471
g13386
ag13386
ag13386
ag13386
ag13386
asg19
(lp13472
g13388
ag13388
ag13388
ag13388
ag13388
asg21
I0
sba(iArchitecture
Entity
p13473
(dp13474
g11
(lp13475
g13377
ag13377
ag13377
ag13377
ag13377
asg13
S'com.google.common.io.BaseEncoding$StandardBaseEncoding'
p13476
sg15
(lp13477
VWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13478
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13479
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13480
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13481
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13482
asg17
(lp13483
g13386
ag13386
ag13386
ag13386
ag13386
asg19
(lp13484
g13388
ag13388
ag13388
ag13388
ag13388
asg21
I0
sba(iArchitecture
Entity
p13485
(dp13486
g11
(lp13487
g13377
ag13377
ag13377
ag13377
ag13377
asg13
S'com.google.common.io.BaseEncoding$StandardBaseEncoding$1'
p13488
sg15
(lp13489
VWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13490
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13491
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13492
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13493
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13494
asg17
(lp13495
g13386
ag13386
ag13386
ag13386
ag13386
asg19
(lp13496
g13388
ag13388
ag13388
ag13388
ag13388
asg21
I0
sba(iArchitecture
Entity
p13497
(dp13498
g11
(lp13499
g13377
ag13377
ag13377
ag13377
ag13377
asg13
S'com.google.common.io.BaseEncoding$StandardBaseEncoding$2'
p13500
sg15
(lp13501
VWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13502
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13503
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13504
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13505
aVWhen decoding Base64/32/16 data an exception is thrown if an invalid character is found:\u000a\u000aBaseEncoding.java:501:\u000a\u000a``` java\u000a    int decode(char ch) throws IOException {\u000a      if (ch > Ascii.MAX || decodabet[ch] == -1) {\u000a        throw new DecodingException("Unrecognized character: " + ch);\u000a      }\u000a      return decodabet[ch];\u000a    }\u000a```\u000a\u000aThe exception message prints out the character itself, which isn't terribly helpful when that is a non-printable character.  Recommend that the hex value of the character be printed instead.\u000a
p13506
asg17
(lp13507
g13386
ag13386
ag13386
ag13386
ag13386
asg19
(lp13508
g13388
ag13388
ag13388
ag13388
ag13388
asg21
I0
sba(iArchitecture
Entity
p13509
(dp13510
g11
(lp13511
sg13
S'com.google.common.io.ByteArrayDataInput'
p13512
sg15
(lp13513
sg17
(lp13514
sg19
(lp13515
sg21
I0
sba(iArchitecture
Entity
p13516
(dp13517
g11
(lp13518
sg13
S'com.google.common.io.ByteArrayDataOutput'
p13519
sg15
(lp13520
sg17
(lp13521
sg19
(lp13522
sg21
I0
sba(iArchitecture
Entity
p13523
(dp13524
g11
(lp13525
sg13
S'com.google.common.io.ByteProcessor'
p13526
sg15
(lp13527
sg17
(lp13528
sg19
(lp13529
sg21
I0
sba(iArchitecture
Entity
p13530
(dp13531
g11
(lp13532
sg13
S'com.google.common.io.ByteSink'
p13533
sg15
(lp13534
sg17
(lp13535
sg19
(lp13536
sg21
I0
sba(iArchitecture
Entity
p13537
(dp13538
g11
(lp13539
sg13
S'com.google.common.io.ByteSink$1'
p13540
sg15
(lp13541
sg17
(lp13542
sg19
(lp13543
sg21
I0
sba(iArchitecture
Entity
p13544
(dp13545
g11
(lp13546
sg13
S'com.google.common.io.ByteSink$AsCharSink'
p13547
sg15
(lp13548
sg17
(lp13549
sg19
(lp13550
sg21
I0
sba(iArchitecture
Entity
p13551
(dp13552
g11
(lp13553
V2127
p13554
ag13554
asg13
S'com.google.common.io.ByteSource'
p13555
sg15
(lp13556
VAn algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \u000aThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\u000a\u000aI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\u000a
p13557
aVAn algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \u000aThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\u000a\u000aI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\u000a
p13558
asg17
(lp13559
(lp13560
I1
aag13560
asg19
(lp13561
V19rc1 regression in sliced bytesource: offset + length may overflow for large length values
p13562
ag13562
asg21
I0
sba(iArchitecture
Entity
p13563
(dp13564
g11
(lp13565
g13554
ag13554
asg13
S'com.google.common.io.ByteSource$1'
p13566
sg15
(lp13567
VAn algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \u000aThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\u000a\u000aI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\u000a
p13568
aVAn algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \u000aThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\u000a\u000aI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\u000a
p13569
asg17
(lp13570
g13560
ag13560
asg19
(lp13571
g13562
ag13562
asg21
I0
sba(iArchitecture
Entity
p13572
(dp13573
g11
(lp13574
g13554
ag13554
asg13
S'com.google.common.io.ByteSource$AsCharSource'
p13575
sg15
(lp13576
VAn algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \u000aThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\u000a\u000aI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\u000a
p13577
aVAn algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \u000aThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\u000a\u000aI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\u000a
p13578
asg17
(lp13579
g13560
ag13560
asg19
(lp13580
g13562
ag13562
asg21
I0
sba(iArchitecture
Entity
p13581
(dp13582
g11
(lp13583
g13554
ag13554
asg13
S'com.google.common.io.ByteSource$ByteArrayByteSource'
p13584
sg15
(lp13585
VAn algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \u000aThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\u000a\u000aI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\u000a
p13586
aVAn algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \u000aThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\u000a\u000aI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\u000a
p13587
asg17
(lp13588
g13560
ag13560
asg19
(lp13589
g13562
ag13562
asg21
I0
sba(iArchitecture
Entity
p13590
(dp13591
g11
(lp13592
g13554
ag13554
asg13
S'com.google.common.io.ByteSource$ConcatenatedByteSource'
p13593
sg15
(lp13594
VAn algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \u000aThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\u000a\u000aI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\u000a
p13595
aVAn algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \u000aThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\u000a\u000aI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\u000a
p13596
asg17
(lp13597
g13560
ag13560
asg19
(lp13598
g13562
ag13562
asg21
I0
sba(iArchitecture
Entity
p13599
(dp13600
g11
(lp13601
g13554
ag13554
asg13
S'com.google.common.io.ByteSource$EmptyByteSource'
p13602
sg15
(lp13603
VAn algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \u000aThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\u000a\u000aI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\u000a
p13604
aVAn algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \u000aThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\u000a\u000aI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\u000a
p13605
asg17
(lp13606
g13560
ag13560
asg19
(lp13607
g13562
ag13562
asg21
I0
sba(iArchitecture
Entity
p13608
(dp13609
g11
(lp13610
g13554
ag13554
asg13
S'com.google.common.io.ByteSource$SlicedByteSource'
p13611
sg15
(lp13612
VAn algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \u000aThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\u000a\u000aI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\u000a
p13613
aVAn algorithm similar to `java.lang.Math.addExact()` should be used to compute `offset + length`  and fallback to `Integer.MAX_VALUE` or `Long.MAX_VALUE` in case of overflow. \u000aThere is 3 occurrences of this possibly overflowing addition in `ByteSource.java`.\u000a\u000aI found this bug because I regularly slice bytesources with a length equals to Long.MAX_VALUE.\u000a
p13614
asg17
(lp13615
g13560
ag13560
asg19
(lp13616
g13562
ag13562
asg21
I0
sba(iArchitecture
Entity
p13617
(dp13618
g11
(lp13619
sg13
S'com.google.common.io.ByteStreams'
p13620
sg15
(lp13621
sg17
(lp13622
sg19
(lp13623
sg21
I0
sba(iArchitecture
Entity
p13624
(dp13625
g11
(lp13626
sg13
S'com.google.common.io.ByteStreams$1'
p13627
sg15
(lp13628
sg17
(lp13629
sg19
(lp13630
sg21
I0
sba(iArchitecture
Entity
p13631
(dp13632
g11
(lp13633
sg13
S'com.google.common.io.ByteStreams$ByteArrayDataInputStream'
p13634
sg15
(lp13635
sg17
(lp13636
sg19
(lp13637
sg21
I0
sba(iArchitecture
Entity
p13638
(dp13639
g11
(lp13640
sg13
S'com.google.common.io.ByteStreams$ByteArrayDataOutputStream'
p13641
sg15
(lp13642
sg17
(lp13643
sg19
(lp13644
sg21
I0
sba(iArchitecture
Entity
p13645
(dp13646
g11
(lp13647
sg13
S'com.google.common.io.ByteStreams$FastByteArrayOutputStream'
p13648
sg15
(lp13649
sg17
(lp13650
sg19
(lp13651
sg21
I0
sba(iArchitecture
Entity
p13652
(dp13653
g11
(lp13654
sg13
S'com.google.common.io.ByteStreams$LimitedInputStream'
p13655
sg15
(lp13656
sg17
(lp13657
sg19
(lp13658
sg21
I0
sba(iArchitecture
Entity
p13659
(dp13660
g11
(lp13661
sg13
S'com.google.common.io.CharSequenceReader'
p13662
sg15
(lp13663
sg17
(lp13664
sg19
(lp13665
sg21
I0
sba(iArchitecture
Entity
p13666
(dp13667
g11
(lp13668
sg13
S'com.google.common.io.CharSink'
p13669
sg15
(lp13670
sg17
(lp13671
sg19
(lp13672
sg21
I0
sba(iArchitecture
Entity
p13673
(dp13674
g11
(lp13675
sg13
S'com.google.common.io.CharSource'
p13676
sg15
(lp13677
sg17
(lp13678
sg19
(lp13679
sg21
I0
sba(iArchitecture
Entity
p13680
(dp13681
g11
(lp13682
sg13
S'com.google.common.io.CharSource$CharSequenceCharSource'
p13683
sg15
(lp13684
sg17
(lp13685
sg19
(lp13686
sg21
I0
sba(iArchitecture
Entity
p13687
(dp13688
g11
(lp13689
sg13
S'com.google.common.io.CharSource$CharSequenceCharSource$1'
p13690
sg15
(lp13691
sg17
(lp13692
sg19
(lp13693
sg21
I0
sba(iArchitecture
Entity
p13694
(dp13695
g11
(lp13696
sg13
S'com.google.common.io.CharSource$CharSequenceCharSource$1$1'
p13697
sg15
(lp13698
sg17
(lp13699
sg19
(lp13700
sg21
I0
sba(iArchitecture
Entity
p13701
(dp13702
g11
(lp13703
sg13
S'com.google.common.io.CharSource$ConcatenatedCharSource'
p13704
sg15
(lp13705
sg17
(lp13706
sg19
(lp13707
sg21
I0
sba(iArchitecture
Entity
p13708
(dp13709
g11
(lp13710
sg13
S'com.google.common.io.CharSource$EmptyCharSource'
p13711
sg15
(lp13712
sg17
(lp13713
sg19
(lp13714
sg21
I0
sba(iArchitecture
Entity
p13715
(dp13716
g11
(lp13717
sg13
S'com.google.common.io.CharStreams'
p13718
sg15
(lp13719
sg17
(lp13720
sg19
(lp13721
sg21
I0
sba(iArchitecture
Entity
p13722
(dp13723
g11
(lp13724
sg13
S'com.google.common.io.CharStreams$1'
p13725
sg15
(lp13726
sg17
(lp13727
sg19
(lp13728
sg21
I0
sba(iArchitecture
Entity
p13729
(dp13730
g11
(lp13731
sg13
S'com.google.common.io.CharStreams$NullWriter'
p13732
sg15
(lp13733
sg17
(lp13734
sg19
(lp13735
sg21
I0
sba(iArchitecture
Entity
p13736
(dp13737
g11
(lp13738
sg13
S'com.google.common.io.Closeables'
p13739
sg15
(lp13740
sg17
(lp13741
sg19
(lp13742
sg21
I0
sba(iArchitecture
Entity
p13743
(dp13744
g11
(lp13745
sg13
S'com.google.common.io.Closer'
p13746
sg15
(lp13747
sg17
(lp13748
sg19
(lp13749
sg21
I0
sba(iArchitecture
Entity
p13750
(dp13751
g11
(lp13752
sg13
S'com.google.common.io.Closer$LoggingSuppressor'
p13753
sg15
(lp13754
sg17
(lp13755
sg19
(lp13756
sg21
I0
sba(iArchitecture
Entity
p13757
(dp13758
g11
(lp13759
sg13
S'com.google.common.io.Closer$SuppressingSuppressor'
p13760
sg15
(lp13761
sg17
(lp13762
sg19
(lp13763
sg21
I0
sba(iArchitecture
Entity
p13764
(dp13765
g11
(lp13766
sg13
S'com.google.common.io.Closer$Suppressor'
p13767
sg15
(lp13768
sg17
(lp13769
sg19
(lp13770
sg21
I0
sba(iArchitecture
Entity
p13771
(dp13772
g11
(lp13773
sg13
S'com.google.common.io.FileBackedOutputStream'
p13774
sg15
(lp13775
sg17
(lp13776
sg19
(lp13777
sg21
I0
sba(iArchitecture
Entity
p13778
(dp13779
g11
(lp13780
sg13
S'com.google.common.io.FileBackedOutputStream$1'
p13781
sg15
(lp13782
sg17
(lp13783
sg19
(lp13784
sg21
I0
sba(iArchitecture
Entity
p13785
(dp13786
g11
(lp13787
sg13
S'com.google.common.io.FileBackedOutputStream$2'
p13788
sg15
(lp13789
sg17
(lp13790
sg19
(lp13791
sg21
I0
sba(iArchitecture
Entity
p13792
(dp13793
g11
(lp13794
sg13
S'com.google.common.io.FileBackedOutputStream$MemoryOutput'
p13795
sg15
(lp13796
sg17
(lp13797
sg19
(lp13798
sg21
I0
sba(iArchitecture
Entity
p13799
(dp13800
g11
(lp13801
sg13
S'com.google.common.io.FileWriteMode'
p13802
sg15
(lp13803
sg17
(lp13804
sg19
(lp13805
sg21
I0
sba(iArchitecture
Entity
p13806
(dp13807
g11
(lp13808
sg13
S'com.google.common.io.Files'
p13809
sg15
(lp13810
sg17
(lp13811
sg19
(lp13812
sg21
I0
sba(iArchitecture
Entity
p13813
(dp13814
g11
(lp13815
sg13
S'com.google.common.io.Files$1'
p13816
sg15
(lp13817
sg17
(lp13818
sg19
(lp13819
sg21
I0
sba(iArchitecture
Entity
p13820
(dp13821
g11
(lp13822
sg13
S'com.google.common.io.Files$2'
p13823
sg15
(lp13824
sg17
(lp13825
sg19
(lp13826
sg21
I0
sba(iArchitecture
Entity
p13827
(dp13828
g11
(lp13829
sg13
S'com.google.common.io.Files$FileByteSink'
p13830
sg15
(lp13831
sg17
(lp13832
sg19
(lp13833
sg21
I0
sba(iArchitecture
Entity
p13834
(dp13835
g11
(lp13836
sg13
S'com.google.common.io.Files$FileByteSource'
p13837
sg15
(lp13838
sg17
(lp13839
sg19
(lp13840
sg21
I0
sba(iArchitecture
Entity
p13841
(dp13842
g11
(lp13843
sg13
S'com.google.common.io.Files$FilePredicate'
p13844
sg15
(lp13845
sg17
(lp13846
sg19
(lp13847
sg21
I0
sba(iArchitecture
Entity
p13848
(dp13849
g11
(lp13850
sg13
S'com.google.common.io.Files$FilePredicate$1'
p13851
sg15
(lp13852
sg17
(lp13853
sg19
(lp13854
sg21
I0
sba(iArchitecture
Entity
p13855
(dp13856
g11
(lp13857
sg13
S'com.google.common.io.Files$FilePredicate$2'
p13858
sg15
(lp13859
sg17
(lp13860
sg19
(lp13861
sg21
I0
sba(iArchitecture
Entity
p13862
(dp13863
g11
(lp13864
sg13
S'com.google.common.io.GwtWorkarounds'
p13865
sg15
(lp13866
sg17
(lp13867
sg19
(lp13868
sg21
I0
sba(iArchitecture
Entity
p13869
(dp13870
g11
(lp13871
sg13
S'com.google.common.io.GwtWorkarounds$1'
p13872
sg15
(lp13873
sg17
(lp13874
sg19
(lp13875
sg21
I0
sba(iArchitecture
Entity
p13876
(dp13877
g11
(lp13878
sg13
S'com.google.common.io.GwtWorkarounds$2'
p13879
sg15
(lp13880
sg17
(lp13881
sg19
(lp13882
sg21
I0
sba(iArchitecture
Entity
p13883
(dp13884
g11
(lp13885
sg13
S'com.google.common.io.GwtWorkarounds$3'
p13886
sg15
(lp13887
sg17
(lp13888
sg19
(lp13889
sg21
I0
sba(iArchitecture
Entity
p13890
(dp13891
g11
(lp13892
sg13
S'com.google.common.io.GwtWorkarounds$4'
p13893
sg15
(lp13894
sg17
(lp13895
sg19
(lp13896
sg21
I0
sba(iArchitecture
Entity
p13897
(dp13898
g11
(lp13899
sg13
S'com.google.common.io.GwtWorkarounds$5'
p13900
sg15
(lp13901
sg17
(lp13902
sg19
(lp13903
sg21
I0
sba(iArchitecture
Entity
p13904
(dp13905
g11
(lp13906
sg13
S'com.google.common.io.GwtWorkarounds$6'
p13907
sg15
(lp13908
sg17
(lp13909
sg19
(lp13910
sg21
I0
sba(iArchitecture
Entity
p13911
(dp13912
g11
(lp13913
sg13
S'com.google.common.io.GwtWorkarounds$ByteInput'
p13914
sg15
(lp13915
sg17
(lp13916
sg19
(lp13917
sg21
I0
sba(iArchitecture
Entity
p13918
(dp13919
g11
(lp13920
sg13
S'com.google.common.io.GwtWorkarounds$ByteOutput'
p13921
sg15
(lp13922
sg17
(lp13923
sg19
(lp13924
sg21
I0
sba(iArchitecture
Entity
p13925
(dp13926
g11
(lp13927
sg13
S'com.google.common.io.GwtWorkarounds$CharInput'
p13928
sg15
(lp13929
sg17
(lp13930
sg19
(lp13931
sg21
I0
sba(iArchitecture
Entity
p13932
(dp13933
g11
(lp13934
sg13
S'com.google.common.io.GwtWorkarounds$CharOutput'
p13935
sg15
(lp13936
sg17
(lp13937
sg19
(lp13938
sg21
I0
sba(iArchitecture
Entity
p13939
(dp13940
g11
(lp13941
sg13
S'com.google.common.io.LineBuffer'
p13942
sg15
(lp13943
sg17
(lp13944
sg19
(lp13945
sg21
I0
sba(iArchitecture
Entity
p13946
(dp13947
g11
(lp13948
sg13
S'com.google.common.io.LineProcessor'
p13949
sg15
(lp13950
sg17
(lp13951
sg19
(lp13952
sg21
I0
sba(iArchitecture
Entity
p13953
(dp13954
g11
(lp13955
sg13
S'com.google.common.io.LineReader'
p13956
sg15
(lp13957
sg17
(lp13958
sg19
(lp13959
sg21
I0
sba(iArchitecture
Entity
p13960
(dp13961
g11
(lp13962
sg13
S'com.google.common.io.LineReader$1'
p13963
sg15
(lp13964
sg17
(lp13965
sg19
(lp13966
sg21
I0
sba(iArchitecture
Entity
p13967
(dp13968
g11
(lp13969
sg13
S'com.google.common.io.MultiInputStream'
p13970
sg15
(lp13971
sg17
(lp13972
sg19
(lp13973
sg21
I0
sba(iArchitecture
Entity
p13974
(dp13975
g11
(lp13976
sg13
S'com.google.common.io.MultiReader'
p13977
sg15
(lp13978
sg17
(lp13979
sg19
(lp13980
sg21
I0
sba(iArchitecture
Entity
p13981
(dp13982
g11
(lp13983
sg13
S'com.google.common.io.Resources'
p13984
sg15
(lp13985
sg17
(lp13986
sg19
(lp13987
sg21
I0
sba(iArchitecture
Entity
p13988
(dp13989
g11
(lp13990
sg13
S'com.google.common.io.Resources$1'
p13991
sg15
(lp13992
sg17
(lp13993
sg19
(lp13994
sg21
I0
sba(iArchitecture
Entity
p13995
(dp13996
g11
(lp13997
sg13
S'com.google.common.io.Resources$UrlByteSource'
p13998
sg15
(lp13999
sg17
(lp14000
sg19
(lp14001
sg21
I0
sbasg1055
(lp14002
g13370
ag13378
ag13392
ag13404
ag13416
ag13428
ag13440
ag13452
ag13464
ag13476
ag13488
ag13500
ag13512
ag13519
ag13526
ag13533
ag13540
ag13547
ag13555
ag13566
ag13575
ag13584
ag13593
ag13602
ag13611
ag13620
ag13627
ag13634
ag13641
ag13648
ag13655
ag13662
ag13669
ag13676
ag13683
ag13690
ag13697
ag13704
ag13711
ag13718
ag13725
ag13732
ag13739
ag13746
ag13753
ag13760
ag13767
ag13774
ag13781
ag13788
ag13795
ag13802
ag13809
ag13816
ag13823
ag13830
ag13837
ag13844
ag13851
ag13858
ag13865
ag13872
ag13879
ag13886
ag13893
ag13900
ag13907
ag13914
ag13921
ag13928
ag13935
ag13942
ag13949
ag13956
ag13963
ag13970
ag13977
ag13984
ag13991
ag13998
asg21
I0
sg1057
S'com.google.common.io.ss'
p14003
sba(iArchitecture
Cluster
p14004
(dp14005
g7
(lp14006
(iArchitecture
Entity
p14007
(dp14008
g11
(lp14009
sg13
S'com.google.common.math.BigIntegerMath'
p14010
sg15
(lp14011
sg17
(lp14012
sg19
(lp14013
sg21
I0
sba(iArchitecture
Entity
p14014
(dp14015
g11
(lp14016
sg13
S'com.google.common.math.BigIntegerMath$1'
p14017
sg15
(lp14018
sg17
(lp14019
sg19
(lp14020
sg21
I0
sba(iArchitecture
Entity
p14021
(dp14022
g11
(lp14023
sg13
S'com.google.common.math.DoubleMath'
p14024
sg15
(lp14025
sg17
(lp14026
sg19
(lp14027
sg21
I0
sba(iArchitecture
Entity
p14028
(dp14029
g11
(lp14030
sg13
S'com.google.common.math.DoubleMath$1'
p14031
sg15
(lp14032
sg17
(lp14033
sg19
(lp14034
sg21
I0
sba(iArchitecture
Entity
p14035
(dp14036
g11
(lp14037
sg13
S'com.google.common.math.DoubleMath$MeanAccumulator'
p14038
sg15
(lp14039
sg17
(lp14040
sg19
(lp14041
sg21
I0
sba(iArchitecture
Entity
p14042
(dp14043
g11
(lp14044
sg13
S'com.google.common.math.DoubleUtils'
p14045
sg15
(lp14046
sg17
(lp14047
sg19
(lp14048
sg21
I0
sba(iArchitecture
Entity
p14049
(dp14050
g11
(lp14051
sg13
S'com.google.common.math.IntMath'
p14052
sg15
(lp14053
sg17
(lp14054
sg19
(lp14055
sg21
I0
sba(iArchitecture
Entity
p14056
(dp14057
g11
(lp14058
sg13
S'com.google.common.math.IntMath$1'
p14059
sg15
(lp14060
sg17
(lp14061
sg19
(lp14062
sg21
I0
sba(iArchitecture
Entity
p14063
(dp14064
g11
(lp14065
sg13
S'com.google.common.math.LongMath'
p14066
sg15
(lp14067
sg17
(lp14068
sg19
(lp14069
sg21
I0
sba(iArchitecture
Entity
p14070
(dp14071
g11
(lp14072
sg13
S'com.google.common.math.LongMath$1'
p14073
sg15
(lp14074
sg17
(lp14075
sg19
(lp14076
sg21
I0
sba(iArchitecture
Entity
p14077
(dp14078
g11
(lp14079
sg13
S'com.google.common.math.MathPreconditions'
p14080
sg15
(lp14081
sg17
(lp14082
sg19
(lp14083
sg21
I0
sbasg1055
(lp14084
g14010
ag14017
ag14024
ag14031
ag14038
ag14045
ag14052
ag14059
ag14066
ag14073
ag14080
asg21
I0
sg1057
S'com.google.common.math.ss'
p14085
sba(iArchitecture
Cluster
p14086
(dp14087
g7
(lp14088
(iArchitecture
Entity
p14089
(dp14090
g11
(lp14091
sg13
S'com.google.common.base.Strings'
p14092
sg15
(lp14093
sg17
(lp14094
sg19
(lp14095
sg21
I0
sba(iArchitecture
Entity
p14096
(dp14097
g11
(lp14098
sg13
S'com.google.common.net.HostAndPort'
p14099
sg15
(lp14100
sg17
(lp14101
sg19
(lp14102
sg21
I0
sba(iArchitecture
Entity
p14103
(dp14104
g11
(lp14105
sg13
S'com.google.common.net.HostSpecifier'
p14106
sg15
(lp14107
sg17
(lp14108
sg19
(lp14109
sg21
I0
sba(iArchitecture
Entity
p14110
(dp14111
g11
(lp14112
g940
asg13
S'com.google.common.net.InetAddresses'
p14113
sg15
(lp14114
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p14115
asg17
(lp14116
g952
asg19
(lp14117
g956
asg21
I0
sba(iArchitecture
Entity
p14118
(dp14119
g11
(lp14120
g940
asg13
S'com.google.common.net.InetAddresses$TeredoInfo'
p14121
sg15
(lp14122
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p14123
asg17
(lp14124
g952
asg19
(lp14125
g956
asg21
I0
sba(iArchitecture
Entity
p14126
(dp14127
g11
(lp14128
sg13
S'com.google.common.net.InternetDomainName'
p14129
sg15
(lp14130
sg17
(lp14131
sg19
(lp14132
sg21
I0
sba(iArchitecture
Entity
p14133
(dp14134
g11
(lp14135
sg13
S'com.google.common.net.MediaType'
p14136
sg15
(lp14137
sg17
(lp14138
sg19
(lp14139
sg21
I0
sba(iArchitecture
Entity
p14140
(dp14141
g11
(lp14142
sg13
S'com.google.common.net.MediaType$1'
p14143
sg15
(lp14144
sg17
(lp14145
sg19
(lp14146
sg21
I0
sba(iArchitecture
Entity
p14147
(dp14148
g11
(lp14149
sg13
S'com.google.common.net.MediaType$2'
p14150
sg15
(lp14151
sg17
(lp14152
sg19
(lp14153
sg21
I0
sba(iArchitecture
Entity
p14154
(dp14155
g11
(lp14156
sg13
S'com.google.common.net.MediaType$Tokenizer'
p14157
sg15
(lp14158
sg17
(lp14159
sg19
(lp14160
sg21
I0
sba(iArchitecture
Entity
p14161
(dp14162
g11
(lp14163
sg13
S'com.google.common.net.PercentEscaper'
p14164
sg15
(lp14165
sg17
(lp14166
sg19
(lp14167
sg21
I0
sba(iArchitecture
Entity
p14168
(dp14169
g11
(lp14170
sg13
S'com.google.common.net.UrlEscapers'
p14171
sg15
(lp14172
sg17
(lp14173
sg19
(lp14174
sg21
I0
sba(iArchitecture
Entity
p14175
(dp14176
g11
(lp14177
sg13
S'com.google.thirdparty.publicsuffix.PublicSuffixPatterns'
p14178
sg15
(lp14179
sg17
(lp14180
sg19
(lp14181
sg21
I0
sba(iArchitecture
Entity
p14182
(dp14183
g11
(lp14184
sg13
S'com.google.thirdparty.publicsuffix.PublicSuffixType'
p14185
sg15
(lp14186
sg17
(lp14187
sg19
(lp14188
sg21
I0
sba(iArchitecture
Entity
p14189
(dp14190
g11
(lp14191
sg13
S'com.google.thirdparty.publicsuffix.TrieParser'
p14192
sg15
(lp14193
sg17
(lp14194
sg19
(lp14195
sg21
I0
sbasg1055
(lp14196
g14092
ag14099
ag14106
ag14113
ag14121
ag14129
ag14136
ag14143
ag14150
ag14157
ag14164
ag14171
ag14178
ag14185
ag14192
asg21
I0
sg1057
S'com.google.common.net.ss'
p14197
sba(iArchitecture
Cluster
p14198
(dp14199
g7
(lp14200
(iArchitecture
Entity
p14201
(dp14202
g11
(lp14203
sg13
S'com.google.common.io.LittleEndianDataInputStream'
p14204
sg15
(lp14205
sg17
(lp14206
sg19
(lp14207
sg21
I0
sba(iArchitecture
Entity
p14208
(dp14209
g11
(lp14210
sg13
S'com.google.common.io.LittleEndianDataOutputStream'
p14211
sg15
(lp14212
sg17
(lp14213
sg19
(lp14214
sg21
I0
sba(iArchitecture
Entity
p14215
(dp14216
g11
(lp14217
sg13
S'com.google.common.primitives.Booleans'
p14218
sg15
(lp14219
sg17
(lp14220
sg19
(lp14221
sg21
I0
sba(iArchitecture
Entity
p14222
(dp14223
g11
(lp14224
sg13
S'com.google.common.primitives.Booleans$BooleanArrayAsList'
p14225
sg15
(lp14226
sg17
(lp14227
sg19
(lp14228
sg21
I0
sba(iArchitecture
Entity
p14229
(dp14230
g11
(lp14231
sg13
S'com.google.common.primitives.Booleans$LexicographicalComparator'
p14232
sg15
(lp14233
sg17
(lp14234
sg19
(lp14235
sg21
I0
sba(iArchitecture
Entity
p14236
(dp14237
g11
(lp14238
sg13
S'com.google.common.primitives.Bytes'
p14239
sg15
(lp14240
sg17
(lp14241
sg19
(lp14242
sg21
I0
sba(iArchitecture
Entity
p14243
(dp14244
g11
(lp14245
sg13
S'com.google.common.primitives.Bytes$ByteArrayAsList'
p14246
sg15
(lp14247
sg17
(lp14248
sg19
(lp14249
sg21
I0
sba(iArchitecture
Entity
p14250
(dp14251
g11
(lp14252
g940
asg13
S'com.google.common.primitives.Chars'
p14253
sg15
(lp14254
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p14255
asg17
(lp14256
g952
asg19
(lp14257
g956
asg21
I0
sba(iArchitecture
Entity
p14258
(dp14259
g11
(lp14260
g940
asg13
S'com.google.common.primitives.Chars$CharArrayAsList'
p14261
sg15
(lp14262
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p14263
asg17
(lp14264
g952
asg19
(lp14265
g956
asg21
I0
sba(iArchitecture
Entity
p14266
(dp14267
g11
(lp14268
g940
asg13
S'com.google.common.primitives.Chars$LexicographicalComparator'
p14269
sg15
(lp14270
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p14271
asg17
(lp14272
g952
asg19
(lp14273
g956
asg21
I0
sba(iArchitecture
Entity
p14274
(dp14275
g11
(lp14276
g102
ag102
asg13
S'com.google.common.primitives.Doubles'
p14277
sg15
(lp14278
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14279
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14280
asg17
(lp14281
g107
ag107
asg19
(lp14282
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p14283
(dp14284
g11
(lp14285
g102
ag102
asg13
S'com.google.common.primitives.Doubles$DoubleArrayAsList'
p14286
sg15
(lp14287
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14288
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14289
asg17
(lp14290
g107
ag107
asg19
(lp14291
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p14292
(dp14293
g11
(lp14294
g102
ag102
asg13
S'com.google.common.primitives.Doubles$DoubleConverter'
p14295
sg15
(lp14296
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14297
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14298
asg17
(lp14299
g107
ag107
asg19
(lp14300
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p14301
(dp14302
g11
(lp14303
g102
ag102
asg13
S'com.google.common.primitives.Doubles$LexicographicalComparator'
p14304
sg15
(lp14305
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14306
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14307
asg17
(lp14308
g107
ag107
asg19
(lp14309
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p14310
(dp14311
g11
(lp14312
g102
ag102
asg13
S'com.google.common.primitives.Floats'
p14313
sg15
(lp14314
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14315
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14316
asg17
(lp14317
g107
ag107
asg19
(lp14318
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p14319
(dp14320
g11
(lp14321
g102
ag102
asg13
S'com.google.common.primitives.Floats$FloatArrayAsList'
p14322
sg15
(lp14323
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14324
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14325
asg17
(lp14326
g107
ag107
asg19
(lp14327
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p14328
(dp14329
g11
(lp14330
g102
ag102
asg13
S'com.google.common.primitives.Floats$FloatConverter'
p14331
sg15
(lp14332
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14333
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14334
asg17
(lp14335
g107
ag107
asg19
(lp14336
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p14337
(dp14338
g11
(lp14339
g102
ag102
asg13
S'com.google.common.primitives.Floats$LexicographicalComparator'
p14340
sg15
(lp14341
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14342
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14343
asg17
(lp14344
g107
ag107
asg19
(lp14345
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p14346
(dp14347
g11
(lp14348
g102
ag102
asg13
S'com.google.common.primitives.Ints'
p14349
sg15
(lp14350
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14351
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14352
asg17
(lp14353
g107
ag107
asg19
(lp14354
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p14355
(dp14356
g11
(lp14357
g102
ag102
asg13
S'com.google.common.primitives.Ints$IntArrayAsList'
p14358
sg15
(lp14359
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14360
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14361
asg17
(lp14362
g107
ag107
asg19
(lp14363
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p14364
(dp14365
g11
(lp14366
g102
ag102
asg13
S'com.google.common.primitives.Ints$IntConverter'
p14367
sg15
(lp14368
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14369
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14370
asg17
(lp14371
g107
ag107
asg19
(lp14372
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p14373
(dp14374
g11
(lp14375
g102
ag102
asg13
S'com.google.common.primitives.Ints$LexicographicalComparator'
p14376
sg15
(lp14377
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14378
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14379
asg17
(lp14380
g107
ag107
asg19
(lp14381
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p14382
(dp14383
g11
(lp14384
g102
asg13
S'com.google.common.primitives.Longs'
p14385
sg15
(lp14386
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14387
asg17
(lp14388
g107
asg19
(lp14389
g109
asg21
I0
sba(iArchitecture
Entity
p14390
(dp14391
g11
(lp14392
g102
asg13
S'com.google.common.primitives.Longs$LexicographicalComparator'
p14393
sg15
(lp14394
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14395
asg17
(lp14396
g107
asg19
(lp14397
g109
asg21
I0
sba(iArchitecture
Entity
p14398
(dp14399
g11
(lp14400
g102
asg13
S'com.google.common.primitives.Longs$LongArrayAsList'
p14401
sg15
(lp14402
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14403
asg17
(lp14404
g107
asg19
(lp14405
g109
asg21
I0
sba(iArchitecture
Entity
p14406
(dp14407
g11
(lp14408
g102
asg13
S'com.google.common.primitives.Longs$LongConverter'
p14409
sg15
(lp14410
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14411
asg17
(lp14412
g107
asg19
(lp14413
g109
asg21
I0
sba(iArchitecture
Entity
p14414
(dp14415
g11
(lp14416
sg13
S'com.google.common.primitives.ParseRequest'
p14417
sg15
(lp14418
sg17
(lp14419
sg19
(lp14420
sg21
I0
sba(iArchitecture
Entity
p14421
(dp14422
g11
(lp14423
g102
ag102
asg13
S'com.google.common.primitives.Shorts'
p14424
sg15
(lp14425
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14426
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14427
asg17
(lp14428
g107
ag107
asg19
(lp14429
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p14430
(dp14431
g11
(lp14432
g102
ag102
asg13
S'com.google.common.primitives.Shorts$LexicographicalComparator'
p14433
sg15
(lp14434
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14435
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14436
asg17
(lp14437
g107
ag107
asg19
(lp14438
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p14439
(dp14440
g11
(lp14441
g102
ag102
asg13
S'com.google.common.primitives.Shorts$ShortArrayAsList'
p14442
sg15
(lp14443
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14444
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14445
asg17
(lp14446
g107
ag107
asg19
(lp14447
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p14448
(dp14449
g11
(lp14450
g102
ag102
asg13
S'com.google.common.primitives.Shorts$ShortConverter'
p14451
sg15
(lp14452
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14453
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14454
asg17
(lp14455
g107
ag107
asg19
(lp14456
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p14457
(dp14458
g11
(lp14459
sg13
S'com.google.common.primitives.SignedBytes'
p14460
sg15
(lp14461
sg17
(lp14462
sg19
(lp14463
sg21
I0
sba(iArchitecture
Entity
p14464
(dp14465
g11
(lp14466
sg13
S'com.google.common.primitives.SignedBytes$LexicographicalComparator'
p14467
sg15
(lp14468
sg17
(lp14469
sg19
(lp14470
sg21
I0
sba(iArchitecture
Entity
p14471
(dp14472
g11
(lp14473
sg13
S'com.google.common.primitives.UnsignedBytes'
p14474
sg15
(lp14475
sg17
(lp14476
sg19
(lp14477
sg21
I0
sba(iArchitecture
Entity
p14478
(dp14479
g11
(lp14480
sg13
S'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder'
p14481
sg15
(lp14482
sg17
(lp14483
sg19
(lp14484
sg21
I0
sba(iArchitecture
Entity
p14485
(dp14486
g11
(lp14487
sg13
S'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator'
p14488
sg15
(lp14489
sg17
(lp14490
sg19
(lp14491
sg21
I0
sba(iArchitecture
Entity
p14492
(dp14493
g11
(lp14494
sg13
S'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator'
p14495
sg15
(lp14496
sg17
(lp14497
sg19
(lp14498
sg21
I0
sba(iArchitecture
Entity
p14499
(dp14500
g11
(lp14501
sg13
S'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1'
p14502
sg15
(lp14503
sg17
(lp14504
sg19
(lp14505
sg21
I0
sba(iArchitecture
Entity
p14506
(dp14507
g11
(lp14508
sg13
S'com.google.common.primitives.UnsignedInts'
p14509
sg15
(lp14510
sg17
(lp14511
sg19
(lp14512
sg21
I0
sba(iArchitecture
Entity
p14513
(dp14514
g11
(lp14515
sg13
S'com.google.common.primitives.UnsignedInts$LexicographicalComparator'
p14516
sg15
(lp14517
sg17
(lp14518
sg19
(lp14519
sg21
I0
sba(iArchitecture
Entity
p14520
(dp14521
g11
(lp14522
sg13
S'com.google.common.primitives.UnsignedLongs'
p14523
sg15
(lp14524
sg17
(lp14525
sg19
(lp14526
sg21
I0
sba(iArchitecture
Entity
p14527
(dp14528
g11
(lp14529
sg13
S'com.google.common.primitives.UnsignedLongs$LexicographicalComparator'
p14530
sg15
(lp14531
sg17
(lp14532
sg19
(lp14533
sg21
I0
sbasg1055
(lp14534
g14204
ag14211
ag14218
ag14225
ag14232
ag14239
ag14246
ag14253
ag14261
ag14269
ag14277
ag14286
ag14295
ag14304
ag14313
ag14322
ag14331
ag14340
ag14349
ag14358
ag14367
ag14376
ag14385
ag14393
ag14401
ag14409
ag14417
ag14424
ag14433
ag14442
ag14451
ag14460
ag14467
ag14474
ag14481
ag14488
ag14495
ag14502
ag14509
ag14516
ag14523
ag14530
asg21
I0
sg1057
S'com.google.common.primitives.ss'
p14535
sba(iArchitecture
Cluster
p14536
(dp14537
g7
(lp14538
(iArchitecture
Entity
p14539
(dp14540
g11
(lp14541
sg13
S'com.google.common.collect.ForwardingMapEntry'
p14542
sg15
(lp14543
sg17
(lp14544
sg19
(lp14545
sg21
I0
sba(iArchitecture
Entity
p14546
(dp14547
g11
(lp14548
sg13
S'com.google.common.collect.ImmutableSet$Builder'
p14549
sg15
(lp14550
sg17
(lp14551
sg19
(lp14552
sg21
I0
sba(iArchitecture
Entity
p14553
(dp14554
g11
(lp14555
sg13
S'com.google.common.reflect.ClassPath'
p14556
sg15
(lp14557
sg17
(lp14558
sg19
(lp14559
sg21
I0
sba(iArchitecture
Entity
p14560
(dp14561
g11
(lp14562
sg13
S'com.google.common.reflect.ClassPath$1'
p14563
sg15
(lp14564
sg17
(lp14565
sg19
(lp14566
sg21
I0
sba(iArchitecture
Entity
p14567
(dp14568
g11
(lp14569
sg13
S'com.google.common.reflect.ClassPath$ClassInfo'
p14570
sg15
(lp14571
sg17
(lp14572
sg19
(lp14573
sg21
I0
sba(iArchitecture
Entity
p14574
(dp14575
g11
(lp14576
sg13
S'com.google.common.reflect.ClassPath$ResourceInfo'
p14577
sg15
(lp14578
sg17
(lp14579
sg19
(lp14580
sg21
I0
sba(iArchitecture
Entity
p14581
(dp14582
g11
(lp14583
sg13
S'com.google.common.reflect.ClassPath$Scanner'
p14584
sg15
(lp14585
sg17
(lp14586
sg19
(lp14587
sg21
I0
sba(iArchitecture
Entity
p14588
(dp14589
g11
(lp14590
g102
asg13
S'com.google.common.reflect.Element'
p14591
sg15
(lp14592
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14593
asg17
(lp14594
g107
asg19
(lp14595
g109
asg21
I0
sba(iArchitecture
Entity
p14596
(dp14597
g11
(lp14598
sg13
S'com.google.common.reflect.ImmutableTypeToInstanceMap'
p14599
sg15
(lp14600
sg17
(lp14601
sg19
(lp14602
sg21
I0
sba(iArchitecture
Entity
p14603
(dp14604
g11
(lp14605
sg13
S'com.google.common.reflect.ImmutableTypeToInstanceMap$1'
p14606
sg15
(lp14607
sg17
(lp14608
sg19
(lp14609
sg21
I0
sba(iArchitecture
Entity
p14610
(dp14611
g11
(lp14612
sg13
S'com.google.common.reflect.ImmutableTypeToInstanceMap$Builder'
p14613
sg15
(lp14614
sg17
(lp14615
sg19
(lp14616
sg21
I0
sba(iArchitecture
Entity
p14617
(dp14618
g11
(lp14619
g102
asg13
S'com.google.common.reflect.Invokable'
p14620
sg15
(lp14621
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14622
asg17
(lp14623
g107
asg19
(lp14624
g109
asg21
I0
sba(iArchitecture
Entity
p14625
(dp14626
g11
(lp14627
g102
asg13
S'com.google.common.reflect.Invokable$ConstructorInvokable'
p14628
sg15
(lp14629
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14630
asg17
(lp14631
g107
asg19
(lp14632
g109
asg21
I0
sba(iArchitecture
Entity
p14633
(dp14634
g11
(lp14635
g102
asg13
S'com.google.common.reflect.Invokable$MethodInvokable'
p14636
sg15
(lp14637
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p14638
asg17
(lp14639
g107
asg19
(lp14640
g109
asg21
I0
sba(iArchitecture
Entity
p14641
(dp14642
g11
(lp14643
sg13
S'com.google.common.reflect.MutableTypeToInstanceMap'
p14644
sg15
(lp14645
sg17
(lp14646
sg19
(lp14647
sg21
I0
sba(iArchitecture
Entity
p14648
(dp14649
g11
(lp14650
sg13
S'com.google.common.reflect.MutableTypeToInstanceMap$1'
p14651
sg15
(lp14652
sg17
(lp14653
sg19
(lp14654
sg21
I0
sba(iArchitecture
Entity
p14655
(dp14656
g11
(lp14657
sg13
S'com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry'
p14658
sg15
(lp14659
sg17
(lp14660
sg19
(lp14661
sg21
I0
sba(iArchitecture
Entity
p14662
(dp14663
g11
(lp14664
sg13
S'com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1'
p14665
sg15
(lp14666
sg17
(lp14667
sg19
(lp14668
sg21
I0
sba(iArchitecture
Entity
p14669
(dp14670
g11
(lp14671
sg13
S'com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2'
p14672
sg15
(lp14673
sg17
(lp14674
sg19
(lp14675
sg21
I0
sba(iArchitecture
Entity
p14676
(dp14677
g11
(lp14678
sg13
S'com.google.common.reflect.TypeCapture'
p14679
sg15
(lp14680
sg17
(lp14681
sg19
(lp14682
sg21
I0
sba(iArchitecture
Entity
p14683
(dp14684
g11
(lp14685
sg13
S'com.google.common.reflect.TypeParameter'
p14686
sg15
(lp14687
sg17
(lp14688
sg19
(lp14689
sg21
I0
sba(iArchitecture
Entity
p14690
(dp14691
g11
(lp14692
V2158
p14693
asg13
S'com.google.common.reflect.TypeResolver'
p14694
sg15
(lp14695
VThe visitClass implementation in TypeResolver.populateTypeMappings has the following body:\u000a\u000a```\u000a  @Override void visitClass(Class<?> fromClass) {\u000a    // Can't map from a raw class to anything other than itself.\u000a    // You can't say "assuming String is Integer".\u000a    // And we don't support "assuming String is T"; user has to say "assuming T is String". \u000a    throw new IllegalArgumentException("No type mapping from " + fromClass);\u000a  }\u000a```\u000a\u000aIt would be great if the IllegalArgumentException message reported the type it's trying to convert to, as well as the one its converting from, for easier debugging should this exception be thrown.\u000a
p14696
asg17
(lp14697
(lp14698
I0
aasg19
(lp14699
VTypeVisitor.visitClass in TypeResolver.populateTypeMappings should report the to type as well as the from type
p14700
asg21
I0
sba(iArchitecture
Entity
p14701
(dp14702
g11
(lp14703
g14693
asg13
S'com.google.common.reflect.TypeResolver$1'
p14704
sg15
(lp14705
VThe visitClass implementation in TypeResolver.populateTypeMappings has the following body:\u000a\u000a```\u000a  @Override void visitClass(Class<?> fromClass) {\u000a    // Can't map from a raw class to anything other than itself.\u000a    // You can't say "assuming String is Integer".\u000a    // And we don't support "assuming String is T"; user has to say "assuming T is String". \u000a    throw new IllegalArgumentException("No type mapping from " + fromClass);\u000a  }\u000a```\u000a\u000aIt would be great if the IllegalArgumentException message reported the type it's trying to convert to, as well as the one its converting from, for easier debugging should this exception be thrown.\u000a
p14706
asg17
(lp14707
g14698
asg19
(lp14708
g14700
asg21
I0
sba(iArchitecture
Entity
p14709
(dp14710
g11
(lp14711
g14693
asg13
S'com.google.common.reflect.TypeResolver$TypeMappingIntrospector'
p14712
sg15
(lp14713
VThe visitClass implementation in TypeResolver.populateTypeMappings has the following body:\u000a\u000a```\u000a  @Override void visitClass(Class<?> fromClass) {\u000a    // Can't map from a raw class to anything other than itself.\u000a    // You can't say "assuming String is Integer".\u000a    // And we don't support "assuming String is T"; user has to say "assuming T is String". \u000a    throw new IllegalArgumentException("No type mapping from " + fromClass);\u000a  }\u000a```\u000a\u000aIt would be great if the IllegalArgumentException message reported the type it's trying to convert to, as well as the one its converting from, for easier debugging should this exception be thrown.\u000a
p14714
asg17
(lp14715
g14698
asg19
(lp14716
g14700
asg21
I0
sba(iArchitecture
Entity
p14717
(dp14718
g11
(lp14719
g14693
asg13
S'com.google.common.reflect.TypeResolver$TypeTable'
p14720
sg15
(lp14721
VThe visitClass implementation in TypeResolver.populateTypeMappings has the following body:\u000a\u000a```\u000a  @Override void visitClass(Class<?> fromClass) {\u000a    // Can't map from a raw class to anything other than itself.\u000a    // You can't say "assuming String is Integer".\u000a    // And we don't support "assuming String is T"; user has to say "assuming T is String". \u000a    throw new IllegalArgumentException("No type mapping from " + fromClass);\u000a  }\u000a```\u000a\u000aIt would be great if the IllegalArgumentException message reported the type it's trying to convert to, as well as the one its converting from, for easier debugging should this exception be thrown.\u000a
p14722
asg17
(lp14723
g14698
asg19
(lp14724
g14700
asg21
I0
sba(iArchitecture
Entity
p14725
(dp14726
g11
(lp14727
g14693
asg13
S'com.google.common.reflect.TypeResolver$TypeTable$1'
p14728
sg15
(lp14729
VThe visitClass implementation in TypeResolver.populateTypeMappings has the following body:\u000a\u000a```\u000a  @Override void visitClass(Class<?> fromClass) {\u000a    // Can't map from a raw class to anything other than itself.\u000a    // You can't say "assuming String is Integer".\u000a    // And we don't support "assuming String is T"; user has to say "assuming T is String". \u000a    throw new IllegalArgumentException("No type mapping from " + fromClass);\u000a  }\u000a```\u000a\u000aIt would be great if the IllegalArgumentException message reported the type it's trying to convert to, as well as the one its converting from, for easier debugging should this exception be thrown.\u000a
p14730
asg17
(lp14731
g14698
asg19
(lp14732
g14700
asg21
I0
sba(iArchitecture
Entity
p14733
(dp14734
g11
(lp14735
g14693
asg13
S'com.google.common.reflect.TypeResolver$TypeVariableKey'
p14736
sg15
(lp14737
VThe visitClass implementation in TypeResolver.populateTypeMappings has the following body:\u000a\u000a```\u000a  @Override void visitClass(Class<?> fromClass) {\u000a    // Can't map from a raw class to anything other than itself.\u000a    // You can't say "assuming String is Integer".\u000a    // And we don't support "assuming String is T"; user has to say "assuming T is String". \u000a    throw new IllegalArgumentException("No type mapping from " + fromClass);\u000a  }\u000a```\u000a\u000aIt would be great if the IllegalArgumentException message reported the type it's trying to convert to, as well as the one its converting from, for easier debugging should this exception be thrown.\u000a
p14738
asg17
(lp14739
g14698
asg19
(lp14740
g14700
asg21
I0
sba(iArchitecture
Entity
p14741
(dp14742
g11
(lp14743
g14693
asg13
S'com.google.common.reflect.TypeResolver$WildcardCapturer'
p14744
sg15
(lp14745
VThe visitClass implementation in TypeResolver.populateTypeMappings has the following body:\u000a\u000a```\u000a  @Override void visitClass(Class<?> fromClass) {\u000a    // Can't map from a raw class to anything other than itself.\u000a    // You can't say "assuming String is Integer".\u000a    // And we don't support "assuming String is T"; user has to say "assuming T is String". \u000a    throw new IllegalArgumentException("No type mapping from " + fromClass);\u000a  }\u000a```\u000a\u000aIt would be great if the IllegalArgumentException message reported the type it's trying to convert to, as well as the one its converting from, for easier debugging should this exception be thrown.\u000a
p14746
asg17
(lp14747
g14698
asg19
(lp14748
g14700
asg21
I0
sba(iArchitecture
Entity
p14749
(dp14750
g11
(lp14751
sg13
S'com.google.common.reflect.TypeToInstanceMap'
p14752
sg15
(lp14753
sg17
(lp14754
sg19
(lp14755
sg21
I0
sba(iArchitecture
Entity
p14756
(dp14757
g11
(lp14758
sg13
S'com.google.common.reflect.TypeToken'
p14759
sg15
(lp14760
sg17
(lp14761
sg19
(lp14762
sg21
I0
sba(iArchitecture
Entity
p14763
(dp14764
g11
(lp14765
sg13
S'com.google.common.reflect.TypeToken$1'
p14766
sg15
(lp14767
sg17
(lp14768
sg19
(lp14769
sg21
I0
sba(iArchitecture
Entity
p14770
(dp14771
g11
(lp14772
sg13
S'com.google.common.reflect.TypeToken$2'
p14773
sg15
(lp14774
sg17
(lp14775
sg19
(lp14776
sg21
I0
sba(iArchitecture
Entity
p14777
(dp14778
g11
(lp14779
sg13
S'com.google.common.reflect.TypeToken$3'
p14780
sg15
(lp14781
sg17
(lp14782
sg19
(lp14783
sg21
I0
sba(iArchitecture
Entity
p14784
(dp14785
g11
(lp14786
sg13
S'com.google.common.reflect.TypeToken$4'
p14787
sg15
(lp14788
sg17
(lp14789
sg19
(lp14790
sg21
I0
sba(iArchitecture
Entity
p14791
(dp14792
g11
(lp14793
sg13
S'com.google.common.reflect.TypeToken$ClassSet'
p14794
sg15
(lp14795
sg17
(lp14796
sg19
(lp14797
sg21
I0
sba(iArchitecture
Entity
p14798
(dp14799
g11
(lp14800
sg13
S'com.google.common.reflect.TypeToken$InterfaceSet'
p14801
sg15
(lp14802
sg17
(lp14803
sg19
(lp14804
sg21
I0
sba(iArchitecture
Entity
p14805
(dp14806
g11
(lp14807
sg13
S'com.google.common.reflect.TypeToken$InterfaceSet$1'
p14808
sg15
(lp14809
sg17
(lp14810
sg19
(lp14811
sg21
I0
sba(iArchitecture
Entity
p14812
(dp14813
g11
(lp14814
sg13
S'com.google.common.reflect.TypeToken$SimpleTypeToken'
p14815
sg15
(lp14816
sg17
(lp14817
sg19
(lp14818
sg21
I0
sba(iArchitecture
Entity
p14819
(dp14820
g11
(lp14821
sg13
S'com.google.common.reflect.TypeToken$TypeCollector'
p14822
sg15
(lp14823
sg17
(lp14824
sg19
(lp14825
sg21
I0
sba(iArchitecture
Entity
p14826
(dp14827
g11
(lp14828
sg13
S'com.google.common.reflect.TypeToken$TypeCollector$1'
p14829
sg15
(lp14830
sg17
(lp14831
sg19
(lp14832
sg21
I0
sba(iArchitecture
Entity
p14833
(dp14834
g11
(lp14835
sg13
S'com.google.common.reflect.TypeToken$TypeCollector$2'
p14836
sg15
(lp14837
sg17
(lp14838
sg19
(lp14839
sg21
I0
sba(iArchitecture
Entity
p14840
(dp14841
g11
(lp14842
sg13
S'com.google.common.reflect.TypeToken$TypeCollector$3'
p14843
sg15
(lp14844
sg17
(lp14845
sg19
(lp14846
sg21
I0
sba(iArchitecture
Entity
p14847
(dp14848
g11
(lp14849
sg13
S'com.google.common.reflect.TypeToken$TypeCollector$4'
p14850
sg15
(lp14851
sg17
(lp14852
sg19
(lp14853
sg21
I0
sba(iArchitecture
Entity
p14854
(dp14855
g11
(lp14856
sg13
S'com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector'
p14857
sg15
(lp14858
sg17
(lp14859
sg19
(lp14860
sg21
I0
sba(iArchitecture
Entity
p14861
(dp14862
g11
(lp14863
sg13
S'com.google.common.reflect.TypeToken$TypeFilter'
p14864
sg15
(lp14865
sg17
(lp14866
sg19
(lp14867
sg21
I0
sba(iArchitecture
Entity
p14868
(dp14869
g11
(lp14870
sg13
S'com.google.common.reflect.TypeToken$TypeFilter$1'
p14871
sg15
(lp14872
sg17
(lp14873
sg19
(lp14874
sg21
I0
sba(iArchitecture
Entity
p14875
(dp14876
g11
(lp14877
sg13
S'com.google.common.reflect.TypeToken$TypeFilter$2'
p14878
sg15
(lp14879
sg17
(lp14880
sg19
(lp14881
sg21
I0
sba(iArchitecture
Entity
p14882
(dp14883
g11
(lp14884
sg13
S'com.google.common.reflect.TypeToken$TypeSet'
p14885
sg15
(lp14886
sg17
(lp14887
sg19
(lp14888
sg21
I0
sba(iArchitecture
Entity
p14889
(dp14890
g11
(lp14891
sg13
S'com.google.common.reflect.TypeVisitor'
p14892
sg15
(lp14893
sg17
(lp14894
sg19
(lp14895
sg21
I0
sba(iArchitecture
Entity
p14896
(dp14897
g11
(lp14898
V1738
p14899
asg13
S'com.google.common.reflect.Types'
p14900
sg15
(lp14901
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p14902
asg17
(lp14903
(lp14904
I7
aasg19
(lp14905
VUnable to compile on Java 8
p14906
asg21
I0
sba(iArchitecture
Entity
p14907
(dp14908
g11
(lp14909
g14899
asg13
S'com.google.common.reflect.Types$1'
p14910
sg15
(lp14911
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p14912
asg17
(lp14913
g14904
asg19
(lp14914
g14906
asg21
I0
sba(iArchitecture
Entity
p14915
(dp14916
g11
(lp14917
g14899
asg13
S'com.google.common.reflect.Types$2'
p14918
sg15
(lp14919
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p14920
asg17
(lp14921
g14904
asg19
(lp14922
g14906
asg21
I0
sba(iArchitecture
Entity
p14923
(dp14924
g11
(lp14925
g14899
asg13
S'com.google.common.reflect.Types$ClassOwnership'
p14926
sg15
(lp14927
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p14928
asg17
(lp14929
g14904
asg19
(lp14930
g14906
asg21
I0
sba(iArchitecture
Entity
p14931
(dp14932
g11
(lp14933
g14899
asg13
S'com.google.common.reflect.Types$ClassOwnership$1'
p14934
sg15
(lp14935
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p14936
asg17
(lp14937
g14904
asg19
(lp14938
g14906
asg21
I0
sba(iArchitecture
Entity
p14939
(dp14940
g11
(lp14941
g14899
asg13
S'com.google.common.reflect.Types$ClassOwnership$1LocalClass'
p14942
sg15
(lp14943
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p14944
asg17
(lp14945
g14904
asg19
(lp14946
g14906
asg21
I0
sba(iArchitecture
Entity
p14947
(dp14948
g11
(lp14949
g14899
asg13
S'com.google.common.reflect.Types$ClassOwnership$2'
p14950
sg15
(lp14951
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p14952
asg17
(lp14953
g14904
asg19
(lp14954
g14906
asg21
I0
sba(iArchitecture
Entity
p14955
(dp14956
g11
(lp14957
g14899
asg13
S'com.google.common.reflect.Types$ClassOwnership$3'
p14958
sg15
(lp14959
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p14960
asg17
(lp14961
g14904
asg19
(lp14962
g14906
asg21
I0
sba(iArchitecture
Entity
p14963
(dp14964
g11
(lp14965
g14899
asg13
S'com.google.common.reflect.Types$GenericArrayTypeImpl'
p14966
sg15
(lp14967
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p14968
asg17
(lp14969
g14904
asg19
(lp14970
g14906
asg21
I0
sba(iArchitecture
Entity
p14971
(dp14972
g11
(lp14973
g14899
asg13
S'com.google.common.reflect.Types$JavaVersion'
p14974
sg15
(lp14975
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p14976
asg17
(lp14977
g14904
asg19
(lp14978
g14906
asg21
I0
sba(iArchitecture
Entity
p14979
(dp14980
g11
(lp14981
g14899
asg13
S'com.google.common.reflect.Types$JavaVersion$1'
p14982
sg15
(lp14983
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p14984
asg17
(lp14985
g14904
asg19
(lp14986
g14906
asg21
I0
sba(iArchitecture
Entity
p14987
(dp14988
g11
(lp14989
g14899
asg13
S'com.google.common.reflect.Types$JavaVersion$2'
p14990
sg15
(lp14991
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p14992
asg17
(lp14993
g14904
asg19
(lp14994
g14906
asg21
I0
sba(iArchitecture
Entity
p14995
(dp14996
g11
(lp14997
g14899
asg13
S'com.google.common.reflect.Types$JavaVersion$3'
p14998
sg15
(lp14999
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p15000
asg17
(lp15001
g14904
asg19
(lp15002
g14906
asg21
I0
sba(iArchitecture
Entity
p15003
(dp15004
g11
(lp15005
g14899
asg13
S'com.google.common.reflect.Types$JavaVersion$4'
p15006
sg15
(lp15007
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p15008
asg17
(lp15009
g14904
asg19
(lp15010
g14906
asg21
I0
sba(iArchitecture
Entity
p15011
(dp15012
g11
(lp15013
g14899
asg13
S'com.google.common.reflect.Types$NativeTypeVariableEquals'
p15014
sg15
(lp15015
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p15016
asg17
(lp15017
g14904
asg19
(lp15018
g14906
asg21
I0
sba(iArchitecture
Entity
p15019
(dp15020
g11
(lp15021
g14899
asg13
S'com.google.common.reflect.Types$ParameterizedTypeImpl'
p15022
sg15
(lp15023
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p15024
asg17
(lp15025
g14904
asg19
(lp15026
g14906
asg21
I0
sba(iArchitecture
Entity
p15027
(dp15028
g11
(lp15029
g14899
asg13
S'com.google.common.reflect.Types$TypeVariableImpl'
p15030
sg15
(lp15031
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p15032
asg17
(lp15033
g14904
asg19
(lp15034
g14906
asg21
I0
sba(iArchitecture
Entity
p15035
(dp15036
g11
(lp15037
g14899
asg13
S'com.google.common.reflect.Types$TypeVariableInvocationHandler'
p15038
sg15
(lp15039
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p15040
asg17
(lp15041
g14904
asg19
(lp15042
g14906
asg21
I0
sba(iArchitecture
Entity
p15043
(dp15044
g11
(lp15045
g14899
asg13
S'com.google.common.reflect.Types$WildcardTypeImpl'
p15046
sg15
(lp15047
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1738) created by **socram8888** on 2014-04-24 at 10:38 AM_\u000a\u000a---\u000a\u000aApparently Oracle has added a new abstract method to TypeVariable (getAnnotatedBounds) which is not implemented.\u000a
p15048
asg17
(lp15049
g14904
asg19
(lp15050
g14906
asg21
I0
sbasg1055
(lp15051
g14542
ag14549
ag14556
ag14563
ag14570
ag14577
ag14584
ag14591
ag14599
ag14606
ag14613
ag14620
ag14628
ag14636
ag14644
ag14651
ag14658
ag14665
ag14672
ag14679
ag14686
ag14694
ag14704
ag14712
ag14720
ag14728
ag14736
ag14744
ag14752
ag14759
ag14766
ag14773
ag14780
ag14787
ag14794
ag14801
ag14808
ag14815
ag14822
ag14829
ag14836
ag14843
ag14850
ag14857
ag14864
ag14871
ag14878
ag14885
ag14892
ag14900
ag14910
ag14918
ag14926
ag14934
ag14942
ag14950
ag14958
ag14966
ag14974
ag14982
ag14990
ag14998
ag15006
ag15014
ag15022
ag15030
ag15038
ag15046
asg21
I0
sg1057
S'com.google.common.reflect.ss'
p15052
sba(iArchitecture
Cluster
p15053
(dp15054
g7
(lp15055
(iArchitecture
Entity
p15056
(dp15057
g11
(lp15058
sg13
S'com.google.common.ForceGuavaCompilationEntryPoint'
p15059
sg15
(lp15060
sg17
(lp15061
sg19
(lp15062
sg21
I0
sba(iArchitecture
Entity
p15063
(dp15064
g11
(lp15065
sg13
S'com.google.gwt.core.client.EntryPoint'
p15066
sg15
(lp15067
sg17
(lp15068
sg19
(lp15069
sg21
I0
sbasg1055
(lp15070
g15059
ag15066
asg21
I0
sg1057
S'com.google.common.ss'
p15071
sba(iArchitecture
Cluster
p15072
(dp15073
g7
(lp15074
(iArchitecture
Entity
p15075
(dp15076
g11
(lp15077
sg13
S'com.google.common.base.Charsets'
p15078
sg15
(lp15079
sg17
(lp15080
sg19
(lp15081
sg21
I0
sba(iArchitecture
Entity
p15082
(dp15083
g11
(lp15084
sg13
S'com.google.common.base.Defaults'
p15085
sg15
(lp15086
sg17
(lp15087
sg19
(lp15088
sg21
I0
sba(iArchitecture
Entity
p15089
(dp15090
g11
(lp15091
sg13
S'com.google.common.collect.ArrayListMultimap'
p15092
sg15
(lp15093
sg17
(lp15094
sg19
(lp15095
sg21
I0
sba(iArchitecture
Entity
p15096
(dp15097
g11
(lp15098
sg13
S'com.google.common.collect.ClassToInstanceMap'
p15099
sg15
(lp15100
sg17
(lp15101
sg19
(lp15102
sg21
I0
sba(iArchitecture
Entity
p15103
(dp15104
g11
(lp15105
sg13
S'com.google.common.collect.HashBasedTable'
p15106
sg15
(lp15107
sg17
(lp15108
sg19
(lp15109
sg21
I0
sba(iArchitecture
Entity
p15110
(dp15111
g11
(lp15112
sg13
S'com.google.common.collect.HashBasedTable$Factory'
p15113
sg15
(lp15114
sg17
(lp15115
sg19
(lp15116
sg21
I0
sba(iArchitecture
Entity
p15117
(dp15118
g11
(lp15119
sg13
S'com.google.common.collect.HashMultimap'
p15120
sg15
(lp15121
sg17
(lp15122
sg19
(lp15123
sg21
I0
sba(iArchitecture
Entity
p15124
(dp15125
g11
(lp15126
sg13
S'com.google.common.collect.ImmutableClassToInstanceMap'
p15127
sg15
(lp15128
sg17
(lp15129
sg19
(lp15130
sg21
I0
sba(iArchitecture
Entity
p15131
(dp15132
g11
(lp15133
sg13
S'com.google.common.collect.ImmutableClassToInstanceMap$1'
p15134
sg15
(lp15135
sg17
(lp15136
sg19
(lp15137
sg21
I0
sba(iArchitecture
Entity
p15138
(dp15139
g11
(lp15140
sg13
S'com.google.common.collect.ImmutableClassToInstanceMap$Builder'
p15141
sg15
(lp15142
sg17
(lp15143
sg19
(lp15144
sg21
I0
sba(iArchitecture
Entity
p15145
(dp15146
g11
(lp15147
g102
ag4145
asg13
S'com.google.common.collect.ImmutableList$Builder'
p15148
sg15
(lp15149
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15150
aVImmutableList contains following code since version 15.0\u000a\u000a private static final ImmutableList<Object> EMPTY =\u000a      new RegularImmutableList<Object>(ObjectArrays.EMPTY_ARRAY);\u000a
p15151
asg17
(lp15152
g107
ag4151
asg19
(lp15153
g109
ag4153
asg21
I0
sba(iArchitecture
Entity
p15154
(dp15155
g11
(lp15156
sg13
S'com.google.common.primitives.Primitives'
p15157
sg15
(lp15158
sg17
(lp15159
sg19
(lp15160
sg21
I0
sba(iArchitecture
Entity
p15161
(dp15162
g11
(lp15163
sg13
S'com.google.common.primitives.UnsignedInteger'
p15164
sg15
(lp15165
sg17
(lp15166
sg19
(lp15167
sg21
I0
sba(iArchitecture
Entity
p15168
(dp15169
g11
(lp15170
sg13
S'com.google.common.primitives.UnsignedLong'
p15171
sg15
(lp15172
sg17
(lp15173
sg19
(lp15174
sg21
I0
sba(iArchitecture
Entity
p15175
(dp15176
g11
(lp15177
sg13
S'com.google.common.primitives.UnsignedLong_CustomFieldSerializer'
p15178
sg15
(lp15179
sg17
(lp15180
sg19
(lp15181
sg21
I0
sba(iArchitecture
Entity
p15182
(dp15183
g11
(lp15184
sg13
S'com.google.common.reflect.AbstractInvocationHandler'
p15185
sg15
(lp15186
sg17
(lp15187
sg19
(lp15188
sg21
I0
sba(iArchitecture
Entity
p15189
(dp15190
g11
(lp15191
g102
asg13
S'com.google.common.reflect.Parameter'
p15192
sg15
(lp15193
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15194
asg17
(lp15195
g107
asg19
(lp15196
g109
asg21
I0
sba(iArchitecture
Entity
p15197
(dp15198
g11
(lp15199
sg13
S'com.google.common.reflect.Reflection'
p15200
sg15
(lp15201
sg17
(lp15202
sg19
(lp15203
sg21
I0
sba(iArchitecture
Entity
p15204
(dp15205
g11
(lp15206
g940
asg13
S'com.google.common.testing.AbstractPackageSanityTests'
p15207
sg15
(lp15208
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15209
asg17
(lp15210
g952
asg19
(lp15211
g956
asg21
I0
sba(iArchitecture
Entity
p15212
(dp15213
g11
(lp15214
g940
asg13
S'com.google.common.testing.AbstractPackageSanityTests$1'
p15215
sg15
(lp15216
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15217
asg17
(lp15218
g952
asg19
(lp15219
g956
asg21
I0
sba(iArchitecture
Entity
p15220
(dp15221
g11
(lp15222
g940
asg13
S'com.google.common.testing.AbstractPackageSanityTests$Chopper'
p15223
sg15
(lp15224
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15225
asg17
(lp15226
g952
asg19
(lp15227
g956
asg21
I0
sba(iArchitecture
Entity
p15228
(dp15229
g11
(lp15230
g940
asg13
S'com.google.common.testing.AbstractPackageSanityTests$Chopper$1'
p15231
sg15
(lp15232
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15233
asg17
(lp15234
g952
asg19
(lp15235
g956
asg21
I0
sba(iArchitecture
Entity
p15236
(dp15237
g11
(lp15238
g940
asg13
S'com.google.common.testing.AbstractPackageSanityTests$Chopper$2'
p15239
sg15
(lp15240
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15241
asg17
(lp15242
g952
asg19
(lp15243
g956
asg21
I0
sba(iArchitecture
Entity
p15244
(dp15245
g11
(lp15246
g102
asg13
S'com.google.common.testing.ArbitraryInstances'
p15247
sg15
(lp15248
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15249
asg17
(lp15250
g107
asg19
(lp15251
g109
asg21
I0
sba(iArchitecture
Entity
p15252
(dp15253
g11
(lp15254
g102
asg13
S'com.google.common.testing.ArbitraryInstances$1'
p15255
sg15
(lp15256
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15257
asg17
(lp15258
g107
asg19
(lp15259
g109
asg21
I0
sba(iArchitecture
Entity
p15260
(dp15261
g11
(lp15262
g102
asg13
S'com.google.common.testing.ArbitraryInstances$AlwaysEqual'
p15263
sg15
(lp15264
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15265
asg17
(lp15266
g107
asg19
(lp15267
g109
asg21
I0
sba(iArchitecture
Entity
p15268
(dp15269
g11
(lp15270
g102
asg13
S'com.google.common.testing.ArbitraryInstances$ByToString'
p15271
sg15
(lp15272
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15273
asg17
(lp15274
g107
asg19
(lp15275
g109
asg21
I0
sba(iArchitecture
Entity
p15276
(dp15277
g11
(lp15278
g102
asg13
S'com.google.common.testing.ArbitraryInstances$Dummies'
p15279
sg15
(lp15280
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15281
asg17
(lp15282
g107
asg19
(lp15283
g109
asg21
I0
sba(iArchitecture
Entity
p15284
(dp15285
g11
(lp15286
g102
asg13
S'com.google.common.testing.ArbitraryInstances$Dummies$DeterministicRandom'
p15287
sg15
(lp15288
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15289
asg17
(lp15290
g107
asg19
(lp15291
g109
asg21
I0
sba(iArchitecture
Entity
p15292
(dp15293
g11
(lp15294
g102
asg13
S'com.google.common.testing.ArbitraryInstances$Dummies$DummyCountDownLatch'
p15295
sg15
(lp15296
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15297
asg17
(lp15298
g107
asg19
(lp15299
g109
asg21
I0
sba(iArchitecture
Entity
p15300
(dp15301
g11
(lp15302
g102
asg13
S'com.google.common.testing.ArbitraryInstances$Dummies$DummyExecutor'
p15303
sg15
(lp15304
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15305
asg17
(lp15306
g107
asg19
(lp15307
g109
asg21
I0
sba(iArchitecture
Entity
p15308
(dp15309
g11
(lp15310
g102
asg13
S'com.google.common.testing.ArbitraryInstances$Dummies$DummyRunnable'
p15311
sg15
(lp15312
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15313
asg17
(lp15314
g107
asg19
(lp15315
g109
asg21
I0
sba(iArchitecture
Entity
p15316
(dp15317
g11
(lp15318
g102
asg13
S'com.google.common.testing.ArbitraryInstances$Dummies$DummyScheduledThreadPoolExecutor'
p15319
sg15
(lp15320
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15321
asg17
(lp15322
g107
asg19
(lp15323
g109
asg21
I0
sba(iArchitecture
Entity
p15324
(dp15325
g11
(lp15326
g102
asg13
S'com.google.common.testing.ArbitraryInstances$Dummies$DummyThreadFactory'
p15327
sg15
(lp15328
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15329
asg17
(lp15330
g107
asg19
(lp15331
g109
asg21
I0
sba(iArchitecture
Entity
p15332
(dp15333
g11
(lp15334
g102
asg13
S'com.google.common.testing.ArbitraryInstances$Dummies$InMemoryPrintStream'
p15335
sg15
(lp15336
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15337
asg17
(lp15338
g107
asg19
(lp15339
g109
asg21
I0
sba(iArchitecture
Entity
p15340
(dp15341
g11
(lp15342
g102
asg13
S'com.google.common.testing.ArbitraryInstances$Dummies$InMemoryPrintWriter'
p15343
sg15
(lp15344
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15345
asg17
(lp15346
g107
asg19
(lp15347
g109
asg21
I0
sba(iArchitecture
Entity
p15348
(dp15349
g11
(lp15350
g102
asg13
S'com.google.common.testing.ArbitraryInstances$NullByteSink'
p15351
sg15
(lp15352
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15353
asg17
(lp15354
g107
asg19
(lp15355
g109
asg21
I0
sba(iArchitecture
Entity
p15356
(dp15357
g11
(lp15358
sg13
S'com.google.common.testing.ClassSanityTester'
p15359
sg15
(lp15360
sg17
(lp15361
sg19
(lp15362
sg21
I0
sba(iArchitecture
Entity
p15363
(dp15364
g11
(lp15365
sg13
S'com.google.common.testing.ClassSanityTester$1'
p15366
sg15
(lp15367
sg17
(lp15368
sg19
(lp15369
sg21
I0
sba(iArchitecture
Entity
p15370
(dp15371
g11
(lp15372
sg13
S'com.google.common.testing.ClassSanityTester$2'
p15373
sg15
(lp15374
sg17
(lp15375
sg19
(lp15376
sg21
I0
sba(iArchitecture
Entity
p15377
(dp15378
g11
(lp15379
sg13
S'com.google.common.testing.ClassSanityTester$3'
p15380
sg15
(lp15381
sg17
(lp15382
sg19
(lp15383
sg21
I0
sba(iArchitecture
Entity
p15384
(dp15385
g11
(lp15386
sg13
S'com.google.common.testing.ClassSanityTester$4'
p15387
sg15
(lp15388
sg17
(lp15389
sg19
(lp15390
sg21
I0
sba(iArchitecture
Entity
p15391
(dp15392
g11
(lp15393
sg13
S'com.google.common.testing.ClassSanityTester$5'
p15394
sg15
(lp15395
sg17
(lp15396
sg19
(lp15397
sg21
I0
sba(iArchitecture
Entity
p15398
(dp15399
g11
(lp15400
sg13
S'com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester'
p15401
sg15
(lp15402
sg17
(lp15403
sg19
(lp15404
sg21
I0
sba(iArchitecture
Entity
p15405
(dp15406
g11
(lp15407
sg13
S'com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException'
p15408
sg15
(lp15409
sg17
(lp15410
sg19
(lp15411
sg21
I0
sba(iArchitecture
Entity
p15412
(dp15413
g11
(lp15414
sg13
S'com.google.common.testing.ClassSanityTester$ParameterHasNoDistinctValueException'
p15415
sg15
(lp15416
sg17
(lp15417
sg19
(lp15418
sg21
I0
sba(iArchitecture
Entity
p15419
(dp15420
g11
(lp15421
sg13
S'com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException'
p15422
sg15
(lp15423
sg17
(lp15424
sg19
(lp15425
sg21
I0
sba(iArchitecture
Entity
p15426
(dp15427
g11
(lp15428
sg13
S'com.google.common.testing.ClassSanityTester$SerializableDummyProxy'
p15429
sg15
(lp15430
sg17
(lp15431
sg19
(lp15432
sg21
I0
sba(iArchitecture
Entity
p15433
(dp15434
g11
(lp15435
sg13
S'com.google.common.testing.ClusterException'
p15436
sg15
(lp15437
sg17
(lp15438
sg19
(lp15439
sg21
I0
sba(iArchitecture
Entity
p15440
(dp15441
g11
(lp15442
sg13
S'com.google.common.testing.DummyProxy'
p15443
sg15
(lp15444
sg17
(lp15445
sg19
(lp15446
sg21
I0
sba(iArchitecture
Entity
p15447
(dp15448
g11
(lp15449
sg13
S'com.google.common.testing.DummyProxy$DummyHandler'
p15450
sg15
(lp15451
sg17
(lp15452
sg19
(lp15453
sg21
I0
sba(iArchitecture
Entity
p15454
(dp15455
g11
(lp15456
sg13
S'com.google.common.testing.EqualsTester'
p15457
sg15
(lp15458
sg17
(lp15459
sg19
(lp15460
sg21
I0
sba(iArchitecture
Entity
p15461
(dp15462
g11
(lp15463
sg13
S'com.google.common.testing.EqualsTester$NotAnInstance'
p15464
sg15
(lp15465
sg17
(lp15466
sg19
(lp15467
sg21
I0
sba(iArchitecture
Entity
p15468
(dp15469
g11
(lp15470
sg13
S'com.google.common.testing.EquivalenceTester'
p15471
sg15
(lp15472
sg17
(lp15473
sg19
(lp15474
sg21
I0
sba(iArchitecture
Entity
p15475
(dp15476
g11
(lp15477
sg13
S'com.google.common.testing.ForwardingWrapperTester'
p15478
sg15
(lp15479
sg17
(lp15480
sg19
(lp15481
sg21
I0
sba(iArchitecture
Entity
p15482
(dp15483
g11
(lp15484
sg13
S'com.google.common.testing.ForwardingWrapperTester$1'
p15485
sg15
(lp15486
sg17
(lp15487
sg19
(lp15488
sg21
I0
sba(iArchitecture
Entity
p15489
(dp15490
g11
(lp15491
sg13
S'com.google.common.testing.ForwardingWrapperTester$InteractionTester'
p15492
sg15
(lp15493
sg17
(lp15494
sg19
(lp15495
sg21
I0
sba(iArchitecture
Entity
p15496
(dp15497
g11
(lp15498
sg13
S'com.google.common.testing.FreshValueGenerator'
p15499
sg15
(lp15500
sg17
(lp15501
sg19
(lp15502
sg21
I0
sba(iArchitecture
Entity
p15503
(dp15504
g11
(lp15505
sg13
S'com.google.common.testing.FreshValueGenerator$1'
p15506
sg15
(lp15507
sg17
(lp15508
sg19
(lp15509
sg21
I0
sba(iArchitecture
Entity
p15510
(dp15511
g11
(lp15512
sg13
S'com.google.common.testing.FreshValueGenerator$2'
p15513
sg15
(lp15514
sg17
(lp15515
sg19
(lp15516
sg21
I0
sba(iArchitecture
Entity
p15517
(dp15518
g11
(lp15519
sg13
S'com.google.common.testing.FreshValueGenerator$3'
p15520
sg15
(lp15521
sg17
(lp15522
sg19
(lp15523
sg21
I0
sba(iArchitecture
Entity
p15524
(dp15525
g11
(lp15526
sg13
S'com.google.common.testing.FreshValueGenerator$4'
p15527
sg15
(lp15528
sg17
(lp15529
sg19
(lp15530
sg21
I0
sba(iArchitecture
Entity
p15531
(dp15532
g11
(lp15533
sg13
S'com.google.common.testing.FreshValueGenerator$FreshInvocationHandler'
p15534
sg15
(lp15535
sg17
(lp15536
sg19
(lp15537
sg21
I0
sba(iArchitecture
Entity
p15538
(dp15539
g11
(lp15540
sg13
S'com.google.common.testing.FreshValueGenerator$Generates'
p15541
sg15
(lp15542
sg17
(lp15543
sg19
(lp15544
sg21
I0
sba(iArchitecture
Entity
p15545
(dp15546
g11
(lp15547
g940
asg13
S'com.google.common.testing.GcFinalization'
p15548
sg15
(lp15549
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15550
asg17
(lp15551
g952
asg19
(lp15552
g956
asg21
I0
sba(iArchitecture
Entity
p15553
(dp15554
g11
(lp15555
g940
asg13
S'com.google.common.testing.GcFinalization$1'
p15556
sg15
(lp15557
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15558
asg17
(lp15559
g952
asg19
(lp15560
g956
asg21
I0
sba(iArchitecture
Entity
p15561
(dp15562
g11
(lp15563
g940
asg13
S'com.google.common.testing.GcFinalization$2'
p15564
sg15
(lp15565
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15566
asg17
(lp15567
g952
asg19
(lp15568
g956
asg21
I0
sba(iArchitecture
Entity
p15569
(dp15570
g11
(lp15571
g940
asg13
S'com.google.common.testing.GcFinalization$3'
p15572
sg15
(lp15573
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15574
asg17
(lp15575
g952
asg19
(lp15576
g956
asg21
I0
sba(iArchitecture
Entity
p15577
(dp15578
g11
(lp15579
g940
asg13
S'com.google.common.testing.GcFinalization$FinalizationPredicate'
p15580
sg15
(lp15581
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15582
asg17
(lp15583
g952
asg19
(lp15584
g956
asg21
I0
sba(iArchitecture
Entity
p15585
(dp15586
g11
(lp15587
g102
ag940
asg13
S'com.google.common.testing.NullPointerTester'
p15588
sg15
(lp15589
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15590
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15591
asg17
(lp15592
g107
ag952
asg19
(lp15593
g109
ag956
asg21
I0
sba(iArchitecture
Entity
p15594
(dp15595
g11
(lp15596
g102
ag940
asg13
S'com.google.common.testing.NullPointerTester$1'
p15597
sg15
(lp15598
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15599
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15600
asg17
(lp15601
g107
ag952
asg19
(lp15602
g109
ag956
asg21
I0
sba(iArchitecture
Entity
p15603
(dp15604
g11
(lp15605
g102
ag940
asg13
S'com.google.common.testing.NullPointerTester$2'
p15606
sg15
(lp15607
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15608
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15609
asg17
(lp15610
g107
ag952
asg19
(lp15611
g109
ag956
asg21
I0
sba(iArchitecture
Entity
p15612
(dp15613
g11
(lp15614
g102
ag940
asg13
S'com.google.common.testing.NullPointerTester$ExceptionTypePolicy'
p15615
sg15
(lp15616
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15617
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15618
asg17
(lp15619
g107
ag952
asg19
(lp15620
g109
ag956
asg21
I0
sba(iArchitecture
Entity
p15621
(dp15622
g11
(lp15623
g102
ag940
asg13
S'com.google.common.testing.NullPointerTester$ExceptionTypePolicy$1'
p15624
sg15
(lp15625
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15626
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15627
asg17
(lp15628
g107
ag952
asg19
(lp15629
g109
ag956
asg21
I0
sba(iArchitecture
Entity
p15630
(dp15631
g11
(lp15632
g102
ag940
asg13
S'com.google.common.testing.NullPointerTester$ExceptionTypePolicy$2'
p15633
sg15
(lp15634
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15635
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15636
asg17
(lp15637
g107
ag952
asg19
(lp15638
g109
ag956
asg21
I0
sba(iArchitecture
Entity
p15639
(dp15640
g11
(lp15641
g102
ag940
asg13
S'com.google.common.testing.NullPointerTester$Signature'
p15642
sg15
(lp15643
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15644
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15645
asg17
(lp15646
g107
ag952
asg19
(lp15647
g109
ag956
asg21
I0
sba(iArchitecture
Entity
p15648
(dp15649
g11
(lp15650
g102
ag940
asg13
S'com.google.common.testing.NullPointerTester$Visibility'
p15651
sg15
(lp15652
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15653
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15654
asg17
(lp15655
g107
ag952
asg19
(lp15656
g109
ag956
asg21
I0
sba(iArchitecture
Entity
p15657
(dp15658
g11
(lp15659
g102
ag940
asg13
S'com.google.common.testing.NullPointerTester$Visibility$1'
p15660
sg15
(lp15661
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15662
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15663
asg17
(lp15664
g107
ag952
asg19
(lp15665
g109
ag956
asg21
I0
sba(iArchitecture
Entity
p15666
(dp15667
g11
(lp15668
g102
ag940
asg13
S'com.google.common.testing.NullPointerTester$Visibility$2'
p15669
sg15
(lp15670
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15671
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15672
asg17
(lp15673
g107
ag952
asg19
(lp15674
g109
ag956
asg21
I0
sba(iArchitecture
Entity
p15675
(dp15676
g11
(lp15677
g102
ag940
asg13
S'com.google.common.testing.NullPointerTester$Visibility$3'
p15678
sg15
(lp15679
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15680
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p15681
asg17
(lp15682
g107
ag952
asg19
(lp15683
g109
ag956
asg21
I0
sba(iArchitecture
Entity
p15684
(dp15685
g11
(lp15686
sg13
S'com.google.common.testing.Platform'
p15687
sg15
(lp15688
sg17
(lp15689
sg19
(lp15690
sg21
I0
sba(iArchitecture
Entity
p15691
(dp15692
g11
(lp15693
sg13
S'com.google.common.testing.RelationshipTester'
p15694
sg15
(lp15695
sg17
(lp15696
sg19
(lp15697
sg21
I0
sba(iArchitecture
Entity
p15698
(dp15699
g11
(lp15700
sg13
S'com.google.common.testing.RelationshipTester$Item'
p15701
sg15
(lp15702
sg17
(lp15703
sg19
(lp15704
sg21
I0
sba(iArchitecture
Entity
p15705
(dp15706
g11
(lp15707
sg13
S'com.google.common.testing.RelationshipTester$ItemReporter'
p15708
sg15
(lp15709
sg17
(lp15710
sg19
(lp15711
sg21
I0
sba(iArchitecture
Entity
p15712
(dp15713
g11
(lp15714
g102
asg13
S'com.google.common.testing.SerializableTester'
p15715
sg15
(lp15716
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15717
asg17
(lp15718
g107
asg19
(lp15719
g109
asg21
I0
sba(iArchitecture
Entity
p15720
(dp15721
g11
(lp15722
sg13
S'com.google.common.testing.TearDown'
p15723
sg15
(lp15724
sg17
(lp15725
sg19
(lp15726
sg21
I0
sba(iArchitecture
Entity
p15727
(dp15728
g11
(lp15729
sg13
S'com.google.common.testing.TearDownAccepter'
p15730
sg15
(lp15731
sg17
(lp15732
sg19
(lp15733
sg21
I0
sba(iArchitecture
Entity
p15734
(dp15735
g11
(lp15736
sg13
S'com.google.common.testing.TearDownStack'
p15737
sg15
(lp15738
sg17
(lp15739
sg19
(lp15740
sg21
I0
sba(iArchitecture
Entity
p15741
(dp15742
g11
(lp15743
sg13
S'junit.framework.AssertionFailedError'
p15744
sg15
(lp15745
sg17
(lp15746
sg19
(lp15747
sg21
I0
sba(iArchitecture
Entity
p15748
(dp15749
g11
(lp15750
sg13
S'org.junit.Test'
p15751
sg15
(lp15752
sg17
(lp15753
sg19
(lp15754
sg21
I0
sbasg1055
(lp15755
g15078
ag15085
ag15092
ag15099
ag15106
ag15113
ag15120
ag15127
ag15134
ag15141
ag15148
ag15157
ag15164
ag15171
ag15178
ag15185
ag15192
ag15200
ag15207
ag15215
ag15223
ag15231
ag15239
ag15247
ag15255
ag15263
ag15271
ag15279
ag15287
ag15295
ag15303
ag15311
ag15319
ag15327
ag15335
ag15343
ag15351
ag15359
ag15366
ag15373
ag15380
ag15387
ag15394
ag15401
ag15408
ag15415
ag15422
ag15429
ag15436
ag15443
ag15450
ag15457
ag15464
ag15471
ag15478
ag15485
ag15492
ag15499
ag15506
ag15513
ag15520
ag15527
ag15534
ag15541
ag15548
ag15556
ag15564
ag15572
ag15580
ag15588
ag15597
ag15606
ag15615
ag15624
ag15633
ag15642
ag15651
ag15660
ag15669
ag15678
ag15687
ag15694
ag15701
ag15708
ag15715
ag15723
ag15730
ag15737
ag15744
ag15751
asg21
I0
sg1057
S'com.google.common.testing.ss'
p15756
sba(iArchitecture
Cluster
p15757
(dp15758
g7
(lp15759
(iArchitecture
Entity
p15760
(dp15761
g11
(lp15762
sg13
S'com.google.common.base.Supplier'
p15763
sg15
(lp15764
sg17
(lp15765
sg19
(lp15766
sg21
I0
sba(iArchitecture
Entity
p15767
(dp15768
g11
(lp15769
sg13
S'com.google.common.base.Throwables'
p15770
sg15
(lp15771
sg17
(lp15772
sg19
(lp15773
sg21
I0
sba(iArchitecture
Entity
p15774
(dp15775
g11
(lp15776
sg13
S'com.google.common.collect.ForwardingObject'
p15777
sg15
(lp15778
sg17
(lp15779
sg19
(lp15780
sg21
I0
sba(iArchitecture
Entity
p15781
(dp15782
g11
(lp15783
sg13
S'com.google.common.collect.Queues'
p15784
sg15
(lp15785
sg17
(lp15786
sg19
(lp15787
sg21
I0
sba(iArchitecture
Entity
p15788
(dp15789
g11
(lp15790
sg13
S'com.google.common.util.concurrent.AbstractCheckedFuture'
p15791
sg15
(lp15792
sg17
(lp15793
sg19
(lp15794
sg21
I0
sba(iArchitecture
Entity
p15795
(dp15796
g11
(lp15797
sg13
S'com.google.common.util.concurrent.AbstractExecutionThreadService'
p15798
sg15
(lp15799
sg17
(lp15800
sg19
(lp15801
sg21
I0
sba(iArchitecture
Entity
p15802
(dp15803
g11
(lp15804
sg13
S'com.google.common.util.concurrent.AbstractExecutionThreadService$1'
p15805
sg15
(lp15806
sg17
(lp15807
sg19
(lp15808
sg21
I0
sba(iArchitecture
Entity
p15809
(dp15810
g11
(lp15811
sg13
S'com.google.common.util.concurrent.AbstractExecutionThreadService$1$1'
p15812
sg15
(lp15813
sg17
(lp15814
sg19
(lp15815
sg21
I0
sba(iArchitecture
Entity
p15816
(dp15817
g11
(lp15818
sg13
S'com.google.common.util.concurrent.AbstractExecutionThreadService$1$2'
p15819
sg15
(lp15820
sg17
(lp15821
sg19
(lp15822
sg21
I0
sba(iArchitecture
Entity
p15823
(dp15824
g11
(lp15825
sg13
S'com.google.common.util.concurrent.AbstractExecutionThreadService$2'
p15826
sg15
(lp15827
sg17
(lp15828
sg19
(lp15829
sg21
I0
sba(iArchitecture
Entity
p15830
(dp15831
g11
(lp15832
g102
asg13
S'com.google.common.util.concurrent.AbstractFuture'
p15833
sg15
(lp15834
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15835
asg17
(lp15836
g107
asg19
(lp15837
g109
asg21
I0
sba(iArchitecture
Entity
p15838
(dp15839
g11
(lp15840
g102
asg13
S'com.google.common.util.concurrent.AbstractFuture$Sync'
p15841
sg15
(lp15842
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p15843
asg17
(lp15844
g107
asg19
(lp15845
g109
asg21
I0
sba(iArchitecture
Entity
p15846
(dp15847
g11
(lp15848
sg13
S'com.google.common.util.concurrent.AbstractIdleService'
p15849
sg15
(lp15850
sg17
(lp15851
sg19
(lp15852
sg21
I0
sba(iArchitecture
Entity
p15853
(dp15854
g11
(lp15855
sg13
S'com.google.common.util.concurrent.AbstractIdleService$1'
p15856
sg15
(lp15857
sg17
(lp15858
sg19
(lp15859
sg21
I0
sba(iArchitecture
Entity
p15860
(dp15861
g11
(lp15862
sg13
S'com.google.common.util.concurrent.AbstractIdleService$2'
p15863
sg15
(lp15864
sg17
(lp15865
sg19
(lp15866
sg21
I0
sba(iArchitecture
Entity
p15867
(dp15868
g11
(lp15869
sg13
S'com.google.common.util.concurrent.AbstractIdleService$2$1'
p15870
sg15
(lp15871
sg17
(lp15872
sg19
(lp15873
sg21
I0
sba(iArchitecture
Entity
p15874
(dp15875
g11
(lp15876
sg13
S'com.google.common.util.concurrent.AbstractIdleService$2$2'
p15877
sg15
(lp15878
sg17
(lp15879
sg19
(lp15880
sg21
I0
sba(iArchitecture
Entity
p15881
(dp15882
g11
(lp15883
sg13
S'com.google.common.util.concurrent.AbstractIdleService$3'
p15884
sg15
(lp15885
sg17
(lp15886
sg19
(lp15887
sg21
I0
sba(iArchitecture
Entity
p15888
(dp15889
g11
(lp15890
V2072
p15891
ag15891
asg13
S'com.google.common.util.concurrent.AbstractScheduledService'
p15892
sg15
(lp15893
V(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15894
aV(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15895
asg17
(lp15896
(lp15897
I1
aag15897
asg19
(lp15898
VDeadlock when stopping an AbstractScheduledService and Exception thrown from CustomScheduler.getNextSchedule()
p15899
ag15899
asg21
I0
sba(iArchitecture
Entity
p15900
(dp15901
g11
(lp15902
g15891
ag15891
asg13
S'com.google.common.util.concurrent.AbstractScheduledService$1'
p15903
sg15
(lp15904
V(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15905
aV(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15906
asg17
(lp15907
g15897
ag15897
asg19
(lp15908
g15899
ag15899
asg21
I0
sba(iArchitecture
Entity
p15909
(dp15910
g11
(lp15911
g15891
ag15891
asg13
S'com.google.common.util.concurrent.AbstractScheduledService$1$1'
p15912
sg15
(lp15913
V(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15914
aV(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15915
asg17
(lp15916
g15897
ag15897
asg19
(lp15917
g15899
ag15899
asg21
I0
sba(iArchitecture
Entity
p15918
(dp15919
g11
(lp15920
g15891
ag15891
asg13
S'com.google.common.util.concurrent.AbstractScheduledService$1$2'
p15921
sg15
(lp15922
V(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15923
aV(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15924
asg17
(lp15925
g15897
ag15897
asg19
(lp15926
g15899
ag15899
asg21
I0
sba(iArchitecture
Entity
p15927
(dp15928
g11
(lp15929
g15891
ag15891
asg13
S'com.google.common.util.concurrent.AbstractScheduledService$1$3'
p15930
sg15
(lp15931
V(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15932
aV(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15933
asg17
(lp15934
g15897
ag15897
asg19
(lp15935
g15899
ag15899
asg21
I0
sba(iArchitecture
Entity
p15936
(dp15937
g11
(lp15938
g15891
ag15891
asg13
S'com.google.common.util.concurrent.AbstractScheduledService$1$4'
p15939
sg15
(lp15940
V(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15941
aV(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15942
asg17
(lp15943
g15897
ag15897
asg19
(lp15944
g15899
ag15899
asg21
I0
sba(iArchitecture
Entity
p15945
(dp15946
g11
(lp15947
g15891
ag15891
asg13
S'com.google.common.util.concurrent.AbstractScheduledService$2'
p15948
sg15
(lp15949
V(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15950
aV(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15951
asg17
(lp15952
g15897
ag15897
asg19
(lp15953
g15899
ag15899
asg21
I0
sba(iArchitecture
Entity
p15954
(dp15955
g11
(lp15956
g15891
ag15891
asg13
S'com.google.common.util.concurrent.AbstractScheduledService$3'
p15957
sg15
(lp15958
V(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15959
aV(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15960
asg17
(lp15961
g15897
ag15897
asg19
(lp15962
g15899
ag15899
asg21
I0
sba(iArchitecture
Entity
p15963
(dp15964
g11
(lp15965
g15891
ag15891
asg13
S'com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler'
p15966
sg15
(lp15967
V(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15968
aV(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15969
asg17
(lp15970
g15897
ag15897
asg19
(lp15971
g15899
ag15899
asg21
I0
sba(iArchitecture
Entity
p15972
(dp15973
g11
(lp15974
g15891
ag15891
asg13
S'com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable'
p15975
sg15
(lp15976
V(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15977
aV(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15978
asg17
(lp15979
g15897
ag15897
asg19
(lp15980
g15899
ag15899
asg21
I0
sba(iArchitecture
Entity
p15981
(dp15982
g11
(lp15983
g15891
ag15891
asg13
S'com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule'
p15984
sg15
(lp15985
V(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15986
aV(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15987
asg17
(lp15988
g15897
ag15897
asg19
(lp15989
g15899
ag15899
asg21
I0
sba(iArchitecture
Entity
p15990
(dp15991
g11
(lp15992
g15891
ag15891
asg13
S'com.google.common.util.concurrent.AbstractScheduledService$Scheduler'
p15993
sg15
(lp15994
V(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15995
aV(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p15996
asg17
(lp15997
g15897
ag15897
asg19
(lp15998
g15899
ag15899
asg21
I0
sba(iArchitecture
Entity
p15999
(dp16000
g11
(lp16001
g15891
ag15891
asg13
S'com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1'
p16002
sg15
(lp16003
V(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p16004
aV(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p16005
asg17
(lp16006
g15897
ag15897
asg19
(lp16007
g15899
ag15899
asg21
I0
sba(iArchitecture
Entity
p16008
(dp16009
g11
(lp16010
g15891
ag15891
asg13
S'com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2'
p16011
sg15
(lp16012
V(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p16013
aV(Source attached below which demonstrates the issue).\u000aI have an implementation of an AbstractScheduledService which overrides the scheduler() method and creates and returns a CustomScheduler.  This CustomScheduler's getNextSchedule() method sleeps for a period of time (which makes the deadlock more predicable) and then either returns a Schedule, or if the Service\u2019s state is STOPPING it throws an exception.  \u000aThe problem arises when it throws an exception.  After throwing the exception the service never actually terminates, and the shutDown() method is never called.  After a brief investigation, it looks as though there is a deadlock between notifyFailed() and stopAsync() in AbstractService class.  notifyFailed() (called from the catch block of reschedule() method in one of AbstractScheduledService inner classes) tries to enter the monitor field but is blocked as the monitor is currently held by stopAsync(), and stopAsync() hasn\u2019t released the monitor yet as it is blocked when calling this.doStop() (in case 3 of switch stmt).  The doStop() called is the impl in AbstractScheduledService, and this gets blocked on the first line waiting for this.runningTask.cancel(false) to return.\u000a\u000aI haven\u2019t had time to download the source code and build things myself to investigate it further, but hopefully there is enough here to go on.  Below is some source code which demonstrates the problem, and the log output showing that the service\u2019s shutDown() method is not called and the service and JVM hasn\u2019t terminated yet.\u000a\u000a``` java\u000apublic class Main {\u000a    public static void main(String[] args) throws Exception {\u000a        Service service = new ScheduledServiceWithCustomBlockingScheduler(5000);\u000a        new ServiceStateMonitor().monitorServiceStateWithServiceListener(service);\u000a        System.out.println("starting service");\u000a        service.startAsync();\u000a        Thread.sleep(6000); // wait just enough time for 2nd call of getNextSchedule() to start\u000a        System.out.println("Stopping service");\u000a        service.stopAsync();\u000a        System.out.println("Bye");\u000a      }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ScheduledServiceWithCustomBlockingScheduler extends AbstractScheduledService {\u000a    private long blockTime;\u000a\u000a    public ScheduledServiceWithCustomBlockingScheduler(final long blockTime) {\u000a        this.blockTime = blockTime;\u000a    }\u000a\u000a    @Override\u000a    protected void runOneIteration() throws Exception {\u000a        System.out.println("runOneIteration()");\u000a    }\u000a\u000a    @Override\u000a    protected Scheduler scheduler() {\u000a        return new CustomScheduler() {\u000a            @Override\u000a            protected Schedule getNextSchedule() throws Exception {\u000a                System.out.println("getNextSchedule()...");\u000a                Thread.sleep(blockTime);\u000a                if (state() == State.STOPPING) {\u000a                    System.out.println("getNextSchedule() - not running anymore so don't return scheduler");\u000a                    throw new Exception("not running anymore so don't return scheduler");\u000a                }\u000a                System.out.println("...getNextSchedule()");\u000a                return new Schedule(0, TimeUnit.NANOSECONDS);\u000a            }\u000a        };\u000a    }\u000a\u000a    @Override\u000a    protected void startUp() throws Exception {\u000a        System.out.println("startUp()");\u000a    }\u000a\u000a    @Override\u000a    protected void shutDown() throws Exception {\u000a        System.out.println("shutDown()");\u000a    }\u000a}\u000a```\u000a\u000a``` java\u000apublic class ServiceStateMonitor {\u000a    public void monitorServiceStateWithServiceListener(final Service serviceToMonitor) {\u000a        serviceToMonitor.addListener(new PrintOutNewStateServiceListener(), MoreExecutors.directExecutor());\u000a    }\u000a\u000a    private class PrintOutNewStateServiceListener extends Service.Listener {\u000a        @Override\u000a        public void starting() {\u000a            System.out.println("SERVICE LISTENER : Starting");\u000a        }\u000a\u000a        @Override\u000a        public void running() {\u000a            System.out.println("SERVICE LISTENER : Running");\u000a        }\u000a\u000a        @Override\u000a        public void stopping(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Stopping");\u000a        }\u000a\u000a        @Override\u000a        public void terminated(final Service.State from) {\u000a            System.out.println("SERVICE LISTENER : Terminated");\u000a        }\u000a\u000a        @Override\u000a        public void failed(final Service.State from, final Throwable failure) {\u000a            System.out.println("SERVICE LISTENER : Failed");\u000a        }\u000a    }\u000a}\u000a```\u000a\u000aThe Standard Ouput from running the main()\u000a\u000a```\u000astarting service\u000aSERVICE LISTENER : Starting\u000astartUp()\u000agetNextSchedule()...\u000a...getNextSchedule()\u000aSERVICE LISTENER : Running\u000arunOneIteration()\u000agetNextSchedule()...\u000aStopping service\u000agetNextSchedule() - not running anymore so don't return scheduler\u000a```\u000a\u000anotice that there is no "shutDown()" or "Bye" output line.\u000a
p16014
asg17
(lp16015
g15897
ag15897
asg19
(lp16016
g15899
ag15899
asg21
I0
sba(iArchitecture
Entity
p16017
(dp16018
g11
(lp16019
sg13
S'com.google.common.util.concurrent.AbstractService'
p16020
sg15
(lp16021
sg17
(lp16022
sg19
(lp16023
sg21
I0
sba(iArchitecture
Entity
p16024
(dp16025
g11
(lp16026
sg13
S'com.google.common.util.concurrent.AbstractService$1'
p16027
sg15
(lp16028
sg17
(lp16029
sg19
(lp16030
sg21
I0
sba(iArchitecture
Entity
p16031
(dp16032
g11
(lp16033
sg13
S'com.google.common.util.concurrent.AbstractService$10'
p16034
sg15
(lp16035
sg17
(lp16036
sg19
(lp16037
sg21
I0
sba(iArchitecture
Entity
p16038
(dp16039
g11
(lp16040
sg13
S'com.google.common.util.concurrent.AbstractService$2'
p16041
sg15
(lp16042
sg17
(lp16043
sg19
(lp16044
sg21
I0
sba(iArchitecture
Entity
p16045
(dp16046
g11
(lp16047
sg13
S'com.google.common.util.concurrent.AbstractService$3'
p16048
sg15
(lp16049
sg17
(lp16050
sg19
(lp16051
sg21
I0
sba(iArchitecture
Entity
p16052
(dp16053
g11
(lp16054
sg13
S'com.google.common.util.concurrent.AbstractService$4'
p16055
sg15
(lp16056
sg17
(lp16057
sg19
(lp16058
sg21
I0
sba(iArchitecture
Entity
p16059
(dp16060
g11
(lp16061
sg13
S'com.google.common.util.concurrent.AbstractService$5'
p16062
sg15
(lp16063
sg17
(lp16064
sg19
(lp16065
sg21
I0
sba(iArchitecture
Entity
p16066
(dp16067
g11
(lp16068
sg13
S'com.google.common.util.concurrent.AbstractService$6'
p16069
sg15
(lp16070
sg17
(lp16071
sg19
(lp16072
sg21
I0
sba(iArchitecture
Entity
p16073
(dp16074
g11
(lp16075
sg13
S'com.google.common.util.concurrent.AbstractService$7'
p16076
sg15
(lp16077
sg17
(lp16078
sg19
(lp16079
sg21
I0
sba(iArchitecture
Entity
p16080
(dp16081
g11
(lp16082
sg13
S'com.google.common.util.concurrent.AbstractService$8'
p16083
sg15
(lp16084
sg17
(lp16085
sg19
(lp16086
sg21
I0
sba(iArchitecture
Entity
p16087
(dp16088
g11
(lp16089
sg13
S'com.google.common.util.concurrent.AbstractService$9'
p16090
sg15
(lp16091
sg17
(lp16092
sg19
(lp16093
sg21
I0
sba(iArchitecture
Entity
p16094
(dp16095
g11
(lp16096
sg13
S'com.google.common.util.concurrent.AbstractService$StateSnapshot'
p16097
sg15
(lp16098
sg17
(lp16099
sg19
(lp16100
sg21
I0
sba(iArchitecture
Entity
p16101
(dp16102
g11
(lp16103
sg13
S'com.google.common.util.concurrent.AsyncFunction'
p16104
sg15
(lp16105
sg17
(lp16106
sg19
(lp16107
sg21
I0
sba(iArchitecture
Entity
p16108
(dp16109
g11
(lp16110
sg13
S'com.google.common.util.concurrent.AsyncSettableFuture'
p16111
sg15
(lp16112
sg17
(lp16113
sg19
(lp16114
sg21
I0
sba(iArchitecture
Entity
p16115
(dp16116
g11
(lp16117
sg13
S'com.google.common.util.concurrent.AsyncSettableFuture$1'
p16118
sg15
(lp16119
sg17
(lp16120
sg19
(lp16121
sg21
I0
sba(iArchitecture
Entity
p16122
(dp16123
g11
(lp16124
sg13
S'com.google.common.util.concurrent.AsyncSettableFuture$NestedFuture'
p16125
sg15
(lp16126
sg17
(lp16127
sg19
(lp16128
sg21
I0
sba(iArchitecture
Entity
p16129
(dp16130
g11
(lp16131
sg13
S'com.google.common.util.concurrent.AtomicLongMap'
p16132
sg15
(lp16133
sg17
(lp16134
sg19
(lp16135
sg21
I0
sba(iArchitecture
Entity
p16136
(dp16137
g11
(lp16138
sg13
S'com.google.common.util.concurrent.AtomicLongMap$1'
p16139
sg15
(lp16140
sg17
(lp16141
sg19
(lp16142
sg21
I0
sba(iArchitecture
Entity
p16143
(dp16144
g11
(lp16145
sg13
S'com.google.common.util.concurrent.Callables'
p16146
sg15
(lp16147
sg17
(lp16148
sg19
(lp16149
sg21
I0
sba(iArchitecture
Entity
p16150
(dp16151
g11
(lp16152
sg13
S'com.google.common.util.concurrent.Callables$1'
p16153
sg15
(lp16154
sg17
(lp16155
sg19
(lp16156
sg21
I0
sba(iArchitecture
Entity
p16157
(dp16158
g11
(lp16159
sg13
S'com.google.common.util.concurrent.Callables$2'
p16160
sg15
(lp16161
sg17
(lp16162
sg19
(lp16163
sg21
I0
sba(iArchitecture
Entity
p16164
(dp16165
g11
(lp16166
sg13
S'com.google.common.util.concurrent.Callables$3'
p16167
sg15
(lp16168
sg17
(lp16169
sg19
(lp16170
sg21
I0
sba(iArchitecture
Entity
p16171
(dp16172
g11
(lp16173
sg13
S'com.google.common.util.concurrent.CheckedFuture'
p16174
sg15
(lp16175
sg17
(lp16176
sg19
(lp16177
sg21
I0
sba(iArchitecture
Entity
p16178
(dp16179
g11
(lp16180
g102
ag102
asg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory'
p16181
sg15
(lp16182
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16183
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16184
asg17
(lp16185
g107
ag107
asg19
(lp16186
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p16187
(dp16188
g11
(lp16189
g102
ag102
asg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$1'
p16190
sg15
(lp16191
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16192
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16193
asg17
(lp16194
g107
ag107
asg19
(lp16195
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p16196
(dp16197
g11
(lp16198
g102
ag102
asg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock'
p16199
sg15
(lp16200
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16201
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16202
asg17
(lp16203
g107
ag107
asg19
(lp16204
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p16205
(dp16206
g11
(lp16207
g102
ag102
asg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock'
p16208
sg15
(lp16209
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16210
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16211
asg17
(lp16212
g107
ag107
asg19
(lp16213
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p16214
(dp16215
g11
(lp16216
g102
ag102
asg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock'
p16217
sg15
(lp16218
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16219
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16220
asg17
(lp16221
g107
ag107
asg19
(lp16222
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p16223
(dp16224
g11
(lp16225
g102
ag102
asg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock'
p16226
sg15
(lp16227
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16228
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16229
asg17
(lp16230
g107
ag107
asg19
(lp16231
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p16232
(dp16233
g11
(lp16234
g102
ag102
asg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock'
p16235
sg15
(lp16236
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16237
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16238
asg17
(lp16239
g107
ag107
asg19
(lp16240
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p16241
(dp16242
g11
(lp16243
g102
ag102
asg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace'
p16244
sg15
(lp16245
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16246
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16247
asg17
(lp16248
g107
ag107
asg19
(lp16249
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p16250
(dp16251
g11
(lp16252
g102
ag102
asg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode'
p16253
sg15
(lp16254
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16255
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16256
asg17
(lp16257
g107
ag107
asg19
(lp16258
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p16259
(dp16260
g11
(lp16261
g102
ag102
asg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$Policies'
p16262
sg15
(lp16263
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16264
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16265
asg17
(lp16266
g107
ag107
asg19
(lp16267
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p16268
(dp16269
g11
(lp16270
g102
ag102
asg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$1'
p16271
sg15
(lp16272
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16273
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16274
asg17
(lp16275
g107
ag107
asg19
(lp16276
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p16277
(dp16278
g11
(lp16279
g102
ag102
asg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$2'
p16280
sg15
(lp16281
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16282
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16283
asg17
(lp16284
g107
ag107
asg19
(lp16285
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p16286
(dp16287
g11
(lp16288
g102
ag102
asg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$3'
p16289
sg15
(lp16290
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16291
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16292
asg17
(lp16293
g107
ag107
asg19
(lp16294
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p16295
(dp16296
g11
(lp16297
g102
ag102
asg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$Policy'
p16298
sg15
(lp16299
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16300
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16301
asg17
(lp16302
g107
ag107
asg19
(lp16303
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p16304
(dp16305
g11
(lp16306
g102
ag102
asg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException'
p16307
sg15
(lp16308
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16309
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16310
asg17
(lp16311
g107
ag107
asg19
(lp16312
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p16313
(dp16314
g11
(lp16315
g102
ag102
asg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering'
p16316
sg15
(lp16317
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16318
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16319
asg17
(lp16320
g107
ag107
asg19
(lp16321
g109
ag109
asg21
I0
sba(iArchitecture
Entity
p16322
(dp16323
g11
(lp16324
sg13
S'com.google.common.util.concurrent.ExecutionError'
p16325
sg15
(lp16326
sg17
(lp16327
sg19
(lp16328
sg21
I0
sba(iArchitecture
Entity
p16329
(dp16330
g11
(lp16331
sg13
S'com.google.common.util.concurrent.ExecutionList'
p16332
sg15
(lp16333
sg17
(lp16334
sg19
(lp16335
sg21
I0
sba(iArchitecture
Entity
p16336
(dp16337
g11
(lp16338
sg13
S'com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair'
p16339
sg15
(lp16340
sg17
(lp16341
sg19
(lp16342
sg21
I0
sba(iArchitecture
Entity
p16343
(dp16344
g11
(lp16345
sg13
S'com.google.common.util.concurrent.ForwardingCheckedFuture'
p16346
sg15
(lp16347
sg17
(lp16348
sg19
(lp16349
sg21
I0
sba(iArchitecture
Entity
p16350
(dp16351
g11
(lp16352
sg13
S'com.google.common.util.concurrent.ForwardingCheckedFuture$SimpleForwardingCheckedFuture'
p16353
sg15
(lp16354
sg17
(lp16355
sg19
(lp16356
sg21
I0
sba(iArchitecture
Entity
p16357
(dp16358
g11
(lp16359
sg13
S'com.google.common.util.concurrent.ForwardingExecutorService'
p16360
sg15
(lp16361
sg17
(lp16362
sg19
(lp16363
sg21
I0
sba(iArchitecture
Entity
p16364
(dp16365
g11
(lp16366
sg13
S'com.google.common.util.concurrent.ForwardingFuture'
p16367
sg15
(lp16368
sg17
(lp16369
sg19
(lp16370
sg21
I0
sba(iArchitecture
Entity
p16371
(dp16372
g11
(lp16373
sg13
S'com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture'
p16374
sg15
(lp16375
sg17
(lp16376
sg19
(lp16377
sg21
I0
sba(iArchitecture
Entity
p16378
(dp16379
g11
(lp16380
sg13
S'com.google.common.util.concurrent.ForwardingListeningExecutorService'
p16381
sg15
(lp16382
sg17
(lp16383
sg19
(lp16384
sg21
I0
sba(iArchitecture
Entity
p16385
(dp16386
g11
(lp16387
sg13
S'com.google.common.util.concurrent.FutureCallback'
p16388
sg15
(lp16389
sg17
(lp16390
sg19
(lp16391
sg21
I0
sba(iArchitecture
Entity
p16392
(dp16393
g11
(lp16394
sg13
S'com.google.common.util.concurrent.FutureFallback'
p16395
sg15
(lp16396
sg17
(lp16397
sg19
(lp16398
sg21
I0
sba(iArchitecture
Entity
p16399
(dp16400
g11
(lp16401
sg13
S'com.google.common.util.concurrent.Futures'
p16402
sg15
(lp16403
sg17
(lp16404
sg19
(lp16405
sg21
I0
sba(iArchitecture
Entity
p16406
(dp16407
g11
(lp16408
sg13
S'com.google.common.util.concurrent.Futures$1'
p16409
sg15
(lp16410
sg17
(lp16411
sg19
(lp16412
sg21
I0
sba(iArchitecture
Entity
p16413
(dp16414
g11
(lp16415
sg13
S'com.google.common.util.concurrent.Futures$1$1'
p16416
sg15
(lp16417
sg17
(lp16418
sg19
(lp16419
sg21
I0
sba(iArchitecture
Entity
p16420
(dp16421
g11
(lp16422
sg13
S'com.google.common.util.concurrent.Futures$2'
p16423
sg15
(lp16424
sg17
(lp16425
sg19
(lp16426
sg21
I0
sba(iArchitecture
Entity
p16427
(dp16428
g11
(lp16429
sg13
S'com.google.common.util.concurrent.Futures$3'
p16430
sg15
(lp16431
sg17
(lp16432
sg19
(lp16433
sg21
I0
sba(iArchitecture
Entity
p16434
(dp16435
g11
(lp16436
sg13
S'com.google.common.util.concurrent.Futures$4'
p16437
sg15
(lp16438
sg17
(lp16439
sg19
(lp16440
sg21
I0
sba(iArchitecture
Entity
p16441
(dp16442
g11
(lp16443
sg13
S'com.google.common.util.concurrent.Futures$5'
p16444
sg15
(lp16445
sg17
(lp16446
sg19
(lp16447
sg21
I0
sba(iArchitecture
Entity
p16448
(dp16449
g11
(lp16450
sg13
S'com.google.common.util.concurrent.Futures$6'
p16451
sg15
(lp16452
sg17
(lp16453
sg19
(lp16454
sg21
I0
sba(iArchitecture
Entity
p16455
(dp16456
g11
(lp16457
sg13
S'com.google.common.util.concurrent.Futures$7'
p16458
sg15
(lp16459
sg17
(lp16460
sg19
(lp16461
sg21
I0
sba(iArchitecture
Entity
p16462
(dp16463
g11
(lp16464
sg13
S'com.google.common.util.concurrent.Futures$8'
p16465
sg15
(lp16466
sg17
(lp16467
sg19
(lp16468
sg21
I0
sba(iArchitecture
Entity
p16469
(dp16470
g11
(lp16471
sg13
S'com.google.common.util.concurrent.Futures$ChainingListenableFuture'
p16472
sg15
(lp16473
sg17
(lp16474
sg19
(lp16475
sg21
I0
sba(iArchitecture
Entity
p16476
(dp16477
g11
(lp16478
sg13
S'com.google.common.util.concurrent.Futures$ChainingListenableFuture$1'
p16479
sg15
(lp16480
sg17
(lp16481
sg19
(lp16482
sg21
I0
sba(iArchitecture
Entity
p16483
(dp16484
g11
(lp16485
sg13
S'com.google.common.util.concurrent.Futures$CombinedFuture'
p16486
sg15
(lp16487
sg17
(lp16488
sg19
(lp16489
sg21
I0
sba(iArchitecture
Entity
p16490
(dp16491
g11
(lp16492
sg13
S'com.google.common.util.concurrent.Futures$CombinedFuture$1'
p16493
sg15
(lp16494
sg17
(lp16495
sg19
(lp16496
sg21
I0
sba(iArchitecture
Entity
p16497
(dp16498
g11
(lp16499
sg13
S'com.google.common.util.concurrent.Futures$CombinedFuture$2'
p16500
sg15
(lp16501
sg17
(lp16502
sg19
(lp16503
sg21
I0
sba(iArchitecture
Entity
p16504
(dp16505
g11
(lp16506
sg13
S'com.google.common.util.concurrent.Futures$CombinerFuture'
p16507
sg15
(lp16508
sg17
(lp16509
sg19
(lp16510
sg21
I0
sba(iArchitecture
Entity
p16511
(dp16512
g11
(lp16513
sg13
S'com.google.common.util.concurrent.Futures$FallbackFuture'
p16514
sg15
(lp16515
sg17
(lp16516
sg19
(lp16517
sg21
I0
sba(iArchitecture
Entity
p16518
(dp16519
g11
(lp16520
sg13
S'com.google.common.util.concurrent.Futures$FallbackFuture$1'
p16521
sg15
(lp16522
sg17
(lp16523
sg19
(lp16524
sg21
I0
sba(iArchitecture
Entity
p16525
(dp16526
g11
(lp16527
sg13
S'com.google.common.util.concurrent.Futures$FallbackFuture$1$1'
p16528
sg15
(lp16529
sg17
(lp16530
sg19
(lp16531
sg21
I0
sba(iArchitecture
Entity
p16532
(dp16533
g11
(lp16534
sg13
S'com.google.common.util.concurrent.Futures$FutureCombiner'
p16535
sg15
(lp16536
sg17
(lp16537
sg19
(lp16538
sg21
I0
sba(iArchitecture
Entity
p16539
(dp16540
g11
(lp16541
sg13
S'com.google.common.util.concurrent.Futures$ImmediateCancelledFuture'
p16542
sg15
(lp16543
sg17
(lp16544
sg19
(lp16545
sg21
I0
sba(iArchitecture
Entity
p16546
(dp16547
g11
(lp16548
sg13
S'com.google.common.util.concurrent.Futures$ImmediateFailedCheckedFuture'
p16549
sg15
(lp16550
sg17
(lp16551
sg19
(lp16552
sg21
I0
sba(iArchitecture
Entity
p16553
(dp16554
g11
(lp16555
sg13
S'com.google.common.util.concurrent.Futures$ImmediateFailedFuture'
p16556
sg15
(lp16557
sg17
(lp16558
sg19
(lp16559
sg21
I0
sba(iArchitecture
Entity
p16560
(dp16561
g11
(lp16562
sg13
S'com.google.common.util.concurrent.Futures$ImmediateFuture'
p16563
sg15
(lp16564
sg17
(lp16565
sg19
(lp16566
sg21
I0
sba(iArchitecture
Entity
p16567
(dp16568
g11
(lp16569
sg13
S'com.google.common.util.concurrent.Futures$ImmediateSuccessfulCheckedFuture'
p16570
sg15
(lp16571
sg17
(lp16572
sg19
(lp16573
sg21
I0
sba(iArchitecture
Entity
p16574
(dp16575
g11
(lp16576
sg13
S'com.google.common.util.concurrent.Futures$ImmediateSuccessfulFuture'
p16577
sg15
(lp16578
sg17
(lp16579
sg19
(lp16580
sg21
I0
sba(iArchitecture
Entity
p16581
(dp16582
g11
(lp16583
sg13
S'com.google.common.util.concurrent.Futures$MappingCheckedFuture'
p16584
sg15
(lp16585
sg17
(lp16586
sg19
(lp16587
sg21
I0
sba(iArchitecture
Entity
p16588
(dp16589
g11
(lp16590
sg13
S'com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture'
p16591
sg15
(lp16592
sg17
(lp16593
sg19
(lp16594
sg21
I0
sba(iArchitecture
Entity
p16595
(dp16596
g11
(lp16597
sg13
S'com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture$1'
p16598
sg15
(lp16599
sg17
(lp16600
sg19
(lp16601
sg21
I0
sba(iArchitecture
Entity
p16602
(dp16603
g11
(lp16604
sg13
S'com.google.common.util.concurrent.Futures$WrappedCombiner'
p16605
sg15
(lp16606
sg17
(lp16607
sg19
(lp16608
sg21
I0
sba(iArchitecture
Entity
p16609
(dp16610
g11
(lp16611
sg13
S'com.google.common.util.concurrent.JdkFutureAdapters'
p16612
sg15
(lp16613
sg17
(lp16614
sg19
(lp16615
sg21
I0
sba(iArchitecture
Entity
p16616
(dp16617
g11
(lp16618
sg13
S'com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter'
p16619
sg15
(lp16620
sg17
(lp16621
sg19
(lp16622
sg21
I0
sba(iArchitecture
Entity
p16623
(dp16624
g11
(lp16625
sg13
S'com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter$1'
p16626
sg15
(lp16627
sg17
(lp16628
sg19
(lp16629
sg21
I0
sba(iArchitecture
Entity
p16630
(dp16631
g11
(lp16632
sg13
S'com.google.common.util.concurrent.ListenableFuture'
p16633
sg15
(lp16634
sg17
(lp16635
sg19
(lp16636
sg21
I0
sba(iArchitecture
Entity
p16637
(dp16638
g11
(lp16639
sg13
S'com.google.common.util.concurrent.ListenableFutureTask'
p16640
sg15
(lp16641
sg17
(lp16642
sg19
(lp16643
sg21
I0
sba(iArchitecture
Entity
p16644
(dp16645
g11
(lp16646
sg13
S'com.google.common.util.concurrent.ListenerCallQueue'
p16647
sg15
(lp16648
sg17
(lp16649
sg19
(lp16650
sg21
I0
sba(iArchitecture
Entity
p16651
(dp16652
g11
(lp16653
sg13
S'com.google.common.util.concurrent.ListenerCallQueue$Callback'
p16654
sg15
(lp16655
sg17
(lp16656
sg19
(lp16657
sg21
I0
sba(iArchitecture
Entity
p16658
(dp16659
g11
(lp16660
sg13
S'com.google.common.util.concurrent.ListeningExecutorService'
p16661
sg15
(lp16662
sg17
(lp16663
sg19
(lp16664
sg21
I0
sba(iArchitecture
Entity
p16665
(dp16666
g11
(lp16667
g102
asg13
S'com.google.common.util.concurrent.Monitor'
p16668
sg15
(lp16669
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16670
asg17
(lp16671
g107
asg19
(lp16672
g109
asg21
I0
sba(iArchitecture
Entity
p16673
(dp16674
g11
(lp16675
g102
asg13
S'com.google.common.util.concurrent.Monitor$Guard'
p16676
sg15
(lp16677
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=339) created by **marsh.yeoman** on 2010-03-12 at 04:43 PM_\u000a\u000a---\u000a\u000aMultiple concurrent reads of HashMultimap result in null pointer exception.\u000a\u000aUsing Google collections version 1.0\u000a\u000aProblem\u000acom.google.common.collect.AbstractMultimap.AsMap.entrySet()\u000acan return null when called by multiple threads.\u000a\u000a1311    @\ufeffOverride public Set&lt;Map.Entry&lt;K, Collection&lt;V>>> entrySet() {\u000a1312      Set&lt;Map.Entry&lt;K, Collection&lt;V>>> result = entrySet;\u000a1313      return (entrySet == null) ? entrySet = new AsMapEntries() : result;\u000a1314    }\u000a1. thread 1 executes line 1312\u000a2. thread 2 executes 1312 and 1313\u000a3. thread 1 executes 1313.\u000a\u000aThread 1 will return null.\u000a\u000aFix by\u000a1313      return (result == null) ? entrySet = new AsMapEntries() : result;\u000a
p16678
asg17
(lp16679
g107
asg19
(lp16680
g109
asg21
I0
sba(iArchitecture
Entity
p16681
(dp16682
g11
(lp16683
V2133
p16684
asg13
S'com.google.common.util.concurrent.MoreExecutors'
p16685
sg15
(lp16686
V`MoreExecutors.java:541`\u000a\u000a``` java\u000a    @Override\u000a    public <V> ListenableScheduledFuture<V> schedule(\u000a        Callable<V> callable, long delay, TimeUnit unit) {\u000a      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\u000a      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\u000a      return new ListenableScheduledTask<V>(task, scheduled);\u000a    }\u000a```\u000a\u000a`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\u000a
p16687
asg17
(lp16688
(lp16689
I2
aasg19
(lp16690
VBUG: ScheduledListeningDecorator schedule(Callable<V>....) delegates to schedule(Runnable
p16691
asg21
I0
sba(iArchitecture
Entity
p16692
(dp16693
g11
(lp16694
g16684
asg13
S'com.google.common.util.concurrent.MoreExecutors$1'
p16695
sg15
(lp16696
V`MoreExecutors.java:541`\u000a\u000a``` java\u000a    @Override\u000a    public <V> ListenableScheduledFuture<V> schedule(\u000a        Callable<V> callable, long delay, TimeUnit unit) {\u000a      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\u000a      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\u000a      return new ListenableScheduledTask<V>(task, scheduled);\u000a    }\u000a```\u000a\u000a`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\u000a
p16697
asg17
(lp16698
g16689
asg19
(lp16699
g16691
asg21
I0
sba(iArchitecture
Entity
p16700
(dp16701
g11
(lp16702
g16684
asg13
S'com.google.common.util.concurrent.MoreExecutors$2'
p16703
sg15
(lp16704
V`MoreExecutors.java:541`\u000a\u000a``` java\u000a    @Override\u000a    public <V> ListenableScheduledFuture<V> schedule(\u000a        Callable<V> callable, long delay, TimeUnit unit) {\u000a      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\u000a      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\u000a      return new ListenableScheduledTask<V>(task, scheduled);\u000a    }\u000a```\u000a\u000a`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\u000a
p16705
asg17
(lp16706
g16689
asg19
(lp16707
g16691
asg21
I0
sba(iArchitecture
Entity
p16708
(dp16709
g11
(lp16710
g16684
asg13
S'com.google.common.util.concurrent.MoreExecutors$3'
p16711
sg15
(lp16712
V`MoreExecutors.java:541`\u000a\u000a``` java\u000a    @Override\u000a    public <V> ListenableScheduledFuture<V> schedule(\u000a        Callable<V> callable, long delay, TimeUnit unit) {\u000a      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\u000a      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\u000a      return new ListenableScheduledTask<V>(task, scheduled);\u000a    }\u000a```\u000a\u000a`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\u000a
p16713
asg17
(lp16714
g16689
asg19
(lp16715
g16691
asg21
I0
sba(iArchitecture
Entity
p16716
(dp16717
g11
(lp16718
g16684
asg13
S'com.google.common.util.concurrent.MoreExecutors$4'
p16719
sg15
(lp16720
V`MoreExecutors.java:541`\u000a\u000a``` java\u000a    @Override\u000a    public <V> ListenableScheduledFuture<V> schedule(\u000a        Callable<V> callable, long delay, TimeUnit unit) {\u000a      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\u000a      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\u000a      return new ListenableScheduledTask<V>(task, scheduled);\u000a    }\u000a```\u000a\u000a`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\u000a
p16721
asg17
(lp16722
g16689
asg19
(lp16723
g16691
asg21
I0
sba(iArchitecture
Entity
p16724
(dp16725
g11
(lp16726
g16684
asg13
S'com.google.common.util.concurrent.MoreExecutors$Application'
p16727
sg15
(lp16728
V`MoreExecutors.java:541`\u000a\u000a``` java\u000a    @Override\u000a    public <V> ListenableScheduledFuture<V> schedule(\u000a        Callable<V> callable, long delay, TimeUnit unit) {\u000a      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\u000a      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\u000a      return new ListenableScheduledTask<V>(task, scheduled);\u000a    }\u000a```\u000a\u000a`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\u000a
p16729
asg17
(lp16730
g16689
asg19
(lp16731
g16691
asg21
I0
sba(iArchitecture
Entity
p16732
(dp16733
g11
(lp16734
g16684
asg13
S'com.google.common.util.concurrent.MoreExecutors$Application$1'
p16735
sg15
(lp16736
V`MoreExecutors.java:541`\u000a\u000a``` java\u000a    @Override\u000a    public <V> ListenableScheduledFuture<V> schedule(\u000a        Callable<V> callable, long delay, TimeUnit unit) {\u000a      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\u000a      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\u000a      return new ListenableScheduledTask<V>(task, scheduled);\u000a    }\u000a```\u000a\u000a`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\u000a
p16737
asg17
(lp16738
g16689
asg19
(lp16739
g16691
asg21
I0
sba(iArchitecture
Entity
p16740
(dp16741
g11
(lp16742
g16684
asg13
S'com.google.common.util.concurrent.MoreExecutors$DirectExecutor'
p16743
sg15
(lp16744
V`MoreExecutors.java:541`\u000a\u000a``` java\u000a    @Override\u000a    public <V> ListenableScheduledFuture<V> schedule(\u000a        Callable<V> callable, long delay, TimeUnit unit) {\u000a      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\u000a      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\u000a      return new ListenableScheduledTask<V>(task, scheduled);\u000a    }\u000a```\u000a\u000a`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\u000a
p16745
asg17
(lp16746
g16689
asg19
(lp16747
g16691
asg21
I0
sba(iArchitecture
Entity
p16748
(dp16749
g11
(lp16750
g16684
asg13
S'com.google.common.util.concurrent.MoreExecutors$DirectExecutorService'
p16751
sg15
(lp16752
V`MoreExecutors.java:541`\u000a\u000a``` java\u000a    @Override\u000a    public <V> ListenableScheduledFuture<V> schedule(\u000a        Callable<V> callable, long delay, TimeUnit unit) {\u000a      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\u000a      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\u000a      return new ListenableScheduledTask<V>(task, scheduled);\u000a    }\u000a```\u000a\u000a`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\u000a
p16753
asg17
(lp16754
g16689
asg19
(lp16755
g16691
asg21
I0
sba(iArchitecture
Entity
p16756
(dp16757
g11
(lp16758
g16684
asg13
S'com.google.common.util.concurrent.MoreExecutors$ListeningDecorator'
p16759
sg15
(lp16760
V`MoreExecutors.java:541`\u000a\u000a``` java\u000a    @Override\u000a    public <V> ListenableScheduledFuture<V> schedule(\u000a        Callable<V> callable, long delay, TimeUnit unit) {\u000a      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\u000a      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\u000a      return new ListenableScheduledTask<V>(task, scheduled);\u000a    }\u000a```\u000a\u000a`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\u000a
p16761
asg17
(lp16762
g16689
asg19
(lp16763
g16691
asg21
I0
sba(iArchitecture
Entity
p16764
(dp16765
g11
(lp16766
g16684
asg13
S'com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator'
p16767
sg15
(lp16768
V`MoreExecutors.java:541`\u000a\u000a``` java\u000a    @Override\u000a    public <V> ListenableScheduledFuture<V> schedule(\u000a        Callable<V> callable, long delay, TimeUnit unit) {\u000a      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\u000a      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\u000a      return new ListenableScheduledTask<V>(task, scheduled);\u000a    }\u000a```\u000a\u000a`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\u000a
p16769
asg17
(lp16770
g16689
asg19
(lp16771
g16691
asg21
I0
sba(iArchitecture
Entity
p16772
(dp16773
g11
(lp16774
g16684
asg13
S'com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask'
p16775
sg15
(lp16776
V`MoreExecutors.java:541`\u000a\u000a``` java\u000a    @Override\u000a    public <V> ListenableScheduledFuture<V> schedule(\u000a        Callable<V> callable, long delay, TimeUnit unit) {\u000a      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\u000a      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\u000a      return new ListenableScheduledTask<V>(task, scheduled);\u000a    }\u000a```\u000a\u000a`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\u000a
p16777
asg17
(lp16778
g16689
asg19
(lp16779
g16691
asg21
I0
sba(iArchitecture
Entity
p16780
(dp16781
g11
(lp16782
g16684
asg13
S'com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask'
p16783
sg15
(lp16784
V`MoreExecutors.java:541`\u000a\u000a``` java\u000a    @Override\u000a    public <V> ListenableScheduledFuture<V> schedule(\u000a        Callable<V> callable, long delay, TimeUnit unit) {\u000a      TrustedListenableFutureTask<V> task = TrustedListenableFutureTask.create(callable);\u000a      ScheduledFuture<?> scheduled = delegate.schedule(task, delay, unit);\u000a      return new ListenableScheduledTask<V>(task, scheduled);\u000a    }\u000a```\u000a\u000a`delegate.schedule(Runnable...)` is invoked here instead of the (intended?) `delegate.schedule(Callable<V>...)`. As a result, the `ScheduledListeningDecorator` is unusable for `Callable<?>`.\u000a
p16785
asg17
(lp16786
g16689
asg19
(lp16787
g16691
asg21
I0
sba(iArchitecture
Entity
p16788
(dp16789
g11
(lp16790
g940
ag940
asg13
S'com.google.common.util.concurrent.RateLimiter'
p16791
sg15
(lp16792
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p16793
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p16794
asg17
(lp16795
g952
ag952
asg19
(lp16796
g956
ag956
asg21
I0
sba(iArchitecture
Entity
p16797
(dp16798
g11
(lp16799
g940
ag940
asg13
S'com.google.common.util.concurrent.RateLimiter$SleepingStopwatch'
p16800
sg15
(lp16801
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p16802
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p16803
asg17
(lp16804
g952
ag952
asg19
(lp16805
g956
ag956
asg21
I0
sba(iArchitecture
Entity
p16806
(dp16807
g11
(lp16808
g940
ag940
asg13
S'com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1'
p16809
sg15
(lp16810
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p16811
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p16812
asg17
(lp16813
g952
ag952
asg19
(lp16814
g956
ag956
asg21
I0
sba(iArchitecture
Entity
p16815
(dp16816
g11
(lp16817
sg13
S'com.google.common.util.concurrent.Runnables'
p16818
sg15
(lp16819
sg17
(lp16820
sg19
(lp16821
sg21
I0
sba(iArchitecture
Entity
p16822
(dp16823
g11
(lp16824
sg13
S'com.google.common.util.concurrent.Runnables$1'
p16825
sg15
(lp16826
sg17
(lp16827
sg19
(lp16828
sg21
I0
sba(iArchitecture
Entity
p16829
(dp16830
g11
(lp16831
sg13
S'com.google.common.util.concurrent.SerializingExecutor'
p16832
sg15
(lp16833
sg17
(lp16834
sg19
(lp16835
sg21
I0
sba(iArchitecture
Entity
p16836
(dp16837
g11
(lp16838
sg13
S'com.google.common.util.concurrent.SerializingExecutor$1'
p16839
sg15
(lp16840
sg17
(lp16841
sg19
(lp16842
sg21
I0
sba(iArchitecture
Entity
p16843
(dp16844
g11
(lp16845
sg13
S'com.google.common.util.concurrent.SerializingExecutor$TaskRunner'
p16846
sg15
(lp16847
sg17
(lp16848
sg19
(lp16849
sg21
I0
sba(iArchitecture
Entity
p16850
(dp16851
g11
(lp16852
g940
asg13
S'com.google.common.util.concurrent.Service'
p16853
sg15
(lp16854
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p16855
asg17
(lp16856
g952
asg19
(lp16857
g956
asg21
I0
sba(iArchitecture
Entity
p16858
(dp16859
g11
(lp16860
g940
asg13
S'com.google.common.util.concurrent.Service$1'
p16861
sg15
(lp16862
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p16863
asg17
(lp16864
g952
asg19
(lp16865
g956
asg21
I0
sba(iArchitecture
Entity
p16866
(dp16867
g11
(lp16868
g940
asg13
S'com.google.common.util.concurrent.Service$Listener'
p16869
sg15
(lp16870
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p16871
asg17
(lp16872
g952
asg19
(lp16873
g956
asg21
I0
sba(iArchitecture
Entity
p16874
(dp16875
g11
(lp16876
g940
asg13
S'com.google.common.util.concurrent.Service$State'
p16877
sg15
(lp16878
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p16879
asg17
(lp16880
g952
asg19
(lp16881
g956
asg21
I0
sba(iArchitecture
Entity
p16882
(dp16883
g11
(lp16884
g940
asg13
S'com.google.common.util.concurrent.Service$State$1'
p16885
sg15
(lp16886
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p16887
asg17
(lp16888
g952
asg19
(lp16889
g956
asg21
I0
sba(iArchitecture
Entity
p16890
(dp16891
g11
(lp16892
g940
asg13
S'com.google.common.util.concurrent.Service$State$2'
p16893
sg15
(lp16894
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p16895
asg17
(lp16896
g952
asg19
(lp16897
g956
asg21
I0
sba(iArchitecture
Entity
p16898
(dp16899
g11
(lp16900
g940
asg13
S'com.google.common.util.concurrent.Service$State$3'
p16901
sg15
(lp16902
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p16903
asg17
(lp16904
g952
asg19
(lp16905
g956
asg21
I0
sba(iArchitecture
Entity
p16906
(dp16907
g11
(lp16908
g940
asg13
S'com.google.common.util.concurrent.Service$State$4'
p16909
sg15
(lp16910
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p16911
asg17
(lp16912
g952
asg19
(lp16913
g956
asg21
I0
sba(iArchitecture
Entity
p16914
(dp16915
g11
(lp16916
g940
asg13
S'com.google.common.util.concurrent.Service$State$5'
p16917
sg15
(lp16918
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p16919
asg17
(lp16920
g952
asg19
(lp16921
g956
asg21
I0
sba(iArchitecture
Entity
p16922
(dp16923
g11
(lp16924
g940
asg13
S'com.google.common.util.concurrent.Service$State$6'
p16925
sg15
(lp16926
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p16927
asg17
(lp16928
g952
asg19
(lp16929
g956
asg21
I0
sba(iArchitecture
Entity
p16930
(dp16931
g11
(lp16932
sg13
S'com.google.common.util.concurrent.ServiceManager'
p16933
sg15
(lp16934
sg17
(lp16935
sg19
(lp16936
sg21
I0
sba(iArchitecture
Entity
p16937
(dp16938
g11
(lp16939
sg13
S'com.google.common.util.concurrent.ServiceManager$1'
p16940
sg15
(lp16941
sg17
(lp16942
sg19
(lp16943
sg21
I0
sba(iArchitecture
Entity
p16944
(dp16945
g11
(lp16946
sg13
S'com.google.common.util.concurrent.ServiceManager$2'
p16947
sg15
(lp16948
sg17
(lp16949
sg19
(lp16950
sg21
I0
sba(iArchitecture
Entity
p16951
(dp16952
g11
(lp16953
sg13
S'com.google.common.util.concurrent.ServiceManager$EmptyServiceManagerWarning'
p16954
sg15
(lp16955
sg17
(lp16956
sg19
(lp16957
sg21
I0
sba(iArchitecture
Entity
p16958
(dp16959
g11
(lp16960
sg13
S'com.google.common.util.concurrent.ServiceManager$Listener'
p16961
sg15
(lp16962
sg17
(lp16963
sg19
(lp16964
sg21
I0
sba(iArchitecture
Entity
p16965
(dp16966
g11
(lp16967
sg13
S'com.google.common.util.concurrent.ServiceManager$NoOpService'
p16968
sg15
(lp16969
sg17
(lp16970
sg19
(lp16971
sg21
I0
sba(iArchitecture
Entity
p16972
(dp16973
g11
(lp16974
sg13
S'com.google.common.util.concurrent.ServiceManager$ServiceListener'
p16975
sg15
(lp16976
sg17
(lp16977
sg19
(lp16978
sg21
I0
sba(iArchitecture
Entity
p16979
(dp16980
g11
(lp16981
sg13
S'com.google.common.util.concurrent.ServiceManager$ServiceManagerState'
p16982
sg15
(lp16983
sg17
(lp16984
sg19
(lp16985
sg21
I0
sba(iArchitecture
Entity
p16986
(dp16987
g11
(lp16988
sg13
S'com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1'
p16989
sg15
(lp16990
sg17
(lp16991
sg19
(lp16992
sg21
I0
sba(iArchitecture
Entity
p16993
(dp16994
g11
(lp16995
sg13
S'com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2'
p16996
sg15
(lp16997
sg17
(lp16998
sg19
(lp16999
sg21
I0
sba(iArchitecture
Entity
p17000
(dp17001
g11
(lp17002
sg13
S'com.google.common.util.concurrent.ServiceManager$ServiceManagerState$3'
p17003
sg15
(lp17004
sg17
(lp17005
sg19
(lp17006
sg21
I0
sba(iArchitecture
Entity
p17007
(dp17008
g11
(lp17009
sg13
S'com.google.common.util.concurrent.ServiceManager$ServiceManagerState$4'
p17010
sg15
(lp17011
sg17
(lp17012
sg19
(lp17013
sg21
I0
sba(iArchitecture
Entity
p17014
(dp17015
g11
(lp17016
sg13
S'com.google.common.util.concurrent.ServiceManager$ServiceManagerState$5'
p17017
sg15
(lp17018
sg17
(lp17019
sg19
(lp17020
sg21
I0
sba(iArchitecture
Entity
p17021
(dp17022
g11
(lp17023
sg13
S'com.google.common.util.concurrent.SimpleTimeLimiter'
p17024
sg15
(lp17025
sg17
(lp17026
sg19
(lp17027
sg21
I0
sba(iArchitecture
Entity
p17028
(dp17029
g11
(lp17030
sg13
S'com.google.common.util.concurrent.SimpleTimeLimiter$1'
p17031
sg15
(lp17032
sg17
(lp17033
sg19
(lp17034
sg21
I0
sba(iArchitecture
Entity
p17035
(dp17036
g11
(lp17037
sg13
S'com.google.common.util.concurrent.SimpleTimeLimiter$1$1'
p17038
sg15
(lp17039
sg17
(lp17040
sg19
(lp17041
sg21
I0
sba(iArchitecture
Entity
p17042
(dp17043
g11
(lp17044
sg13
S'com.google.common.util.concurrent.SmoothRateLimiter'
p17045
sg15
(lp17046
sg17
(lp17047
sg19
(lp17048
sg21
I0
sba(iArchitecture
Entity
p17049
(dp17050
g11
(lp17051
sg13
S'com.google.common.util.concurrent.SmoothRateLimiter$1'
p17052
sg15
(lp17053
sg17
(lp17054
sg19
(lp17055
sg21
I0
sba(iArchitecture
Entity
p17056
(dp17057
g11
(lp17058
sg13
S'com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty'
p17059
sg15
(lp17060
sg17
(lp17061
sg19
(lp17062
sg21
I0
sba(iArchitecture
Entity
p17063
(dp17064
g11
(lp17065
sg13
S'com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp'
p17066
sg15
(lp17067
sg17
(lp17068
sg19
(lp17069
sg21
I0
sba(iArchitecture
Entity
p17070
(dp17071
g11
(lp17072
sg13
S'com.google.common.util.concurrent.Striped'
p17073
sg15
(lp17074
sg17
(lp17075
sg19
(lp17076
sg21
I0
sba(iArchitecture
Entity
p17077
(dp17078
g11
(lp17079
sg13
S'com.google.common.util.concurrent.Striped$1'
p17080
sg15
(lp17081
sg17
(lp17082
sg19
(lp17083
sg21
I0
sba(iArchitecture
Entity
p17084
(dp17085
g11
(lp17086
sg13
S'com.google.common.util.concurrent.Striped$2'
p17087
sg15
(lp17088
sg17
(lp17089
sg19
(lp17090
sg21
I0
sba(iArchitecture
Entity
p17091
(dp17092
g11
(lp17093
sg13
S'com.google.common.util.concurrent.Striped$3'
p17094
sg15
(lp17095
sg17
(lp17096
sg19
(lp17097
sg21
I0
sba(iArchitecture
Entity
p17098
(dp17099
g11
(lp17100
sg13
S'com.google.common.util.concurrent.Striped$4'
p17101
sg15
(lp17102
sg17
(lp17103
sg19
(lp17104
sg21
I0
sba(iArchitecture
Entity
p17105
(dp17106
g11
(lp17107
sg13
S'com.google.common.util.concurrent.Striped$5'
p17108
sg15
(lp17109
sg17
(lp17110
sg19
(lp17111
sg21
I0
sba(iArchitecture
Entity
p17112
(dp17113
g11
(lp17114
sg13
S'com.google.common.util.concurrent.Striped$CompactStriped'
p17115
sg15
(lp17116
sg17
(lp17117
sg19
(lp17118
sg21
I0
sba(iArchitecture
Entity
p17119
(dp17120
g11
(lp17121
sg13
S'com.google.common.util.concurrent.Striped$LargeLazyStriped'
p17122
sg15
(lp17123
sg17
(lp17124
sg19
(lp17125
sg21
I0
sba(iArchitecture
Entity
p17126
(dp17127
g11
(lp17128
sg13
S'com.google.common.util.concurrent.Striped$PaddedLock'
p17129
sg15
(lp17130
sg17
(lp17131
sg19
(lp17132
sg21
I0
sba(iArchitecture
Entity
p17133
(dp17134
g11
(lp17135
sg13
S'com.google.common.util.concurrent.Striped$PaddedSemaphore'
p17136
sg15
(lp17137
sg17
(lp17138
sg19
(lp17139
sg21
I0
sba(iArchitecture
Entity
p17140
(dp17141
g11
(lp17142
sg13
S'com.google.common.util.concurrent.Striped$PowerOfTwoStriped'
p17143
sg15
(lp17144
sg17
(lp17145
sg19
(lp17146
sg21
I0
sba(iArchitecture
Entity
p17147
(dp17148
g11
(lp17149
sg13
S'com.google.common.util.concurrent.Striped$SmallLazyStriped'
p17150
sg15
(lp17151
sg17
(lp17152
sg19
(lp17153
sg21
I0
sba(iArchitecture
Entity
p17154
(dp17155
g11
(lp17156
sg13
S'com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference'
p17157
sg15
(lp17158
sg17
(lp17159
sg19
(lp17160
sg21
I0
sba(iArchitecture
Entity
p17161
(dp17162
g11
(lp17163
g940
ag940
asg13
S'com.google.common.util.concurrent.ThreadFactoryBuilder'
p17164
sg15
(lp17165
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p17166
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p17167
asg17
(lp17168
g952
ag952
asg19
(lp17169
g956
ag956
asg21
I0
sba(iArchitecture
Entity
p17170
(dp17171
g11
(lp17172
g940
ag940
asg13
S'com.google.common.util.concurrent.ThreadFactoryBuilder$1'
p17173
sg15
(lp17174
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p17175
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p17176
asg17
(lp17177
g952
ag952
asg19
(lp17178
g956
ag956
asg21
I0
sba(iArchitecture
Entity
p17179
(dp17180
g11
(lp17181
sg13
S'com.google.common.util.concurrent.TimeLimiter'
p17182
sg15
(lp17183
sg17
(lp17184
sg19
(lp17185
sg21
I0
sba(iArchitecture
Entity
p17186
(dp17187
g11
(lp17188
g940
asg13
S'com.google.common.util.concurrent.UncaughtExceptionHandlers'
p17189
sg15
(lp17190
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p17191
asg17
(lp17192
g952
asg19
(lp17193
g956
asg21
I0
sba(iArchitecture
Entity
p17194
(dp17195
g11
(lp17196
g940
asg13
S'com.google.common.util.concurrent.UncaughtExceptionHandlers$Exiter'
p17197
sg15
(lp17198
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1567) created by **sebastian.davids** on 2013-11-04 at 06:57 AM_\u000a\u000a---\u000a\u000aFailed tests: \u000a&nbsp;&nbsp;testToString(com.google.common.base.StopwatchTest): null expected:&lt;0[.]000 ns> but was:&lt;0[,]000 ns>\u000a&nbsp;&nbsp;testSimple(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.20, R0.]20]> but was:<[R0[,00, R0,20, R0,]20]>\u000a&nbsp;&nbsp;testSimpleWithWait(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, U0.20, R0.00, R0.]20]> but was:<[R0[,00, U0,20, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testOneSecondBurst(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U1[.00, U1.00, R0.00, R0.00, R0.00, R0.00, R0.]20]> but was:<[U1[,00, U1,00, R0,00, R0,00, R0,00, R0,00, R0,]20]>\u000a&nbsp;&nbsp;testWarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U4.00, R0.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U0.50, U2.00, R0.00, R0.50, R0.50, R0.50, R0.50, R0.50, R0.50, R0.]50]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U4,00, R0,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U0,50, U2,00, R0,00, R0,50, R0,50, R0,50, R0,50, R0,50, R0,50, R0,]50]>\u000a&nbsp;&nbsp;testWarmUpAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.38, R1.13, R0.88, R0.63, R0.50, R0.50, R0.50, U4.50, R0.00, R1.38, R1.13, R0.88, R0.34, R0.28, R0.25, R0.25, U4.25, R0.00, R0.72, R0.66, R0.59, R0.53, R0.47, R0.41, R0.34, R0.28, R0.25, R0.]25]> but was:<[R0[,00, R1,38, R1,13, R0,88, R0,63, R0,50, R0,50, R0,50, U4,50, R0,00, R1,38, R1,13, R0,88, R0,34, R0,28, R0,25, R0,25, U4,25, R0,00, R0,72, R0,66, R0,59, R0,53, R0,47, R0,41, R0,34, R0,28, R0,25, R0,]25]>\u000a&nbsp;&nbsp;testBursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[U10[.00, R0.00, R1.00, R1.00, U3.00, R0.00, R3.]00]> but was:<[U10[,00, R0,00, R1,00, R1,00, U3,00, R0,00, R3,]00]>\u000a&nbsp;&nbsp;testBurstyAndUpdate(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R0.50, R1.00, R2.]00]> but was:<[R0[,00, R1,00, R1,00, R0,50, R1,00, R2,]00]>\u000a&nbsp;&nbsp;testTimeWrapping(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R1.]00]> but was:<[R0[,00, R1,00, R1,00, R1,]00]>\u000a&nbsp;&nbsp;testSimpleWeights(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R1.00, R1.00, R2.00, R4.00, R8.]00]> but was:<[R0[,00, R1,00, R1,00, R2,00, R4,00, R8,]00]>\u000a&nbsp;&nbsp;testInfinity_Bursty(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a&nbsp;&nbsp;testInfinity_WarmUp(com.google.common.util.concurrent.RateLimiterTest): null expected:<[R0[.00, R0.00, R0.]00]> but was:<[R0[,00, R0,00, R0,]00]>\u000a\u000a@@\u000a\u000aInstead of:\u000a\u000aString.format("%.4g %s", value, abbreviate(unit));\u000a\u000ayou might want to use:\u000a\u000aString.format(Locale.ROOT, "%.4g %s", value, abbreviate(unit));\u000a\u000a@@\u000a\u000aYou might want to check the entire codebase for usages of String.format without an explicit Locale.\u000a
p17199
asg17
(lp17200
g952
asg19
(lp17201
g956
asg21
I0
sba(iArchitecture
Entity
p17202
(dp17203
g11
(lp17204
sg13
S'com.google.common.util.concurrent.UncheckedExecutionException'
p17205
sg15
(lp17206
sg17
(lp17207
sg19
(lp17208
sg21
I0
sba(iArchitecture
Entity
p17209
(dp17210
g11
(lp17211
sg13
S'com.google.common.util.concurrent.UncheckedTimeoutException'
p17212
sg15
(lp17213
sg17
(lp17214
sg19
(lp17215
sg21
I0
sba(iArchitecture
Entity
p17216
(dp17217
g11
(lp17218
sg13
S'com.google.common.util.concurrent.Uninterruptibles'
p17219
sg15
(lp17220
sg17
(lp17221
sg19
(lp17222
sg21
I0
sba(iArchitecture
Entity
p17223
(dp17224
g11
(lp17225
sg13
S'com.google.common.util.concurrent.WrappingExecutorService'
p17226
sg15
(lp17227
sg17
(lp17228
sg19
(lp17229
sg21
I0
sba(iArchitecture
Entity
p17230
(dp17231
g11
(lp17232
sg13
S'com.google.common.util.concurrent.WrappingExecutorService$1'
p17233
sg15
(lp17234
sg17
(lp17235
sg19
(lp17236
sg21
I0
sba(iArchitecture
Entity
p17237
(dp17238
g11
(lp17239
sg13
S'com.google.common.util.concurrent.WrappingScheduledExecutorService'
p17240
sg15
(lp17241
sg17
(lp17242
sg19
(lp17243
sg21
I0
sbasg1055
(lp17244
g15763
ag15770
ag15777
ag15784
ag15791
ag15798
ag15805
ag15812
ag15819
ag15826
ag15833
ag15841
ag15849
ag15856
ag15863
ag15870
ag15877
ag15884
ag15892
ag15903
ag15912
ag15921
ag15930
ag15939
ag15948
ag15957
ag15966
ag15975
ag15984
ag15993
ag16002
ag16011
ag16020
ag16027
ag16034
ag16041
ag16048
ag16055
ag16062
ag16069
ag16076
ag16083
ag16090
ag16097
ag16104
ag16111
ag16118
ag16125
ag16132
ag16139
ag16146
ag16153
ag16160
ag16167
ag16174
ag16181
ag16190
ag16199
ag16208
ag16217
ag16226
ag16235
ag16244
ag16253
ag16262
ag16271
ag16280
ag16289
ag16298
ag16307
ag16316
ag16325
ag16332
ag16339
ag16346
ag16353
ag16360
ag16367
ag16374
ag16381
ag16388
ag16395
ag16402
ag16409
ag16416
ag16423
ag16430
ag16437
ag16444
ag16451
ag16458
ag16465
ag16472
ag16479
ag16486
ag16493
ag16500
ag16507
ag16514
ag16521
ag16528
ag16535
ag16542
ag16549
ag16556
ag16563
ag16570
ag16577
ag16584
ag16591
ag16598
ag16605
ag16612
ag16619
ag16626
ag16633
ag16640
ag16647
ag16654
ag16661
ag16668
ag16676
ag16685
ag16695
ag16703
ag16711
ag16719
ag16727
ag16735
ag16743
ag16751
ag16759
ag16767
ag16775
ag16783
ag16791
ag16800
ag16809
ag16818
ag16825
ag16832
ag16839
ag16846
ag16853
ag16861
ag16869
ag16877
ag16885
ag16893
ag16901
ag16909
ag16917
ag16925
ag16933
ag16940
ag16947
ag16954
ag16961
ag16968
ag16975
ag16982
ag16989
ag16996
ag17003
ag17010
ag17017
ag17024
ag17031
ag17038
ag17045
ag17052
ag17059
ag17066
ag17073
ag17080
ag17087
ag17094
ag17101
ag17108
ag17115
ag17122
ag17129
ag17136
ag17143
ag17150
ag17157
ag17164
ag17173
ag17182
ag17189
ag17197
ag17205
ag17212
ag17219
ag17226
ag17233
ag17240
asg21
I0
sg1057
S'com.google.common.util.concurrent.ss'
p17245
sba(iArchitecture
Cluster
p17246
(dp17247
g7
(lp17248
(iArchitecture
Entity
p17249
(dp17250
g11
(lp17251
sg13
S'com.google.common.util.concurrent.AbstractListeningExecutorService'
p17252
sg15
(lp17253
sg17
(lp17254
sg19
(lp17255
sg21
I0
sba(iArchitecture
Entity
p17256
(dp17257
g11
(lp17258
sg13
S'com.google.common.util.concurrent.ForwardingListenableFuture'
p17259
sg15
(lp17260
sg17
(lp17261
sg19
(lp17262
sg21
I0
sba(iArchitecture
Entity
p17263
(dp17264
g11
(lp17265
sg13
S'com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture'
p17266
sg15
(lp17267
sg17
(lp17268
sg19
(lp17269
sg21
I0
sba(iArchitecture
Entity
p17270
(dp17271
g11
(lp17272
sg13
S'com.google.common.util.concurrent.ListenableScheduledFuture'
p17273
sg15
(lp17274
sg17
(lp17275
sg19
(lp17276
sg21
I0
sba(iArchitecture
Entity
p17277
(dp17278
g11
(lp17279
sg13
S'com.google.common.util.concurrent.ListeningScheduledExecutorService'
p17280
sg15
(lp17281
sg17
(lp17282
sg19
(lp17283
sg21
I0
sba(iArchitecture
Entity
p17284
(dp17285
g11
(lp17286
sg13
S'com.google.common.util.concurrent.testing.AbstractCheckedFutureTest'
p17287
sg15
(lp17288
sg17
(lp17289
sg19
(lp17290
sg21
I0
sba(iArchitecture
Entity
p17291
(dp17292
g11
(lp17293
sg13
S'com.google.common.util.concurrent.testing.AbstractCheckedFutureTest$1'
p17294
sg15
(lp17295
sg17
(lp17296
sg19
(lp17297
sg21
I0
sba(iArchitecture
Entity
p17298
(dp17299
g11
(lp17300
sg13
S'com.google.common.util.concurrent.testing.AbstractCheckedFutureTest$2'
p17301
sg15
(lp17302
sg17
(lp17303
sg19
(lp17304
sg21
I0
sba(iArchitecture
Entity
p17305
(dp17306
g11
(lp17307
sg13
S'com.google.common.util.concurrent.testing.AbstractCheckedFutureTest$3'
p17308
sg15
(lp17309
sg17
(lp17310
sg19
(lp17311
sg21
I0
sba(iArchitecture
Entity
p17312
(dp17313
g11
(lp17314
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest'
p17315
sg15
(lp17316
sg17
(lp17317
sg19
(lp17318
sg21
I0
sba(iArchitecture
Entity
p17319
(dp17320
g11
(lp17321
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest$1'
p17322
sg15
(lp17323
sg17
(lp17324
sg19
(lp17325
sg21
I0
sba(iArchitecture
Entity
p17326
(dp17327
g11
(lp17328
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest$2'
p17329
sg15
(lp17330
sg17
(lp17331
sg19
(lp17332
sg21
I0
sba(iArchitecture
Entity
p17333
(dp17334
g11
(lp17335
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest$3'
p17336
sg15
(lp17337
sg17
(lp17338
sg19
(lp17339
sg21
I0
sba(iArchitecture
Entity
p17340
(dp17341
g11
(lp17342
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest$4'
p17343
sg15
(lp17344
sg17
(lp17345
sg19
(lp17346
sg21
I0
sba(iArchitecture
Entity
p17347
(dp17348
g11
(lp17349
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest$5'
p17350
sg15
(lp17351
sg17
(lp17352
sg19
(lp17353
sg21
I0
sba(iArchitecture
Entity
p17354
(dp17355
g11
(lp17356
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest$6'
p17357
sg15
(lp17358
sg17
(lp17359
sg19
(lp17360
sg21
I0
sba(iArchitecture
Entity
p17361
(dp17362
g11
(lp17363
sg13
S'com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService'
p17364
sg15
(lp17365
sg17
(lp17366
sg19
(lp17367
sg21
I0
sba(iArchitecture
Entity
p17368
(dp17369
g11
(lp17370
sg13
S'com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService$ImmediateScheduledFuture'
p17371
sg15
(lp17372
sg17
(lp17373
sg19
(lp17374
sg21
I0
sba(iArchitecture
Entity
p17375
(dp17376
g11
(lp17377
sg13
S'com.google.common.util.concurrent.testing.TestingExecutors'
p17378
sg15
(lp17379
sg17
(lp17380
sg19
(lp17381
sg21
I0
sba(iArchitecture
Entity
p17382
(dp17383
g11
(lp17384
sg13
S'com.google.common.util.concurrent.testing.TestingExecutors$1'
p17385
sg15
(lp17386
sg17
(lp17387
sg19
(lp17388
sg21
I0
sba(iArchitecture
Entity
p17389
(dp17390
g11
(lp17391
sg13
S'com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService'
p17392
sg15
(lp17393
sg17
(lp17394
sg19
(lp17395
sg21
I0
sba(iArchitecture
Entity
p17396
(dp17397
g11
(lp17398
sg13
S'com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService$NeverScheduledFuture'
p17399
sg15
(lp17400
sg17
(lp17401
sg19
(lp17402
sg21
I0
sbasg1055
(lp17403
g17252
ag17259
ag17266
ag17273
ag17280
ag17287
ag17294
ag17301
ag17308
ag17315
ag17322
ag17329
ag17336
ag17343
ag17350
ag17357
ag17364
ag17371
ag17378
ag17385
ag17392
ag17399
asg21
I0
sg1057
S'com.google.common.util.concurrent.testing.ss'
p17404
sbasS'target_sub'
p17405
S''
p17406
sg1055
(lp17407
sS'is_component_arch'
p17408
I00
sg1057
S'v18.0'
p17409
sba(iArchitecture
Architecture
p17410
(dp17411
g3
(lp17412
(iArchitecture
Cluster
p17413
(dp17414
g7
(lp17415
(iArchitecture
Entity
p17416
(dp17417
g11
(lp17418
sg13
S'com.google.common.annotations.GwtIncompatible'
p17419
sg15
(lp17420
sg17
(lp17421
sg19
(lp17422
sg21
I0
sba(iArchitecture
Entity
p17423
(dp17424
g11
(lp17425
sg13
S'com.google.common.base.AbstractIterator'
p17426
sg15
(lp17427
sg17
(lp17428
sg19
(lp17429
sg21
I0
sba(iArchitecture
Entity
p17430
(dp17431
g11
(lp17432
sg13
S'com.google.common.base.AbstractIterator$1'
p17433
sg15
(lp17434
sg17
(lp17435
sg19
(lp17436
sg21
I0
sba(iArchitecture
Entity
p17437
(dp17438
g11
(lp17439
sg13
S'com.google.common.base.AbstractIterator$State'
p17440
sg15
(lp17441
sg17
(lp17442
sg19
(lp17443
sg21
I0
sba(iArchitecture
Entity
p17444
(dp17445
g11
(lp17446
sg13
S'com.google.common.base.Ascii'
p17447
sg15
(lp17448
sg17
(lp17449
sg19
(lp17450
sg21
I0
sba(iArchitecture
Entity
p17451
(dp17452
g11
(lp17453
sg13
S'com.google.common.base.CaseFormat'
p17454
sg15
(lp17455
sg17
(lp17456
sg19
(lp17457
sg21
I0
sba(iArchitecture
Entity
p17458
(dp17459
g11
(lp17460
sg13
S'com.google.common.base.CaseFormat$1'
p17461
sg15
(lp17462
sg17
(lp17463
sg19
(lp17464
sg21
I0
sba(iArchitecture
Entity
p17465
(dp17466
g11
(lp17467
sg13
S'com.google.common.base.CaseFormat$2'
p17468
sg15
(lp17469
sg17
(lp17470
sg19
(lp17471
sg21
I0
sba(iArchitecture
Entity
p17472
(dp17473
g11
(lp17474
sg13
S'com.google.common.base.CaseFormat$3'
p17475
sg15
(lp17476
sg17
(lp17477
sg19
(lp17478
sg21
I0
sba(iArchitecture
Entity
p17479
(dp17480
g11
(lp17481
sg13
S'com.google.common.base.CaseFormat$4'
p17482
sg15
(lp17483
sg17
(lp17484
sg19
(lp17485
sg21
I0
sba(iArchitecture
Entity
p17486
(dp17487
g11
(lp17488
sg13
S'com.google.common.base.CaseFormat$5'
p17489
sg15
(lp17490
sg17
(lp17491
sg19
(lp17492
sg21
I0
sba(iArchitecture
Entity
p17493
(dp17494
g11
(lp17495
sg13
S'com.google.common.base.CaseFormat$StringConverter'
p17496
sg15
(lp17497
sg17
(lp17498
sg19
(lp17499
sg21
I0
sba(iArchitecture
Entity
p17500
(dp17501
g11
(lp17502
V2410
p17503
asg13
S'com.google.common.base.CharMatcher'
p17504
sg15
(lp17505
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17506
asg17
(lp17507
(lp17508
I2
aasg19
(lp17509
VCharMatcher.matchesNoneOf JavaDoc is incorrect
p17510
asg21
I0
sba(iArchitecture
Entity
p17511
(dp17512
g11
(lp17513
g17503
asg13
S'com.google.common.base.CharMatcher$1'
p17514
sg15
(lp17515
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17516
asg17
(lp17517
g17508
asg19
(lp17518
g17510
asg21
I0
sba(iArchitecture
Entity
p17519
(dp17520
g11
(lp17521
g17503
asg13
S'com.google.common.base.CharMatcher$And'
p17522
sg15
(lp17523
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17524
asg17
(lp17525
g17508
asg19
(lp17526
g17510
asg21
I0
sba(iArchitecture
Entity
p17527
(dp17528
g11
(lp17529
g17503
asg13
S'com.google.common.base.CharMatcher$Any'
p17530
sg15
(lp17531
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17532
asg17
(lp17533
g17508
asg19
(lp17534
g17510
asg21
I0
sba(iArchitecture
Entity
p17535
(dp17536
g11
(lp17537
g17503
asg13
S'com.google.common.base.CharMatcher$AnyOf'
p17538
sg15
(lp17539
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17540
asg17
(lp17541
g17508
asg19
(lp17542
g17510
asg21
I0
sba(iArchitecture
Entity
p17543
(dp17544
g11
(lp17545
g17503
asg13
S'com.google.common.base.CharMatcher$Ascii'
p17546
sg15
(lp17547
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17548
asg17
(lp17549
g17508
asg19
(lp17550
g17510
asg21
I0
sba(iArchitecture
Entity
p17551
(dp17552
g11
(lp17553
g17503
asg13
S'com.google.common.base.CharMatcher$BitSetMatcher'
p17554
sg15
(lp17555
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17556
asg17
(lp17557
g17508
asg19
(lp17558
g17510
asg21
I0
sba(iArchitecture
Entity
p17559
(dp17560
g11
(lp17561
g17503
asg13
S'com.google.common.base.CharMatcher$BreakingWhitespace'
p17562
sg15
(lp17563
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17564
asg17
(lp17565
g17508
asg19
(lp17566
g17510
asg21
I0
sba(iArchitecture
Entity
p17567
(dp17568
g11
(lp17569
g17503
asg13
S'com.google.common.base.CharMatcher$Digit'
p17570
sg15
(lp17571
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17572
asg17
(lp17573
g17508
asg19
(lp17574
g17510
asg21
I0
sba(iArchitecture
Entity
p17575
(dp17576
g11
(lp17577
g17503
asg13
S'com.google.common.base.CharMatcher$FastMatcher'
p17578
sg15
(lp17579
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17580
asg17
(lp17581
g17508
asg19
(lp17582
g17510
asg21
I0
sba(iArchitecture
Entity
p17583
(dp17584
g11
(lp17585
g17503
asg13
S'com.google.common.base.CharMatcher$ForPredicate'
p17586
sg15
(lp17587
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17588
asg17
(lp17589
g17508
asg19
(lp17590
g17510
asg21
I0
sba(iArchitecture
Entity
p17591
(dp17592
g11
(lp17593
g17503
asg13
S'com.google.common.base.CharMatcher$InRange'
p17594
sg15
(lp17595
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17596
asg17
(lp17597
g17508
asg19
(lp17598
g17510
asg21
I0
sba(iArchitecture
Entity
p17599
(dp17600
g11
(lp17601
g17503
asg13
S'com.google.common.base.CharMatcher$Invisible'
p17602
sg15
(lp17603
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17604
asg17
(lp17605
g17508
asg19
(lp17606
g17510
asg21
I0
sba(iArchitecture
Entity
p17607
(dp17608
g11
(lp17609
g17503
asg13
S'com.google.common.base.CharMatcher$Is'
p17610
sg15
(lp17611
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17612
asg17
(lp17613
g17508
asg19
(lp17614
g17510
asg21
I0
sba(iArchitecture
Entity
p17615
(dp17616
g11
(lp17617
g17503
asg13
S'com.google.common.base.CharMatcher$IsEither'
p17618
sg15
(lp17619
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17620
asg17
(lp17621
g17508
asg19
(lp17622
g17510
asg21
I0
sba(iArchitecture
Entity
p17623
(dp17624
g11
(lp17625
g17503
asg13
S'com.google.common.base.CharMatcher$IsNot'
p17626
sg15
(lp17627
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17628
asg17
(lp17629
g17508
asg19
(lp17630
g17510
asg21
I0
sba(iArchitecture
Entity
p17631
(dp17632
g11
(lp17633
g17503
asg13
S'com.google.common.base.CharMatcher$JavaDigit'
p17634
sg15
(lp17635
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17636
asg17
(lp17637
g17508
asg19
(lp17638
g17510
asg21
I0
sba(iArchitecture
Entity
p17639
(dp17640
g11
(lp17641
g17503
asg13
S'com.google.common.base.CharMatcher$JavaIsoControl'
p17642
sg15
(lp17643
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17644
asg17
(lp17645
g17508
asg19
(lp17646
g17510
asg21
I0
sba(iArchitecture
Entity
p17647
(dp17648
g11
(lp17649
g17503
asg13
S'com.google.common.base.CharMatcher$JavaLetter'
p17650
sg15
(lp17651
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17652
asg17
(lp17653
g17508
asg19
(lp17654
g17510
asg21
I0
sba(iArchitecture
Entity
p17655
(dp17656
g11
(lp17657
g17503
asg13
S'com.google.common.base.CharMatcher$JavaLetterOrDigit'
p17658
sg15
(lp17659
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17660
asg17
(lp17661
g17508
asg19
(lp17662
g17510
asg21
I0
sba(iArchitecture
Entity
p17663
(dp17664
g11
(lp17665
g17503
asg13
S'com.google.common.base.CharMatcher$JavaLowerCase'
p17666
sg15
(lp17667
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17668
asg17
(lp17669
g17508
asg19
(lp17670
g17510
asg21
I0
sba(iArchitecture
Entity
p17671
(dp17672
g11
(lp17673
g17503
asg13
S'com.google.common.base.CharMatcher$JavaUpperCase'
p17674
sg15
(lp17675
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17676
asg17
(lp17677
g17508
asg19
(lp17678
g17510
asg21
I0
sba(iArchitecture
Entity
p17679
(dp17680
g11
(lp17681
g17503
asg13
S'com.google.common.base.CharMatcher$NamedFastMatcher'
p17682
sg15
(lp17683
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17684
asg17
(lp17685
g17508
asg19
(lp17686
g17510
asg21
I0
sba(iArchitecture
Entity
p17687
(dp17688
g11
(lp17689
g17503
asg13
S'com.google.common.base.CharMatcher$Negated'
p17690
sg15
(lp17691
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17692
asg17
(lp17693
g17508
asg19
(lp17694
g17510
asg21
I0
sba(iArchitecture
Entity
p17695
(dp17696
g11
(lp17697
g17503
asg13
S'com.google.common.base.CharMatcher$NegatedFastMatcher'
p17698
sg15
(lp17699
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17700
asg17
(lp17701
g17508
asg19
(lp17702
g17510
asg21
I0
sba(iArchitecture
Entity
p17703
(dp17704
g11
(lp17705
g17503
asg13
S'com.google.common.base.CharMatcher$None'
p17706
sg15
(lp17707
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17708
asg17
(lp17709
g17508
asg19
(lp17710
g17510
asg21
I0
sba(iArchitecture
Entity
p17711
(dp17712
g11
(lp17713
g17503
asg13
S'com.google.common.base.CharMatcher$Or'
p17714
sg15
(lp17715
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17716
asg17
(lp17717
g17508
asg19
(lp17718
g17510
asg21
I0
sba(iArchitecture
Entity
p17719
(dp17720
g11
(lp17721
g17503
asg13
S'com.google.common.base.CharMatcher$RangesMatcher'
p17722
sg15
(lp17723
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17724
asg17
(lp17725
g17508
asg19
(lp17726
g17510
asg21
I0
sba(iArchitecture
Entity
p17727
(dp17728
g11
(lp17729
g17503
asg13
S'com.google.common.base.CharMatcher$SingleWidth'
p17730
sg15
(lp17731
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17732
asg17
(lp17733
g17508
asg19
(lp17734
g17510
asg21
I0
sba(iArchitecture
Entity
p17735
(dp17736
g11
(lp17737
g17503
asg13
S'com.google.common.base.CharMatcher$Whitespace'
p17738
sg15
(lp17739
VThe second sentence of the JavaDoc for `CharMatcher.matchesNoneOf` is not correct: "The default implementation iterates over the sequence, invoking matches(char) for each character, until this returns false or the end is reached."  This should be "until this returns true or the end is reached".  It appears the incorrect line may have been copied from `CharMatcher.matchesAllOf`\u000a\u000aSimilarly, the "returns" section currently says: "true if this matcher matches every character in the sequence, including when the sequence is empty" (same as `matchesAllOf`). It should say something like "true if this matches matches no character in the sequence, including when the sequence is empty".\u000a
p17740
asg17
(lp17741
g17508
asg19
(lp17742
g17510
asg21
I0
sba(iArchitecture
Entity
p17743
(dp17744
g11
(lp17745
sg13
S'com.google.common.base.Converter'
p17746
sg15
(lp17747
sg17
(lp17748
sg19
(lp17749
sg21
I0
sba(iArchitecture
Entity
p17750
(dp17751
g11
(lp17752
sg13
S'com.google.common.base.Converter$1'
p17753
sg15
(lp17754
sg17
(lp17755
sg19
(lp17756
sg21
I0
sba(iArchitecture
Entity
p17757
(dp17758
g11
(lp17759
sg13
S'com.google.common.base.Converter$1$1'
p17760
sg15
(lp17761
sg17
(lp17762
sg19
(lp17763
sg21
I0
sba(iArchitecture
Entity
p17764
(dp17765
g11
(lp17766
sg13
S'com.google.common.base.Converter$ConverterComposition'
p17767
sg15
(lp17768
sg17
(lp17769
sg19
(lp17770
sg21
I0
sba(iArchitecture
Entity
p17771
(dp17772
g11
(lp17773
sg13
S'com.google.common.base.Converter$FunctionBasedConverter'
p17774
sg15
(lp17775
sg17
(lp17776
sg19
(lp17777
sg21
I0
sba(iArchitecture
Entity
p17778
(dp17779
g11
(lp17780
sg13
S'com.google.common.base.Converter$IdentityConverter'
p17781
sg15
(lp17782
sg17
(lp17783
sg19
(lp17784
sg21
I0
sba(iArchitecture
Entity
p17785
(dp17786
g11
(lp17787
sg13
S'com.google.common.base.Converter$ReverseConverter'
p17788
sg15
(lp17789
sg17
(lp17790
sg19
(lp17791
sg21
I0
sba(iArchitecture
Entity
p17792
(dp17793
g11
(lp17794
sg13
S'com.google.common.base.Enums'
p17795
sg15
(lp17796
sg17
(lp17797
sg19
(lp17798
sg21
I0
sba(iArchitecture
Entity
p17799
(dp17800
g11
(lp17801
sg13
S'com.google.common.base.Enums$StringConverter'
p17802
sg15
(lp17803
sg17
(lp17804
sg19
(lp17805
sg21
I0
sba(iArchitecture
Entity
p17806
(dp17807
g11
(lp17808
sg13
S'com.google.common.base.Equivalence'
p17809
sg15
(lp17810
sg17
(lp17811
sg19
(lp17812
sg21
I0
sba(iArchitecture
Entity
p17813
(dp17814
g11
(lp17815
sg13
S'com.google.common.base.Equivalence$1'
p17816
sg15
(lp17817
sg17
(lp17818
sg19
(lp17819
sg21
I0
sba(iArchitecture
Entity
p17820
(dp17821
g11
(lp17822
sg13
S'com.google.common.base.Equivalence$Equals'
p17823
sg15
(lp17824
sg17
(lp17825
sg19
(lp17826
sg21
I0
sba(iArchitecture
Entity
p17827
(dp17828
g11
(lp17829
sg13
S'com.google.common.base.Equivalence$EquivalentToPredicate'
p17830
sg15
(lp17831
sg17
(lp17832
sg19
(lp17833
sg21
I0
sba(iArchitecture
Entity
p17834
(dp17835
g11
(lp17836
sg13
S'com.google.common.base.Equivalence$Identity'
p17837
sg15
(lp17838
sg17
(lp17839
sg19
(lp17840
sg21
I0
sba(iArchitecture
Entity
p17841
(dp17842
g11
(lp17843
sg13
S'com.google.common.base.Equivalence$Wrapper'
p17844
sg15
(lp17845
sg17
(lp17846
sg19
(lp17847
sg21
I0
sba(iArchitecture
Entity
p17848
(dp17849
g11
(lp17850
sg13
S'com.google.common.base.FinalizablePhantomReference'
p17851
sg15
(lp17852
sg17
(lp17853
sg19
(lp17854
sg21
I0
sba(iArchitecture
Entity
p17855
(dp17856
g11
(lp17857
sg13
S'com.google.common.base.FinalizableReference'
p17858
sg15
(lp17859
sg17
(lp17860
sg19
(lp17861
sg21
I0
sba(iArchitecture
Entity
p17862
(dp17863
g11
(lp17864
sg13
S'com.google.common.base.FinalizableReferenceQueue'
p17865
sg15
(lp17866
sg17
(lp17867
sg19
(lp17868
sg21
I0
sba(iArchitecture
Entity
p17869
(dp17870
g11
(lp17871
sg13
S'com.google.common.base.FinalizableReferenceQueue$DecoupledLoader'
p17872
sg15
(lp17873
sg17
(lp17874
sg19
(lp17875
sg21
I0
sba(iArchitecture
Entity
p17876
(dp17877
g11
(lp17878
sg13
S'com.google.common.base.FinalizableReferenceQueue$DirectLoader'
p17879
sg15
(lp17880
sg17
(lp17881
sg19
(lp17882
sg21
I0
sba(iArchitecture
Entity
p17883
(dp17884
g11
(lp17885
sg13
S'com.google.common.base.FinalizableReferenceQueue$FinalizerLoader'
p17886
sg15
(lp17887
sg17
(lp17888
sg19
(lp17889
sg21
I0
sba(iArchitecture
Entity
p17890
(dp17891
g11
(lp17892
sg13
S'com.google.common.base.FinalizableReferenceQueue$SystemLoader'
p17893
sg15
(lp17894
sg17
(lp17895
sg19
(lp17896
sg21
I0
sba(iArchitecture
Entity
p17897
(dp17898
g11
(lp17899
sg13
S'com.google.common.base.FinalizableSoftReference'
p17900
sg15
(lp17901
sg17
(lp17902
sg19
(lp17903
sg21
I0
sba(iArchitecture
Entity
p17904
(dp17905
g11
(lp17906
sg13
S'com.google.common.base.FinalizableWeakReference'
p17907
sg15
(lp17908
sg17
(lp17909
sg19
(lp17910
sg21
I0
sba(iArchitecture
Entity
p17911
(dp17912
g11
(lp17913
sg13
S'com.google.common.base.Function'
p17914
sg15
(lp17915
sg17
(lp17916
sg19
(lp17917
sg21
I0
sba(iArchitecture
Entity
p17918
(dp17919
g11
(lp17920
sg13
S'com.google.common.base.FunctionalEquivalence'
p17921
sg15
(lp17922
sg17
(lp17923
sg19
(lp17924
sg21
I0
sba(iArchitecture
Entity
p17925
(dp17926
g11
(lp17927
sg13
S'com.google.common.base.Functions'
p17928
sg15
(lp17929
sg17
(lp17930
sg19
(lp17931
sg21
I0
sba(iArchitecture
Entity
p17932
(dp17933
g11
(lp17934
sg13
S'com.google.common.base.Functions$1'
p17935
sg15
(lp17936
sg17
(lp17937
sg19
(lp17938
sg21
I0
sba(iArchitecture
Entity
p17939
(dp17940
g11
(lp17941
sg13
S'com.google.common.base.Functions$ConstantFunction'
p17942
sg15
(lp17943
sg17
(lp17944
sg19
(lp17945
sg21
I0
sba(iArchitecture
Entity
p17946
(dp17947
g11
(lp17948
sg13
S'com.google.common.base.Functions$ForMapWithDefault'
p17949
sg15
(lp17950
sg17
(lp17951
sg19
(lp17952
sg21
I0
sba(iArchitecture
Entity
p17953
(dp17954
g11
(lp17955
sg13
S'com.google.common.base.Functions$FunctionComposition'
p17956
sg15
(lp17957
sg17
(lp17958
sg19
(lp17959
sg21
I0
sba(iArchitecture
Entity
p17960
(dp17961
g11
(lp17962
sg13
S'com.google.common.base.Functions$FunctionForMapNoDefault'
p17963
sg15
(lp17964
sg17
(lp17965
sg19
(lp17966
sg21
I0
sba(iArchitecture
Entity
p17967
(dp17968
g11
(lp17969
sg13
S'com.google.common.base.Functions$IdentityFunction'
p17970
sg15
(lp17971
sg17
(lp17972
sg19
(lp17973
sg21
I0
sba(iArchitecture
Entity
p17974
(dp17975
g11
(lp17976
sg13
S'com.google.common.base.Functions$PredicateFunction'
p17977
sg15
(lp17978
sg17
(lp17979
sg19
(lp17980
sg21
I0
sba(iArchitecture
Entity
p17981
(dp17982
g11
(lp17983
sg13
S'com.google.common.base.Functions$SupplierFunction'
p17984
sg15
(lp17985
sg17
(lp17986
sg19
(lp17987
sg21
I0
sba(iArchitecture
Entity
p17988
(dp17989
g11
(lp17990
sg13
S'com.google.common.base.Functions$ToStringFunction'
p17991
sg15
(lp17992
sg17
(lp17993
sg19
(lp17994
sg21
I0
sba(iArchitecture
Entity
p17995
(dp17996
g11
(lp17997
sg13
S'com.google.common.base.GwtSerializationDependencies'
p17998
sg15
(lp17999
sg17
(lp18000
sg19
(lp18001
sg21
I0
sba(iArchitecture
Entity
p18002
(dp18003
g11
(lp18004
sg13
S'com.google.common.base.GwtSerializationDependencies$OptionalDependencies'
p18005
sg15
(lp18006
sg17
(lp18007
sg19
(lp18008
sg21
I0
sba(iArchitecture
Entity
p18009
(dp18010
g11
(lp18011
sg13
S'com.google.common.base.Joiner'
p18012
sg15
(lp18013
sg17
(lp18014
sg19
(lp18015
sg21
I0
sba(iArchitecture
Entity
p18016
(dp18017
g11
(lp18018
sg13
S'com.google.common.base.Joiner$1'
p18019
sg15
(lp18020
sg17
(lp18021
sg19
(lp18022
sg21
I0
sba(iArchitecture
Entity
p18023
(dp18024
g11
(lp18025
sg13
S'com.google.common.base.Joiner$2'
p18026
sg15
(lp18027
sg17
(lp18028
sg19
(lp18029
sg21
I0
sba(iArchitecture
Entity
p18030
(dp18031
g11
(lp18032
sg13
S'com.google.common.base.Joiner$3'
p18033
sg15
(lp18034
sg17
(lp18035
sg19
(lp18036
sg21
I0
sba(iArchitecture
Entity
p18037
(dp18038
g11
(lp18039
sg13
S'com.google.common.base.Joiner$MapJoiner'
p18040
sg15
(lp18041
sg17
(lp18042
sg19
(lp18043
sg21
I0
sba(iArchitecture
Entity
p18044
(dp18045
g11
(lp18046
sg13
S'com.google.common.base.MoreObjects'
p18047
sg15
(lp18048
sg17
(lp18049
sg19
(lp18050
sg21
I0
sba(iArchitecture
Entity
p18051
(dp18052
g11
(lp18053
sg13
S'com.google.common.base.MoreObjects$1'
p18054
sg15
(lp18055
sg17
(lp18056
sg19
(lp18057
sg21
I0
sba(iArchitecture
Entity
p18058
(dp18059
g11
(lp18060
sg13
S'com.google.common.base.MoreObjects$ToStringHelper'
p18061
sg15
(lp18062
sg17
(lp18063
sg19
(lp18064
sg21
I0
sba(iArchitecture
Entity
p18065
(dp18066
g11
(lp18067
sg13
S'com.google.common.base.MoreObjects$ToStringHelper$ValueHolder'
p18068
sg15
(lp18069
sg17
(lp18070
sg19
(lp18071
sg21
I0
sba(iArchitecture
Entity
p18072
(dp18073
g11
(lp18074
sg13
S'com.google.common.base.Objects'
p18075
sg15
(lp18076
sg17
(lp18077
sg19
(lp18078
sg21
I0
sba(iArchitecture
Entity
p18079
(dp18080
g11
(lp18081
sg13
S'com.google.common.base.Objects$1'
p18082
sg15
(lp18083
sg17
(lp18084
sg19
(lp18085
sg21
I0
sba(iArchitecture
Entity
p18086
(dp18087
g11
(lp18088
sg13
S'com.google.common.base.Objects$ToStringHelper'
p18089
sg15
(lp18090
sg17
(lp18091
sg19
(lp18092
sg21
I0
sba(iArchitecture
Entity
p18093
(dp18094
g11
(lp18095
sg13
S'com.google.common.base.Objects$ToStringHelper$ValueHolder'
p18096
sg15
(lp18097
sg17
(lp18098
sg19
(lp18099
sg21
I0
sba(iArchitecture
Entity
p18100
(dp18101
g11
(lp18102
sg13
S'com.google.common.base.Optional$1'
p18103
sg15
(lp18104
sg17
(lp18105
sg19
(lp18106
sg21
I0
sba(iArchitecture
Entity
p18107
(dp18108
g11
(lp18109
sg13
S'com.google.common.base.Optional$1$1'
p18110
sg15
(lp18111
sg17
(lp18112
sg19
(lp18113
sg21
I0
sba(iArchitecture
Entity
p18114
(dp18115
g11
(lp18116
sg13
S'com.google.common.base.PairwiseEquivalence'
p18117
sg15
(lp18118
sg17
(lp18119
sg19
(lp18120
sg21
I0
sba(iArchitecture
Entity
p18121
(dp18122
g11
(lp18123
V2365
p18124
ag18124
asg13
S'com.google.common.base.Platform'
p18125
sg15
(lp18126
VNot a high priority. I just feel a little bad that users there would get something like "com.google.common.base.Stopwatch@0xdeadbeef".\u000a
p18127
aVNot a high priority. I just feel a little bad that users there would get something like "com.google.common.base.Stopwatch@0xdeadbeef".\u000a
p18128
asg17
(lp18129
(lp18130
I1
aag18130
asg19
(lp18131
VImplement Stopwatch.toString() under GWT
p18132
ag18132
asg21
I0
sba(iArchitecture
Entity
p18133
(dp18134
g11
(lp18135
V1444
p18136
ag18136
asg13
S'com.google.common.base.Predicate'
p18137
sg15
(lp18138
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18139
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18140
asg17
(lp18141
(lp18142
I1
aag18142
asg19
(lp18143
VPredicates.assignableFrom is named backward, and its doc is backward, too
p18144
ag18144
asg21
I0
sba(iArchitecture
Entity
p18145
(dp18146
g11
(lp18147
g18136
ag18136
asg13
S'com.google.common.base.Predicates'
p18148
sg15
(lp18149
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18150
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18151
asg17
(lp18152
g18142
ag18142
asg19
(lp18153
g18144
ag18144
asg21
I0
sba(iArchitecture
Entity
p18154
(dp18155
g11
(lp18156
g18136
ag18136
asg13
S'com.google.common.base.Predicates$1'
p18157
sg15
(lp18158
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18159
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18160
asg17
(lp18161
g18142
ag18142
asg19
(lp18162
g18144
ag18144
asg21
I0
sba(iArchitecture
Entity
p18163
(dp18164
g11
(lp18165
g18136
ag18136
asg13
S'com.google.common.base.Predicates$AndPredicate'
p18166
sg15
(lp18167
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18168
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18169
asg17
(lp18170
g18142
ag18142
asg19
(lp18171
g18144
ag18144
asg21
I0
sba(iArchitecture
Entity
p18172
(dp18173
g11
(lp18174
g18136
ag18136
asg13
S'com.google.common.base.Predicates$AssignableFromPredicate'
p18175
sg15
(lp18176
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18177
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18178
asg17
(lp18179
g18142
ag18142
asg19
(lp18180
g18144
ag18144
asg21
I0
sba(iArchitecture
Entity
p18181
(dp18182
g11
(lp18183
g18136
ag18136
asg13
S'com.google.common.base.Predicates$CompositionPredicate'
p18184
sg15
(lp18185
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18186
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18187
asg17
(lp18188
g18142
ag18142
asg19
(lp18189
g18144
ag18144
asg21
I0
sba(iArchitecture
Entity
p18190
(dp18191
g11
(lp18192
g18136
ag18136
asg13
S'com.google.common.base.Predicates$ContainsPatternFromStringPredicate'
p18193
sg15
(lp18194
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18195
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18196
asg17
(lp18197
g18142
ag18142
asg19
(lp18198
g18144
ag18144
asg21
I0
sba(iArchitecture
Entity
p18199
(dp18200
g11
(lp18201
g18136
ag18136
asg13
S'com.google.common.base.Predicates$ContainsPatternPredicate'
p18202
sg15
(lp18203
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18204
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18205
asg17
(lp18206
g18142
ag18142
asg19
(lp18207
g18144
ag18144
asg21
I0
sba(iArchitecture
Entity
p18208
(dp18209
g11
(lp18210
g18136
ag18136
asg13
S'com.google.common.base.Predicates$InPredicate'
p18211
sg15
(lp18212
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18213
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18214
asg17
(lp18215
g18142
ag18142
asg19
(lp18216
g18144
ag18144
asg21
I0
sba(iArchitecture
Entity
p18217
(dp18218
g11
(lp18219
g18136
ag18136
asg13
S'com.google.common.base.Predicates$InstanceOfPredicate'
p18220
sg15
(lp18221
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18222
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18223
asg17
(lp18224
g18142
ag18142
asg19
(lp18225
g18144
ag18144
asg21
I0
sba(iArchitecture
Entity
p18226
(dp18227
g11
(lp18228
g18136
ag18136
asg13
S'com.google.common.base.Predicates$IsEqualToPredicate'
p18229
sg15
(lp18230
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18231
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18232
asg17
(lp18233
g18142
ag18142
asg19
(lp18234
g18144
ag18144
asg21
I0
sba(iArchitecture
Entity
p18235
(dp18236
g11
(lp18237
g18136
ag18136
asg13
S'com.google.common.base.Predicates$NotPredicate'
p18238
sg15
(lp18239
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18240
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18241
asg17
(lp18242
g18142
ag18142
asg19
(lp18243
g18144
ag18144
asg21
I0
sba(iArchitecture
Entity
p18244
(dp18245
g11
(lp18246
g18136
ag18136
asg13
S'com.google.common.base.Predicates$ObjectPredicate'
p18247
sg15
(lp18248
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18249
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18250
asg17
(lp18251
g18142
ag18142
asg19
(lp18252
g18144
ag18144
asg21
I0
sba(iArchitecture
Entity
p18253
(dp18254
g11
(lp18255
g18136
ag18136
asg13
S'com.google.common.base.Predicates$ObjectPredicate$1'
p18256
sg15
(lp18257
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18258
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18259
asg17
(lp18260
g18142
ag18142
asg19
(lp18261
g18144
ag18144
asg21
I0
sba(iArchitecture
Entity
p18262
(dp18263
g11
(lp18264
g18136
ag18136
asg13
S'com.google.common.base.Predicates$ObjectPredicate$2'
p18265
sg15
(lp18266
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18267
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18268
asg17
(lp18269
g18142
ag18142
asg19
(lp18270
g18144
ag18144
asg21
I0
sba(iArchitecture
Entity
p18271
(dp18272
g11
(lp18273
g18136
ag18136
asg13
S'com.google.common.base.Predicates$ObjectPredicate$3'
p18274
sg15
(lp18275
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18276
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18277
asg17
(lp18278
g18142
ag18142
asg19
(lp18279
g18144
ag18144
asg21
I0
sba(iArchitecture
Entity
p18280
(dp18281
g11
(lp18282
g18136
ag18136
asg13
S'com.google.common.base.Predicates$ObjectPredicate$4'
p18283
sg15
(lp18284
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18285
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18286
asg17
(lp18287
g18142
ag18142
asg19
(lp18288
g18144
ag18144
asg21
I0
sba(iArchitecture
Entity
p18289
(dp18290
g11
(lp18291
g18136
ag18136
asg13
S'com.google.common.base.Predicates$OrPredicate'
p18292
sg15
(lp18293
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18294
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1444) created by **cpovirk@google.com** on 2013-06-11 at 09:49 PM_\u000a\u000a---\u000a\u000aJust as we've inverted Class.isInstance to Predicates.instanceOf, we ought to have inverted Class.isAssignableFrom to Predicates.assignableTo.\u000a\u000aAnd the doc says: "true if the class being tested is assignable from the given class"\ufeff\u000ahttps://google.github.io/guava/apidocs/com/google/common/base/Predicates.html#assignableFrom(java.lang.Class)\u000a\u000aBut it's the other way around.\u000a
p18295
asg17
(lp18296
g18142
ag18142
asg19
(lp18297
g18144
ag18144
asg21
I0
sba(iArchitecture
Entity
p18298
(dp18299
g11
(lp18300
sg13
S'com.google.common.base.SmallCharMatcher'
p18301
sg15
(lp18302
sg17
(lp18303
sg19
(lp18304
sg21
I0
sba(iArchitecture
Entity
p18305
(dp18306
g11
(lp18307
sg13
S'com.google.common.base.Splitter'
p18308
sg15
(lp18309
sg17
(lp18310
sg19
(lp18311
sg21
I0
sba(iArchitecture
Entity
p18312
(dp18313
g11
(lp18314
sg13
S'com.google.common.base.Splitter$1'
p18315
sg15
(lp18316
sg17
(lp18317
sg19
(lp18318
sg21
I0
sba(iArchitecture
Entity
p18319
(dp18320
g11
(lp18321
sg13
S'com.google.common.base.Splitter$1$1'
p18322
sg15
(lp18323
sg17
(lp18324
sg19
(lp18325
sg21
I0
sba(iArchitecture
Entity
p18326
(dp18327
g11
(lp18328
sg13
S'com.google.common.base.Splitter$2'
p18329
sg15
(lp18330
sg17
(lp18331
sg19
(lp18332
sg21
I0
sba(iArchitecture
Entity
p18333
(dp18334
g11
(lp18335
sg13
S'com.google.common.base.Splitter$2$1'
p18336
sg15
(lp18337
sg17
(lp18338
sg19
(lp18339
sg21
I0
sba(iArchitecture
Entity
p18340
(dp18341
g11
(lp18342
sg13
S'com.google.common.base.Splitter$3'
p18343
sg15
(lp18344
sg17
(lp18345
sg19
(lp18346
sg21
I0
sba(iArchitecture
Entity
p18347
(dp18348
g11
(lp18349
sg13
S'com.google.common.base.Splitter$3$1'
p18350
sg15
(lp18351
sg17
(lp18352
sg19
(lp18353
sg21
I0
sba(iArchitecture
Entity
p18354
(dp18355
g11
(lp18356
sg13
S'com.google.common.base.Splitter$4'
p18357
sg15
(lp18358
sg17
(lp18359
sg19
(lp18360
sg21
I0
sba(iArchitecture
Entity
p18361
(dp18362
g11
(lp18363
sg13
S'com.google.common.base.Splitter$4$1'
p18364
sg15
(lp18365
sg17
(lp18366
sg19
(lp18367
sg21
I0
sba(iArchitecture
Entity
p18368
(dp18369
g11
(lp18370
sg13
S'com.google.common.base.Splitter$5'
p18371
sg15
(lp18372
sg17
(lp18373
sg19
(lp18374
sg21
I0
sba(iArchitecture
Entity
p18375
(dp18376
g11
(lp18377
sg13
S'com.google.common.base.Splitter$MapSplitter'
p18378
sg15
(lp18379
sg17
(lp18380
sg19
(lp18381
sg21
I0
sba(iArchitecture
Entity
p18382
(dp18383
g11
(lp18384
sg13
S'com.google.common.base.Splitter$SplittingIterator'
p18385
sg15
(lp18386
sg17
(lp18387
sg19
(lp18388
sg21
I0
sba(iArchitecture
Entity
p18389
(dp18390
g11
(lp18391
sg13
S'com.google.common.base.Splitter$Strategy'
p18392
sg15
(lp18393
sg17
(lp18394
sg19
(lp18395
sg21
I0
sba(iArchitecture
Entity
p18396
(dp18397
g11
(lp18398
sg13
S'com.google.common.base.StandardSystemProperty'
p18399
sg15
(lp18400
sg17
(lp18401
sg19
(lp18402
sg21
I0
sba(iArchitecture
Entity
p18403
(dp18404
g11
(lp18405
g18124
ag18124
ag18124
asg13
S'com.google.common.base.Stopwatch'
p18406
sg15
(lp18407
VNot a high priority. I just feel a little bad that users there would get something like "com.google.common.base.Stopwatch@0xdeadbeef".\u000a
p18408
aVNot a high priority. I just feel a little bad that users there would get something like "com.google.common.base.Stopwatch@0xdeadbeef".\u000a
p18409
aVNot a high priority. I just feel a little bad that users there would get something like "com.google.common.base.Stopwatch@0xdeadbeef".\u000a
p18410
asg17
(lp18411
g18130
ag18130
ag18130
asg19
(lp18412
g18132
ag18132
ag18132
asg21
I0
sba(iArchitecture
Entity
p18413
(dp18414
g11
(lp18415
g18124
ag18124
ag18124
asg13
S'com.google.common.base.Stopwatch$1'
p18416
sg15
(lp18417
VNot a high priority. I just feel a little bad that users there would get something like "com.google.common.base.Stopwatch@0xdeadbeef".\u000a
p18418
aVNot a high priority. I just feel a little bad that users there would get something like "com.google.common.base.Stopwatch@0xdeadbeef".\u000a
p18419
aVNot a high priority. I just feel a little bad that users there would get something like "com.google.common.base.Stopwatch@0xdeadbeef".\u000a
p18420
asg17
(lp18421
g18130
ag18130
ag18130
asg19
(lp18422
g18132
ag18132
ag18132
asg21
I0
sba(iArchitecture
Entity
p18423
(dp18424
g11
(lp18425
sg13
S'com.google.common.base.Suppliers'
p18426
sg15
(lp18427
sg17
(lp18428
sg19
(lp18429
sg21
I0
sba(iArchitecture
Entity
p18430
(dp18431
g11
(lp18432
sg13
S'com.google.common.base.Suppliers$ExpiringMemoizingSupplier'
p18433
sg15
(lp18434
sg17
(lp18435
sg19
(lp18436
sg21
I0
sba(iArchitecture
Entity
p18437
(dp18438
g11
(lp18439
sg13
S'com.google.common.base.Suppliers$MemoizingSupplier'
p18440
sg15
(lp18441
sg17
(lp18442
sg19
(lp18443
sg21
I0
sba(iArchitecture
Entity
p18444
(dp18445
g11
(lp18446
sg13
S'com.google.common.base.Suppliers$SupplierComposition'
p18447
sg15
(lp18448
sg17
(lp18449
sg19
(lp18450
sg21
I0
sba(iArchitecture
Entity
p18451
(dp18452
g11
(lp18453
sg13
S'com.google.common.base.Suppliers$SupplierFunction'
p18454
sg15
(lp18455
sg17
(lp18456
sg19
(lp18457
sg21
I0
sba(iArchitecture
Entity
p18458
(dp18459
g11
(lp18460
sg13
S'com.google.common.base.Suppliers$SupplierFunctionImpl'
p18461
sg15
(lp18462
sg17
(lp18463
sg19
(lp18464
sg21
I0
sba(iArchitecture
Entity
p18465
(dp18466
g11
(lp18467
sg13
S'com.google.common.base.Suppliers$SupplierOfInstance'
p18468
sg15
(lp18469
sg17
(lp18470
sg19
(lp18471
sg21
I0
sba(iArchitecture
Entity
p18472
(dp18473
g11
(lp18474
sg13
S'com.google.common.base.Suppliers$ThreadSafeSupplier'
p18475
sg15
(lp18476
sg17
(lp18477
sg19
(lp18478
sg21
I0
sba(iArchitecture
Entity
p18479
(dp18480
g11
(lp18481
V2457
p18482
ag18482
ag18482
asg13
S'com.google.common.base.Throwables'
p18483
sg15
(lp18484
V
p18485
ag18485
ag18485
asg17
(lp18486
(lp18487
I0
aag18487
ag18487
asg19
(lp18488
VEmulate Throwables in GWT
p18489
ag18489
ag18489
asg21
I0
sba(iArchitecture
Entity
p18490
(dp18491
g11
(lp18492
g18482
ag18482
ag18482
asg13
S'com.google.common.base.Throwables$1'
p18493
sg15
(lp18494
g18485
ag18485
ag18485
asg17
(lp18495
g18487
ag18487
ag18487
asg19
(lp18496
g18489
ag18489
ag18489
asg21
I0
sba(iArchitecture
Entity
p18497
(dp18498
g11
(lp18499
sg13
S'com.google.common.base.Ticker'
p18500
sg15
(lp18501
sg17
(lp18502
sg19
(lp18503
sg21
I0
sba(iArchitecture
Entity
p18504
(dp18505
g11
(lp18506
sg13
S'com.google.common.base.Ticker$1'
p18507
sg15
(lp18508
sg17
(lp18509
sg19
(lp18510
sg21
I0
sba(iArchitecture
Entity
p18511
(dp18512
g11
(lp18513
sg13
S'com.google.common.base.Verify'
p18514
sg15
(lp18515
sg17
(lp18516
sg19
(lp18517
sg21
I0
sba(iArchitecture
Entity
p18518
(dp18519
g11
(lp18520
sg13
S'com.google.common.base.VerifyException'
p18521
sg15
(lp18522
sg17
(lp18523
sg19
(lp18524
sg21
I0
sbasg1055
(lp18525
g17419
ag17426
ag17433
ag17440
ag17447
ag17454
ag17461
ag17468
ag17475
ag17482
ag17489
ag17496
ag17504
ag17514
ag17522
ag17530
ag17538
ag17546
ag17554
ag17562
ag17570
ag17578
ag17586
ag17594
ag17602
ag17610
ag17618
ag17626
ag17634
ag17642
ag17650
ag17658
ag17666
ag17674
ag17682
ag17690
ag17698
ag17706
ag17714
ag17722
ag17730
ag17738
ag17746
ag17753
ag17760
ag17767
ag17774
ag17781
ag17788
ag17795
ag17802
ag17809
ag17816
ag17823
ag17830
ag17837
ag17844
ag17851
ag17858
ag17865
ag17872
ag17879
ag17886
ag17893
ag17900
ag17907
ag17914
ag17921
ag17928
ag17935
ag17942
ag17949
ag17956
ag17963
ag17970
ag17977
ag17984
ag17991
ag17998
ag18005
ag18012
ag18019
ag18026
ag18033
ag18040
ag18047
ag18054
ag18061
ag18068
ag18075
ag18082
ag18089
ag18096
ag18103
ag18110
ag18117
ag18125
ag18137
ag18148
ag18157
ag18166
ag18175
ag18184
ag18193
ag18202
ag18211
ag18220
ag18229
ag18238
ag18247
ag18256
ag18265
ag18274
ag18283
ag18292
ag18301
ag18308
ag18315
ag18322
ag18329
ag18336
ag18343
ag18350
ag18357
ag18364
ag18371
ag18378
ag18385
ag18392
ag18399
ag18406
ag18416
ag18426
ag18433
ag18440
ag18447
ag18454
ag18461
ag18468
ag18475
ag18483
ag18493
ag18500
ag18507
ag18514
ag18521
asg21
I0
sg1057
S'com.google.common.base.ss'
p18526
sba(iArchitecture
Cluster
p18527
(dp18528
g7
(lp18529
(iArchitecture
Entity
p18530
(dp18531
g11
(lp18532
sg13
S'com.google.common.base.Preconditions'
p18533
sg15
(lp18534
sg17
(lp18535
sg19
(lp18536
sg21
I0
sba(iArchitecture
Entity
p18537
(dp18538
g11
(lp18539
sg13
S'com.google.common.base.Utf8'
p18540
sg15
(lp18541
sg17
(lp18542
sg19
(lp18543
sg21
I0
sba(iArchitecture
Entity
p18544
(dp18545
g11
(lp18546
sg13
S'com.google.common.cache.AbstractCache'
p18547
sg15
(lp18548
sg17
(lp18549
sg19
(lp18550
sg21
I0
sba(iArchitecture
Entity
p18551
(dp18552
g11
(lp18553
sg13
S'com.google.common.cache.AbstractCache$SimpleStatsCounter'
p18554
sg15
(lp18555
sg17
(lp18556
sg19
(lp18557
sg21
I0
sba(iArchitecture
Entity
p18558
(dp18559
g11
(lp18560
sg13
S'com.google.common.cache.AbstractCache$StatsCounter'
p18561
sg15
(lp18562
sg17
(lp18563
sg19
(lp18564
sg21
I0
sba(iArchitecture
Entity
p18565
(dp18566
g11
(lp18567
sg13
S'com.google.common.cache.Cache'
p18568
sg15
(lp18569
sg17
(lp18570
sg19
(lp18571
sg21
I0
sba(iArchitecture
Entity
p18572
(dp18573
g11
(lp18574
sg13
S'com.google.common.cache.CacheBuilder'
p18575
sg15
(lp18576
sg17
(lp18577
sg19
(lp18578
sg21
I0
sba(iArchitecture
Entity
p18579
(dp18580
g11
(lp18581
sg13
S'com.google.common.cache.CacheBuilder$1'
p18582
sg15
(lp18583
sg17
(lp18584
sg19
(lp18585
sg21
I0
sba(iArchitecture
Entity
p18586
(dp18587
g11
(lp18588
sg13
S'com.google.common.cache.CacheBuilder$2'
p18589
sg15
(lp18590
sg17
(lp18591
sg19
(lp18592
sg21
I0
sba(iArchitecture
Entity
p18593
(dp18594
g11
(lp18595
sg13
S'com.google.common.cache.CacheBuilder$3'
p18596
sg15
(lp18597
sg17
(lp18598
sg19
(lp18599
sg21
I0
sba(iArchitecture
Entity
p18600
(dp18601
g11
(lp18602
sg13
S'com.google.common.cache.CacheBuilder$NullListener'
p18603
sg15
(lp18604
sg17
(lp18605
sg19
(lp18606
sg21
I0
sba(iArchitecture
Entity
p18607
(dp18608
g11
(lp18609
sg13
S'com.google.common.cache.CacheBuilder$OneWeigher'
p18610
sg15
(lp18611
sg17
(lp18612
sg19
(lp18613
sg21
I0
sba(iArchitecture
Entity
p18614
(dp18615
g11
(lp18616
sg13
S'com.google.common.cache.CacheBuilderSpec'
p18617
sg15
(lp18618
sg17
(lp18619
sg19
(lp18620
sg21
I0
sba(iArchitecture
Entity
p18621
(dp18622
g11
(lp18623
sg13
S'com.google.common.cache.CacheBuilderSpec$1'
p18624
sg15
(lp18625
sg17
(lp18626
sg19
(lp18627
sg21
I0
sba(iArchitecture
Entity
p18628
(dp18629
g11
(lp18630
sg13
S'com.google.common.cache.CacheBuilderSpec$AccessDurationParser'
p18631
sg15
(lp18632
sg17
(lp18633
sg19
(lp18634
sg21
I0
sba(iArchitecture
Entity
p18635
(dp18636
g11
(lp18637
sg13
S'com.google.common.cache.CacheBuilderSpec$ConcurrencyLevelParser'
p18638
sg15
(lp18639
sg17
(lp18640
sg19
(lp18641
sg21
I0
sba(iArchitecture
Entity
p18642
(dp18643
g11
(lp18644
sg13
S'com.google.common.cache.CacheBuilderSpec$DurationParser'
p18645
sg15
(lp18646
sg17
(lp18647
sg19
(lp18648
sg21
I0
sba(iArchitecture
Entity
p18649
(dp18650
g11
(lp18651
sg13
S'com.google.common.cache.CacheBuilderSpec$InitialCapacityParser'
p18652
sg15
(lp18653
sg17
(lp18654
sg19
(lp18655
sg21
I0
sba(iArchitecture
Entity
p18656
(dp18657
g11
(lp18658
sg13
S'com.google.common.cache.CacheBuilderSpec$IntegerParser'
p18659
sg15
(lp18660
sg17
(lp18661
sg19
(lp18662
sg21
I0
sba(iArchitecture
Entity
p18663
(dp18664
g11
(lp18665
sg13
S'com.google.common.cache.CacheBuilderSpec$KeyStrengthParser'
p18666
sg15
(lp18667
sg17
(lp18668
sg19
(lp18669
sg21
I0
sba(iArchitecture
Entity
p18670
(dp18671
g11
(lp18672
sg13
S'com.google.common.cache.CacheBuilderSpec$LongParser'
p18673
sg15
(lp18674
sg17
(lp18675
sg19
(lp18676
sg21
I0
sba(iArchitecture
Entity
p18677
(dp18678
g11
(lp18679
sg13
S'com.google.common.cache.CacheBuilderSpec$MaximumSizeParser'
p18680
sg15
(lp18681
sg17
(lp18682
sg19
(lp18683
sg21
I0
sba(iArchitecture
Entity
p18684
(dp18685
g11
(lp18686
sg13
S'com.google.common.cache.CacheBuilderSpec$MaximumWeightParser'
p18687
sg15
(lp18688
sg17
(lp18689
sg19
(lp18690
sg21
I0
sba(iArchitecture
Entity
p18691
(dp18692
g11
(lp18693
sg13
S'com.google.common.cache.CacheBuilderSpec$RecordStatsParser'
p18694
sg15
(lp18695
sg17
(lp18696
sg19
(lp18697
sg21
I0
sba(iArchitecture
Entity
p18698
(dp18699
g11
(lp18700
sg13
S'com.google.common.cache.CacheBuilderSpec$RefreshDurationParser'
p18701
sg15
(lp18702
sg17
(lp18703
sg19
(lp18704
sg21
I0
sba(iArchitecture
Entity
p18705
(dp18706
g11
(lp18707
sg13
S'com.google.common.cache.CacheBuilderSpec$ValueParser'
p18708
sg15
(lp18709
sg17
(lp18710
sg19
(lp18711
sg21
I0
sba(iArchitecture
Entity
p18712
(dp18713
g11
(lp18714
sg13
S'com.google.common.cache.CacheBuilderSpec$ValueStrengthParser'
p18715
sg15
(lp18716
sg17
(lp18717
sg19
(lp18718
sg21
I0
sba(iArchitecture
Entity
p18719
(dp18720
g11
(lp18721
sg13
S'com.google.common.cache.CacheBuilderSpec$WriteDurationParser'
p18722
sg15
(lp18723
sg17
(lp18724
sg19
(lp18725
sg21
I0
sba(iArchitecture
Entity
p18726
(dp18727
g11
(lp18728
sg13
S'com.google.common.cache.CacheLoader'
p18729
sg15
(lp18730
sg17
(lp18731
sg19
(lp18732
sg21
I0
sba(iArchitecture
Entity
p18733
(dp18734
g11
(lp18735
sg13
S'com.google.common.cache.CacheLoader$1'
p18736
sg15
(lp18737
sg17
(lp18738
sg19
(lp18739
sg21
I0
sba(iArchitecture
Entity
p18740
(dp18741
g11
(lp18742
sg13
S'com.google.common.cache.CacheLoader$1$1'
p18743
sg15
(lp18744
sg17
(lp18745
sg19
(lp18746
sg21
I0
sba(iArchitecture
Entity
p18747
(dp18748
g11
(lp18749
sg13
S'com.google.common.cache.CacheLoader$FunctionToCacheLoader'
p18750
sg15
(lp18751
sg17
(lp18752
sg19
(lp18753
sg21
I0
sba(iArchitecture
Entity
p18754
(dp18755
g11
(lp18756
sg13
S'com.google.common.cache.CacheLoader$InvalidCacheLoadException'
p18757
sg15
(lp18758
sg17
(lp18759
sg19
(lp18760
sg21
I0
sba(iArchitecture
Entity
p18761
(dp18762
g11
(lp18763
sg13
S'com.google.common.cache.CacheLoader$SupplierToCacheLoader'
p18764
sg15
(lp18765
sg17
(lp18766
sg19
(lp18767
sg21
I0
sba(iArchitecture
Entity
p18768
(dp18769
g11
(lp18770
sg13
S'com.google.common.cache.CacheLoader$UnsupportedLoadingOperationException'
p18771
sg15
(lp18772
sg17
(lp18773
sg19
(lp18774
sg21
I0
sba(iArchitecture
Entity
p18775
(dp18776
g11
(lp18777
sg13
S'com.google.common.cache.CacheStats'
p18778
sg15
(lp18779
sg17
(lp18780
sg19
(lp18781
sg21
I0
sba(iArchitecture
Entity
p18782
(dp18783
g11
(lp18784
sg13
S'com.google.common.cache.ForwardingCache'
p18785
sg15
(lp18786
sg17
(lp18787
sg19
(lp18788
sg21
I0
sba(iArchitecture
Entity
p18789
(dp18790
g11
(lp18791
sg13
S'com.google.common.cache.ForwardingCache$SimpleForwardingCache'
p18792
sg15
(lp18793
sg17
(lp18794
sg19
(lp18795
sg21
I0
sba(iArchitecture
Entity
p18796
(dp18797
g11
(lp18798
sg13
S'com.google.common.cache.ForwardingLoadingCache'
p18799
sg15
(lp18800
sg17
(lp18801
sg19
(lp18802
sg21
I0
sba(iArchitecture
Entity
p18803
(dp18804
g11
(lp18805
sg13
S'com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache'
p18806
sg15
(lp18807
sg17
(lp18808
sg19
(lp18809
sg21
I0
sba(iArchitecture
Entity
p18810
(dp18811
g11
(lp18812
sg13
S'com.google.common.cache.LoadingCache'
p18813
sg15
(lp18814
sg17
(lp18815
sg19
(lp18816
sg21
I0
sba(iArchitecture
Entity
p18817
(dp18818
g11
(lp18819
sg13
S'com.google.common.cache.LocalCache'
p18820
sg15
(lp18821
sg17
(lp18822
sg19
(lp18823
sg21
I0
sba(iArchitecture
Entity
p18824
(dp18825
g11
(lp18826
sg13
S'com.google.common.cache.LocalCache$1'
p18827
sg15
(lp18828
sg17
(lp18829
sg19
(lp18830
sg21
I0
sba(iArchitecture
Entity
p18831
(dp18832
g11
(lp18833
sg13
S'com.google.common.cache.LocalCache$2'
p18834
sg15
(lp18835
sg17
(lp18836
sg19
(lp18837
sg21
I0
sba(iArchitecture
Entity
p18838
(dp18839
g11
(lp18840
sg13
S'com.google.common.cache.LocalCache$AbstractCacheSet'
p18841
sg15
(lp18842
sg17
(lp18843
sg19
(lp18844
sg21
I0
sba(iArchitecture
Entity
p18845
(dp18846
g11
(lp18847
sg13
S'com.google.common.cache.LocalCache$AbstractReferenceEntry'
p18848
sg15
(lp18849
sg17
(lp18850
sg19
(lp18851
sg21
I0
sba(iArchitecture
Entity
p18852
(dp18853
g11
(lp18854
sg13
S'com.google.common.cache.LocalCache$AccessQueue'
p18855
sg15
(lp18856
sg17
(lp18857
sg19
(lp18858
sg21
I0
sba(iArchitecture
Entity
p18859
(dp18860
g11
(lp18861
sg13
S'com.google.common.cache.LocalCache$AccessQueue$1'
p18862
sg15
(lp18863
sg17
(lp18864
sg19
(lp18865
sg21
I0
sba(iArchitecture
Entity
p18866
(dp18867
g11
(lp18868
sg13
S'com.google.common.cache.LocalCache$AccessQueue$2'
p18869
sg15
(lp18870
sg17
(lp18871
sg19
(lp18872
sg21
I0
sba(iArchitecture
Entity
p18873
(dp18874
g11
(lp18875
sg13
S'com.google.common.cache.LocalCache$EntryFactory'
p18876
sg15
(lp18877
sg17
(lp18878
sg19
(lp18879
sg21
I0
sba(iArchitecture
Entity
p18880
(dp18881
g11
(lp18882
sg13
S'com.google.common.cache.LocalCache$EntryFactory$1'
p18883
sg15
(lp18884
sg17
(lp18885
sg19
(lp18886
sg21
I0
sba(iArchitecture
Entity
p18887
(dp18888
g11
(lp18889
sg13
S'com.google.common.cache.LocalCache$EntryFactory$2'
p18890
sg15
(lp18891
sg17
(lp18892
sg19
(lp18893
sg21
I0
sba(iArchitecture
Entity
p18894
(dp18895
g11
(lp18896
sg13
S'com.google.common.cache.LocalCache$EntryFactory$3'
p18897
sg15
(lp18898
sg17
(lp18899
sg19
(lp18900
sg21
I0
sba(iArchitecture
Entity
p18901
(dp18902
g11
(lp18903
sg13
S'com.google.common.cache.LocalCache$EntryFactory$4'
p18904
sg15
(lp18905
sg17
(lp18906
sg19
(lp18907
sg21
I0
sba(iArchitecture
Entity
p18908
(dp18909
g11
(lp18910
sg13
S'com.google.common.cache.LocalCache$EntryFactory$5'
p18911
sg15
(lp18912
sg17
(lp18913
sg19
(lp18914
sg21
I0
sba(iArchitecture
Entity
p18915
(dp18916
g11
(lp18917
sg13
S'com.google.common.cache.LocalCache$EntryFactory$6'
p18918
sg15
(lp18919
sg17
(lp18920
sg19
(lp18921
sg21
I0
sba(iArchitecture
Entity
p18922
(dp18923
g11
(lp18924
sg13
S'com.google.common.cache.LocalCache$EntryFactory$7'
p18925
sg15
(lp18926
sg17
(lp18927
sg19
(lp18928
sg21
I0
sba(iArchitecture
Entity
p18929
(dp18930
g11
(lp18931
sg13
S'com.google.common.cache.LocalCache$EntryFactory$8'
p18932
sg15
(lp18933
sg17
(lp18934
sg19
(lp18935
sg21
I0
sba(iArchitecture
Entity
p18936
(dp18937
g11
(lp18938
sg13
S'com.google.common.cache.LocalCache$EntryIterator'
p18939
sg15
(lp18940
sg17
(lp18941
sg19
(lp18942
sg21
I0
sba(iArchitecture
Entity
p18943
(dp18944
g11
(lp18945
sg13
S'com.google.common.cache.LocalCache$EntrySet'
p18946
sg15
(lp18947
sg17
(lp18948
sg19
(lp18949
sg21
I0
sba(iArchitecture
Entity
p18950
(dp18951
g11
(lp18952
sg13
S'com.google.common.cache.LocalCache$HashIterator'
p18953
sg15
(lp18954
sg17
(lp18955
sg19
(lp18956
sg21
I0
sba(iArchitecture
Entity
p18957
(dp18958
g11
(lp18959
sg13
S'com.google.common.cache.LocalCache$KeyIterator'
p18960
sg15
(lp18961
sg17
(lp18962
sg19
(lp18963
sg21
I0
sba(iArchitecture
Entity
p18964
(dp18965
g11
(lp18966
sg13
S'com.google.common.cache.LocalCache$KeySet'
p18967
sg15
(lp18968
sg17
(lp18969
sg19
(lp18970
sg21
I0
sba(iArchitecture
Entity
p18971
(dp18972
g11
(lp18973
sg13
S'com.google.common.cache.LocalCache$LoadingSerializationProxy'
p18974
sg15
(lp18975
sg17
(lp18976
sg19
(lp18977
sg21
I0
sba(iArchitecture
Entity
p18978
(dp18979
g11
(lp18980
sg13
S'com.google.common.cache.LocalCache$LoadingValueReference'
p18981
sg15
(lp18982
sg17
(lp18983
sg19
(lp18984
sg21
I0
sba(iArchitecture
Entity
p18985
(dp18986
g11
(lp18987
sg13
S'com.google.common.cache.LocalCache$LoadingValueReference$1'
p18988
sg15
(lp18989
sg17
(lp18990
sg19
(lp18991
sg21
I0
sba(iArchitecture
Entity
p18992
(dp18993
g11
(lp18994
sg13
S'com.google.common.cache.LocalCache$LocalLoadingCache'
p18995
sg15
(lp18996
sg17
(lp18997
sg19
(lp18998
sg21
I0
sba(iArchitecture
Entity
p18999
(dp19000
g11
(lp19001
sg13
S'com.google.common.cache.LocalCache$LocalManualCache'
p19002
sg15
(lp19003
sg17
(lp19004
sg19
(lp19005
sg21
I0
sba(iArchitecture
Entity
p19006
(dp19007
g11
(lp19008
sg13
S'com.google.common.cache.LocalCache$LocalManualCache$1'
p19009
sg15
(lp19010
sg17
(lp19011
sg19
(lp19012
sg21
I0
sba(iArchitecture
Entity
p19013
(dp19014
g11
(lp19015
sg13
S'com.google.common.cache.LocalCache$ManualSerializationProxy'
p19016
sg15
(lp19017
sg17
(lp19018
sg19
(lp19019
sg21
I0
sba(iArchitecture
Entity
p19020
(dp19021
g11
(lp19022
sg13
S'com.google.common.cache.LocalCache$NullEntry'
p19023
sg15
(lp19024
sg17
(lp19025
sg19
(lp19026
sg21
I0
sba(iArchitecture
Entity
p19027
(dp19028
g11
(lp19029
sg13
S'com.google.common.cache.LocalCache$ReferenceEntry'
p19030
sg15
(lp19031
sg17
(lp19032
sg19
(lp19033
sg21
I0
sba(iArchitecture
Entity
p19034
(dp19035
g11
(lp19036
sg13
S'com.google.common.cache.LocalCache$Segment'
p19037
sg15
(lp19038
sg17
(lp19039
sg19
(lp19040
sg21
I0
sba(iArchitecture
Entity
p19041
(dp19042
g11
(lp19043
sg13
S'com.google.common.cache.LocalCache$Segment$1'
p19044
sg15
(lp19045
sg17
(lp19046
sg19
(lp19047
sg21
I0
sba(iArchitecture
Entity
p19048
(dp19049
g11
(lp19050
sg13
S'com.google.common.cache.LocalCache$SoftValueReference'
p19051
sg15
(lp19052
sg17
(lp19053
sg19
(lp19054
sg21
I0
sba(iArchitecture
Entity
p19055
(dp19056
g11
(lp19057
sg13
S'com.google.common.cache.LocalCache$Strength'
p19058
sg15
(lp19059
sg17
(lp19060
sg19
(lp19061
sg21
I0
sba(iArchitecture
Entity
p19062
(dp19063
g11
(lp19064
sg13
S'com.google.common.cache.LocalCache$Strength$1'
p19065
sg15
(lp19066
sg17
(lp19067
sg19
(lp19068
sg21
I0
sba(iArchitecture
Entity
p19069
(dp19070
g11
(lp19071
sg13
S'com.google.common.cache.LocalCache$Strength$2'
p19072
sg15
(lp19073
sg17
(lp19074
sg19
(lp19075
sg21
I0
sba(iArchitecture
Entity
p19076
(dp19077
g11
(lp19078
sg13
S'com.google.common.cache.LocalCache$Strength$3'
p19079
sg15
(lp19080
sg17
(lp19081
sg19
(lp19082
sg21
I0
sba(iArchitecture
Entity
p19083
(dp19084
g11
(lp19085
sg13
S'com.google.common.cache.LocalCache$StrongAccessEntry'
p19086
sg15
(lp19087
sg17
(lp19088
sg19
(lp19089
sg21
I0
sba(iArchitecture
Entity
p19090
(dp19091
g11
(lp19092
sg13
S'com.google.common.cache.LocalCache$StrongAccessWriteEntry'
p19093
sg15
(lp19094
sg17
(lp19095
sg19
(lp19096
sg21
I0
sba(iArchitecture
Entity
p19097
(dp19098
g11
(lp19099
sg13
S'com.google.common.cache.LocalCache$StrongEntry'
p19100
sg15
(lp19101
sg17
(lp19102
sg19
(lp19103
sg21
I0
sba(iArchitecture
Entity
p19104
(dp19105
g11
(lp19106
sg13
S'com.google.common.cache.LocalCache$StrongValueReference'
p19107
sg15
(lp19108
sg17
(lp19109
sg19
(lp19110
sg21
I0
sba(iArchitecture
Entity
p19111
(dp19112
g11
(lp19113
sg13
S'com.google.common.cache.LocalCache$StrongWriteEntry'
p19114
sg15
(lp19115
sg17
(lp19116
sg19
(lp19117
sg21
I0
sba(iArchitecture
Entity
p19118
(dp19119
g11
(lp19120
sg13
S'com.google.common.cache.LocalCache$ValueIterator'
p19121
sg15
(lp19122
sg17
(lp19123
sg19
(lp19124
sg21
I0
sba(iArchitecture
Entity
p19125
(dp19126
g11
(lp19127
sg13
S'com.google.common.cache.LocalCache$ValueReference'
p19128
sg15
(lp19129
sg17
(lp19130
sg19
(lp19131
sg21
I0
sba(iArchitecture
Entity
p19132
(dp19133
g11
(lp19134
sg13
S'com.google.common.cache.LocalCache$Values'
p19135
sg15
(lp19136
sg17
(lp19137
sg19
(lp19138
sg21
I0
sba(iArchitecture
Entity
p19139
(dp19140
g11
(lp19141
sg13
S'com.google.common.cache.LocalCache$WeakAccessEntry'
p19142
sg15
(lp19143
sg17
(lp19144
sg19
(lp19145
sg21
I0
sba(iArchitecture
Entity
p19146
(dp19147
g11
(lp19148
sg13
S'com.google.common.cache.LocalCache$WeakAccessWriteEntry'
p19149
sg15
(lp19150
sg17
(lp19151
sg19
(lp19152
sg21
I0
sba(iArchitecture
Entity
p19153
(dp19154
g11
(lp19155
sg13
S'com.google.common.cache.LocalCache$WeakEntry'
p19156
sg15
(lp19157
sg17
(lp19158
sg19
(lp19159
sg21
I0
sba(iArchitecture
Entity
p19160
(dp19161
g11
(lp19162
sg13
S'com.google.common.cache.LocalCache$WeakValueReference'
p19163
sg15
(lp19164
sg17
(lp19165
sg19
(lp19166
sg21
I0
sba(iArchitecture
Entity
p19167
(dp19168
g11
(lp19169
sg13
S'com.google.common.cache.LocalCache$WeakWriteEntry'
p19170
sg15
(lp19171
sg17
(lp19172
sg19
(lp19173
sg21
I0
sba(iArchitecture
Entity
p19174
(dp19175
g11
(lp19176
sg13
S'com.google.common.cache.LocalCache$WeightedSoftValueReference'
p19177
sg15
(lp19178
sg17
(lp19179
sg19
(lp19180
sg21
I0
sba(iArchitecture
Entity
p19181
(dp19182
g11
(lp19183
sg13
S'com.google.common.cache.LocalCache$WeightedStrongValueReference'
p19184
sg15
(lp19185
sg17
(lp19186
sg19
(lp19187
sg21
I0
sba(iArchitecture
Entity
p19188
(dp19189
g11
(lp19190
sg13
S'com.google.common.cache.LocalCache$WeightedWeakValueReference'
p19191
sg15
(lp19192
sg17
(lp19193
sg19
(lp19194
sg21
I0
sba(iArchitecture
Entity
p19195
(dp19196
g11
(lp19197
sg13
S'com.google.common.cache.LocalCache$WriteQueue'
p19198
sg15
(lp19199
sg17
(lp19200
sg19
(lp19201
sg21
I0
sba(iArchitecture
Entity
p19202
(dp19203
g11
(lp19204
sg13
S'com.google.common.cache.LocalCache$WriteQueue$1'
p19205
sg15
(lp19206
sg17
(lp19207
sg19
(lp19208
sg21
I0
sba(iArchitecture
Entity
p19209
(dp19210
g11
(lp19211
sg13
S'com.google.common.cache.LocalCache$WriteQueue$2'
p19212
sg15
(lp19213
sg17
(lp19214
sg19
(lp19215
sg21
I0
sba(iArchitecture
Entity
p19216
(dp19217
g11
(lp19218
sg13
S'com.google.common.cache.LocalCache$WriteThroughEntry'
p19219
sg15
(lp19220
sg17
(lp19221
sg19
(lp19222
sg21
I0
sba(iArchitecture
Entity
p19223
(dp19224
g11
(lp19225
sg13
S'com.google.common.cache.LongAddable'
p19226
sg15
(lp19227
sg17
(lp19228
sg19
(lp19229
sg21
I0
sba(iArchitecture
Entity
p19230
(dp19231
g11
(lp19232
sg13
S'com.google.common.cache.LongAddables'
p19233
sg15
(lp19234
sg17
(lp19235
sg19
(lp19236
sg21
I0
sba(iArchitecture
Entity
p19237
(dp19238
g11
(lp19239
sg13
S'com.google.common.cache.LongAddables$1'
p19240
sg15
(lp19241
sg17
(lp19242
sg19
(lp19243
sg21
I0
sba(iArchitecture
Entity
p19244
(dp19245
g11
(lp19246
sg13
S'com.google.common.cache.LongAddables$2'
p19247
sg15
(lp19248
sg17
(lp19249
sg19
(lp19250
sg21
I0
sba(iArchitecture
Entity
p19251
(dp19252
g11
(lp19253
sg13
S'com.google.common.cache.LongAddables$PureJavaLongAddable'
p19254
sg15
(lp19255
sg17
(lp19256
sg19
(lp19257
sg21
I0
sba(iArchitecture
Entity
p19258
(dp19259
g11
(lp19260
sg13
S'com.google.common.cache.LongAdder'
p19261
sg15
(lp19262
sg17
(lp19263
sg19
(lp19264
sg21
I0
sba(iArchitecture
Entity
p19265
(dp19266
g11
(lp19267
sg13
S'com.google.common.cache.RemovalCause'
p19268
sg15
(lp19269
sg17
(lp19270
sg19
(lp19271
sg21
I0
sba(iArchitecture
Entity
p19272
(dp19273
g11
(lp19274
sg13
S'com.google.common.cache.RemovalCause$1'
p19275
sg15
(lp19276
sg17
(lp19277
sg19
(lp19278
sg21
I0
sba(iArchitecture
Entity
p19279
(dp19280
g11
(lp19281
sg13
S'com.google.common.cache.RemovalCause$2'
p19282
sg15
(lp19283
sg17
(lp19284
sg19
(lp19285
sg21
I0
sba(iArchitecture
Entity
p19286
(dp19287
g11
(lp19288
sg13
S'com.google.common.cache.RemovalCause$3'
p19289
sg15
(lp19290
sg17
(lp19291
sg19
(lp19292
sg21
I0
sba(iArchitecture
Entity
p19293
(dp19294
g11
(lp19295
sg13
S'com.google.common.cache.RemovalCause$4'
p19296
sg15
(lp19297
sg17
(lp19298
sg19
(lp19299
sg21
I0
sba(iArchitecture
Entity
p19300
(dp19301
g11
(lp19302
sg13
S'com.google.common.cache.RemovalCause$5'
p19303
sg15
(lp19304
sg17
(lp19305
sg19
(lp19306
sg21
I0
sba(iArchitecture
Entity
p19307
(dp19308
g11
(lp19309
sg13
S'com.google.common.cache.RemovalListener'
p19310
sg15
(lp19311
sg17
(lp19312
sg19
(lp19313
sg21
I0
sba(iArchitecture
Entity
p19314
(dp19315
g11
(lp19316
sg13
S'com.google.common.cache.RemovalListeners'
p19317
sg15
(lp19318
sg17
(lp19319
sg19
(lp19320
sg21
I0
sba(iArchitecture
Entity
p19321
(dp19322
g11
(lp19323
sg13
S'com.google.common.cache.RemovalListeners$1'
p19324
sg15
(lp19325
sg17
(lp19326
sg19
(lp19327
sg21
I0
sba(iArchitecture
Entity
p19328
(dp19329
g11
(lp19330
sg13
S'com.google.common.cache.RemovalListeners$1$1'
p19331
sg15
(lp19332
sg17
(lp19333
sg19
(lp19334
sg21
I0
sba(iArchitecture
Entity
p19335
(dp19336
g11
(lp19337
sg13
S'com.google.common.cache.RemovalNotification'
p19338
sg15
(lp19339
sg17
(lp19340
sg19
(lp19341
sg21
I0
sba(iArchitecture
Entity
p19342
(dp19343
g11
(lp19344
sg13
S'com.google.common.cache.Striped64'
p19345
sg15
(lp19346
sg17
(lp19347
sg19
(lp19348
sg21
I0
sba(iArchitecture
Entity
p19349
(dp19350
g11
(lp19351
sg13
S'com.google.common.cache.Striped64$1'
p19352
sg15
(lp19353
sg17
(lp19354
sg19
(lp19355
sg21
I0
sba(iArchitecture
Entity
p19356
(dp19357
g11
(lp19358
sg13
S'com.google.common.cache.Striped64$Cell'
p19359
sg15
(lp19360
sg17
(lp19361
sg19
(lp19362
sg21
I0
sba(iArchitecture
Entity
p19363
(dp19364
g11
(lp19365
sg13
S'com.google.common.cache.Weigher'
p19366
sg15
(lp19367
sg17
(lp19368
sg19
(lp19369
sg21
I0
sba(iArchitecture
Entity
p19370
(dp19371
g11
(lp19372
sg13
S'com.google.common.escape.ArrayBasedUnicodeEscaper'
p19373
sg15
(lp19374
sg17
(lp19375
sg19
(lp19376
sg21
I0
sba(iArchitecture
Entity
p19377
(dp19378
g11
(lp19379
sg13
S'com.google.common.hash.HashingInputStream'
p19380
sg15
(lp19381
sg17
(lp19382
sg19
(lp19383
sg21
I0
sba(iArchitecture
Entity
p19384
(dp19385
g11
(lp19386
sg13
S'com.google.common.hash.HashingOutputStream'
p19387
sg15
(lp19388
sg17
(lp19389
sg19
(lp19390
sg21
I0
sba(iArchitecture
Entity
p19391
(dp19392
g11
(lp19393
sg13
S'com.google.common.io.CountingInputStream'
p19394
sg15
(lp19395
sg17
(lp19396
sg19
(lp19397
sg21
I0
sba(iArchitecture
Entity
p19398
(dp19399
g11
(lp19400
sg13
S'com.google.common.io.CountingOutputStream'
p19401
sg15
(lp19402
sg17
(lp19403
sg19
(lp19404
sg21
I0
sba(iArchitecture
Entity
p19405
(dp19406
g11
(lp19407
sg13
S'com.google.common.io.PatternFilenameFilter'
p19408
sg15
(lp19409
sg17
(lp19410
sg19
(lp19411
sg21
I0
sba(iArchitecture
Entity
p19412
(dp19413
g11
(lp19414
sg13
S'com.google.common.testing.FakeTicker'
p19415
sg15
(lp19416
sg17
(lp19417
sg19
(lp19418
sg21
I0
sba(iArchitecture
Entity
p19419
(dp19420
g11
(lp19421
sg13
S'com.google.common.util.concurrent.FakeTimeLimiter'
p19422
sg15
(lp19423
sg17
(lp19424
sg19
(lp19425
sg21
I0
sba(iArchitecture
Entity
p19426
(dp19427
g11
(lp19428
sg13
S'com.google.common.util.concurrent.ListenableFutureTask'
p19429
sg15
(lp19430
sg17
(lp19431
sg19
(lp19432
sg21
I0
sba(iArchitecture
Entity
p19433
(dp19434
g11
(lp19435
sg13
S'sun.misc.Unsafe'
p19436
sg15
(lp19437
sg17
(lp19438
sg19
(lp19439
sg21
I0
sbasg1055
(lp19440
g18533
ag18540
ag18547
ag18554
ag18561
ag18568
ag18575
ag18582
ag18589
ag18596
ag18603
ag18610
ag18617
ag18624
ag18631
ag18638
ag18645
ag18652
ag18659
ag18666
ag18673
ag18680
ag18687
ag18694
ag18701
ag18708
ag18715
ag18722
ag18729
ag18736
ag18743
ag18750
ag18757
ag18764
ag18771
ag18778
ag18785
ag18792
ag18799
ag18806
ag18813
ag18820
ag18827
ag18834
ag18841
ag18848
ag18855
ag18862
ag18869
ag18876
ag18883
ag18890
ag18897
ag18904
ag18911
ag18918
ag18925
ag18932
ag18939
ag18946
ag18953
ag18960
ag18967
ag18974
ag18981
ag18988
ag18995
ag19002
ag19009
ag19016
ag19023
ag19030
ag19037
ag19044
ag19051
ag19058
ag19065
ag19072
ag19079
ag19086
ag19093
ag19100
ag19107
ag19114
ag19121
ag19128
ag19135
ag19142
ag19149
ag19156
ag19163
ag19170
ag19177
ag19184
ag19191
ag19198
ag19205
ag19212
ag19219
ag19226
ag19233
ag19240
ag19247
ag19254
ag19261
ag19268
ag19275
ag19282
ag19289
ag19296
ag19303
ag19310
ag19317
ag19324
ag19331
ag19338
ag19345
ag19352
ag19359
ag19366
ag19373
ag19380
ag19387
ag19394
ag19401
ag19408
ag19415
ag19422
ag19429
ag19436
asg21
I0
sg1057
S'com.google.common.cache.ss'
p19441
sba(iArchitecture
Cluster
p19442
(dp19443
g7
(lp19444
(iArchitecture
Entity
p19445
(dp19446
g11
(lp19447
sg13
S'com.google.common.annotations.Beta'
p19448
sg15
(lp19449
sg17
(lp19450
sg19
(lp19451
sg21
I0
sba(iArchitecture
Entity
p19452
(dp19453
g11
(lp19454
sg13
S'com.google.common.annotations.VisibleForTesting'
p19455
sg15
(lp19456
sg17
(lp19457
sg19
(lp19458
sg21
I0
sba(iArchitecture
Entity
p19459
(dp19460
g11
(lp19461
sg13
S'com.google.common.base.Absent'
p19462
sg15
(lp19463
sg17
(lp19464
sg19
(lp19465
sg21
I0
sba(iArchitecture
Entity
p19466
(dp19467
g11
(lp19468
sg13
S'com.google.common.base.Absent_CustomFieldSerializer'
p19469
sg15
(lp19470
sg17
(lp19471
sg19
(lp19472
sg21
I0
sba(iArchitecture
Entity
p19473
(dp19474
g11
(lp19475
sg13
S'com.google.common.base.Optional'
p19476
sg15
(lp19477
sg17
(lp19478
sg19
(lp19479
sg21
I0
sba(iArchitecture
Entity
p19480
(dp19481
g11
(lp19482
sg13
S'com.google.common.base.PairwiseEquivalence_CustomFieldSerializer'
p19483
sg15
(lp19484
sg17
(lp19485
sg19
(lp19486
sg21
I0
sba(iArchitecture
Entity
p19487
(dp19488
g11
(lp19489
sg13
S'com.google.common.base.Present'
p19490
sg15
(lp19491
sg17
(lp19492
sg19
(lp19493
sg21
I0
sba(iArchitecture
Entity
p19494
(dp19495
g11
(lp19496
sg13
S'com.google.common.base.Present_CustomFieldSerializer'
p19497
sg15
(lp19498
sg17
(lp19499
sg19
(lp19500
sg21
I0
sba(iArchitecture
Entity
p19501
(dp19502
g11
(lp19503
sg13
S'com.google.common.cache.AbstractLoadingCache'
p19504
sg15
(lp19505
sg17
(lp19506
sg19
(lp19507
sg21
I0
sba(iArchitecture
Entity
p19508
(dp19509
g11
(lp19510
sg13
S'com.google.common.collect.AbstractBiMap'
p19511
sg15
(lp19512
sg17
(lp19513
sg19
(lp19514
sg21
I0
sba(iArchitecture
Entity
p19515
(dp19516
g11
(lp19517
sg13
S'com.google.common.collect.AbstractBiMap$1'
p19518
sg15
(lp19519
sg17
(lp19520
sg19
(lp19521
sg21
I0
sba(iArchitecture
Entity
p19522
(dp19523
g11
(lp19524
sg13
S'com.google.common.collect.AbstractBiMap$EntrySet'
p19525
sg15
(lp19526
sg17
(lp19527
sg19
(lp19528
sg21
I0
sba(iArchitecture
Entity
p19529
(dp19530
g11
(lp19531
sg13
S'com.google.common.collect.AbstractBiMap$EntrySet$1'
p19532
sg15
(lp19533
sg17
(lp19534
sg19
(lp19535
sg21
I0
sba(iArchitecture
Entity
p19536
(dp19537
g11
(lp19538
sg13
S'com.google.common.collect.AbstractBiMap$EntrySet$1$1'
p19539
sg15
(lp19540
sg17
(lp19541
sg19
(lp19542
sg21
I0
sba(iArchitecture
Entity
p19543
(dp19544
g11
(lp19545
sg13
S'com.google.common.collect.AbstractBiMap$Inverse'
p19546
sg15
(lp19547
sg17
(lp19548
sg19
(lp19549
sg21
I0
sba(iArchitecture
Entity
p19550
(dp19551
g11
(lp19552
sg13
S'com.google.common.collect.AbstractBiMap$KeySet'
p19553
sg15
(lp19554
sg17
(lp19555
sg19
(lp19556
sg21
I0
sba(iArchitecture
Entity
p19557
(dp19558
g11
(lp19559
sg13
S'com.google.common.collect.AbstractBiMap$ValueSet'
p19560
sg15
(lp19561
sg17
(lp19562
sg19
(lp19563
sg21
I0
sba(iArchitecture
Entity
p19564
(dp19565
g11
(lp19566
sg13
S'com.google.common.collect.AbstractIndexedListIterator'
p19567
sg15
(lp19568
sg17
(lp19569
sg19
(lp19570
sg21
I0
sba(iArchitecture
Entity
p19571
(dp19572
g11
(lp19573
sg13
S'com.google.common.collect.AbstractIterator'
p19574
sg15
(lp19575
sg17
(lp19576
sg19
(lp19577
sg21
I0
sba(iArchitecture
Entity
p19578
(dp19579
g11
(lp19580
sg13
S'com.google.common.collect.AbstractIterator$1'
p19581
sg15
(lp19582
sg17
(lp19583
sg19
(lp19584
sg21
I0
sba(iArchitecture
Entity
p19585
(dp19586
g11
(lp19587
sg13
S'com.google.common.collect.AbstractIterator$State'
p19588
sg15
(lp19589
sg17
(lp19590
sg19
(lp19591
sg21
I0
sba(iArchitecture
Entity
p19592
(dp19593
g11
(lp19594
sg13
S'com.google.common.collect.AbstractListMultimap'
p19595
sg15
(lp19596
sg17
(lp19597
sg19
(lp19598
sg21
I0
sba(iArchitecture
Entity
p19599
(dp19600
g11
(lp19601
sg13
S'com.google.common.collect.AbstractMapBasedMultimap'
p19602
sg15
(lp19603
sg17
(lp19604
sg19
(lp19605
sg21
I0
sba(iArchitecture
Entity
p19606
(dp19607
g11
(lp19608
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$1'
p19609
sg15
(lp19610
sg17
(lp19611
sg19
(lp19612
sg21
I0
sba(iArchitecture
Entity
p19613
(dp19614
g11
(lp19615
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$2'
p19616
sg15
(lp19617
sg17
(lp19618
sg19
(lp19619
sg21
I0
sba(iArchitecture
Entity
p19620
(dp19621
g11
(lp19622
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$AsMap'
p19623
sg15
(lp19624
sg17
(lp19625
sg19
(lp19626
sg21
I0
sba(iArchitecture
Entity
p19627
(dp19628
g11
(lp19629
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries'
p19630
sg15
(lp19631
sg17
(lp19632
sg19
(lp19633
sg21
I0
sba(iArchitecture
Entity
p19634
(dp19635
g11
(lp19636
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator'
p19637
sg15
(lp19638
sg17
(lp19639
sg19
(lp19640
sg21
I0
sba(iArchitecture
Entity
p19641
(dp19642
g11
(lp19643
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$Itr'
p19644
sg15
(lp19645
sg17
(lp19646
sg19
(lp19647
sg21
I0
sba(iArchitecture
Entity
p19648
(dp19649
g11
(lp19650
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$KeySet'
p19651
sg15
(lp19652
sg17
(lp19653
sg19
(lp19654
sg21
I0
sba(iArchitecture
Entity
p19655
(dp19656
g11
(lp19657
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$KeySet$1'
p19658
sg15
(lp19659
sg17
(lp19660
sg19
(lp19661
sg21
I0
sba(iArchitecture
Entity
p19662
(dp19663
g11
(lp19664
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap'
p19665
sg15
(lp19666
sg17
(lp19667
sg19
(lp19668
sg21
I0
sba(iArchitecture
Entity
p19669
(dp19670
g11
(lp19671
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet'
p19672
sg15
(lp19673
sg17
(lp19674
sg19
(lp19675
sg21
I0
sba(iArchitecture
Entity
p19676
(dp19677
g11
(lp19678
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList'
p19679
sg15
(lp19680
sg17
(lp19681
sg19
(lp19682
sg21
I0
sba(iArchitecture
Entity
p19683
(dp19684
g11
(lp19685
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap'
p19686
sg15
(lp19687
sg17
(lp19688
sg19
(lp19689
sg21
I0
sba(iArchitecture
Entity
p19690
(dp19691
g11
(lp19692
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet'
p19693
sg15
(lp19694
sg17
(lp19695
sg19
(lp19696
sg21
I0
sba(iArchitecture
Entity
p19697
(dp19698
g11
(lp19699
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection'
p19700
sg15
(lp19701
sg17
(lp19702
sg19
(lp19703
sg21
I0
sba(iArchitecture
Entity
p19704
(dp19705
g11
(lp19706
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator'
p19707
sg15
(lp19708
sg17
(lp19709
sg19
(lp19710
sg21
I0
sba(iArchitecture
Entity
p19711
(dp19712
g11
(lp19713
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedList'
p19714
sg15
(lp19715
sg17
(lp19716
sg19
(lp19717
sg21
I0
sba(iArchitecture
Entity
p19718
(dp19719
g11
(lp19720
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator'
p19721
sg15
(lp19722
sg17
(lp19723
sg19
(lp19724
sg21
I0
sba(iArchitecture
Entity
p19725
(dp19726
g11
(lp19727
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet'
p19728
sg15
(lp19729
sg17
(lp19730
sg19
(lp19731
sg21
I0
sba(iArchitecture
Entity
p19732
(dp19733
g11
(lp19734
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedSet'
p19735
sg15
(lp19736
sg17
(lp19737
sg19
(lp19738
sg21
I0
sba(iArchitecture
Entity
p19739
(dp19740
g11
(lp19741
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet'
p19742
sg15
(lp19743
sg17
(lp19744
sg19
(lp19745
sg21
I0
sba(iArchitecture
Entity
p19746
(dp19747
g11
(lp19748
sg13
S'com.google.common.collect.AbstractMapBasedMultiset'
p19749
sg15
(lp19750
sg17
(lp19751
sg19
(lp19752
sg21
I0
sba(iArchitecture
Entity
p19753
(dp19754
g11
(lp19755
sg13
S'com.google.common.collect.AbstractMapBasedMultiset$1'
p19756
sg15
(lp19757
sg17
(lp19758
sg19
(lp19759
sg21
I0
sba(iArchitecture
Entity
p19760
(dp19761
g11
(lp19762
sg13
S'com.google.common.collect.AbstractMapBasedMultiset$1$1'
p19763
sg15
(lp19764
sg17
(lp19765
sg19
(lp19766
sg21
I0
sba(iArchitecture
Entity
p19767
(dp19768
g11
(lp19769
sg13
S'com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator'
p19770
sg15
(lp19771
sg17
(lp19772
sg19
(lp19773
sg21
I0
sba(iArchitecture
Entity
p19774
(dp19775
g11
(lp19776
sg13
S'com.google.common.collect.AbstractMapEntry'
p19777
sg15
(lp19778
sg17
(lp19779
sg19
(lp19780
sg21
I0
sba(iArchitecture
Entity
p19781
(dp19782
g11
(lp19783
sg13
S'com.google.common.collect.AbstractMultimap'
p19784
sg15
(lp19785
sg17
(lp19786
sg19
(lp19787
sg21
I0
sba(iArchitecture
Entity
p19788
(dp19789
g11
(lp19790
sg13
S'com.google.common.collect.AbstractMultimap$1'
p19791
sg15
(lp19792
sg17
(lp19793
sg19
(lp19794
sg21
I0
sba(iArchitecture
Entity
p19795
(dp19796
g11
(lp19797
sg13
S'com.google.common.collect.AbstractMultimap$Entries'
p19798
sg15
(lp19799
sg17
(lp19800
sg19
(lp19801
sg21
I0
sba(iArchitecture
Entity
p19802
(dp19803
g11
(lp19804
sg13
S'com.google.common.collect.AbstractMultimap$EntrySet'
p19805
sg15
(lp19806
sg17
(lp19807
sg19
(lp19808
sg21
I0
sba(iArchitecture
Entity
p19809
(dp19810
g11
(lp19811
sg13
S'com.google.common.collect.AbstractMultimap$Values'
p19812
sg15
(lp19813
sg17
(lp19814
sg19
(lp19815
sg21
I0
sba(iArchitecture
Entity
p19816
(dp19817
g11
(lp19818
sg13
S'com.google.common.collect.AbstractMultiset'
p19819
sg15
(lp19820
sg17
(lp19821
sg19
(lp19822
sg21
I0
sba(iArchitecture
Entity
p19823
(dp19824
g11
(lp19825
sg13
S'com.google.common.collect.AbstractMultiset$ElementSet'
p19826
sg15
(lp19827
sg17
(lp19828
sg19
(lp19829
sg21
I0
sba(iArchitecture
Entity
p19830
(dp19831
g11
(lp19832
sg13
S'com.google.common.collect.AbstractMultiset$EntrySet'
p19833
sg15
(lp19834
sg17
(lp19835
sg19
(lp19836
sg21
I0
sba(iArchitecture
Entity
p19837
(dp19838
g11
(lp19839
sg13
S'com.google.common.collect.AbstractNavigableMap'
p19840
sg15
(lp19841
sg17
(lp19842
sg19
(lp19843
sg21
I0
sba(iArchitecture
Entity
p19844
(dp19845
g11
(lp19846
sg13
S'com.google.common.collect.AbstractNavigableMap$1'
p19847
sg15
(lp19848
sg17
(lp19849
sg19
(lp19850
sg21
I0
sba(iArchitecture
Entity
p19851
(dp19852
g11
(lp19853
sg13
S'com.google.common.collect.AbstractNavigableMap$DescendingMap'
p19854
sg15
(lp19855
sg17
(lp19856
sg19
(lp19857
sg21
I0
sba(iArchitecture
Entity
p19858
(dp19859
g11
(lp19860
sg13
S'com.google.common.collect.AbstractRangeSet'
p19861
sg15
(lp19862
sg17
(lp19863
sg19
(lp19864
sg21
I0
sba(iArchitecture
Entity
p19865
(dp19866
g11
(lp19867
sg13
S'com.google.common.collect.AbstractSequentialIterator'
p19868
sg15
(lp19869
sg17
(lp19870
sg19
(lp19871
sg21
I0
sba(iArchitecture
Entity
p19872
(dp19873
g11
(lp19874
sg13
S'com.google.common.collect.AbstractSetMultimap'
p19875
sg15
(lp19876
sg17
(lp19877
sg19
(lp19878
sg21
I0
sba(iArchitecture
Entity
p19879
(dp19880
g11
(lp19881
sg13
S'com.google.common.collect.AbstractSortedKeySortedSetMultimap'
p19882
sg15
(lp19883
sg17
(lp19884
sg19
(lp19885
sg21
I0
sba(iArchitecture
Entity
p19886
(dp19887
g11
(lp19888
sg13
S'com.google.common.collect.AbstractSortedMultiset'
p19889
sg15
(lp19890
sg17
(lp19891
sg19
(lp19892
sg21
I0
sba(iArchitecture
Entity
p19893
(dp19894
g11
(lp19895
sg13
S'com.google.common.collect.AbstractSortedMultiset$1DescendingMultisetImpl'
p19896
sg15
(lp19897
sg17
(lp19898
sg19
(lp19899
sg21
I0
sba(iArchitecture
Entity
p19900
(dp19901
g11
(lp19902
sg13
S'com.google.common.collect.AbstractSortedSetMultimap'
p19903
sg15
(lp19904
sg17
(lp19905
sg19
(lp19906
sg21
I0
sba(iArchitecture
Entity
p19907
(dp19908
g11
(lp19909
sg13
S'com.google.common.collect.AbstractTable'
p19910
sg15
(lp19911
sg17
(lp19912
sg19
(lp19913
sg21
I0
sba(iArchitecture
Entity
p19914
(dp19915
g11
(lp19916
sg13
S'com.google.common.collect.AbstractTable$1'
p19917
sg15
(lp19918
sg17
(lp19919
sg19
(lp19920
sg21
I0
sba(iArchitecture
Entity
p19921
(dp19922
g11
(lp19923
sg13
S'com.google.common.collect.AbstractTable$CellSet'
p19924
sg15
(lp19925
sg17
(lp19926
sg19
(lp19927
sg21
I0
sba(iArchitecture
Entity
p19928
(dp19929
g11
(lp19930
sg13
S'com.google.common.collect.AbstractTable$Values'
p19931
sg15
(lp19932
sg17
(lp19933
sg19
(lp19934
sg21
I0
sba(iArchitecture
Entity
p19935
(dp19936
g11
(lp19937
sg13
S'com.google.common.collect.AllEqualOrdering'
p19938
sg15
(lp19939
sg17
(lp19940
sg19
(lp19941
sg21
I0
sba(iArchitecture
Entity
p19942
(dp19943
g11
(lp19944
sg13
S'com.google.common.collect.AllEqualOrdering_CustomFieldSerializer'
p19945
sg15
(lp19946
sg17
(lp19947
sg19
(lp19948
sg21
I0
sba(iArchitecture
Entity
p19949
(dp19950
g11
(lp19951
sg13
S'com.google.common.collect.ArrayListMultimap_CustomFieldSerializer'
p19952
sg15
(lp19953
sg17
(lp19954
sg19
(lp19955
sg21
I0
sba(iArchitecture
Entity
p19956
(dp19957
g11
(lp19958
sg13
S'com.google.common.collect.ArrayTable'
p19959
sg15
(lp19960
sg17
(lp19961
sg19
(lp19962
sg21
I0
sba(iArchitecture
Entity
p19963
(dp19964
g11
(lp19965
sg13
S'com.google.common.collect.ArrayTable$1'
p19966
sg15
(lp19967
sg17
(lp19968
sg19
(lp19969
sg21
I0
sba(iArchitecture
Entity
p19970
(dp19971
g11
(lp19972
sg13
S'com.google.common.collect.ArrayTable$1$1'
p19973
sg15
(lp19974
sg17
(lp19975
sg19
(lp19976
sg21
I0
sba(iArchitecture
Entity
p19977
(dp19978
g11
(lp19979
sg13
S'com.google.common.collect.ArrayTable$ArrayMap'
p19980
sg15
(lp19981
sg17
(lp19982
sg19
(lp19983
sg21
I0
sba(iArchitecture
Entity
p19984
(dp19985
g11
(lp19986
sg13
S'com.google.common.collect.ArrayTable$ArrayMap$1'
p19987
sg15
(lp19988
sg17
(lp19989
sg19
(lp19990
sg21
I0
sba(iArchitecture
Entity
p19991
(dp19992
g11
(lp19993
sg13
S'com.google.common.collect.ArrayTable$ArrayMap$1$1'
p19994
sg15
(lp19995
sg17
(lp19996
sg19
(lp19997
sg21
I0
sba(iArchitecture
Entity
p19998
(dp19999
g11
(lp20000
sg13
S'com.google.common.collect.ArrayTable$Column'
p20001
sg15
(lp20002
sg17
(lp20003
sg19
(lp20004
sg21
I0
sba(iArchitecture
Entity
p20005
(dp20006
g11
(lp20007
sg13
S'com.google.common.collect.ArrayTable$ColumnMap'
p20008
sg15
(lp20009
sg17
(lp20010
sg19
(lp20011
sg21
I0
sba(iArchitecture
Entity
p20012
(dp20013
g11
(lp20014
sg13
S'com.google.common.collect.ArrayTable$Row'
p20015
sg15
(lp20016
sg17
(lp20017
sg19
(lp20018
sg21
I0
sba(iArchitecture
Entity
p20019
(dp20020
g11
(lp20021
sg13
S'com.google.common.collect.ArrayTable$RowMap'
p20022
sg15
(lp20023
sg17
(lp20024
sg19
(lp20025
sg21
I0
sba(iArchitecture
Entity
p20026
(dp20027
g11
(lp20028
sg13
S'com.google.common.collect.BinaryTreeTraverser'
p20029
sg15
(lp20030
sg17
(lp20031
sg19
(lp20032
sg21
I0
sba(iArchitecture
Entity
p20033
(dp20034
g11
(lp20035
sg13
S'com.google.common.collect.BinaryTreeTraverser$1'
p20036
sg15
(lp20037
sg17
(lp20038
sg19
(lp20039
sg21
I0
sba(iArchitecture
Entity
p20040
(dp20041
g11
(lp20042
sg13
S'com.google.common.collect.BinaryTreeTraverser$1$1'
p20043
sg15
(lp20044
sg17
(lp20045
sg19
(lp20046
sg21
I0
sba(iArchitecture
Entity
p20047
(dp20048
g11
(lp20049
sg13
S'com.google.common.collect.BinaryTreeTraverser$2'
p20050
sg15
(lp20051
sg17
(lp20052
sg19
(lp20053
sg21
I0
sba(iArchitecture
Entity
p20054
(dp20055
g11
(lp20056
sg13
S'com.google.common.collect.BinaryTreeTraverser$InOrderIterator'
p20057
sg15
(lp20058
sg17
(lp20059
sg19
(lp20060
sg21
I0
sba(iArchitecture
Entity
p20061
(dp20062
g11
(lp20063
sg13
S'com.google.common.collect.BinaryTreeTraverser$PostOrderIterator'
p20064
sg15
(lp20065
sg17
(lp20066
sg19
(lp20067
sg21
I0
sba(iArchitecture
Entity
p20068
(dp20069
g11
(lp20070
sg13
S'com.google.common.collect.BinaryTreeTraverser$PreOrderIterator'
p20071
sg15
(lp20072
sg17
(lp20073
sg19
(lp20074
sg21
I0
sba(iArchitecture
Entity
p20075
(dp20076
g11
(lp20077
sg13
S'com.google.common.collect.BoundType'
p20078
sg15
(lp20079
sg17
(lp20080
sg19
(lp20081
sg21
I0
sba(iArchitecture
Entity
p20082
(dp20083
g11
(lp20084
sg13
S'com.google.common.collect.BoundType$1'
p20085
sg15
(lp20086
sg17
(lp20087
sg19
(lp20088
sg21
I0
sba(iArchitecture
Entity
p20089
(dp20090
g11
(lp20091
sg13
S'com.google.common.collect.BoundType$2'
p20092
sg15
(lp20093
sg17
(lp20094
sg19
(lp20095
sg21
I0
sba(iArchitecture
Entity
p20096
(dp20097
g11
(lp20098
sg13
S'com.google.common.collect.ByFunctionOrdering'
p20099
sg15
(lp20100
sg17
(lp20101
sg19
(lp20102
sg21
I0
sba(iArchitecture
Entity
p20103
(dp20104
g11
(lp20105
sg13
S'com.google.common.collect.ByFunctionOrdering_CustomFieldSerializer'
p20106
sg15
(lp20107
sg17
(lp20108
sg19
(lp20109
sg21
I0
sba(iArchitecture
Entity
p20110
(dp20111
g11
(lp20112
sg13
S'com.google.common.collect.CartesianList'
p20113
sg15
(lp20114
sg17
(lp20115
sg19
(lp20116
sg21
I0
sba(iArchitecture
Entity
p20117
(dp20118
g11
(lp20119
sg13
S'com.google.common.collect.CartesianList$1'
p20120
sg15
(lp20121
sg17
(lp20122
sg19
(lp20123
sg21
I0
sba(iArchitecture
Entity
p20124
(dp20125
g11
(lp20126
sg13
S'com.google.common.collect.CollectPreconditions'
p20127
sg15
(lp20128
sg17
(lp20129
sg19
(lp20130
sg21
I0
sba(iArchitecture
Entity
p20131
(dp20132
g11
(lp20133
sg13
S'com.google.common.collect.Collections2'
p20134
sg15
(lp20135
sg17
(lp20136
sg19
(lp20137
sg21
I0
sba(iArchitecture
Entity
p20138
(dp20139
g11
(lp20140
sg13
S'com.google.common.collect.Collections2$1'
p20141
sg15
(lp20142
sg17
(lp20143
sg19
(lp20144
sg21
I0
sba(iArchitecture
Entity
p20145
(dp20146
g11
(lp20147
sg13
S'com.google.common.collect.Collections2$FilteredCollection'
p20148
sg15
(lp20149
sg17
(lp20150
sg19
(lp20151
sg21
I0
sba(iArchitecture
Entity
p20152
(dp20153
g11
(lp20154
sg13
S'com.google.common.collect.Collections2$OrderedPermutationCollection'
p20155
sg15
(lp20156
sg17
(lp20157
sg19
(lp20158
sg21
I0
sba(iArchitecture
Entity
p20159
(dp20160
g11
(lp20161
sg13
S'com.google.common.collect.Collections2$OrderedPermutationIterator'
p20162
sg15
(lp20163
sg17
(lp20164
sg19
(lp20165
sg21
I0
sba(iArchitecture
Entity
p20166
(dp20167
g11
(lp20168
sg13
S'com.google.common.collect.Collections2$PermutationCollection'
p20169
sg15
(lp20170
sg17
(lp20171
sg19
(lp20172
sg21
I0
sba(iArchitecture
Entity
p20173
(dp20174
g11
(lp20175
sg13
S'com.google.common.collect.Collections2$PermutationIterator'
p20176
sg15
(lp20177
sg17
(lp20178
sg19
(lp20179
sg21
I0
sba(iArchitecture
Entity
p20180
(dp20181
g11
(lp20182
sg13
S'com.google.common.collect.Collections2$TransformedCollection'
p20183
sg15
(lp20184
sg17
(lp20185
sg19
(lp20186
sg21
I0
sba(iArchitecture
Entity
p20187
(dp20188
g11
(lp20189
sg13
S'com.google.common.collect.ComparatorOrdering'
p20190
sg15
(lp20191
sg17
(lp20192
sg19
(lp20193
sg21
I0
sba(iArchitecture
Entity
p20194
(dp20195
g11
(lp20196
sg13
S'com.google.common.collect.ComparatorOrdering_CustomFieldSerializer'
p20197
sg15
(lp20198
sg17
(lp20199
sg19
(lp20200
sg21
I0
sba(iArchitecture
Entity
p20201
(dp20202
g11
(lp20203
sg13
S'com.google.common.collect.ComparisonChain'
p20204
sg15
(lp20205
sg17
(lp20206
sg19
(lp20207
sg21
I0
sba(iArchitecture
Entity
p20208
(dp20209
g11
(lp20210
sg13
S'com.google.common.collect.ComparisonChain$1'
p20211
sg15
(lp20212
sg17
(lp20213
sg19
(lp20214
sg21
I0
sba(iArchitecture
Entity
p20215
(dp20216
g11
(lp20217
sg13
S'com.google.common.collect.ComparisonChain$InactiveComparisonChain'
p20218
sg15
(lp20219
sg17
(lp20220
sg19
(lp20221
sg21
I0
sba(iArchitecture
Entity
p20222
(dp20223
g11
(lp20224
sg13
S'com.google.common.collect.CompoundOrdering'
p20225
sg15
(lp20226
sg17
(lp20227
sg19
(lp20228
sg21
I0
sba(iArchitecture
Entity
p20229
(dp20230
g11
(lp20231
sg13
S'com.google.common.collect.CompoundOrdering_CustomFieldSerializer'
p20232
sg15
(lp20233
sg17
(lp20234
sg19
(lp20235
sg21
I0
sba(iArchitecture
Entity
p20236
(dp20237
g11
(lp20238
sg13
S'com.google.common.collect.ComputationException'
p20239
sg15
(lp20240
sg17
(lp20241
sg19
(lp20242
sg21
I0
sba(iArchitecture
Entity
p20243
(dp20244
g11
(lp20245
sg13
S'com.google.common.collect.ComputingConcurrentHashMap'
p20246
sg15
(lp20247
sg17
(lp20248
sg19
(lp20249
sg21
I0
sba(iArchitecture
Entity
p20250
(dp20251
g11
(lp20252
sg13
S'com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference'
p20253
sg15
(lp20254
sg17
(lp20255
sg19
(lp20256
sg21
I0
sba(iArchitecture
Entity
p20257
(dp20258
g11
(lp20259
sg13
S'com.google.common.collect.ComputingConcurrentHashMap$ComputedReference'
p20260
sg15
(lp20261
sg17
(lp20262
sg19
(lp20263
sg21
I0
sba(iArchitecture
Entity
p20264
(dp20265
g11
(lp20266
sg13
S'com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment'
p20267
sg15
(lp20268
sg17
(lp20269
sg19
(lp20270
sg21
I0
sba(iArchitecture
Entity
p20271
(dp20272
g11
(lp20273
sg13
S'com.google.common.collect.ComputingConcurrentHashMap$ComputingSerializationProxy'
p20274
sg15
(lp20275
sg17
(lp20276
sg19
(lp20277
sg21
I0
sba(iArchitecture
Entity
p20278
(dp20279
g11
(lp20280
sg13
S'com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference'
p20281
sg15
(lp20282
sg17
(lp20283
sg19
(lp20284
sg21
I0
sba(iArchitecture
Entity
p20285
(dp20286
g11
(lp20287
sg13
S'com.google.common.collect.ConcurrentHashMultiset'
p20288
sg15
(lp20289
sg17
(lp20290
sg19
(lp20291
sg21
I0
sba(iArchitecture
Entity
p20292
(dp20293
g11
(lp20294
sg13
S'com.google.common.collect.ConcurrentHashMultiset$1'
p20295
sg15
(lp20296
sg17
(lp20297
sg19
(lp20298
sg21
I0
sba(iArchitecture
Entity
p20299
(dp20300
g11
(lp20301
sg13
S'com.google.common.collect.ConcurrentHashMultiset$2'
p20302
sg15
(lp20303
sg17
(lp20304
sg19
(lp20305
sg21
I0
sba(iArchitecture
Entity
p20306
(dp20307
g11
(lp20308
sg13
S'com.google.common.collect.ConcurrentHashMultiset$3'
p20309
sg15
(lp20310
sg17
(lp20311
sg19
(lp20312
sg21
I0
sba(iArchitecture
Entity
p20313
(dp20314
g11
(lp20315
sg13
S'com.google.common.collect.ConcurrentHashMultiset$EntrySet'
p20316
sg15
(lp20317
sg17
(lp20318
sg19
(lp20319
sg21
I0
sba(iArchitecture
Entity
p20320
(dp20321
g11
(lp20322
sg13
S'com.google.common.collect.ConcurrentHashMultiset$FieldSettersHolder'
p20323
sg15
(lp20324
sg17
(lp20325
sg19
(lp20326
sg21
I0
sba(iArchitecture
Entity
p20327
(dp20328
g11
(lp20329
sg13
S'com.google.common.collect.Constraint'
p20330
sg15
(lp20331
sg17
(lp20332
sg19
(lp20333
sg21
I0
sba(iArchitecture
Entity
p20334
(dp20335
g11
(lp20336
sg13
S'com.google.common.collect.Constraints'
p20337
sg15
(lp20338
sg17
(lp20339
sg19
(lp20340
sg21
I0
sba(iArchitecture
Entity
p20341
(dp20342
g11
(lp20343
sg13
S'com.google.common.collect.Constraints$ConstrainedCollection'
p20344
sg15
(lp20345
sg17
(lp20346
sg19
(lp20347
sg21
I0
sba(iArchitecture
Entity
p20348
(dp20349
g11
(lp20350
sg13
S'com.google.common.collect.Constraints$ConstrainedList'
p20351
sg15
(lp20352
sg17
(lp20353
sg19
(lp20354
sg21
I0
sba(iArchitecture
Entity
p20355
(dp20356
g11
(lp20357
sg13
S'com.google.common.collect.Constraints$ConstrainedListIterator'
p20358
sg15
(lp20359
sg17
(lp20360
sg19
(lp20361
sg21
I0
sba(iArchitecture
Entity
p20362
(dp20363
g11
(lp20364
sg13
S'com.google.common.collect.Constraints$ConstrainedRandomAccessList'
p20365
sg15
(lp20366
sg17
(lp20367
sg19
(lp20368
sg21
I0
sba(iArchitecture
Entity
p20369
(dp20370
g11
(lp20371
sg13
S'com.google.common.collect.Constraints$ConstrainedSet'
p20372
sg15
(lp20373
sg17
(lp20374
sg19
(lp20375
sg21
I0
sba(iArchitecture
Entity
p20376
(dp20377
g11
(lp20378
sg13
S'com.google.common.collect.Constraints$ConstrainedSortedSet'
p20379
sg15
(lp20380
sg17
(lp20381
sg19
(lp20382
sg21
I0
sba(iArchitecture
Entity
p20383
(dp20384
g11
(lp20385
sg13
S'com.google.common.collect.ConsumingQueueIterator'
p20386
sg15
(lp20387
sg17
(lp20388
sg19
(lp20389
sg21
I0
sba(iArchitecture
Entity
p20390
(dp20391
g11
(lp20392
sg13
S'com.google.common.collect.Count'
p20393
sg15
(lp20394
sg17
(lp20395
sg19
(lp20396
sg21
I0
sba(iArchitecture
Entity
p20397
(dp20398
g11
(lp20399
sg13
S'com.google.common.collect.Cut'
p20400
sg15
(lp20401
sg17
(lp20402
sg19
(lp20403
sg21
I0
sba(iArchitecture
Entity
p20404
(dp20405
g11
(lp20406
sg13
S'com.google.common.collect.Cut$1'
p20407
sg15
(lp20408
sg17
(lp20409
sg19
(lp20410
sg21
I0
sba(iArchitecture
Entity
p20411
(dp20412
g11
(lp20413
sg13
S'com.google.common.collect.Cut$AboveAll'
p20414
sg15
(lp20415
sg17
(lp20416
sg19
(lp20417
sg21
I0
sba(iArchitecture
Entity
p20418
(dp20419
g11
(lp20420
sg13
S'com.google.common.collect.Cut$AboveValue'
p20421
sg15
(lp20422
sg17
(lp20423
sg19
(lp20424
sg21
I0
sba(iArchitecture
Entity
p20425
(dp20426
g11
(lp20427
sg13
S'com.google.common.collect.Cut$BelowAll'
p20428
sg15
(lp20429
sg17
(lp20430
sg19
(lp20431
sg21
I0
sba(iArchitecture
Entity
p20432
(dp20433
g11
(lp20434
sg13
S'com.google.common.collect.Cut$BelowValue'
p20435
sg15
(lp20436
sg17
(lp20437
sg19
(lp20438
sg21
I0
sba(iArchitecture
Entity
p20439
(dp20440
g11
(lp20441
sg13
S'com.google.common.collect.DenseImmutableTable'
p20442
sg15
(lp20443
sg17
(lp20444
sg19
(lp20445
sg21
I0
sba(iArchitecture
Entity
p20446
(dp20447
g11
(lp20448
sg13
S'com.google.common.collect.DenseImmutableTable$1'
p20449
sg15
(lp20450
sg17
(lp20451
sg19
(lp20452
sg21
I0
sba(iArchitecture
Entity
p20453
(dp20454
g11
(lp20455
sg13
S'com.google.common.collect.DenseImmutableTable$Column'
p20456
sg15
(lp20457
sg17
(lp20458
sg19
(lp20459
sg21
I0
sba(iArchitecture
Entity
p20460
(dp20461
g11
(lp20462
sg13
S'com.google.common.collect.DenseImmutableTable$ColumnMap'
p20463
sg15
(lp20464
sg17
(lp20465
sg19
(lp20466
sg21
I0
sba(iArchitecture
Entity
p20467
(dp20468
g11
(lp20469
sg13
S'com.google.common.collect.DenseImmutableTable$ImmutableArrayMap'
p20470
sg15
(lp20471
sg17
(lp20472
sg19
(lp20473
sg21
I0
sba(iArchitecture
Entity
p20474
(dp20475
g11
(lp20476
sg13
S'com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1'
p20477
sg15
(lp20478
sg17
(lp20479
sg19
(lp20480
sg21
I0
sba(iArchitecture
Entity
p20481
(dp20482
g11
(lp20483
sg13
S'com.google.common.collect.DenseImmutableTable$Row'
p20484
sg15
(lp20485
sg17
(lp20486
sg19
(lp20487
sg21
I0
sba(iArchitecture
Entity
p20488
(dp20489
g11
(lp20490
sg13
S'com.google.common.collect.DenseImmutableTable$RowMap'
p20491
sg15
(lp20492
sg17
(lp20493
sg19
(lp20494
sg21
I0
sba(iArchitecture
Entity
p20495
(dp20496
g11
(lp20497
sg13
S'com.google.common.collect.DenseImmutableTable_CustomFieldSerializer'
p20498
sg15
(lp20499
sg17
(lp20500
sg19
(lp20501
sg21
I0
sba(iArchitecture
Entity
p20502
(dp20503
g11
(lp20504
sg13
S'com.google.common.collect.DescendingImmutableSortedMultiset'
p20505
sg15
(lp20506
sg17
(lp20507
sg19
(lp20508
sg21
I0
sba(iArchitecture
Entity
p20509
(dp20510
g11
(lp20511
sg13
S'com.google.common.collect.DescendingImmutableSortedSet'
p20512
sg15
(lp20513
sg17
(lp20514
sg19
(lp20515
sg21
I0
sba(iArchitecture
Entity
p20516
(dp20517
g11
(lp20518
sg13
S'com.google.common.collect.DescendingMultiset'
p20519
sg15
(lp20520
sg17
(lp20521
sg19
(lp20522
sg21
I0
sba(iArchitecture
Entity
p20523
(dp20524
g11
(lp20525
sg13
S'com.google.common.collect.DescendingMultiset$1EntrySetImpl'
p20526
sg15
(lp20527
sg17
(lp20528
sg19
(lp20529
sg21
I0
sba(iArchitecture
Entity
p20530
(dp20531
g11
(lp20532
sg13
S'com.google.common.collect.DiscreteDomain'
p20533
sg15
(lp20534
sg17
(lp20535
sg19
(lp20536
sg21
I0
sba(iArchitecture
Entity
p20537
(dp20538
g11
(lp20539
sg13
S'com.google.common.collect.DiscreteDomain$BigIntegerDomain'
p20540
sg15
(lp20541
sg17
(lp20542
sg19
(lp20543
sg21
I0
sba(iArchitecture
Entity
p20544
(dp20545
g11
(lp20546
sg13
S'com.google.common.collect.DiscreteDomain$IntegerDomain'
p20547
sg15
(lp20548
sg17
(lp20549
sg19
(lp20550
sg21
I0
sba(iArchitecture
Entity
p20551
(dp20552
g11
(lp20553
sg13
S'com.google.common.collect.DiscreteDomain$LongDomain'
p20554
sg15
(lp20555
sg17
(lp20556
sg19
(lp20557
sg21
I0
sba(iArchitecture
Entity
p20558
(dp20559
g11
(lp20560
sg13
S'com.google.common.collect.EmptyContiguousSet'
p20561
sg15
(lp20562
sg17
(lp20563
sg19
(lp20564
sg21
I0
sba(iArchitecture
Entity
p20565
(dp20566
g11
(lp20567
sg13
S'com.google.common.collect.EmptyContiguousSet$1'
p20568
sg15
(lp20569
sg17
(lp20570
sg19
(lp20571
sg21
I0
sba(iArchitecture
Entity
p20572
(dp20573
g11
(lp20574
sg13
S'com.google.common.collect.EmptyContiguousSet$SerializedForm'
p20575
sg15
(lp20576
sg17
(lp20577
sg19
(lp20578
sg21
I0
sba(iArchitecture
Entity
p20579
(dp20580
g11
(lp20581
sg13
S'com.google.common.collect.EmptyImmutableListMultimap'
p20582
sg15
(lp20583
sg17
(lp20584
sg19
(lp20585
sg21
I0
sba(iArchitecture
Entity
p20586
(dp20587
g11
(lp20588
sg13
S'com.google.common.collect.EmptyImmutableListMultimap_CustomFieldSerializer'
p20589
sg15
(lp20590
sg17
(lp20591
sg19
(lp20592
sg21
I0
sba(iArchitecture
Entity
p20593
(dp20594
g11
(lp20595
sg13
S'com.google.common.collect.EmptyImmutableSetMultimap'
p20596
sg15
(lp20597
sg17
(lp20598
sg19
(lp20599
sg21
I0
sba(iArchitecture
Entity
p20600
(dp20601
g11
(lp20602
sg13
S'com.google.common.collect.EmptyImmutableSetMultimap_CustomFieldSerializer'
p20603
sg15
(lp20604
sg17
(lp20605
sg19
(lp20606
sg21
I0
sba(iArchitecture
Entity
p20607
(dp20608
g11
(lp20609
sg13
S'com.google.common.collect.EnumBiMap'
p20610
sg15
(lp20611
sg17
(lp20612
sg19
(lp20613
sg21
I0
sba(iArchitecture
Entity
p20614
(dp20615
g11
(lp20616
sg13
S'com.google.common.collect.EnumHashBiMap'
p20617
sg15
(lp20618
sg17
(lp20619
sg19
(lp20620
sg21
I0
sba(iArchitecture
Entity
p20621
(dp20622
g11
(lp20623
sg13
S'com.google.common.collect.EvictingQueue'
p20624
sg15
(lp20625
sg17
(lp20626
sg19
(lp20627
sg21
I0
sba(iArchitecture
Entity
p20628
(dp20629
g11
(lp20630
sg13
S'com.google.common.collect.ExplicitOrdering'
p20631
sg15
(lp20632
sg17
(lp20633
sg19
(lp20634
sg21
I0
sba(iArchitecture
Entity
p20635
(dp20636
g11
(lp20637
sg13
S'com.google.common.collect.ExplicitOrdering_CustomFieldSerializer'
p20638
sg15
(lp20639
sg17
(lp20640
sg19
(lp20641
sg21
I0
sba(iArchitecture
Entity
p20642
(dp20643
g11
(lp20644
sg13
S'com.google.common.collect.FilteredEntryMultimap'
p20645
sg15
(lp20646
sg17
(lp20647
sg19
(lp20648
sg21
I0
sba(iArchitecture
Entity
p20649
(dp20650
g11
(lp20651
sg13
S'com.google.common.collect.FilteredEntryMultimap$AsMap'
p20652
sg15
(lp20653
sg17
(lp20654
sg19
(lp20655
sg21
I0
sba(iArchitecture
Entity
p20656
(dp20657
g11
(lp20658
sg13
S'com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl'
p20659
sg15
(lp20660
sg17
(lp20661
sg19
(lp20662
sg21
I0
sba(iArchitecture
Entity
p20663
(dp20664
g11
(lp20665
sg13
S'com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl$1'
p20666
sg15
(lp20667
sg17
(lp20668
sg19
(lp20669
sg21
I0
sba(iArchitecture
Entity
p20670
(dp20671
g11
(lp20672
sg13
S'com.google.common.collect.FilteredEntryMultimap$AsMap$1KeySetImpl'
p20673
sg15
(lp20674
sg17
(lp20675
sg19
(lp20676
sg21
I0
sba(iArchitecture
Entity
p20677
(dp20678
g11
(lp20679
sg13
S'com.google.common.collect.FilteredEntryMultimap$AsMap$1ValuesImpl'
p20680
sg15
(lp20681
sg17
(lp20682
sg19
(lp20683
sg21
I0
sba(iArchitecture
Entity
p20684
(dp20685
g11
(lp20686
sg13
S'com.google.common.collect.FilteredEntryMultimap$Keys'
p20687
sg15
(lp20688
sg17
(lp20689
sg19
(lp20690
sg21
I0
sba(iArchitecture
Entity
p20691
(dp20692
g11
(lp20693
sg13
S'com.google.common.collect.FilteredEntryMultimap$Keys$1'
p20694
sg15
(lp20695
sg17
(lp20696
sg19
(lp20697
sg21
I0
sba(iArchitecture
Entity
p20698
(dp20699
g11
(lp20700
sg13
S'com.google.common.collect.FilteredEntryMultimap$Keys$1$1'
p20701
sg15
(lp20702
sg17
(lp20703
sg19
(lp20704
sg21
I0
sba(iArchitecture
Entity
p20705
(dp20706
g11
(lp20707
sg13
S'com.google.common.collect.FilteredEntryMultimap$ValuePredicate'
p20708
sg15
(lp20709
sg17
(lp20710
sg19
(lp20711
sg21
I0
sba(iArchitecture
Entity
p20712
(dp20713
g11
(lp20714
sg13
S'com.google.common.collect.FilteredEntrySetMultimap'
p20715
sg15
(lp20716
sg17
(lp20717
sg19
(lp20718
sg21
I0
sba(iArchitecture
Entity
p20719
(dp20720
g11
(lp20721
sg13
S'com.google.common.collect.FilteredKeyListMultimap'
p20722
sg15
(lp20723
sg17
(lp20724
sg19
(lp20725
sg21
I0
sba(iArchitecture
Entity
p20726
(dp20727
g11
(lp20728
sg13
S'com.google.common.collect.FilteredKeyMultimap'
p20729
sg15
(lp20730
sg17
(lp20731
sg19
(lp20732
sg21
I0
sba(iArchitecture
Entity
p20733
(dp20734
g11
(lp20735
sg13
S'com.google.common.collect.FilteredKeyMultimap$AddRejectingList'
p20736
sg15
(lp20737
sg17
(lp20738
sg19
(lp20739
sg21
I0
sba(iArchitecture
Entity
p20740
(dp20741
g11
(lp20742
sg13
S'com.google.common.collect.FilteredKeyMultimap$AddRejectingSet'
p20743
sg15
(lp20744
sg17
(lp20745
sg19
(lp20746
sg21
I0
sba(iArchitecture
Entity
p20747
(dp20748
g11
(lp20749
sg13
S'com.google.common.collect.FilteredKeyMultimap$Entries'
p20750
sg15
(lp20751
sg17
(lp20752
sg19
(lp20753
sg21
I0
sba(iArchitecture
Entity
p20754
(dp20755
g11
(lp20756
sg13
S'com.google.common.collect.FilteredKeySetMultimap'
p20757
sg15
(lp20758
sg17
(lp20759
sg19
(lp20760
sg21
I0
sba(iArchitecture
Entity
p20761
(dp20762
g11
(lp20763
sg13
S'com.google.common.collect.FilteredKeySetMultimap$EntrySet'
p20764
sg15
(lp20765
sg17
(lp20766
sg19
(lp20767
sg21
I0
sba(iArchitecture
Entity
p20768
(dp20769
g11
(lp20770
sg13
S'com.google.common.collect.FilteredMultimap'
p20771
sg15
(lp20772
sg17
(lp20773
sg19
(lp20774
sg21
I0
sba(iArchitecture
Entity
p20775
(dp20776
g11
(lp20777
sg13
S'com.google.common.collect.FilteredMultimapValues'
p20778
sg15
(lp20779
sg17
(lp20780
sg19
(lp20781
sg21
I0
sba(iArchitecture
Entity
p20782
(dp20783
g11
(lp20784
sg13
S'com.google.common.collect.FilteredSetMultimap'
p20785
sg15
(lp20786
sg17
(lp20787
sg19
(lp20788
sg21
I0
sba(iArchitecture
Entity
p20789
(dp20790
g11
(lp20791
sg13
S'com.google.common.collect.FluentIterable'
p20792
sg15
(lp20793
sg17
(lp20794
sg19
(lp20795
sg21
I0
sba(iArchitecture
Entity
p20796
(dp20797
g11
(lp20798
sg13
S'com.google.common.collect.FluentIterable$1'
p20799
sg15
(lp20800
sg17
(lp20801
sg19
(lp20802
sg21
I0
sba(iArchitecture
Entity
p20803
(dp20804
g11
(lp20805
sg13
S'com.google.common.collect.FluentIterable$FromIterableFunction'
p20806
sg15
(lp20807
sg17
(lp20808
sg19
(lp20809
sg21
I0
sba(iArchitecture
Entity
p20810
(dp20811
g11
(lp20812
sg13
S'com.google.common.collect.ForwardingBlockingDeque'
p20813
sg15
(lp20814
sg17
(lp20815
sg19
(lp20816
sg21
I0
sba(iArchitecture
Entity
p20817
(dp20818
g11
(lp20819
sg13
S'com.google.common.collect.ForwardingCollection'
p20820
sg15
(lp20821
sg17
(lp20822
sg19
(lp20823
sg21
I0
sba(iArchitecture
Entity
p20824
(dp20825
g11
(lp20826
sg13
S'com.google.common.collect.ForwardingConcurrentMap'
p20827
sg15
(lp20828
sg17
(lp20829
sg19
(lp20830
sg21
I0
sba(iArchitecture
Entity
p20831
(dp20832
g11
(lp20833
sg13
S'com.google.common.collect.ForwardingDeque'
p20834
sg15
(lp20835
sg17
(lp20836
sg19
(lp20837
sg21
I0
sba(iArchitecture
Entity
p20838
(dp20839
g11
(lp20840
sg13
S'com.google.common.collect.ForwardingIterator'
p20841
sg15
(lp20842
sg17
(lp20843
sg19
(lp20844
sg21
I0
sba(iArchitecture
Entity
p20845
(dp20846
g11
(lp20847
sg13
S'com.google.common.collect.ForwardingList'
p20848
sg15
(lp20849
sg17
(lp20850
sg19
(lp20851
sg21
I0
sba(iArchitecture
Entity
p20852
(dp20853
g11
(lp20854
sg13
S'com.google.common.collect.ForwardingListIterator'
p20855
sg15
(lp20856
sg17
(lp20857
sg19
(lp20858
sg21
I0
sba(iArchitecture
Entity
p20859
(dp20860
g11
(lp20861
sg13
S'com.google.common.collect.ForwardingMap'
p20862
sg15
(lp20863
sg17
(lp20864
sg19
(lp20865
sg21
I0
sba(iArchitecture
Entity
p20866
(dp20867
g11
(lp20868
sg13
S'com.google.common.collect.ForwardingMap$StandardEntrySet'
p20869
sg15
(lp20870
sg17
(lp20871
sg19
(lp20872
sg21
I0
sba(iArchitecture
Entity
p20873
(dp20874
g11
(lp20875
sg13
S'com.google.common.collect.ForwardingMap$StandardKeySet'
p20876
sg15
(lp20877
sg17
(lp20878
sg19
(lp20879
sg21
I0
sba(iArchitecture
Entity
p20880
(dp20881
g11
(lp20882
sg13
S'com.google.common.collect.ForwardingMap$StandardValues'
p20883
sg15
(lp20884
sg17
(lp20885
sg19
(lp20886
sg21
I0
sba(iArchitecture
Entity
p20887
(dp20888
g11
(lp20889
sg13
S'com.google.common.collect.ForwardingMultimap'
p20890
sg15
(lp20891
sg17
(lp20892
sg19
(lp20893
sg21
I0
sba(iArchitecture
Entity
p20894
(dp20895
g11
(lp20896
sg13
S'com.google.common.collect.ForwardingMultiset'
p20897
sg15
(lp20898
sg17
(lp20899
sg19
(lp20900
sg21
I0
sba(iArchitecture
Entity
p20901
(dp20902
g11
(lp20903
sg13
S'com.google.common.collect.ForwardingMultiset$StandardElementSet'
p20904
sg15
(lp20905
sg17
(lp20906
sg19
(lp20907
sg21
I0
sba(iArchitecture
Entity
p20908
(dp20909
g11
(lp20910
sg13
S'com.google.common.collect.ForwardingNavigableMap'
p20911
sg15
(lp20912
sg17
(lp20913
sg19
(lp20914
sg21
I0
sba(iArchitecture
Entity
p20915
(dp20916
g11
(lp20917
sg13
S'com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap'
p20918
sg15
(lp20919
sg17
(lp20920
sg19
(lp20921
sg21
I0
sba(iArchitecture
Entity
p20922
(dp20923
g11
(lp20924
sg13
S'com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1'
p20925
sg15
(lp20926
sg17
(lp20927
sg19
(lp20928
sg21
I0
sba(iArchitecture
Entity
p20929
(dp20930
g11
(lp20931
sg13
S'com.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet'
p20932
sg15
(lp20933
sg17
(lp20934
sg19
(lp20935
sg21
I0
sba(iArchitecture
Entity
p20936
(dp20937
g11
(lp20938
sg13
S'com.google.common.collect.ForwardingNavigableSet'
p20939
sg15
(lp20940
sg17
(lp20941
sg19
(lp20942
sg21
I0
sba(iArchitecture
Entity
p20943
(dp20944
g11
(lp20945
sg13
S'com.google.common.collect.ForwardingNavigableSet$StandardDescendingSet'
p20946
sg15
(lp20947
sg17
(lp20948
sg19
(lp20949
sg21
I0
sba(iArchitecture
Entity
p20950
(dp20951
g11
(lp20952
sg13
S'com.google.common.collect.ForwardingQueue'
p20953
sg15
(lp20954
sg17
(lp20955
sg19
(lp20956
sg21
I0
sba(iArchitecture
Entity
p20957
(dp20958
g11
(lp20959
sg13
S'com.google.common.collect.ForwardingSet'
p20960
sg15
(lp20961
sg17
(lp20962
sg19
(lp20963
sg21
I0
sba(iArchitecture
Entity
p20964
(dp20965
g11
(lp20966
sg13
S'com.google.common.collect.ForwardingSetMultimap'
p20967
sg15
(lp20968
sg17
(lp20969
sg19
(lp20970
sg21
I0
sba(iArchitecture
Entity
p20971
(dp20972
g11
(lp20973
sg13
S'com.google.common.collect.ForwardingSortedMap'
p20974
sg15
(lp20975
sg17
(lp20976
sg19
(lp20977
sg21
I0
sba(iArchitecture
Entity
p20978
(dp20979
g11
(lp20980
sg13
S'com.google.common.collect.ForwardingSortedMap$StandardKeySet'
p20981
sg15
(lp20982
sg17
(lp20983
sg19
(lp20984
sg21
I0
sba(iArchitecture
Entity
p20985
(dp20986
g11
(lp20987
sg13
S'com.google.common.collect.ForwardingSortedMultiset'
p20988
sg15
(lp20989
sg17
(lp20990
sg19
(lp20991
sg21
I0
sba(iArchitecture
Entity
p20992
(dp20993
g11
(lp20994
sg13
S'com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset'
p20995
sg15
(lp20996
sg17
(lp20997
sg19
(lp20998
sg21
I0
sba(iArchitecture
Entity
p20999
(dp21000
g11
(lp21001
sg13
S'com.google.common.collect.ForwardingSortedMultiset$StandardElementSet'
p21002
sg15
(lp21003
sg17
(lp21004
sg19
(lp21005
sg21
I0
sba(iArchitecture
Entity
p21006
(dp21007
g11
(lp21008
sg13
S'com.google.common.collect.ForwardingSortedSet'
p21009
sg15
(lp21010
sg17
(lp21011
sg19
(lp21012
sg21
I0
sba(iArchitecture
Entity
p21013
(dp21014
g11
(lp21015
sg13
S'com.google.common.collect.ForwardingSortedSetMultimap'
p21016
sg15
(lp21017
sg17
(lp21018
sg19
(lp21019
sg21
I0
sba(iArchitecture
Entity
p21020
(dp21021
g11
(lp21022
sg13
S'com.google.common.collect.ForwardingTable'
p21023
sg15
(lp21024
sg17
(lp21025
sg19
(lp21026
sg21
I0
sba(iArchitecture
Entity
p21027
(dp21028
g11
(lp21029
sg13
S'com.google.common.collect.GeneralRange'
p21030
sg15
(lp21031
sg17
(lp21032
sg19
(lp21033
sg21
I0
sba(iArchitecture
Entity
p21034
(dp21035
g11
(lp21036
sg13
S'com.google.common.collect.GenericMapMaker'
p21037
sg15
(lp21038
sg17
(lp21039
sg19
(lp21040
sg21
I0
sba(iArchitecture
Entity
p21041
(dp21042
g11
(lp21043
sg13
S'com.google.common.collect.GenericMapMaker$NullListener'
p21044
sg15
(lp21045
sg17
(lp21046
sg19
(lp21047
sg21
I0
sba(iArchitecture
Entity
p21048
(dp21049
g11
(lp21050
sg13
S'com.google.common.collect.GwtSerializationDependencies'
p21051
sg15
(lp21052
sg17
(lp21053
sg19
(lp21054
sg21
I0
sba(iArchitecture
Entity
p21055
(dp21056
g11
(lp21057
sg13
S'com.google.common.collect.GwtSerializationDependencies$HashBasedTableDependencies'
p21058
sg15
(lp21059
sg17
(lp21060
sg19
(lp21061
sg21
I0
sba(iArchitecture
Entity
p21062
(dp21063
g11
(lp21064
sg13
S'com.google.common.collect.GwtSerializationDependencies$ImmutableListMultimapDependencies'
p21065
sg15
(lp21066
sg17
(lp21067
sg19
(lp21068
sg21
I0
sba(iArchitecture
Entity
p21069
(dp21070
g11
(lp21071
sg13
S'com.google.common.collect.GwtSerializationDependencies$ImmutableSetMultimapDependencies'
p21072
sg15
(lp21073
sg17
(lp21074
sg19
(lp21075
sg21
I0
sba(iArchitecture
Entity
p21076
(dp21077
g11
(lp21078
sg13
S'com.google.common.collect.GwtSerializationDependencies$ImmutableTableDependencies'
p21079
sg15
(lp21080
sg17
(lp21081
sg19
(lp21082
sg21
I0
sba(iArchitecture
Entity
p21083
(dp21084
g11
(lp21085
sg13
S'com.google.common.collect.GwtSerializationDependencies$LinkedListMultimapDependencies'
p21086
sg15
(lp21087
sg17
(lp21088
sg19
(lp21089
sg21
I0
sba(iArchitecture
Entity
p21090
(dp21091
g11
(lp21092
sg13
S'com.google.common.collect.GwtSerializationDependencies$TreeBasedTableDependencies'
p21093
sg15
(lp21094
sg17
(lp21095
sg19
(lp21096
sg21
I0
sba(iArchitecture
Entity
p21097
(dp21098
g11
(lp21099
sg13
S'com.google.common.collect.GwtSerializationDependencies$TreeMultimapDependencies'
p21100
sg15
(lp21101
sg17
(lp21102
sg19
(lp21103
sg21
I0
sba(iArchitecture
Entity
p21104
(dp21105
g11
(lp21106
sg13
S'com.google.common.collect.GwtTransient'
p21107
sg15
(lp21108
sg17
(lp21109
sg19
(lp21110
sg21
I0
sba(iArchitecture
Entity
p21111
(dp21112
g11
(lp21113
sg13
S'com.google.common.collect.HashBasedTable_CustomFieldSerializer'
p21114
sg15
(lp21115
sg17
(lp21116
sg19
(lp21117
sg21
I0
sba(iArchitecture
Entity
p21118
(dp21119
g11
(lp21120
sg13
S'com.google.common.collect.HashBiMap'
p21121
sg15
(lp21122
sg17
(lp21123
sg19
(lp21124
sg21
I0
sba(iArchitecture
Entity
p21125
(dp21126
g11
(lp21127
sg13
S'com.google.common.collect.HashBiMap$1'
p21128
sg15
(lp21129
sg17
(lp21130
sg19
(lp21131
sg21
I0
sba(iArchitecture
Entity
p21132
(dp21133
g11
(lp21134
sg13
S'com.google.common.collect.HashBiMap$1$MapEntry'
p21135
sg15
(lp21136
sg17
(lp21137
sg19
(lp21138
sg21
I0
sba(iArchitecture
Entity
p21139
(dp21140
g11
(lp21141
sg13
S'com.google.common.collect.HashBiMap$1.MapEntry'
p21142
sg15
(lp21143
sg17
(lp21144
sg19
(lp21145
sg21
I0
sba(iArchitecture
Entity
p21146
(dp21147
g11
(lp21148
sg13
S'com.google.common.collect.HashBiMap$BiEntry'
p21149
sg15
(lp21150
sg17
(lp21151
sg19
(lp21152
sg21
I0
sba(iArchitecture
Entity
p21153
(dp21154
g11
(lp21155
sg13
S'com.google.common.collect.HashBiMap$Inverse'
p21156
sg15
(lp21157
sg17
(lp21158
sg19
(lp21159
sg21
I0
sba(iArchitecture
Entity
p21160
(dp21161
g11
(lp21162
sg13
S'com.google.common.collect.HashBiMap$Inverse$1'
p21163
sg15
(lp21164
sg17
(lp21165
sg19
(lp21166
sg21
I0
sba(iArchitecture
Entity
p21167
(dp21168
g11
(lp21169
sg13
S'com.google.common.collect.HashBiMap$Inverse$1$1'
p21170
sg15
(lp21171
sg17
(lp21172
sg19
(lp21173
sg21
I0
sba(iArchitecture
Entity
p21174
(dp21175
g11
(lp21176
sg13
S'com.google.common.collect.HashBiMap$Inverse$1$1$InverseEntry'
p21177
sg15
(lp21178
sg17
(lp21179
sg19
(lp21180
sg21
I0
sba(iArchitecture
Entity
p21181
(dp21182
g11
(lp21183
sg13
S'com.google.common.collect.HashBiMap$Inverse$1$1.InverseEntry'
p21184
sg15
(lp21185
sg17
(lp21186
sg19
(lp21187
sg21
I0
sba(iArchitecture
Entity
p21188
(dp21189
g11
(lp21190
sg13
S'com.google.common.collect.HashBiMap$Inverse$InverseKeySet'
p21191
sg15
(lp21192
sg17
(lp21193
sg19
(lp21194
sg21
I0
sba(iArchitecture
Entity
p21195
(dp21196
g11
(lp21197
sg13
S'com.google.common.collect.HashBiMap$Inverse$InverseKeySet$1'
p21198
sg15
(lp21199
sg17
(lp21200
sg19
(lp21201
sg21
I0
sba(iArchitecture
Entity
p21202
(dp21203
g11
(lp21204
sg13
S'com.google.common.collect.HashBiMap$InverseSerializedForm'
p21205
sg15
(lp21206
sg17
(lp21207
sg19
(lp21208
sg21
I0
sba(iArchitecture
Entity
p21209
(dp21210
g11
(lp21211
sg13
S'com.google.common.collect.HashBiMap$Itr'
p21212
sg15
(lp21213
sg17
(lp21214
sg19
(lp21215
sg21
I0
sba(iArchitecture
Entity
p21216
(dp21217
g11
(lp21218
sg13
S'com.google.common.collect.HashBiMap$KeySet'
p21219
sg15
(lp21220
sg17
(lp21221
sg19
(lp21222
sg21
I0
sba(iArchitecture
Entity
p21223
(dp21224
g11
(lp21225
sg13
S'com.google.common.collect.HashBiMap$KeySet$1'
p21226
sg15
(lp21227
sg17
(lp21228
sg19
(lp21229
sg21
I0
sba(iArchitecture
Entity
p21230
(dp21231
g11
(lp21232
sg13
S'com.google.common.collect.HashMultimap_CustomFieldSerializer'
p21233
sg15
(lp21234
sg17
(lp21235
sg19
(lp21236
sg21
I0
sba(iArchitecture
Entity
p21237
(dp21238
g11
(lp21239
sg13
S'com.google.common.collect.HashMultiset_CustomFieldSerializer'
p21240
sg15
(lp21241
sg17
(lp21242
sg19
(lp21243
sg21
I0
sba(iArchitecture
Entity
p21244
(dp21245
g11
(lp21246
sg13
S'com.google.common.collect.Hashing'
p21247
sg15
(lp21248
sg17
(lp21249
sg19
(lp21250
sg21
I0
sba(iArchitecture
Entity
p21251
(dp21252
g11
(lp21253
sg13
S'com.google.common.collect.ImmutableAsList'
p21254
sg15
(lp21255
sg17
(lp21256
sg19
(lp21257
sg21
I0
sba(iArchitecture
Entity
p21258
(dp21259
g11
(lp21260
sg13
S'com.google.common.collect.ImmutableAsList$SerializedForm'
p21261
sg15
(lp21262
sg17
(lp21263
sg19
(lp21264
sg21
I0
sba(iArchitecture
Entity
p21265
(dp21266
g11
(lp21267
sg13
S'com.google.common.collect.ImmutableBiMap'
p21268
sg15
(lp21269
sg17
(lp21270
sg19
(lp21271
sg21
I0
sba(iArchitecture
Entity
p21272
(dp21273
g11
(lp21274
sg13
S'com.google.common.collect.ImmutableBiMap$Builder'
p21275
sg15
(lp21276
sg17
(lp21277
sg19
(lp21278
sg21
I0
sba(iArchitecture
Entity
p21279
(dp21280
g11
(lp21281
sg13
S'com.google.common.collect.ImmutableBiMap$SerializedForm'
p21282
sg15
(lp21283
sg17
(lp21284
sg19
(lp21285
sg21
I0
sba(iArchitecture
Entity
p21286
(dp21287
g11
(lp21288
sg13
S'com.google.common.collect.ImmutableEntry'
p21289
sg15
(lp21290
sg17
(lp21291
sg19
(lp21292
sg21
I0
sba(iArchitecture
Entity
p21293
(dp21294
g11
(lp21295
sg13
S'com.google.common.collect.ImmutableEntry_CustomFieldSerializer'
p21296
sg15
(lp21297
sg17
(lp21298
sg19
(lp21299
sg21
I0
sba(iArchitecture
Entity
p21300
(dp21301
g11
(lp21302
sg13
S'com.google.common.collect.ImmutableEnumMap'
p21303
sg15
(lp21304
sg17
(lp21305
sg19
(lp21306
sg21
I0
sba(iArchitecture
Entity
p21307
(dp21308
g11
(lp21309
sg13
S'com.google.common.collect.ImmutableEnumMap$1'
p21310
sg15
(lp21311
sg17
(lp21312
sg19
(lp21313
sg21
I0
sba(iArchitecture
Entity
p21314
(dp21315
g11
(lp21316
sg13
S'com.google.common.collect.ImmutableEnumMap$EnumSerializedForm'
p21317
sg15
(lp21318
sg17
(lp21319
sg19
(lp21320
sg21
I0
sba(iArchitecture
Entity
p21321
(dp21322
g11
(lp21323
sg13
S'com.google.common.collect.ImmutableEnumMap_CustomFieldSerializer'
p21324
sg15
(lp21325
sg17
(lp21326
sg19
(lp21327
sg21
I0
sba(iArchitecture
Entity
p21328
(dp21329
g11
(lp21330
sg13
S'com.google.common.collect.ImmutableEnumSet'
p21331
sg15
(lp21332
sg17
(lp21333
sg19
(lp21334
sg21
I0
sba(iArchitecture
Entity
p21335
(dp21336
g11
(lp21337
sg13
S'com.google.common.collect.ImmutableEnumSet$1'
p21338
sg15
(lp21339
sg17
(lp21340
sg19
(lp21341
sg21
I0
sba(iArchitecture
Entity
p21342
(dp21343
g11
(lp21344
sg13
S'com.google.common.collect.ImmutableEnumSet$EnumSerializedForm'
p21345
sg15
(lp21346
sg17
(lp21347
sg19
(lp21348
sg21
I0
sba(iArchitecture
Entity
p21349
(dp21350
g11
(lp21351
sg13
S'com.google.common.collect.ImmutableEnumSet_CustomFieldSerializer'
p21352
sg15
(lp21353
sg17
(lp21354
sg19
(lp21355
sg21
I0
sba(iArchitecture
Entity
p21356
(dp21357
g11
(lp21358
sg13
S'com.google.common.collect.ImmutableList'
p21359
sg15
(lp21360
sg17
(lp21361
sg19
(lp21362
sg21
I0
sba(iArchitecture
Entity
p21363
(dp21364
g11
(lp21365
sg13
S'com.google.common.collect.ImmutableList$1'
p21366
sg15
(lp21367
sg17
(lp21368
sg19
(lp21369
sg21
I0
sba(iArchitecture
Entity
p21370
(dp21371
g11
(lp21372
sg13
S'com.google.common.collect.ImmutableList$ReverseImmutableList'
p21373
sg15
(lp21374
sg17
(lp21375
sg19
(lp21376
sg21
I0
sba(iArchitecture
Entity
p21377
(dp21378
g11
(lp21379
sg13
S'com.google.common.collect.ImmutableList$SerializedForm'
p21380
sg15
(lp21381
sg17
(lp21382
sg19
(lp21383
sg21
I0
sba(iArchitecture
Entity
p21384
(dp21385
g11
(lp21386
sg13
S'com.google.common.collect.ImmutableList$SubList'
p21387
sg15
(lp21388
sg17
(lp21389
sg19
(lp21390
sg21
I0
sba(iArchitecture
Entity
p21391
(dp21392
g11
(lp21393
sg13
S'com.google.common.collect.ImmutableListMultimap'
p21394
sg15
(lp21395
sg17
(lp21396
sg19
(lp21397
sg21
I0
sba(iArchitecture
Entity
p21398
(dp21399
g11
(lp21400
sg13
S'com.google.common.collect.ImmutableListMultimap$Builder'
p21401
sg15
(lp21402
sg17
(lp21403
sg19
(lp21404
sg21
I0
sba(iArchitecture
Entity
p21405
(dp21406
g11
(lp21407
sg13
S'com.google.common.collect.ImmutableListMultimap_CustomFieldSerializer'
p21408
sg15
(lp21409
sg17
(lp21410
sg19
(lp21411
sg21
I0
sba(iArchitecture
Entity
p21412
(dp21413
g11
(lp21414
sg13
S'com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap'
p21415
sg15
(lp21416
sg17
(lp21417
sg19
(lp21418
sg21
I0
sba(iArchitecture
Entity
p21419
(dp21420
g11
(lp21421
sg13
S'com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap$1EntrySetImpl'
p21422
sg15
(lp21423
sg17
(lp21424
sg19
(lp21425
sg21
I0
sba(iArchitecture
Entity
p21426
(dp21427
g11
(lp21428
sg13
S'com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets'
p21429
sg15
(lp21430
sg17
(lp21431
sg19
(lp21432
sg21
I0
sba(iArchitecture
Entity
p21433
(dp21434
g11
(lp21435
sg13
S'com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1'
p21436
sg15
(lp21437
sg17
(lp21438
sg19
(lp21439
sg21
I0
sba(iArchitecture
Entity
p21440
(dp21441
g11
(lp21442
sg13
S'com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1'
p21443
sg15
(lp21444
sg17
(lp21445
sg19
(lp21446
sg21
I0
sba(iArchitecture
Entity
p21447
(dp21448
g11
(lp21449
sg13
S'com.google.common.collect.ImmutableMapEntry'
p21450
sg15
(lp21451
sg17
(lp21452
sg19
(lp21453
sg21
I0
sba(iArchitecture
Entity
p21454
(dp21455
g11
(lp21456
sg13
S'com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableBiMapEntry'
p21457
sg15
(lp21458
sg17
(lp21459
sg19
(lp21460
sg21
I0
sba(iArchitecture
Entity
p21461
(dp21462
g11
(lp21463
sg13
S'com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry'
p21464
sg15
(lp21465
sg17
(lp21466
sg19
(lp21467
sg21
I0
sba(iArchitecture
Entity
p21468
(dp21469
g11
(lp21470
sg13
S'com.google.common.collect.ImmutableMapEntrySet'
p21471
sg15
(lp21472
sg17
(lp21473
sg19
(lp21474
sg21
I0
sba(iArchitecture
Entity
p21475
(dp21476
g11
(lp21477
sg13
S'com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm'
p21478
sg15
(lp21479
sg17
(lp21480
sg19
(lp21481
sg21
I0
sba(iArchitecture
Entity
p21482
(dp21483
g11
(lp21484
sg13
S'com.google.common.collect.ImmutableMapKeySet'
p21485
sg15
(lp21486
sg17
(lp21487
sg19
(lp21488
sg21
I0
sba(iArchitecture
Entity
p21489
(dp21490
g11
(lp21491
sg13
S'com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm'
p21492
sg15
(lp21493
sg17
(lp21494
sg19
(lp21495
sg21
I0
sba(iArchitecture
Entity
p21496
(dp21497
g11
(lp21498
sg13
S'com.google.common.collect.ImmutableMapValues'
p21499
sg15
(lp21500
sg17
(lp21501
sg19
(lp21502
sg21
I0
sba(iArchitecture
Entity
p21503
(dp21504
g11
(lp21505
sg13
S'com.google.common.collect.ImmutableMapValues$1'
p21506
sg15
(lp21507
sg17
(lp21508
sg19
(lp21509
sg21
I0
sba(iArchitecture
Entity
p21510
(dp21511
g11
(lp21512
sg13
S'com.google.common.collect.ImmutableMapValues$2'
p21513
sg15
(lp21514
sg17
(lp21515
sg19
(lp21516
sg21
I0
sba(iArchitecture
Entity
p21517
(dp21518
g11
(lp21519
sg13
S'com.google.common.collect.ImmutableMapValues$SerializedForm'
p21520
sg15
(lp21521
sg17
(lp21522
sg19
(lp21523
sg21
I0
sba(iArchitecture
Entity
p21524
(dp21525
g11
(lp21526
sg13
S'com.google.common.collect.ImmutableMultimap'
p21527
sg15
(lp21528
sg17
(lp21529
sg19
(lp21530
sg21
I0
sba(iArchitecture
Entity
p21531
(dp21532
g11
(lp21533
sg13
S'com.google.common.collect.ImmutableMultimap$1'
p21534
sg15
(lp21535
sg17
(lp21536
sg19
(lp21537
sg21
I0
sba(iArchitecture
Entity
p21538
(dp21539
g11
(lp21540
sg13
S'com.google.common.collect.ImmutableMultimap$2'
p21541
sg15
(lp21542
sg17
(lp21543
sg19
(lp21544
sg21
I0
sba(iArchitecture
Entity
p21545
(dp21546
g11
(lp21547
sg13
S'com.google.common.collect.ImmutableMultimap$Builder'
p21548
sg15
(lp21549
sg17
(lp21550
sg19
(lp21551
sg21
I0
sba(iArchitecture
Entity
p21552
(dp21553
g11
(lp21554
sg13
S'com.google.common.collect.ImmutableMultimap$EntryCollection'
p21555
sg15
(lp21556
sg17
(lp21557
sg19
(lp21558
sg21
I0
sba(iArchitecture
Entity
p21559
(dp21560
g11
(lp21561
sg13
S'com.google.common.collect.ImmutableMultimap$FieldSettersHolder'
p21562
sg15
(lp21563
sg17
(lp21564
sg19
(lp21565
sg21
I0
sba(iArchitecture
Entity
p21566
(dp21567
g11
(lp21568
sg13
S'com.google.common.collect.ImmutableMultimap$Itr'
p21569
sg15
(lp21570
sg17
(lp21571
sg19
(lp21572
sg21
I0
sba(iArchitecture
Entity
p21573
(dp21574
g11
(lp21575
sg13
S'com.google.common.collect.ImmutableMultimap$Keys'
p21576
sg15
(lp21577
sg17
(lp21578
sg19
(lp21579
sg21
I0
sba(iArchitecture
Entity
p21580
(dp21581
g11
(lp21582
sg13
S'com.google.common.collect.ImmutableMultimap$Values'
p21583
sg15
(lp21584
sg17
(lp21585
sg19
(lp21586
sg21
I0
sba(iArchitecture
Entity
p21587
(dp21588
g11
(lp21589
sg13
S'com.google.common.collect.ImmutableMultiset'
p21590
sg15
(lp21591
sg17
(lp21592
sg19
(lp21593
sg21
I0
sba(iArchitecture
Entity
p21594
(dp21595
g11
(lp21596
sg13
S'com.google.common.collect.ImmutableMultiset$1'
p21597
sg15
(lp21598
sg17
(lp21599
sg19
(lp21600
sg21
I0
sba(iArchitecture
Entity
p21601
(dp21602
g11
(lp21603
sg13
S'com.google.common.collect.ImmutableMultiset$Builder'
p21604
sg15
(lp21605
sg17
(lp21606
sg19
(lp21607
sg21
I0
sba(iArchitecture
Entity
p21608
(dp21609
g11
(lp21610
sg13
S'com.google.common.collect.ImmutableMultiset$EntrySet'
p21611
sg15
(lp21612
sg17
(lp21613
sg19
(lp21614
sg21
I0
sba(iArchitecture
Entity
p21615
(dp21616
g11
(lp21617
sg13
S'com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm'
p21618
sg15
(lp21619
sg17
(lp21620
sg19
(lp21621
sg21
I0
sba(iArchitecture
Entity
p21622
(dp21623
g11
(lp21624
sg13
S'com.google.common.collect.ImmutableMultiset$SerializedForm'
p21625
sg15
(lp21626
sg17
(lp21627
sg19
(lp21628
sg21
I0
sba(iArchitecture
Entity
p21629
(dp21630
g11
(lp21631
V2258
p21632
asg13
S'com.google.common.collect.ImmutableRangeMap'
p21633
sg15
(lp21634
VMutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\u000a
p21635
asg17
(lp21636
(lp21637
I2
aasg19
(lp21638
VMutable operations on ImmutableRangeSet should be deprecated
p21639
asg21
I0
sba(iArchitecture
Entity
p21640
(dp21641
g11
(lp21642
g21632
asg13
S'com.google.common.collect.ImmutableRangeMap$1'
p21643
sg15
(lp21644
VMutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\u000a
p21645
asg17
(lp21646
g21637
asg19
(lp21647
g21639
asg21
I0
sba(iArchitecture
Entity
p21648
(dp21649
g11
(lp21650
g21632
asg13
S'com.google.common.collect.ImmutableRangeMap$2'
p21651
sg15
(lp21652
VMutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\u000a
p21653
asg17
(lp21654
g21637
asg19
(lp21655
g21639
asg21
I0
sba(iArchitecture
Entity
p21656
(dp21657
g11
(lp21658
g21632
asg13
S'com.google.common.collect.ImmutableRangeMap$Builder'
p21659
sg15
(lp21660
VMutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\u000a
p21661
asg17
(lp21662
g21637
asg19
(lp21663
g21639
asg21
I0
sba(iArchitecture
Entity
p21664
(dp21665
g11
(lp21666
g21632
asg13
S'com.google.common.collect.ImmutableRangeMap$SerializedForm'
p21667
sg15
(lp21668
VMutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\u000a
p21669
asg17
(lp21670
g21637
asg19
(lp21671
g21639
asg21
I0
sba(iArchitecture
Entity
p21672
(dp21673
g11
(lp21674
g21632
asg13
S'com.google.common.collect.ImmutableRangeSet'
p21675
sg15
(lp21676
VMutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\u000a
p21677
asg17
(lp21678
g21637
asg19
(lp21679
g21639
asg21
I0
sba(iArchitecture
Entity
p21680
(dp21681
g11
(lp21682
g21632
asg13
S'com.google.common.collect.ImmutableRangeSet$1'
p21683
sg15
(lp21684
VMutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\u000a
p21685
asg17
(lp21686
g21637
asg19
(lp21687
g21639
asg21
I0
sba(iArchitecture
Entity
p21688
(dp21689
g11
(lp21690
g21632
asg13
S'com.google.common.collect.ImmutableRangeSet$AsSet'
p21691
sg15
(lp21692
VMutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\u000a
p21693
asg17
(lp21694
g21637
asg19
(lp21695
g21639
asg21
I0
sba(iArchitecture
Entity
p21696
(dp21697
g11
(lp21698
g21632
asg13
S'com.google.common.collect.ImmutableRangeSet$AsSet$1'
p21699
sg15
(lp21700
VMutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\u000a
p21701
asg17
(lp21702
g21637
asg19
(lp21703
g21639
asg21
I0
sba(iArchitecture
Entity
p21704
(dp21705
g11
(lp21706
g21632
asg13
S'com.google.common.collect.ImmutableRangeSet$AsSet$2'
p21707
sg15
(lp21708
VMutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\u000a
p21709
asg17
(lp21710
g21637
asg19
(lp21711
g21639
asg21
I0
sba(iArchitecture
Entity
p21712
(dp21713
g11
(lp21714
g21632
asg13
S'com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm'
p21715
sg15
(lp21716
VMutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\u000a
p21717
asg17
(lp21718
g21637
asg19
(lp21719
g21639
asg21
I0
sba(iArchitecture
Entity
p21720
(dp21721
g11
(lp21722
g21632
asg13
S'com.google.common.collect.ImmutableRangeSet$Builder'
p21723
sg15
(lp21724
VMutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\u000a
p21725
asg17
(lp21726
g21637
asg19
(lp21727
g21639
asg21
I0
sba(iArchitecture
Entity
p21728
(dp21729
g11
(lp21730
g21632
asg13
S'com.google.common.collect.ImmutableRangeSet$ComplementRanges'
p21731
sg15
(lp21732
VMutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\u000a
p21733
asg17
(lp21734
g21637
asg19
(lp21735
g21639
asg21
I0
sba(iArchitecture
Entity
p21736
(dp21737
g11
(lp21738
g21632
asg13
S'com.google.common.collect.ImmutableRangeSet$SerializedForm'
p21739
sg15
(lp21740
VMutable operations on `ImmutableRangeSet` (`add`, `remove`, `clear`, etc) should be marked as unsupported and deprecated and javadoc modified appropriately, in a similar way to mutable operations on the other immutable collections.\u000a
p21741
asg17
(lp21742
g21637
asg19
(lp21743
g21639
asg21
I0
sba(iArchitecture
Entity
p21744
(dp21745
g11
(lp21746
sg13
S'com.google.common.collect.ImmutableSet'
p21747
sg15
(lp21748
sg17
(lp21749
sg19
(lp21750
sg21
I0
sba(iArchitecture
Entity
p21751
(dp21752
g11
(lp21753
sg13
S'com.google.common.collect.ImmutableSet$Indexed'
p21754
sg15
(lp21755
sg17
(lp21756
sg19
(lp21757
sg21
I0
sba(iArchitecture
Entity
p21758
(dp21759
g11
(lp21760
sg13
S'com.google.common.collect.ImmutableSet$Indexed$1'
p21761
sg15
(lp21762
sg17
(lp21763
sg19
(lp21764
sg21
I0
sba(iArchitecture
Entity
p21765
(dp21766
g11
(lp21767
sg13
S'com.google.common.collect.ImmutableSet$SerializedForm'
p21768
sg15
(lp21769
sg17
(lp21770
sg19
(lp21771
sg21
I0
sba(iArchitecture
Entity
p21772
(dp21773
g11
(lp21774
sg13
S'com.google.common.collect.ImmutableSetMultimap'
p21775
sg15
(lp21776
sg17
(lp21777
sg19
(lp21778
sg21
I0
sba(iArchitecture
Entity
p21779
(dp21780
g11
(lp21781
sg13
S'com.google.common.collect.ImmutableSetMultimap$Builder'
p21782
sg15
(lp21783
sg17
(lp21784
sg19
(lp21785
sg21
I0
sba(iArchitecture
Entity
p21786
(dp21787
g11
(lp21788
sg13
S'com.google.common.collect.ImmutableSetMultimap$EntrySet'
p21789
sg15
(lp21790
sg17
(lp21791
sg19
(lp21792
sg21
I0
sba(iArchitecture
Entity
p21793
(dp21794
g11
(lp21795
sg13
S'com.google.common.collect.ImmutableSetMultimap_CustomFieldSerializer'
p21796
sg15
(lp21797
sg17
(lp21798
sg19
(lp21799
sg21
I0
sba(iArchitecture
Entity
p21800
(dp21801
g11
(lp21802
sg13
S'com.google.common.collect.ImmutableSortedAsList'
p21803
sg15
(lp21804
sg17
(lp21805
sg19
(lp21806
sg21
I0
sba(iArchitecture
Entity
p21807
(dp21808
g11
(lp21809
sg13
S'com.google.common.collect.ImmutableSortedMap'
p21810
sg15
(lp21811
sg17
(lp21812
sg19
(lp21813
sg21
I0
sba(iArchitecture
Entity
p21814
(dp21815
g11
(lp21816
sg13
S'com.google.common.collect.ImmutableSortedMap$1EntrySet'
p21817
sg15
(lp21818
sg17
(lp21819
sg19
(lp21820
sg21
I0
sba(iArchitecture
Entity
p21821
(dp21822
g11
(lp21823
sg13
S'com.google.common.collect.ImmutableSortedMap$1EntrySet$1'
p21824
sg15
(lp21825
sg17
(lp21826
sg19
(lp21827
sg21
I0
sba(iArchitecture
Entity
p21828
(dp21829
g11
(lp21830
sg13
S'com.google.common.collect.ImmutableSortedMap$Builder'
p21831
sg15
(lp21832
sg17
(lp21833
sg19
(lp21834
sg21
I0
sba(iArchitecture
Entity
p21835
(dp21836
g11
(lp21837
sg13
S'com.google.common.collect.ImmutableSortedMap$SerializedForm'
p21838
sg15
(lp21839
sg17
(lp21840
sg19
(lp21841
sg21
I0
sba(iArchitecture
Entity
p21842
(dp21843
g11
(lp21844
sg13
S'com.google.common.collect.ImmutableSortedMapFauxverideShim'
p21845
sg15
(lp21846
sg17
(lp21847
sg19
(lp21848
sg21
I0
sba(iArchitecture
Entity
p21849
(dp21850
g11
(lp21851
sg13
S'com.google.common.collect.ImmutableSortedMap_CustomFieldSerializer'
p21852
sg15
(lp21853
sg17
(lp21854
sg19
(lp21855
sg21
I0
sba(iArchitecture
Entity
p21856
(dp21857
g11
(lp21858
sg13
S'com.google.common.collect.ImmutableSortedMap_CustomFieldSerializerBase'
p21859
sg15
(lp21860
sg17
(lp21861
sg19
(lp21862
sg21
I0
sba(iArchitecture
Entity
p21863
(dp21864
g11
(lp21865
sg13
S'com.google.common.collect.ImmutableSortedMultiset'
p21866
sg15
(lp21867
sg17
(lp21868
sg19
(lp21869
sg21
I0
sba(iArchitecture
Entity
p21870
(dp21871
g11
(lp21872
sg13
S'com.google.common.collect.ImmutableSortedMultiset$Builder'
p21873
sg15
(lp21874
sg17
(lp21875
sg19
(lp21876
sg21
I0
sba(iArchitecture
Entity
p21877
(dp21878
g11
(lp21879
sg13
S'com.google.common.collect.ImmutableSortedMultiset$SerializedForm'
p21880
sg15
(lp21881
sg17
(lp21882
sg19
(lp21883
sg21
I0
sba(iArchitecture
Entity
p21884
(dp21885
g11
(lp21886
sg13
S'com.google.common.collect.ImmutableSortedMultisetFauxverideShim'
p21887
sg15
(lp21888
sg17
(lp21889
sg19
(lp21890
sg21
I0
sba(iArchitecture
Entity
p21891
(dp21892
g11
(lp21893
sg13
S'com.google.common.collect.ImmutableSortedSet'
p21894
sg15
(lp21895
sg17
(lp21896
sg19
(lp21897
sg21
I0
sba(iArchitecture
Entity
p21898
(dp21899
g11
(lp21900
sg13
S'com.google.common.collect.ImmutableSortedSet$SerializedForm'
p21901
sg15
(lp21902
sg17
(lp21903
sg19
(lp21904
sg21
I0
sba(iArchitecture
Entity
p21905
(dp21906
g11
(lp21907
sg13
S'com.google.common.collect.ImmutableSortedSetFauxverideShim'
p21908
sg15
(lp21909
sg17
(lp21910
sg19
(lp21911
sg21
I0
sba(iArchitecture
Entity
p21912
(dp21913
g11
(lp21914
sg13
S'com.google.common.collect.ImmutableTable'
p21915
sg15
(lp21916
sg17
(lp21917
sg19
(lp21918
sg21
I0
sba(iArchitecture
Entity
p21919
(dp21920
g11
(lp21921
sg13
S'com.google.common.collect.ImmutableTable$Builder'
p21922
sg15
(lp21923
sg17
(lp21924
sg19
(lp21925
sg21
I0
sba(iArchitecture
Entity
p21926
(dp21927
g11
(lp21928
sg13
S'com.google.common.collect.ImmutableTable_CustomFieldSerializerBase'
p21929
sg15
(lp21930
sg17
(lp21931
sg19
(lp21932
sg21
I0
sba(iArchitecture
Entity
p21933
(dp21934
g11
(lp21935
sg13
S'com.google.common.collect.Interner'
p21936
sg15
(lp21937
sg17
(lp21938
sg19
(lp21939
sg21
I0
sba(iArchitecture
Entity
p21940
(dp21941
g11
(lp21942
sg13
S'com.google.common.collect.Interners'
p21943
sg15
(lp21944
sg17
(lp21945
sg19
(lp21946
sg21
I0
sba(iArchitecture
Entity
p21947
(dp21948
g11
(lp21949
sg13
S'com.google.common.collect.Interners$1'
p21950
sg15
(lp21951
sg17
(lp21952
sg19
(lp21953
sg21
I0
sba(iArchitecture
Entity
p21954
(dp21955
g11
(lp21956
sg13
S'com.google.common.collect.Interners$InternerFunction'
p21957
sg15
(lp21958
sg17
(lp21959
sg19
(lp21960
sg21
I0
sba(iArchitecture
Entity
p21961
(dp21962
g11
(lp21963
sg13
S'com.google.common.collect.Interners$WeakInterner'
p21964
sg15
(lp21965
sg17
(lp21966
sg19
(lp21967
sg21
I0
sba(iArchitecture
Entity
p21968
(dp21969
g11
(lp21970
sg13
S'com.google.common.collect.Interners$WeakInterner$Dummy'
p21971
sg15
(lp21972
sg17
(lp21973
sg19
(lp21974
sg21
I0
sba(iArchitecture
Entity
p21975
(dp21976
g11
(lp21977
sg13
S'com.google.common.collect.Iterables'
p21978
sg15
(lp21979
sg17
(lp21980
sg19
(lp21981
sg21
I0
sba(iArchitecture
Entity
p21982
(dp21983
g11
(lp21984
sg13
S'com.google.common.collect.Iterables$1'
p21985
sg15
(lp21986
sg17
(lp21987
sg19
(lp21988
sg21
I0
sba(iArchitecture
Entity
p21989
(dp21990
g11
(lp21991
sg13
S'com.google.common.collect.Iterables$10'
p21992
sg15
(lp21993
sg17
(lp21994
sg19
(lp21995
sg21
I0
sba(iArchitecture
Entity
p21996
(dp21997
g11
(lp21998
sg13
S'com.google.common.collect.Iterables$10$1'
p21999
sg15
(lp22000
sg17
(lp22001
sg19
(lp22002
sg21
I0
sba(iArchitecture
Entity
p22003
(dp22004
g11
(lp22005
sg13
S'com.google.common.collect.Iterables$11'
p22006
sg15
(lp22007
sg17
(lp22008
sg19
(lp22009
sg21
I0
sba(iArchitecture
Entity
p22010
(dp22011
g11
(lp22012
sg13
S'com.google.common.collect.Iterables$12'
p22013
sg15
(lp22014
sg17
(lp22015
sg19
(lp22016
sg21
I0
sba(iArchitecture
Entity
p22017
(dp22018
g11
(lp22019
sg13
S'com.google.common.collect.Iterables$13'
p22020
sg15
(lp22021
sg17
(lp22022
sg19
(lp22023
sg21
I0
sba(iArchitecture
Entity
p22024
(dp22025
g11
(lp22026
sg13
S'com.google.common.collect.Iterables$14'
p22027
sg15
(lp22028
sg17
(lp22029
sg19
(lp22030
sg21
I0
sba(iArchitecture
Entity
p22031
(dp22032
g11
(lp22033
sg13
S'com.google.common.collect.Iterables$15'
p22034
sg15
(lp22035
sg17
(lp22036
sg19
(lp22037
sg21
I0
sba(iArchitecture
Entity
p22038
(dp22039
g11
(lp22040
sg13
S'com.google.common.collect.Iterables$2'
p22041
sg15
(lp22042
sg17
(lp22043
sg19
(lp22044
sg21
I0
sba(iArchitecture
Entity
p22045
(dp22046
g11
(lp22047
sg13
S'com.google.common.collect.Iterables$3'
p22048
sg15
(lp22049
sg17
(lp22050
sg19
(lp22051
sg21
I0
sba(iArchitecture
Entity
p22052
(dp22053
g11
(lp22054
sg13
S'com.google.common.collect.Iterables$4'
p22055
sg15
(lp22056
sg17
(lp22057
sg19
(lp22058
sg21
I0
sba(iArchitecture
Entity
p22059
(dp22060
g11
(lp22061
sg13
S'com.google.common.collect.Iterables$5'
p22062
sg15
(lp22063
sg17
(lp22064
sg19
(lp22065
sg21
I0
sba(iArchitecture
Entity
p22066
(dp22067
g11
(lp22068
sg13
S'com.google.common.collect.Iterables$6'
p22069
sg15
(lp22070
sg17
(lp22071
sg19
(lp22072
sg21
I0
sba(iArchitecture
Entity
p22073
(dp22074
g11
(lp22075
sg13
S'com.google.common.collect.Iterables$7'
p22076
sg15
(lp22077
sg17
(lp22078
sg19
(lp22079
sg21
I0
sba(iArchitecture
Entity
p22080
(dp22081
g11
(lp22082
sg13
S'com.google.common.collect.Iterables$8'
p22083
sg15
(lp22084
sg17
(lp22085
sg19
(lp22086
sg21
I0
sba(iArchitecture
Entity
p22087
(dp22088
g11
(lp22089
sg13
S'com.google.common.collect.Iterables$9'
p22090
sg15
(lp22091
sg17
(lp22092
sg19
(lp22093
sg21
I0
sba(iArchitecture
Entity
p22094
(dp22095
g11
(lp22096
sg13
S'com.google.common.collect.Iterables$UnmodifiableIterable'
p22097
sg15
(lp22098
sg17
(lp22099
sg19
(lp22100
sg21
I0
sba(iArchitecture
Entity
p22101
(dp22102
g11
(lp22103
sg13
S'com.google.common.collect.Iterators'
p22104
sg15
(lp22105
sg17
(lp22106
sg19
(lp22107
sg21
I0
sba(iArchitecture
Entity
p22108
(dp22109
g11
(lp22110
sg13
S'com.google.common.collect.Iterators$1'
p22111
sg15
(lp22112
sg17
(lp22113
sg19
(lp22114
sg21
I0
sba(iArchitecture
Entity
p22115
(dp22116
g11
(lp22117
sg13
S'com.google.common.collect.Iterators$10'
p22118
sg15
(lp22119
sg17
(lp22120
sg19
(lp22121
sg21
I0
sba(iArchitecture
Entity
p22122
(dp22123
g11
(lp22124
sg13
S'com.google.common.collect.Iterators$11'
p22125
sg15
(lp22126
sg17
(lp22127
sg19
(lp22128
sg21
I0
sba(iArchitecture
Entity
p22129
(dp22130
g11
(lp22131
sg13
S'com.google.common.collect.Iterators$12'
p22132
sg15
(lp22133
sg17
(lp22134
sg19
(lp22135
sg21
I0
sba(iArchitecture
Entity
p22136
(dp22137
g11
(lp22138
sg13
S'com.google.common.collect.Iterators$13'
p22139
sg15
(lp22140
sg17
(lp22141
sg19
(lp22142
sg21
I0
sba(iArchitecture
Entity
p22143
(dp22144
g11
(lp22145
sg13
S'com.google.common.collect.Iterators$14'
p22146
sg15
(lp22147
sg17
(lp22148
sg19
(lp22149
sg21
I0
sba(iArchitecture
Entity
p22150
(dp22151
g11
(lp22152
sg13
S'com.google.common.collect.Iterators$2'
p22153
sg15
(lp22154
sg17
(lp22155
sg19
(lp22156
sg21
I0
sba(iArchitecture
Entity
p22157
(dp22158
g11
(lp22159
sg13
S'com.google.common.collect.Iterators$3'
p22160
sg15
(lp22161
sg17
(lp22162
sg19
(lp22163
sg21
I0
sba(iArchitecture
Entity
p22164
(dp22165
g11
(lp22166
sg13
S'com.google.common.collect.Iterators$4'
p22167
sg15
(lp22168
sg17
(lp22169
sg19
(lp22170
sg21
I0
sba(iArchitecture
Entity
p22171
(dp22172
g11
(lp22173
sg13
S'com.google.common.collect.Iterators$5'
p22174
sg15
(lp22175
sg17
(lp22176
sg19
(lp22177
sg21
I0
sba(iArchitecture
Entity
p22178
(dp22179
g11
(lp22180
sg13
S'com.google.common.collect.Iterators$6'
p22181
sg15
(lp22182
sg17
(lp22183
sg19
(lp22184
sg21
I0
sba(iArchitecture
Entity
p22185
(dp22186
g11
(lp22187
sg13
S'com.google.common.collect.Iterators$7'
p22188
sg15
(lp22189
sg17
(lp22190
sg19
(lp22191
sg21
I0
sba(iArchitecture
Entity
p22192
(dp22193
g11
(lp22194
sg13
S'com.google.common.collect.Iterators$8'
p22195
sg15
(lp22196
sg17
(lp22197
sg19
(lp22198
sg21
I0
sba(iArchitecture
Entity
p22199
(dp22200
g11
(lp22201
sg13
S'com.google.common.collect.Iterators$9'
p22202
sg15
(lp22203
sg17
(lp22204
sg19
(lp22205
sg21
I0
sba(iArchitecture
Entity
p22206
(dp22207
g11
(lp22208
sg13
S'com.google.common.collect.Iterators$MergingIterator'
p22209
sg15
(lp22210
sg17
(lp22211
sg19
(lp22212
sg21
I0
sba(iArchitecture
Entity
p22213
(dp22214
g11
(lp22215
sg13
S'com.google.common.collect.Iterators$MergingIterator$1'
p22216
sg15
(lp22217
sg17
(lp22218
sg19
(lp22219
sg21
I0
sba(iArchitecture
Entity
p22220
(dp22221
g11
(lp22222
sg13
S'com.google.common.collect.Iterators$PeekingImpl'
p22223
sg15
(lp22224
sg17
(lp22225
sg19
(lp22226
sg21
I0
sba(iArchitecture
Entity
p22227
(dp22228
g11
(lp22229
sg13
S'com.google.common.collect.LexicographicalOrdering'
p22230
sg15
(lp22231
sg17
(lp22232
sg19
(lp22233
sg21
I0
sba(iArchitecture
Entity
p22234
(dp22235
g11
(lp22236
sg13
S'com.google.common.collect.LexicographicalOrdering_CustomFieldSerializer'
p22237
sg15
(lp22238
sg17
(lp22239
sg19
(lp22240
sg21
I0
sba(iArchitecture
Entity
p22241
(dp22242
g11
(lp22243
sg13
S'com.google.common.collect.LinkedHashMultimap'
p22244
sg15
(lp22245
sg17
(lp22246
sg19
(lp22247
sg21
I0
sba(iArchitecture
Entity
p22248
(dp22249
g11
(lp22250
sg13
S'com.google.common.collect.LinkedHashMultimap$1'
p22251
sg15
(lp22252
sg17
(lp22253
sg19
(lp22254
sg21
I0
sba(iArchitecture
Entity
p22255
(dp22256
g11
(lp22257
sg13
S'com.google.common.collect.LinkedHashMultimap$ValueEntry'
p22258
sg15
(lp22259
sg17
(lp22260
sg19
(lp22261
sg21
I0
sba(iArchitecture
Entity
p22262
(dp22263
g11
(lp22264
sg13
S'com.google.common.collect.LinkedHashMultimap$ValueSet'
p22265
sg15
(lp22266
sg17
(lp22267
sg19
(lp22268
sg21
I0
sba(iArchitecture
Entity
p22269
(dp22270
g11
(lp22271
sg13
S'com.google.common.collect.LinkedHashMultimap$ValueSet$1'
p22272
sg15
(lp22273
sg17
(lp22274
sg19
(lp22275
sg21
I0
sba(iArchitecture
Entity
p22276
(dp22277
g11
(lp22278
sg13
S'com.google.common.collect.LinkedHashMultimap$ValueSetLink'
p22279
sg15
(lp22280
sg17
(lp22281
sg19
(lp22282
sg21
I0
sba(iArchitecture
Entity
p22283
(dp22284
g11
(lp22285
sg13
S'com.google.common.collect.LinkedHashMultimap_CustomFieldSerializer'
p22286
sg15
(lp22287
sg17
(lp22288
sg19
(lp22289
sg21
I0
sba(iArchitecture
Entity
p22290
(dp22291
g11
(lp22292
sg13
S'com.google.common.collect.LinkedHashMultiset'
p22293
sg15
(lp22294
sg17
(lp22295
sg19
(lp22296
sg21
I0
sba(iArchitecture
Entity
p22297
(dp22298
g11
(lp22299
sg13
S'com.google.common.collect.LinkedHashMultiset_CustomFieldSerializer'
p22300
sg15
(lp22301
sg17
(lp22302
sg19
(lp22303
sg21
I0
sba(iArchitecture
Entity
p22304
(dp22305
g11
(lp22306
sg13
S'com.google.common.collect.LinkedListMultimap'
p22307
sg15
(lp22308
sg17
(lp22309
sg19
(lp22310
sg21
I0
sba(iArchitecture
Entity
p22311
(dp22312
g11
(lp22313
sg13
S'com.google.common.collect.LinkedListMultimap$1'
p22314
sg15
(lp22315
sg17
(lp22316
sg19
(lp22317
sg21
I0
sba(iArchitecture
Entity
p22318
(dp22319
g11
(lp22320
sg13
S'com.google.common.collect.LinkedListMultimap$1EntriesImpl'
p22321
sg15
(lp22322
sg17
(lp22323
sg19
(lp22324
sg21
I0
sba(iArchitecture
Entity
p22325
(dp22326
g11
(lp22327
sg13
S'com.google.common.collect.LinkedListMultimap$1KeySetImpl'
p22328
sg15
(lp22329
sg17
(lp22330
sg19
(lp22331
sg21
I0
sba(iArchitecture
Entity
p22332
(dp22333
g11
(lp22334
sg13
S'com.google.common.collect.LinkedListMultimap$1ValuesImpl'
p22335
sg15
(lp22336
sg17
(lp22337
sg19
(lp22338
sg21
I0
sba(iArchitecture
Entity
p22339
(dp22340
g11
(lp22341
sg13
S'com.google.common.collect.LinkedListMultimap$1ValuesImpl$1'
p22342
sg15
(lp22343
sg17
(lp22344
sg19
(lp22345
sg21
I0
sba(iArchitecture
Entity
p22346
(dp22347
g11
(lp22348
sg13
S'com.google.common.collect.LinkedListMultimap$DistinctKeyIterator'
p22349
sg15
(lp22350
sg17
(lp22351
sg19
(lp22352
sg21
I0
sba(iArchitecture
Entity
p22353
(dp22354
g11
(lp22355
sg13
S'com.google.common.collect.LinkedListMultimap$KeyList'
p22356
sg15
(lp22357
sg17
(lp22358
sg19
(lp22359
sg21
I0
sba(iArchitecture
Entity
p22360
(dp22361
g11
(lp22362
sg13
S'com.google.common.collect.LinkedListMultimap$Node'
p22363
sg15
(lp22364
sg17
(lp22365
sg19
(lp22366
sg21
I0
sba(iArchitecture
Entity
p22367
(dp22368
g11
(lp22369
sg13
S'com.google.common.collect.LinkedListMultimap$NodeIterator'
p22370
sg15
(lp22371
sg17
(lp22372
sg19
(lp22373
sg21
I0
sba(iArchitecture
Entity
p22374
(dp22375
g11
(lp22376
sg13
S'com.google.common.collect.LinkedListMultimap$ValueForKeyIterator'
p22377
sg15
(lp22378
sg17
(lp22379
sg19
(lp22380
sg21
I0
sba(iArchitecture
Entity
p22381
(dp22382
g11
(lp22383
sg13
S'com.google.common.collect.LinkedListMultimap_CustomFieldSerializer'
p22384
sg15
(lp22385
sg17
(lp22386
sg19
(lp22387
sg21
I0
sba(iArchitecture
Entity
p22388
(dp22389
g11
(lp22390
sg13
S'com.google.common.collect.Lists'
p22391
sg15
(lp22392
sg17
(lp22393
sg19
(lp22394
sg21
I0
sba(iArchitecture
Entity
p22395
(dp22396
g11
(lp22397
sg13
S'com.google.common.collect.Lists$1'
p22398
sg15
(lp22399
sg17
(lp22400
sg19
(lp22401
sg21
I0
sba(iArchitecture
Entity
p22402
(dp22403
g11
(lp22404
sg13
S'com.google.common.collect.Lists$2'
p22405
sg15
(lp22406
sg17
(lp22407
sg19
(lp22408
sg21
I0
sba(iArchitecture
Entity
p22409
(dp22410
g11
(lp22411
sg13
S'com.google.common.collect.Lists$AbstractListWrapper'
p22412
sg15
(lp22413
sg17
(lp22414
sg19
(lp22415
sg21
I0
sba(iArchitecture
Entity
p22416
(dp22417
g11
(lp22418
sg13
S'com.google.common.collect.Lists$CharSequenceAsList'
p22419
sg15
(lp22420
sg17
(lp22421
sg19
(lp22422
sg21
I0
sba(iArchitecture
Entity
p22423
(dp22424
g11
(lp22425
sg13
S'com.google.common.collect.Lists$OnePlusArrayList'
p22426
sg15
(lp22427
sg17
(lp22428
sg19
(lp22429
sg21
I0
sba(iArchitecture
Entity
p22430
(dp22431
g11
(lp22432
sg13
S'com.google.common.collect.Lists$Partition'
p22433
sg15
(lp22434
sg17
(lp22435
sg19
(lp22436
sg21
I0
sba(iArchitecture
Entity
p22437
(dp22438
g11
(lp22439
sg13
S'com.google.common.collect.Lists$RandomAccessListWrapper'
p22440
sg15
(lp22441
sg17
(lp22442
sg19
(lp22443
sg21
I0
sba(iArchitecture
Entity
p22444
(dp22445
g11
(lp22446
sg13
S'com.google.common.collect.Lists$RandomAccessPartition'
p22447
sg15
(lp22448
sg17
(lp22449
sg19
(lp22450
sg21
I0
sba(iArchitecture
Entity
p22451
(dp22452
g11
(lp22453
sg13
S'com.google.common.collect.Lists$RandomAccessReverseList'
p22454
sg15
(lp22455
sg17
(lp22456
sg19
(lp22457
sg21
I0
sba(iArchitecture
Entity
p22458
(dp22459
g11
(lp22460
sg13
S'com.google.common.collect.Lists$ReverseList'
p22461
sg15
(lp22462
sg17
(lp22463
sg19
(lp22464
sg21
I0
sba(iArchitecture
Entity
p22465
(dp22466
g11
(lp22467
sg13
S'com.google.common.collect.Lists$ReverseList$1'
p22468
sg15
(lp22469
sg17
(lp22470
sg19
(lp22471
sg21
I0
sba(iArchitecture
Entity
p22472
(dp22473
g11
(lp22474
sg13
S'com.google.common.collect.Lists$StringAsImmutableList'
p22475
sg15
(lp22476
sg17
(lp22477
sg19
(lp22478
sg21
I0
sba(iArchitecture
Entity
p22479
(dp22480
g11
(lp22481
sg13
S'com.google.common.collect.Lists$TransformingRandomAccessList'
p22482
sg15
(lp22483
sg17
(lp22484
sg19
(lp22485
sg21
I0
sba(iArchitecture
Entity
p22486
(dp22487
g11
(lp22488
sg13
S'com.google.common.collect.Lists$TransformingRandomAccessList$1'
p22489
sg15
(lp22490
sg17
(lp22491
sg19
(lp22492
sg21
I0
sba(iArchitecture
Entity
p22493
(dp22494
g11
(lp22495
sg13
S'com.google.common.collect.Lists$TransformingSequentialList'
p22496
sg15
(lp22497
sg17
(lp22498
sg19
(lp22499
sg21
I0
sba(iArchitecture
Entity
p22500
(dp22501
g11
(lp22502
sg13
S'com.google.common.collect.Lists$TransformingSequentialList$1'
p22503
sg15
(lp22504
sg17
(lp22505
sg19
(lp22506
sg21
I0
sba(iArchitecture
Entity
p22507
(dp22508
g11
(lp22509
sg13
S'com.google.common.collect.Lists$TwoPlusArrayList'
p22510
sg15
(lp22511
sg17
(lp22512
sg19
(lp22513
sg21
I0
sba(iArchitecture
Entity
p22514
(dp22515
g11
(lp22516
sg13
S'com.google.common.collect.MapConstraint'
p22517
sg15
(lp22518
sg17
(lp22519
sg19
(lp22520
sg21
I0
sba(iArchitecture
Entity
p22521
(dp22522
g11
(lp22523
sg13
S'com.google.common.collect.MapConstraints'
p22524
sg15
(lp22525
sg17
(lp22526
sg19
(lp22527
sg21
I0
sba(iArchitecture
Entity
p22528
(dp22529
g11
(lp22530
sg13
S'com.google.common.collect.MapConstraints$1'
p22531
sg15
(lp22532
sg17
(lp22533
sg19
(lp22534
sg21
I0
sba(iArchitecture
Entity
p22535
(dp22536
g11
(lp22537
sg13
S'com.google.common.collect.MapConstraints$2'
p22538
sg15
(lp22539
sg17
(lp22540
sg19
(lp22541
sg21
I0
sba(iArchitecture
Entity
p22542
(dp22543
g11
(lp22544
sg13
S'com.google.common.collect.MapConstraints$2$1'
p22545
sg15
(lp22546
sg17
(lp22547
sg19
(lp22548
sg21
I0
sba(iArchitecture
Entity
p22549
(dp22550
g11
(lp22551
sg13
S'com.google.common.collect.MapConstraints$ConstrainedAsMapEntries'
p22552
sg15
(lp22553
sg17
(lp22554
sg19
(lp22555
sg21
I0
sba(iArchitecture
Entity
p22556
(dp22557
g11
(lp22558
sg13
S'com.google.common.collect.MapConstraints$ConstrainedAsMapEntries$1'
p22559
sg15
(lp22560
sg17
(lp22561
sg19
(lp22562
sg21
I0
sba(iArchitecture
Entity
p22563
(dp22564
g11
(lp22565
sg13
S'com.google.common.collect.MapConstraints$ConstrainedAsMapValues'
p22566
sg15
(lp22567
sg17
(lp22568
sg19
(lp22569
sg21
I0
sba(iArchitecture
Entity
p22570
(dp22571
g11
(lp22572
sg13
S'com.google.common.collect.MapConstraints$ConstrainedAsMapValues$1'
p22573
sg15
(lp22574
sg17
(lp22575
sg19
(lp22576
sg21
I0
sba(iArchitecture
Entity
p22577
(dp22578
g11
(lp22579
sg13
S'com.google.common.collect.MapConstraints$ConstrainedBiMap'
p22580
sg15
(lp22581
sg17
(lp22582
sg19
(lp22583
sg21
I0
sba(iArchitecture
Entity
p22584
(dp22585
g11
(lp22586
sg13
S'com.google.common.collect.MapConstraints$ConstrainedEntries'
p22587
sg15
(lp22588
sg17
(lp22589
sg19
(lp22590
sg21
I0
sba(iArchitecture
Entity
p22591
(dp22592
g11
(lp22593
sg13
S'com.google.common.collect.MapConstraints$ConstrainedEntries$1'
p22594
sg15
(lp22595
sg17
(lp22596
sg19
(lp22597
sg21
I0
sba(iArchitecture
Entity
p22598
(dp22599
g11
(lp22600
sg13
S'com.google.common.collect.MapConstraints$ConstrainedEntrySet'
p22601
sg15
(lp22602
sg17
(lp22603
sg19
(lp22604
sg21
I0
sba(iArchitecture
Entity
p22605
(dp22606
g11
(lp22607
sg13
S'com.google.common.collect.MapConstraints$ConstrainedListMultimap'
p22608
sg15
(lp22609
sg17
(lp22610
sg19
(lp22611
sg21
I0
sba(iArchitecture
Entity
p22612
(dp22613
g11
(lp22614
sg13
S'com.google.common.collect.MapConstraints$ConstrainedMap'
p22615
sg15
(lp22616
sg17
(lp22617
sg19
(lp22618
sg21
I0
sba(iArchitecture
Entity
p22619
(dp22620
g11
(lp22621
sg13
S'com.google.common.collect.MapConstraints$ConstrainedMultimap'
p22622
sg15
(lp22623
sg17
(lp22624
sg19
(lp22625
sg21
I0
sba(iArchitecture
Entity
p22626
(dp22627
g11
(lp22628
sg13
S'com.google.common.collect.MapConstraints$ConstrainedMultimap$1'
p22629
sg15
(lp22630
sg17
(lp22631
sg19
(lp22632
sg21
I0
sba(iArchitecture
Entity
p22633
(dp22634
g11
(lp22635
sg13
S'com.google.common.collect.MapConstraints$ConstrainedMultimap$1AsMap'
p22636
sg15
(lp22637
sg17
(lp22638
sg19
(lp22639
sg21
I0
sba(iArchitecture
Entity
p22640
(dp22641
g11
(lp22642
sg13
S'com.google.common.collect.MapConstraints$ConstrainedSetMultimap'
p22643
sg15
(lp22644
sg17
(lp22645
sg19
(lp22646
sg21
I0
sba(iArchitecture
Entity
p22647
(dp22648
g11
(lp22649
sg13
S'com.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap'
p22650
sg15
(lp22651
sg17
(lp22652
sg19
(lp22653
sg21
I0
sba(iArchitecture
Entity
p22654
(dp22655
g11
(lp22656
sg13
S'com.google.common.collect.MapConstraints$InverseConstraint'
p22657
sg15
(lp22658
sg17
(lp22659
sg19
(lp22660
sg21
I0
sba(iArchitecture
Entity
p22661
(dp22662
g11
(lp22663
sg13
S'com.google.common.collect.MapConstraints$NotNullMapConstraint'
p22664
sg15
(lp22665
sg17
(lp22666
sg19
(lp22667
sg21
I0
sba(iArchitecture
Entity
p22668
(dp22669
g11
(lp22670
sg13
S'com.google.common.collect.MapDifference'
p22671
sg15
(lp22672
sg17
(lp22673
sg19
(lp22674
sg21
I0
sba(iArchitecture
Entity
p22675
(dp22676
g11
(lp22677
sg13
S'com.google.common.collect.MapDifference$ValueDifference'
p22678
sg15
(lp22679
sg17
(lp22680
sg19
(lp22681
sg21
I0
sba(iArchitecture
Entity
p22682
(dp22683
g11
(lp22684
sg13
S'com.google.common.collect.MapMaker'
p22685
sg15
(lp22686
sg17
(lp22687
sg19
(lp22688
sg21
I0
sba(iArchitecture
Entity
p22689
(dp22690
g11
(lp22691
sg13
S'com.google.common.collect.MapMaker$1'
p22692
sg15
(lp22693
sg17
(lp22694
sg19
(lp22695
sg21
I0
sba(iArchitecture
Entity
p22696
(dp22697
g11
(lp22698
sg13
S'com.google.common.collect.MapMaker$ComputingMapAdapter'
p22699
sg15
(lp22700
sg17
(lp22701
sg19
(lp22702
sg21
I0
sba(iArchitecture
Entity
p22703
(dp22704
g11
(lp22705
sg13
S'com.google.common.collect.MapMaker$NullComputingConcurrentMap'
p22706
sg15
(lp22707
sg17
(lp22708
sg19
(lp22709
sg21
I0
sba(iArchitecture
Entity
p22710
(dp22711
g11
(lp22712
sg13
S'com.google.common.collect.MapMaker$NullConcurrentMap'
p22713
sg15
(lp22714
sg17
(lp22715
sg19
(lp22716
sg21
I0
sba(iArchitecture
Entity
p22717
(dp22718
g11
(lp22719
sg13
S'com.google.common.collect.MapMaker$RemovalCause'
p22720
sg15
(lp22721
sg17
(lp22722
sg19
(lp22723
sg21
I0
sba(iArchitecture
Entity
p22724
(dp22725
g11
(lp22726
sg13
S'com.google.common.collect.MapMaker$RemovalCause$1'
p22727
sg15
(lp22728
sg17
(lp22729
sg19
(lp22730
sg21
I0
sba(iArchitecture
Entity
p22731
(dp22732
g11
(lp22733
sg13
S'com.google.common.collect.MapMaker$RemovalCause$2'
p22734
sg15
(lp22735
sg17
(lp22736
sg19
(lp22737
sg21
I0
sba(iArchitecture
Entity
p22738
(dp22739
g11
(lp22740
sg13
S'com.google.common.collect.MapMaker$RemovalCause$3'
p22741
sg15
(lp22742
sg17
(lp22743
sg19
(lp22744
sg21
I0
sba(iArchitecture
Entity
p22745
(dp22746
g11
(lp22747
sg13
S'com.google.common.collect.MapMaker$RemovalCause$4'
p22748
sg15
(lp22749
sg17
(lp22750
sg19
(lp22751
sg21
I0
sba(iArchitecture
Entity
p22752
(dp22753
g11
(lp22754
sg13
S'com.google.common.collect.MapMaker$RemovalCause$5'
p22755
sg15
(lp22756
sg17
(lp22757
sg19
(lp22758
sg21
I0
sba(iArchitecture
Entity
p22759
(dp22760
g11
(lp22761
sg13
S'com.google.common.collect.MapMaker$RemovalListener'
p22762
sg15
(lp22763
sg17
(lp22764
sg19
(lp22765
sg21
I0
sba(iArchitecture
Entity
p22766
(dp22767
g11
(lp22768
sg13
S'com.google.common.collect.MapMaker$RemovalNotification'
p22769
sg15
(lp22770
sg17
(lp22771
sg19
(lp22772
sg21
I0
sba(iArchitecture
Entity
p22773
(dp22774
g11
(lp22775
sg13
S'com.google.common.collect.MapMakerInternalMap'
p22776
sg15
(lp22777
sg17
(lp22778
sg19
(lp22779
sg21
I0
sba(iArchitecture
Entity
p22780
(dp22781
g11
(lp22782
sg13
S'com.google.common.collect.MapMakerInternalMap$1'
p22783
sg15
(lp22784
sg17
(lp22785
sg19
(lp22786
sg21
I0
sba(iArchitecture
Entity
p22787
(dp22788
g11
(lp22789
sg13
S'com.google.common.collect.MapMakerInternalMap$2'
p22790
sg15
(lp22791
sg17
(lp22792
sg19
(lp22793
sg21
I0
sba(iArchitecture
Entity
p22794
(dp22795
g11
(lp22796
sg13
S'com.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry'
p22797
sg15
(lp22798
sg17
(lp22799
sg19
(lp22800
sg21
I0
sba(iArchitecture
Entity
p22801
(dp22802
g11
(lp22803
sg13
S'com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy'
p22804
sg15
(lp22805
sg17
(lp22806
sg19
(lp22807
sg21
I0
sba(iArchitecture
Entity
p22808
(dp22809
g11
(lp22810
sg13
S'com.google.common.collect.MapMakerInternalMap$CleanupMapTask'
p22811
sg15
(lp22812
sg17
(lp22813
sg19
(lp22814
sg21
I0
sba(iArchitecture
Entity
p22815
(dp22816
g11
(lp22817
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryFactory'
p22818
sg15
(lp22819
sg17
(lp22820
sg19
(lp22821
sg21
I0
sba(iArchitecture
Entity
p22822
(dp22823
g11
(lp22824
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryFactory$1'
p22825
sg15
(lp22826
sg17
(lp22827
sg19
(lp22828
sg21
I0
sba(iArchitecture
Entity
p22829
(dp22830
g11
(lp22831
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryFactory$2'
p22832
sg15
(lp22833
sg17
(lp22834
sg19
(lp22835
sg21
I0
sba(iArchitecture
Entity
p22836
(dp22837
g11
(lp22838
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryFactory$3'
p22839
sg15
(lp22840
sg17
(lp22841
sg19
(lp22842
sg21
I0
sba(iArchitecture
Entity
p22843
(dp22844
g11
(lp22845
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryFactory$4'
p22846
sg15
(lp22847
sg17
(lp22848
sg19
(lp22849
sg21
I0
sba(iArchitecture
Entity
p22850
(dp22851
g11
(lp22852
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryFactory$5'
p22853
sg15
(lp22854
sg17
(lp22855
sg19
(lp22856
sg21
I0
sba(iArchitecture
Entity
p22857
(dp22858
g11
(lp22859
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryFactory$6'
p22860
sg15
(lp22861
sg17
(lp22862
sg19
(lp22863
sg21
I0
sba(iArchitecture
Entity
p22864
(dp22865
g11
(lp22866
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryFactory$7'
p22867
sg15
(lp22868
sg17
(lp22869
sg19
(lp22870
sg21
I0
sba(iArchitecture
Entity
p22871
(dp22872
g11
(lp22873
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryFactory$8'
p22874
sg15
(lp22875
sg17
(lp22876
sg19
(lp22877
sg21
I0
sba(iArchitecture
Entity
p22878
(dp22879
g11
(lp22880
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryIterator'
p22881
sg15
(lp22882
sg17
(lp22883
sg19
(lp22884
sg21
I0
sba(iArchitecture
Entity
p22885
(dp22886
g11
(lp22887
sg13
S'com.google.common.collect.MapMakerInternalMap$EntrySet'
p22888
sg15
(lp22889
sg17
(lp22890
sg19
(lp22891
sg21
I0
sba(iArchitecture
Entity
p22892
(dp22893
g11
(lp22894
sg13
S'com.google.common.collect.MapMakerInternalMap$EvictionQueue'
p22895
sg15
(lp22896
sg17
(lp22897
sg19
(lp22898
sg21
I0
sba(iArchitecture
Entity
p22899
(dp22900
g11
(lp22901
sg13
S'com.google.common.collect.MapMakerInternalMap$EvictionQueue$1'
p22902
sg15
(lp22903
sg17
(lp22904
sg19
(lp22905
sg21
I0
sba(iArchitecture
Entity
p22906
(dp22907
g11
(lp22908
sg13
S'com.google.common.collect.MapMakerInternalMap$EvictionQueue$2'
p22909
sg15
(lp22910
sg17
(lp22911
sg19
(lp22912
sg21
I0
sba(iArchitecture
Entity
p22913
(dp22914
g11
(lp22915
sg13
S'com.google.common.collect.MapMakerInternalMap$ExpirationQueue'
p22916
sg15
(lp22917
sg17
(lp22918
sg19
(lp22919
sg21
I0
sba(iArchitecture
Entity
p22920
(dp22921
g11
(lp22922
sg13
S'com.google.common.collect.MapMakerInternalMap$ExpirationQueue$1'
p22923
sg15
(lp22924
sg17
(lp22925
sg19
(lp22926
sg21
I0
sba(iArchitecture
Entity
p22927
(dp22928
g11
(lp22929
sg13
S'com.google.common.collect.MapMakerInternalMap$ExpirationQueue$2'
p22930
sg15
(lp22931
sg17
(lp22932
sg19
(lp22933
sg21
I0
sba(iArchitecture
Entity
p22934
(dp22935
g11
(lp22936
sg13
S'com.google.common.collect.MapMakerInternalMap$HashIterator'
p22937
sg15
(lp22938
sg17
(lp22939
sg19
(lp22940
sg21
I0
sba(iArchitecture
Entity
p22941
(dp22942
g11
(lp22943
sg13
S'com.google.common.collect.MapMakerInternalMap$KeyIterator'
p22944
sg15
(lp22945
sg17
(lp22946
sg19
(lp22947
sg21
I0
sba(iArchitecture
Entity
p22948
(dp22949
g11
(lp22950
sg13
S'com.google.common.collect.MapMakerInternalMap$KeySet'
p22951
sg15
(lp22952
sg17
(lp22953
sg19
(lp22954
sg21
I0
sba(iArchitecture
Entity
p22955
(dp22956
g11
(lp22957
sg13
S'com.google.common.collect.MapMakerInternalMap$NullEntry'
p22958
sg15
(lp22959
sg17
(lp22960
sg19
(lp22961
sg21
I0
sba(iArchitecture
Entity
p22962
(dp22963
g11
(lp22964
sg13
S'com.google.common.collect.MapMakerInternalMap$ReferenceEntry'
p22965
sg15
(lp22966
sg17
(lp22967
sg19
(lp22968
sg21
I0
sba(iArchitecture
Entity
p22969
(dp22970
g11
(lp22971
sg13
S'com.google.common.collect.MapMakerInternalMap$SafeToArraySet'
p22972
sg15
(lp22973
sg17
(lp22974
sg19
(lp22975
sg21
I0
sba(iArchitecture
Entity
p22976
(dp22977
g11
(lp22978
sg13
S'com.google.common.collect.MapMakerInternalMap$Segment'
p22979
sg15
(lp22980
sg17
(lp22981
sg19
(lp22982
sg21
I0
sba(iArchitecture
Entity
p22983
(dp22984
g11
(lp22985
sg13
S'com.google.common.collect.MapMakerInternalMap$SerializationProxy'
p22986
sg15
(lp22987
sg17
(lp22988
sg19
(lp22989
sg21
I0
sba(iArchitecture
Entity
p22990
(dp22991
g11
(lp22992
sg13
S'com.google.common.collect.MapMakerInternalMap$SoftEntry'
p22993
sg15
(lp22994
sg17
(lp22995
sg19
(lp22996
sg21
I0
sba(iArchitecture
Entity
p22997
(dp22998
g11
(lp22999
sg13
S'com.google.common.collect.MapMakerInternalMap$SoftEvictableEntry'
p23000
sg15
(lp23001
sg17
(lp23002
sg19
(lp23003
sg21
I0
sba(iArchitecture
Entity
p23004
(dp23005
g11
(lp23006
sg13
S'com.google.common.collect.MapMakerInternalMap$SoftExpirableEntry'
p23007
sg15
(lp23008
sg17
(lp23009
sg19
(lp23010
sg21
I0
sba(iArchitecture
Entity
p23011
(dp23012
g11
(lp23013
sg13
S'com.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry'
p23014
sg15
(lp23015
sg17
(lp23016
sg19
(lp23017
sg21
I0
sba(iArchitecture
Entity
p23018
(dp23019
g11
(lp23020
sg13
S'com.google.common.collect.MapMakerInternalMap$SoftValueReference'
p23021
sg15
(lp23022
sg17
(lp23023
sg19
(lp23024
sg21
I0
sba(iArchitecture
Entity
p23025
(dp23026
g11
(lp23027
sg13
S'com.google.common.collect.MapMakerInternalMap$Strength'
p23028
sg15
(lp23029
sg17
(lp23030
sg19
(lp23031
sg21
I0
sba(iArchitecture
Entity
p23032
(dp23033
g11
(lp23034
sg13
S'com.google.common.collect.MapMakerInternalMap$Strength$1'
p23035
sg15
(lp23036
sg17
(lp23037
sg19
(lp23038
sg21
I0
sba(iArchitecture
Entity
p23039
(dp23040
g11
(lp23041
sg13
S'com.google.common.collect.MapMakerInternalMap$Strength$2'
p23042
sg15
(lp23043
sg17
(lp23044
sg19
(lp23045
sg21
I0
sba(iArchitecture
Entity
p23046
(dp23047
g11
(lp23048
sg13
S'com.google.common.collect.MapMakerInternalMap$Strength$3'
p23049
sg15
(lp23050
sg17
(lp23051
sg19
(lp23052
sg21
I0
sba(iArchitecture
Entity
p23053
(dp23054
g11
(lp23055
sg13
S'com.google.common.collect.MapMakerInternalMap$StrongEntry'
p23056
sg15
(lp23057
sg17
(lp23058
sg19
(lp23059
sg21
I0
sba(iArchitecture
Entity
p23060
(dp23061
g11
(lp23062
sg13
S'com.google.common.collect.MapMakerInternalMap$StrongEvictableEntry'
p23063
sg15
(lp23064
sg17
(lp23065
sg19
(lp23066
sg21
I0
sba(iArchitecture
Entity
p23067
(dp23068
g11
(lp23069
sg13
S'com.google.common.collect.MapMakerInternalMap$StrongExpirableEntry'
p23070
sg15
(lp23071
sg17
(lp23072
sg19
(lp23073
sg21
I0
sba(iArchitecture
Entity
p23074
(dp23075
g11
(lp23076
sg13
S'com.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry'
p23077
sg15
(lp23078
sg17
(lp23079
sg19
(lp23080
sg21
I0
sba(iArchitecture
Entity
p23081
(dp23082
g11
(lp23083
sg13
S'com.google.common.collect.MapMakerInternalMap$StrongValueReference'
p23084
sg15
(lp23085
sg17
(lp23086
sg19
(lp23087
sg21
I0
sba(iArchitecture
Entity
p23088
(dp23089
g11
(lp23090
sg13
S'com.google.common.collect.MapMakerInternalMap$ValueIterator'
p23091
sg15
(lp23092
sg17
(lp23093
sg19
(lp23094
sg21
I0
sba(iArchitecture
Entity
p23095
(dp23096
g11
(lp23097
sg13
S'com.google.common.collect.MapMakerInternalMap$ValueReference'
p23098
sg15
(lp23099
sg17
(lp23100
sg19
(lp23101
sg21
I0
sba(iArchitecture
Entity
p23102
(dp23103
g11
(lp23104
sg13
S'com.google.common.collect.MapMakerInternalMap$Values'
p23105
sg15
(lp23106
sg17
(lp23107
sg19
(lp23108
sg21
I0
sba(iArchitecture
Entity
p23109
(dp23110
g11
(lp23111
sg13
S'com.google.common.collect.MapMakerInternalMap$WeakEntry'
p23112
sg15
(lp23113
sg17
(lp23114
sg19
(lp23115
sg21
I0
sba(iArchitecture
Entity
p23116
(dp23117
g11
(lp23118
sg13
S'com.google.common.collect.MapMakerInternalMap$WeakEvictableEntry'
p23119
sg15
(lp23120
sg17
(lp23121
sg19
(lp23122
sg21
I0
sba(iArchitecture
Entity
p23123
(dp23124
g11
(lp23125
sg13
S'com.google.common.collect.MapMakerInternalMap$WeakExpirableEntry'
p23126
sg15
(lp23127
sg17
(lp23128
sg19
(lp23129
sg21
I0
sba(iArchitecture
Entity
p23130
(dp23131
g11
(lp23132
sg13
S'com.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry'
p23133
sg15
(lp23134
sg17
(lp23135
sg19
(lp23136
sg21
I0
sba(iArchitecture
Entity
p23137
(dp23138
g11
(lp23139
sg13
S'com.google.common.collect.MapMakerInternalMap$WeakValueReference'
p23140
sg15
(lp23141
sg17
(lp23142
sg19
(lp23143
sg21
I0
sba(iArchitecture
Entity
p23144
(dp23145
g11
(lp23146
sg13
S'com.google.common.collect.MapMakerInternalMap$WriteThroughEntry'
p23147
sg15
(lp23148
sg17
(lp23149
sg19
(lp23150
sg21
I0
sba(iArchitecture
Entity
p23151
(dp23152
g11
(lp23153
sg13
S'com.google.common.collect.Maps'
p23154
sg15
(lp23155
sg17
(lp23156
sg19
(lp23157
sg21
I0
sba(iArchitecture
Entity
p23158
(dp23159
g11
(lp23160
sg13
S'com.google.common.collect.Maps$1'
p23161
sg15
(lp23162
sg17
(lp23163
sg19
(lp23164
sg21
I0
sba(iArchitecture
Entity
p23165
(dp23166
g11
(lp23167
sg13
S'com.google.common.collect.Maps$10'
p23168
sg15
(lp23169
sg17
(lp23170
sg19
(lp23171
sg21
I0
sba(iArchitecture
Entity
p23172
(dp23173
g11
(lp23174
sg13
S'com.google.common.collect.Maps$11'
p23175
sg15
(lp23176
sg17
(lp23177
sg19
(lp23178
sg21
I0
sba(iArchitecture
Entity
p23179
(dp23180
g11
(lp23181
sg13
S'com.google.common.collect.Maps$2'
p23182
sg15
(lp23183
sg17
(lp23184
sg19
(lp23185
sg21
I0
sba(iArchitecture
Entity
p23186
(dp23187
g11
(lp23188
sg13
S'com.google.common.collect.Maps$3'
p23189
sg15
(lp23190
sg17
(lp23191
sg19
(lp23192
sg21
I0
sba(iArchitecture
Entity
p23193
(dp23194
g11
(lp23195
sg13
S'com.google.common.collect.Maps$4'
p23196
sg15
(lp23197
sg17
(lp23198
sg19
(lp23199
sg21
I0
sba(iArchitecture
Entity
p23200
(dp23201
g11
(lp23202
sg13
S'com.google.common.collect.Maps$5'
p23203
sg15
(lp23204
sg17
(lp23205
sg19
(lp23206
sg21
I0
sba(iArchitecture
Entity
p23207
(dp23208
g11
(lp23209
sg13
S'com.google.common.collect.Maps$6'
p23210
sg15
(lp23211
sg17
(lp23212
sg19
(lp23213
sg21
I0
sba(iArchitecture
Entity
p23214
(dp23215
g11
(lp23216
sg13
S'com.google.common.collect.Maps$7'
p23217
sg15
(lp23218
sg17
(lp23219
sg19
(lp23220
sg21
I0
sba(iArchitecture
Entity
p23221
(dp23222
g11
(lp23223
sg13
S'com.google.common.collect.Maps$8'
p23224
sg15
(lp23225
sg17
(lp23226
sg19
(lp23227
sg21
I0
sba(iArchitecture
Entity
p23228
(dp23229
g11
(lp23230
sg13
S'com.google.common.collect.Maps$9'
p23231
sg15
(lp23232
sg17
(lp23233
sg19
(lp23234
sg21
I0
sba(iArchitecture
Entity
p23235
(dp23236
g11
(lp23237
sg13
S'com.google.common.collect.Maps$AbstractFilteredMap'
p23238
sg15
(lp23239
sg17
(lp23240
sg19
(lp23241
sg21
I0
sba(iArchitecture
Entity
p23242
(dp23243
g11
(lp23244
sg13
S'com.google.common.collect.Maps$AsMapView'
p23245
sg15
(lp23246
sg17
(lp23247
sg19
(lp23248
sg21
I0
sba(iArchitecture
Entity
p23249
(dp23250
g11
(lp23251
sg13
S'com.google.common.collect.Maps$AsMapView$1EntrySetImpl'
p23252
sg15
(lp23253
sg17
(lp23254
sg19
(lp23255
sg21
I0
sba(iArchitecture
Entity
p23256
(dp23257
g11
(lp23258
sg13
S'com.google.common.collect.Maps$BiMapConverter'
p23259
sg15
(lp23260
sg17
(lp23261
sg19
(lp23262
sg21
I0
sba(iArchitecture
Entity
p23263
(dp23264
g11
(lp23265
sg13
S'com.google.common.collect.Maps$DescendingMap'
p23266
sg15
(lp23267
sg17
(lp23268
sg19
(lp23269
sg21
I0
sba(iArchitecture
Entity
p23270
(dp23271
g11
(lp23272
sg13
S'com.google.common.collect.Maps$DescendingMap$1EntrySetImpl'
p23273
sg15
(lp23274
sg17
(lp23275
sg19
(lp23276
sg21
I0
sba(iArchitecture
Entity
p23277
(dp23278
g11
(lp23279
sg13
S'com.google.common.collect.Maps$EntryFunction'
p23280
sg15
(lp23281
sg17
(lp23282
sg19
(lp23283
sg21
I0
sba(iArchitecture
Entity
p23284
(dp23285
g11
(lp23286
sg13
S'com.google.common.collect.Maps$EntryFunction$1'
p23287
sg15
(lp23288
sg17
(lp23289
sg19
(lp23290
sg21
I0
sba(iArchitecture
Entity
p23291
(dp23292
g11
(lp23293
sg13
S'com.google.common.collect.Maps$EntryFunction$2'
p23294
sg15
(lp23295
sg17
(lp23296
sg19
(lp23297
sg21
I0
sba(iArchitecture
Entity
p23298
(dp23299
g11
(lp23300
sg13
S'com.google.common.collect.Maps$EntrySet'
p23301
sg15
(lp23302
sg17
(lp23303
sg19
(lp23304
sg21
I0
sba(iArchitecture
Entity
p23305
(dp23306
g11
(lp23307
sg13
S'com.google.common.collect.Maps$EntryTransformer'
p23308
sg15
(lp23309
sg17
(lp23310
sg19
(lp23311
sg21
I0
sba(iArchitecture
Entity
p23312
(dp23313
g11
(lp23314
sg13
S'com.google.common.collect.Maps$FilteredEntryBiMap'
p23315
sg15
(lp23316
sg17
(lp23317
sg19
(lp23318
sg21
I0
sba(iArchitecture
Entity
p23319
(dp23320
g11
(lp23321
sg13
S'com.google.common.collect.Maps$FilteredEntryBiMap$1'
p23322
sg15
(lp23323
sg17
(lp23324
sg19
(lp23325
sg21
I0
sba(iArchitecture
Entity
p23326
(dp23327
g11
(lp23328
sg13
S'com.google.common.collect.Maps$FilteredEntryMap'
p23329
sg15
(lp23330
sg17
(lp23331
sg19
(lp23332
sg21
I0
sba(iArchitecture
Entity
p23333
(dp23334
g11
(lp23335
sg13
S'com.google.common.collect.Maps$FilteredEntryMap$EntrySet'
p23336
sg15
(lp23337
sg17
(lp23338
sg19
(lp23339
sg21
I0
sba(iArchitecture
Entity
p23340
(dp23341
g11
(lp23342
sg13
S'com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1'
p23343
sg15
(lp23344
sg17
(lp23345
sg19
(lp23346
sg21
I0
sba(iArchitecture
Entity
p23347
(dp23348
g11
(lp23349
sg13
S'com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1'
p23350
sg15
(lp23351
sg17
(lp23352
sg19
(lp23353
sg21
I0
sba(iArchitecture
Entity
p23354
(dp23355
g11
(lp23356
sg13
S'com.google.common.collect.Maps$FilteredEntryMap$KeySet'
p23357
sg15
(lp23358
sg17
(lp23359
sg19
(lp23360
sg21
I0
sba(iArchitecture
Entity
p23361
(dp23362
g11
(lp23363
sg13
S'com.google.common.collect.Maps$FilteredEntryNavigableMap'
p23364
sg15
(lp23365
sg17
(lp23366
sg19
(lp23367
sg21
I0
sba(iArchitecture
Entity
p23368
(dp23369
g11
(lp23370
sg13
S'com.google.common.collect.Maps$FilteredEntryNavigableMap$1'
p23371
sg15
(lp23372
sg17
(lp23373
sg19
(lp23374
sg21
I0
sba(iArchitecture
Entity
p23375
(dp23376
g11
(lp23377
sg13
S'com.google.common.collect.Maps$FilteredEntrySortedMap'
p23378
sg15
(lp23379
sg17
(lp23380
sg19
(lp23381
sg21
I0
sba(iArchitecture
Entity
p23382
(dp23383
g11
(lp23384
sg13
S'com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet'
p23385
sg15
(lp23386
sg17
(lp23387
sg19
(lp23388
sg21
I0
sba(iArchitecture
Entity
p23389
(dp23390
g11
(lp23391
sg13
S'com.google.common.collect.Maps$FilteredKeyMap'
p23392
sg15
(lp23393
sg17
(lp23394
sg19
(lp23395
sg21
I0
sba(iArchitecture
Entity
p23396
(dp23397
g11
(lp23398
sg13
S'com.google.common.collect.Maps$FilteredMapValues'
p23399
sg15
(lp23400
sg17
(lp23401
sg19
(lp23402
sg21
I0
sba(iArchitecture
Entity
p23403
(dp23404
g11
(lp23405
sg13
S'com.google.common.collect.Maps$IteratorBasedAbstractMap'
p23406
sg15
(lp23407
sg17
(lp23408
sg19
(lp23409
sg21
I0
sba(iArchitecture
Entity
p23410
(dp23411
g11
(lp23412
sg13
S'com.google.common.collect.Maps$IteratorBasedAbstractMap$1'
p23413
sg15
(lp23414
sg17
(lp23415
sg19
(lp23416
sg21
I0
sba(iArchitecture
Entity
p23417
(dp23418
g11
(lp23419
sg13
S'com.google.common.collect.Maps$KeySet'
p23420
sg15
(lp23421
sg17
(lp23422
sg19
(lp23423
sg21
I0
sba(iArchitecture
Entity
p23424
(dp23425
g11
(lp23426
sg13
S'com.google.common.collect.Maps$MapDifferenceImpl'
p23427
sg15
(lp23428
sg17
(lp23429
sg19
(lp23430
sg21
I0
sba(iArchitecture
Entity
p23431
(dp23432
g11
(lp23433
sg13
S'com.google.common.collect.Maps$NavigableAsMapView'
p23434
sg15
(lp23435
sg17
(lp23436
sg19
(lp23437
sg21
I0
sba(iArchitecture
Entity
p23438
(dp23439
g11
(lp23440
sg13
S'com.google.common.collect.Maps$NavigableKeySet'
p23441
sg15
(lp23442
sg17
(lp23443
sg19
(lp23444
sg21
I0
sba(iArchitecture
Entity
p23445
(dp23446
g11
(lp23447
sg13
S'com.google.common.collect.Maps$SortedAsMapView'
p23448
sg15
(lp23449
sg17
(lp23450
sg19
(lp23451
sg21
I0
sba(iArchitecture
Entity
p23452
(dp23453
g11
(lp23454
sg13
S'com.google.common.collect.Maps$SortedKeySet'
p23455
sg15
(lp23456
sg17
(lp23457
sg19
(lp23458
sg21
I0
sba(iArchitecture
Entity
p23459
(dp23460
g11
(lp23461
sg13
S'com.google.common.collect.Maps$SortedMapDifferenceImpl'
p23462
sg15
(lp23463
sg17
(lp23464
sg19
(lp23465
sg21
I0
sba(iArchitecture
Entity
p23466
(dp23467
g11
(lp23468
sg13
S'com.google.common.collect.Maps$TransformedEntriesMap'
p23469
sg15
(lp23470
sg17
(lp23471
sg19
(lp23472
sg21
I0
sba(iArchitecture
Entity
p23473
(dp23474
g11
(lp23475
sg13
S'com.google.common.collect.Maps$TransformedEntriesNavigableMap'
p23476
sg15
(lp23477
sg17
(lp23478
sg19
(lp23479
sg21
I0
sba(iArchitecture
Entity
p23480
(dp23481
g11
(lp23482
sg13
S'com.google.common.collect.Maps$TransformedEntriesSortedMap'
p23483
sg15
(lp23484
sg17
(lp23485
sg19
(lp23486
sg21
I0
sba(iArchitecture
Entity
p23487
(dp23488
g11
(lp23489
sg13
S'com.google.common.collect.Maps$UnmodifiableBiMap'
p23490
sg15
(lp23491
sg17
(lp23492
sg19
(lp23493
sg21
I0
sba(iArchitecture
Entity
p23494
(dp23495
g11
(lp23496
sg13
S'com.google.common.collect.Maps$UnmodifiableEntries'
p23497
sg15
(lp23498
sg17
(lp23499
sg19
(lp23500
sg21
I0
sba(iArchitecture
Entity
p23501
(dp23502
g11
(lp23503
sg13
S'com.google.common.collect.Maps$UnmodifiableEntrySet'
p23504
sg15
(lp23505
sg17
(lp23506
sg19
(lp23507
sg21
I0
sba(iArchitecture
Entity
p23508
(dp23509
g11
(lp23510
sg13
S'com.google.common.collect.Maps$UnmodifiableNavigableMap'
p23511
sg15
(lp23512
sg17
(lp23513
sg19
(lp23514
sg21
I0
sba(iArchitecture
Entity
p23515
(dp23516
g11
(lp23517
sg13
S'com.google.common.collect.Maps$ValueDifferenceImpl'
p23518
sg15
(lp23519
sg17
(lp23520
sg19
(lp23521
sg21
I0
sba(iArchitecture
Entity
p23522
(dp23523
g11
(lp23524
sg13
S'com.google.common.collect.Maps$Values'
p23525
sg15
(lp23526
sg17
(lp23527
sg19
(lp23528
sg21
I0
sba(iArchitecture
Entity
p23529
(dp23530
g11
(lp23531
sg13
S'com.google.common.collect.Maps$ViewCachingAbstractMap'
p23532
sg15
(lp23533
sg17
(lp23534
sg19
(lp23535
sg21
I0
sba(iArchitecture
Entity
p23536
(dp23537
g11
(lp23538
sg13
S'com.google.common.collect.MinMaxPriorityQueue'
p23539
sg15
(lp23540
sg17
(lp23541
sg19
(lp23542
sg21
I0
sba(iArchitecture
Entity
p23543
(dp23544
g11
(lp23545
sg13
S'com.google.common.collect.MinMaxPriorityQueue$1'
p23546
sg15
(lp23547
sg17
(lp23548
sg19
(lp23549
sg21
I0
sba(iArchitecture
Entity
p23550
(dp23551
g11
(lp23552
sg13
S'com.google.common.collect.MinMaxPriorityQueue$Builder'
p23553
sg15
(lp23554
sg17
(lp23555
sg19
(lp23556
sg21
I0
sba(iArchitecture
Entity
p23557
(dp23558
g11
(lp23559
sg13
S'com.google.common.collect.MinMaxPriorityQueue$Heap'
p23560
sg15
(lp23561
sg17
(lp23562
sg19
(lp23563
sg21
I0
sba(iArchitecture
Entity
p23564
(dp23565
g11
(lp23566
sg13
S'com.google.common.collect.MinMaxPriorityQueue$MoveDesc'
p23567
sg15
(lp23568
sg17
(lp23569
sg19
(lp23570
sg21
I0
sba(iArchitecture
Entity
p23571
(dp23572
g11
(lp23573
sg13
S'com.google.common.collect.MinMaxPriorityQueue$QueueIterator'
p23574
sg15
(lp23575
sg17
(lp23576
sg19
(lp23577
sg21
I0
sba(iArchitecture
Entity
p23578
(dp23579
g11
(lp23580
sg13
S'com.google.common.collect.MultimapBuilder'
p23581
sg15
(lp23582
sg17
(lp23583
sg19
(lp23584
sg21
I0
sba(iArchitecture
Entity
p23585
(dp23586
g11
(lp23587
sg13
S'com.google.common.collect.MultimapBuilder$1'
p23588
sg15
(lp23589
sg17
(lp23590
sg19
(lp23591
sg21
I0
sba(iArchitecture
Entity
p23592
(dp23593
g11
(lp23594
sg13
S'com.google.common.collect.MultimapBuilder$2'
p23595
sg15
(lp23596
sg17
(lp23597
sg19
(lp23598
sg21
I0
sba(iArchitecture
Entity
p23599
(dp23600
g11
(lp23601
sg13
S'com.google.common.collect.MultimapBuilder$3'
p23602
sg15
(lp23603
sg17
(lp23604
sg19
(lp23605
sg21
I0
sba(iArchitecture
Entity
p23606
(dp23607
g11
(lp23608
sg13
S'com.google.common.collect.MultimapBuilder$4'
p23609
sg15
(lp23610
sg17
(lp23611
sg19
(lp23612
sg21
I0
sba(iArchitecture
Entity
p23613
(dp23614
g11
(lp23615
sg13
S'com.google.common.collect.MultimapBuilder$ArrayListSupplier'
p23616
sg15
(lp23617
sg17
(lp23618
sg19
(lp23619
sg21
I0
sba(iArchitecture
Entity
p23620
(dp23621
g11
(lp23622
sg13
S'com.google.common.collect.MultimapBuilder$EnumSetSupplier'
p23623
sg15
(lp23624
sg17
(lp23625
sg19
(lp23626
sg21
I0
sba(iArchitecture
Entity
p23627
(dp23628
g11
(lp23629
sg13
S'com.google.common.collect.MultimapBuilder$HashSetSupplier'
p23630
sg15
(lp23631
sg17
(lp23632
sg19
(lp23633
sg21
I0
sba(iArchitecture
Entity
p23634
(dp23635
g11
(lp23636
sg13
S'com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier'
p23637
sg15
(lp23638
sg17
(lp23639
sg19
(lp23640
sg21
I0
sba(iArchitecture
Entity
p23641
(dp23642
g11
(lp23643
sg13
S'com.google.common.collect.MultimapBuilder$LinkedListSupplier'
p23644
sg15
(lp23645
sg17
(lp23646
sg19
(lp23647
sg21
I0
sba(iArchitecture
Entity
p23648
(dp23649
g11
(lp23650
sg13
S'com.google.common.collect.MultimapBuilder$ListMultimapBuilder'
p23651
sg15
(lp23652
sg17
(lp23653
sg19
(lp23654
sg21
I0
sba(iArchitecture
Entity
p23655
(dp23656
g11
(lp23657
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys'
p23658
sg15
(lp23659
sg17
(lp23660
sg19
(lp23661
sg21
I0
sba(iArchitecture
Entity
p23662
(dp23663
g11
(lp23664
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1'
p23665
sg15
(lp23666
sg17
(lp23667
sg19
(lp23668
sg21
I0
sba(iArchitecture
Entity
p23669
(dp23670
g11
(lp23671
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2'
p23672
sg15
(lp23673
sg17
(lp23674
sg19
(lp23675
sg21
I0
sba(iArchitecture
Entity
p23676
(dp23677
g11
(lp23678
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3'
p23679
sg15
(lp23680
sg17
(lp23681
sg19
(lp23682
sg21
I0
sba(iArchitecture
Entity
p23683
(dp23684
g11
(lp23685
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4'
p23686
sg15
(lp23687
sg17
(lp23688
sg19
(lp23689
sg21
I0
sba(iArchitecture
Entity
p23690
(dp23691
g11
(lp23692
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5'
p23693
sg15
(lp23694
sg17
(lp23695
sg19
(lp23696
sg21
I0
sba(iArchitecture
Entity
p23697
(dp23698
g11
(lp23699
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6'
p23700
sg15
(lp23701
sg17
(lp23702
sg19
(lp23703
sg21
I0
sba(iArchitecture
Entity
p23704
(dp23705
g11
(lp23706
sg13
S'com.google.common.collect.MultimapBuilder$SetMultimapBuilder'
p23707
sg15
(lp23708
sg17
(lp23709
sg19
(lp23710
sg21
I0
sba(iArchitecture
Entity
p23711
(dp23712
g11
(lp23713
sg13
S'com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder'
p23714
sg15
(lp23715
sg17
(lp23716
sg19
(lp23717
sg21
I0
sba(iArchitecture
Entity
p23718
(dp23719
g11
(lp23720
sg13
S'com.google.common.collect.MultimapBuilder$TreeSetSupplier'
p23721
sg15
(lp23722
sg17
(lp23723
sg19
(lp23724
sg21
I0
sba(iArchitecture
Entity
p23725
(dp23726
g11
(lp23727
sg13
S'com.google.common.collect.Multimap_CustomFieldSerializerBase'
p23728
sg15
(lp23729
sg17
(lp23730
sg19
(lp23731
sg21
I0
sba(iArchitecture
Entity
p23732
(dp23733
g11
(lp23734
sg13
S'com.google.common.collect.Multimaps'
p23735
sg15
(lp23736
sg17
(lp23737
sg19
(lp23738
sg21
I0
sba(iArchitecture
Entity
p23739
(dp23740
g11
(lp23741
sg13
S'com.google.common.collect.Multimaps$AsMap'
p23742
sg15
(lp23743
sg17
(lp23744
sg19
(lp23745
sg21
I0
sba(iArchitecture
Entity
p23746
(dp23747
g11
(lp23748
sg13
S'com.google.common.collect.Multimaps$AsMap$EntrySet'
p23749
sg15
(lp23750
sg17
(lp23751
sg19
(lp23752
sg21
I0
sba(iArchitecture
Entity
p23753
(dp23754
g11
(lp23755
sg13
S'com.google.common.collect.Multimaps$AsMap$EntrySet$1'
p23756
sg15
(lp23757
sg17
(lp23758
sg19
(lp23759
sg21
I0
sba(iArchitecture
Entity
p23760
(dp23761
g11
(lp23762
sg13
S'com.google.common.collect.Multimaps$CustomListMultimap'
p23763
sg15
(lp23764
sg17
(lp23765
sg19
(lp23766
sg21
I0
sba(iArchitecture
Entity
p23767
(dp23768
g11
(lp23769
sg13
S'com.google.common.collect.Multimaps$CustomMultimap'
p23770
sg15
(lp23771
sg17
(lp23772
sg19
(lp23773
sg21
I0
sba(iArchitecture
Entity
p23774
(dp23775
g11
(lp23776
sg13
S'com.google.common.collect.Multimaps$CustomSetMultimap'
p23777
sg15
(lp23778
sg17
(lp23779
sg19
(lp23780
sg21
I0
sba(iArchitecture
Entity
p23781
(dp23782
g11
(lp23783
sg13
S'com.google.common.collect.Multimaps$CustomSortedSetMultimap'
p23784
sg15
(lp23785
sg17
(lp23786
sg19
(lp23787
sg21
I0
sba(iArchitecture
Entity
p23788
(dp23789
g11
(lp23790
sg13
S'com.google.common.collect.Multimaps$Entries'
p23791
sg15
(lp23792
sg17
(lp23793
sg19
(lp23794
sg21
I0
sba(iArchitecture
Entity
p23795
(dp23796
g11
(lp23797
sg13
S'com.google.common.collect.Multimaps$Keys'
p23798
sg15
(lp23799
sg17
(lp23800
sg19
(lp23801
sg21
I0
sba(iArchitecture
Entity
p23802
(dp23803
g11
(lp23804
sg13
S'com.google.common.collect.Multimaps$Keys$1'
p23805
sg15
(lp23806
sg17
(lp23807
sg19
(lp23808
sg21
I0
sba(iArchitecture
Entity
p23809
(dp23810
g11
(lp23811
sg13
S'com.google.common.collect.Multimaps$Keys$1$1'
p23812
sg15
(lp23813
sg17
(lp23814
sg19
(lp23815
sg21
I0
sba(iArchitecture
Entity
p23816
(dp23817
g11
(lp23818
sg13
S'com.google.common.collect.Multimaps$Keys$KeysEntrySet'
p23819
sg15
(lp23820
sg17
(lp23821
sg19
(lp23822
sg21
I0
sba(iArchitecture
Entity
p23823
(dp23824
g11
(lp23825
sg13
S'com.google.common.collect.Multimaps$MapMultimap'
p23826
sg15
(lp23827
sg17
(lp23828
sg19
(lp23829
sg21
I0
sba(iArchitecture
Entity
p23830
(dp23831
g11
(lp23832
sg13
S'com.google.common.collect.Multimaps$MapMultimap$1'
p23833
sg15
(lp23834
sg17
(lp23835
sg19
(lp23836
sg21
I0
sba(iArchitecture
Entity
p23837
(dp23838
g11
(lp23839
sg13
S'com.google.common.collect.Multimaps$MapMultimap$1$1'
p23840
sg15
(lp23841
sg17
(lp23842
sg19
(lp23843
sg21
I0
sba(iArchitecture
Entity
p23844
(dp23845
g11
(lp23846
sg13
S'com.google.common.collect.Multimaps$TransformedEntriesListMultimap'
p23847
sg15
(lp23848
sg17
(lp23849
sg19
(lp23850
sg21
I0
sba(iArchitecture
Entity
p23851
(dp23852
g11
(lp23853
sg13
S'com.google.common.collect.Multimaps$TransformedEntriesMultimap'
p23854
sg15
(lp23855
sg17
(lp23856
sg19
(lp23857
sg21
I0
sba(iArchitecture
Entity
p23858
(dp23859
g11
(lp23860
sg13
S'com.google.common.collect.Multimaps$TransformedEntriesMultimap$1'
p23861
sg15
(lp23862
sg17
(lp23863
sg19
(lp23864
sg21
I0
sba(iArchitecture
Entity
p23865
(dp23866
g11
(lp23867
sg13
S'com.google.common.collect.Multimaps$UnmodifiableListMultimap'
p23868
sg15
(lp23869
sg17
(lp23870
sg19
(lp23871
sg21
I0
sba(iArchitecture
Entity
p23872
(dp23873
g11
(lp23874
sg13
S'com.google.common.collect.Multimaps$UnmodifiableMultimap'
p23875
sg15
(lp23876
sg17
(lp23877
sg19
(lp23878
sg21
I0
sba(iArchitecture
Entity
p23879
(dp23880
g11
(lp23881
sg13
S'com.google.common.collect.Multimaps$UnmodifiableMultimap$1'
p23882
sg15
(lp23883
sg17
(lp23884
sg19
(lp23885
sg21
I0
sba(iArchitecture
Entity
p23886
(dp23887
g11
(lp23888
sg13
S'com.google.common.collect.Multimaps$UnmodifiableSetMultimap'
p23889
sg15
(lp23890
sg17
(lp23891
sg19
(lp23892
sg21
I0
sba(iArchitecture
Entity
p23893
(dp23894
g11
(lp23895
sg13
S'com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap'
p23896
sg15
(lp23897
sg17
(lp23898
sg19
(lp23899
sg21
I0
sba(iArchitecture
Entity
p23900
(dp23901
g11
(lp23902
sg13
S'com.google.common.collect.Multiset_CustomFieldSerializerBase'
p23903
sg15
(lp23904
sg17
(lp23905
sg19
(lp23906
sg21
I0
sba(iArchitecture
Entity
p23907
(dp23908
g11
(lp23909
sg13
S'com.google.common.collect.Multisets'
p23910
sg15
(lp23911
sg17
(lp23912
sg19
(lp23913
sg21
I0
sba(iArchitecture
Entity
p23914
(dp23915
g11
(lp23916
sg13
S'com.google.common.collect.Multisets$1'
p23917
sg15
(lp23918
sg17
(lp23919
sg19
(lp23920
sg21
I0
sba(iArchitecture
Entity
p23921
(dp23922
g11
(lp23923
sg13
S'com.google.common.collect.Multisets$1$1'
p23924
sg15
(lp23925
sg17
(lp23926
sg19
(lp23927
sg21
I0
sba(iArchitecture
Entity
p23928
(dp23929
g11
(lp23930
sg13
S'com.google.common.collect.Multisets$2'
p23931
sg15
(lp23932
sg17
(lp23933
sg19
(lp23934
sg21
I0
sba(iArchitecture
Entity
p23935
(dp23936
g11
(lp23937
sg13
S'com.google.common.collect.Multisets$2$1'
p23938
sg15
(lp23939
sg17
(lp23940
sg19
(lp23941
sg21
I0
sba(iArchitecture
Entity
p23942
(dp23943
g11
(lp23944
sg13
S'com.google.common.collect.Multisets$3'
p23945
sg15
(lp23946
sg17
(lp23947
sg19
(lp23948
sg21
I0
sba(iArchitecture
Entity
p23949
(dp23950
g11
(lp23951
sg13
S'com.google.common.collect.Multisets$3$1'
p23952
sg15
(lp23953
sg17
(lp23954
sg19
(lp23955
sg21
I0
sba(iArchitecture
Entity
p23956
(dp23957
g11
(lp23958
sg13
S'com.google.common.collect.Multisets$4'
p23959
sg15
(lp23960
sg17
(lp23961
sg19
(lp23962
sg21
I0
sba(iArchitecture
Entity
p23963
(dp23964
g11
(lp23965
sg13
S'com.google.common.collect.Multisets$4$1'
p23966
sg15
(lp23967
sg17
(lp23968
sg19
(lp23969
sg21
I0
sba(iArchitecture
Entity
p23970
(dp23971
g11
(lp23972
sg13
S'com.google.common.collect.Multisets$5'
p23973
sg15
(lp23974
sg17
(lp23975
sg19
(lp23976
sg21
I0
sba(iArchitecture
Entity
p23977
(dp23978
g11
(lp23979
sg13
S'com.google.common.collect.Multisets$AbstractEntry'
p23980
sg15
(lp23981
sg17
(lp23982
sg19
(lp23983
sg21
I0
sba(iArchitecture
Entity
p23984
(dp23985
g11
(lp23986
sg13
S'com.google.common.collect.Multisets$ElementSet'
p23987
sg15
(lp23988
sg17
(lp23989
sg19
(lp23990
sg21
I0
sba(iArchitecture
Entity
p23991
(dp23992
g11
(lp23993
sg13
S'com.google.common.collect.Multisets$ElementSet$1'
p23994
sg15
(lp23995
sg17
(lp23996
sg19
(lp23997
sg21
I0
sba(iArchitecture
Entity
p23998
(dp23999
g11
(lp24000
sg13
S'com.google.common.collect.Multisets$EntrySet'
p24001
sg15
(lp24002
sg17
(lp24003
sg19
(lp24004
sg21
I0
sba(iArchitecture
Entity
p24005
(dp24006
g11
(lp24007
sg13
S'com.google.common.collect.Multisets$FilteredMultiset'
p24008
sg15
(lp24009
sg17
(lp24010
sg19
(lp24011
sg21
I0
sba(iArchitecture
Entity
p24012
(dp24013
g11
(lp24014
sg13
S'com.google.common.collect.Multisets$FilteredMultiset$1'
p24015
sg15
(lp24016
sg17
(lp24017
sg19
(lp24018
sg21
I0
sba(iArchitecture
Entity
p24019
(dp24020
g11
(lp24021
sg13
S'com.google.common.collect.Multisets$ImmutableEntry'
p24022
sg15
(lp24023
sg17
(lp24024
sg19
(lp24025
sg21
I0
sba(iArchitecture
Entity
p24026
(dp24027
g11
(lp24028
sg13
S'com.google.common.collect.Multisets$MultisetIteratorImpl'
p24029
sg15
(lp24030
sg17
(lp24031
sg19
(lp24032
sg21
I0
sba(iArchitecture
Entity
p24033
(dp24034
g11
(lp24035
sg13
S'com.google.common.collect.Multisets$UnmodifiableMultiset'
p24036
sg15
(lp24037
sg17
(lp24038
sg19
(lp24039
sg21
I0
sba(iArchitecture
Entity
p24040
(dp24041
g11
(lp24042
sg13
S'com.google.common.collect.MutableClassToInstanceMap'
p24043
sg15
(lp24044
sg17
(lp24045
sg19
(lp24046
sg21
I0
sba(iArchitecture
Entity
p24047
(dp24048
g11
(lp24049
sg13
S'com.google.common.collect.MutableClassToInstanceMap$1'
p24050
sg15
(lp24051
sg17
(lp24052
sg19
(lp24053
sg21
I0
sba(iArchitecture
Entity
p24054
(dp24055
g11
(lp24056
sg13
S'com.google.common.collect.NaturalOrdering'
p24057
sg15
(lp24058
sg17
(lp24059
sg19
(lp24060
sg21
I0
sba(iArchitecture
Entity
p24061
(dp24062
g11
(lp24063
sg13
S'com.google.common.collect.NaturalOrdering_CustomFieldSerializer'
p24064
sg15
(lp24065
sg17
(lp24066
sg19
(lp24067
sg21
I0
sba(iArchitecture
Entity
p24068
(dp24069
g11
(lp24070
sg13
S'com.google.common.collect.NullsFirstOrdering'
p24071
sg15
(lp24072
sg17
(lp24073
sg19
(lp24074
sg21
I0
sba(iArchitecture
Entity
p24075
(dp24076
g11
(lp24077
sg13
S'com.google.common.collect.NullsFirstOrdering_CustomFieldSerializer'
p24078
sg15
(lp24079
sg17
(lp24080
sg19
(lp24081
sg21
I0
sba(iArchitecture
Entity
p24082
(dp24083
g11
(lp24084
sg13
S'com.google.common.collect.NullsLastOrdering'
p24085
sg15
(lp24086
sg17
(lp24087
sg19
(lp24088
sg21
I0
sba(iArchitecture
Entity
p24089
(dp24090
g11
(lp24091
sg13
S'com.google.common.collect.NullsLastOrdering_CustomFieldSerializer'
p24092
sg15
(lp24093
sg17
(lp24094
sg19
(lp24095
sg21
I0
sba(iArchitecture
Entity
p24096
(dp24097
g11
(lp24098
V2525
p24099
asg13
S'com.google.common.collect.Ordering'
p24100
sg15
(lp24101
VThe [snapshot Javadoc of Ordering#explicit(java.util.List)](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/Ordering.html#explicit%28java.util.List%29)  contains the sentnece:\u000a\u000a> The returned comparator throws **an ClassCastException** when it receives an input parameter that isn't among the provided values.\u000a\u000ainstead of\u000a\u000a> The returned comparator throws **a ClassCastException** when it receives an input parameter that isn't among the provided values.\u000a
p24102
asg17
(lp24103
(lp24104
I2
aasg19
(lp24105
VTypo in the javadoc of Ordering's explicit(List<T>) method
p24106
asg21
I0
sba(iArchitecture
Entity
p24107
(dp24108
g11
(lp24109
g24099
asg13
S'com.google.common.collect.Ordering$ArbitraryOrdering'
p24110
sg15
(lp24111
VThe [snapshot Javadoc of Ordering#explicit(java.util.List)](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/Ordering.html#explicit%28java.util.List%29)  contains the sentnece:\u000a\u000a> The returned comparator throws **an ClassCastException** when it receives an input parameter that isn't among the provided values.\u000a\u000ainstead of\u000a\u000a> The returned comparator throws **a ClassCastException** when it receives an input parameter that isn't among the provided values.\u000a
p24112
asg17
(lp24113
g24104
asg19
(lp24114
g24106
asg21
I0
sba(iArchitecture
Entity
p24115
(dp24116
g11
(lp24117
g24099
asg13
S'com.google.common.collect.Ordering$ArbitraryOrdering$1'
p24118
sg15
(lp24119
VThe [snapshot Javadoc of Ordering#explicit(java.util.List)](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/Ordering.html#explicit%28java.util.List%29)  contains the sentnece:\u000a\u000a> The returned comparator throws **an ClassCastException** when it receives an input parameter that isn't among the provided values.\u000a\u000ainstead of\u000a\u000a> The returned comparator throws **a ClassCastException** when it receives an input parameter that isn't among the provided values.\u000a
p24120
asg17
(lp24121
g24104
asg19
(lp24122
g24106
asg21
I0
sba(iArchitecture
Entity
p24123
(dp24124
g11
(lp24125
g24099
asg13
S'com.google.common.collect.Ordering$ArbitraryOrderingHolder'
p24126
sg15
(lp24127
VThe [snapshot Javadoc of Ordering#explicit(java.util.List)](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/Ordering.html#explicit%28java.util.List%29)  contains the sentnece:\u000a\u000a> The returned comparator throws **an ClassCastException** when it receives an input parameter that isn't among the provided values.\u000a\u000ainstead of\u000a\u000a> The returned comparator throws **a ClassCastException** when it receives an input parameter that isn't among the provided values.\u000a
p24128
asg17
(lp24129
g24104
asg19
(lp24130
g24106
asg21
I0
sba(iArchitecture
Entity
p24131
(dp24132
g11
(lp24133
g24099
asg13
S'com.google.common.collect.Ordering$IncomparableValueException'
p24134
sg15
(lp24135
VThe [snapshot Javadoc of Ordering#explicit(java.util.List)](http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/Ordering.html#explicit%28java.util.List%29)  contains the sentnece:\u000a\u000a> The returned comparator throws **an ClassCastException** when it receives an input parameter that isn't among the provided values.\u000a\u000ainstead of\u000a\u000a> The returned comparator throws **a ClassCastException** when it receives an input parameter that isn't among the provided values.\u000a
p24136
asg17
(lp24137
g24104
asg19
(lp24138
g24106
asg21
I0
sba(iArchitecture
Entity
p24139
(dp24140
g11
(lp24141
sg13
S'com.google.common.collect.PeekingIterator'
p24142
sg15
(lp24143
sg17
(lp24144
sg19
(lp24145
sg21
I0
sba(iArchitecture
Entity
p24146
(dp24147
g11
(lp24148
sg13
S'com.google.common.collect.Platform'
p24149
sg15
(lp24150
sg17
(lp24151
sg19
(lp24152
sg21
I0
sba(iArchitecture
Entity
p24153
(dp24154
g11
(lp24155
V2376
p24156
ag24156
ag24156
ag24156
asg13
S'com.google.common.collect.Range'
p24157
sg15
(lp24158
V`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24159
aV`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24160
aV`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24161
aV`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24162
asg17
(lp24163
(lp24164
I1
aag24164
ag24164
ag24164
asg19
(lp24165
VConsider replacing unicode character in Range.toString()
p24166
ag24166
ag24166
ag24166
asg21
I0
sba(iArchitecture
Entity
p24167
(dp24168
g11
(lp24169
g24156
ag24156
ag24156
ag24156
asg13
S'com.google.common.collect.Range$1'
p24170
sg15
(lp24171
V`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24172
aV`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24173
aV`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24174
aV`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24175
asg17
(lp24176
g24164
ag24164
ag24164
ag24164
asg19
(lp24177
g24166
ag24166
ag24166
ag24166
asg21
I0
sba(iArchitecture
Entity
p24178
(dp24179
g11
(lp24180
g24156
ag24156
ag24156
ag24156
asg13
S'com.google.common.collect.Range$2'
p24181
sg15
(lp24182
V`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24183
aV`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24184
aV`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24185
aV`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24186
asg17
(lp24187
g24164
ag24164
ag24164
ag24164
asg19
(lp24188
g24166
ag24166
ag24166
ag24166
asg21
I0
sba(iArchitecture
Entity
p24189
(dp24190
g11
(lp24191
g24156
ag24156
ag24156
ag24156
asg13
S'com.google.common.collect.Range$3'
p24192
sg15
(lp24193
V`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24194
aV`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24195
aV`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24196
aV`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24197
asg17
(lp24198
g24164
ag24164
ag24164
ag24164
asg19
(lp24199
g24166
ag24166
ag24166
ag24166
asg21
I0
sba(iArchitecture
Entity
p24200
(dp24201
g11
(lp24202
g24156
ag24156
ag24156
ag24156
asg13
S'com.google.common.collect.Range$RangeLexOrdering'
p24203
sg15
(lp24204
V`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24205
aV`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24206
aV`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24207
aV`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24208
asg17
(lp24209
g24164
ag24164
ag24164
ag24164
asg19
(lp24210
g24166
ag24166
ag24166
ag24166
asg21
I0
sba(iArchitecture
Entity
p24211
(dp24212
g11
(lp24213
g24156
asg13
S'com.google.common.collect.RangeMap'
p24214
sg15
(lp24215
V`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24216
asg17
(lp24217
g24164
asg19
(lp24218
g24166
asg21
I0
sba(iArchitecture
Entity
p24219
(dp24220
g11
(lp24221
g24156
asg13
S'com.google.common.collect.RangeSet'
p24222
sg15
(lp24223
V`Range.toString()` returns `U+2025` which is not supported by the default terminal under Windows, and most IDEs unless you explicitly change the font. If you read through https://issues.apache.org/jira/browse/SUREFIRE-1220 you will understand the insane hoops that developers have to jump through to get this to work.\u000a\u000aConsider replacing this unicode character by `..` or `-` or `,` ASCII characters.\u000a
p24224
asg17
(lp24225
g24164
asg19
(lp24226
g24166
asg21
I0
sba(iArchitecture
Entity
p24227
(dp24228
g11
(lp24229
sg13
S'com.google.common.collect.RegularContiguousSet'
p24230
sg15
(lp24231
sg17
(lp24232
sg19
(lp24233
sg21
I0
sba(iArchitecture
Entity
p24234
(dp24235
g11
(lp24236
sg13
S'com.google.common.collect.RegularContiguousSet$1'
p24237
sg15
(lp24238
sg17
(lp24239
sg19
(lp24240
sg21
I0
sba(iArchitecture
Entity
p24241
(dp24242
g11
(lp24243
sg13
S'com.google.common.collect.RegularContiguousSet$2'
p24244
sg15
(lp24245
sg17
(lp24246
sg19
(lp24247
sg21
I0
sba(iArchitecture
Entity
p24248
(dp24249
g11
(lp24250
sg13
S'com.google.common.collect.RegularContiguousSet$SerializedForm'
p24251
sg15
(lp24252
sg17
(lp24253
sg19
(lp24254
sg21
I0
sba(iArchitecture
Entity
p24255
(dp24256
g11
(lp24257
sg13
S'com.google.common.collect.RegularImmutableAsList_CustomFieldSerializer'
p24258
sg15
(lp24259
sg17
(lp24260
sg19
(lp24261
sg21
I0
sba(iArchitecture
Entity
p24262
(dp24263
g11
(lp24264
sg13
S'com.google.common.collect.RegularImmutableBiMap'
p24265
sg15
(lp24266
sg17
(lp24267
sg19
(lp24268
sg21
I0
sba(iArchitecture
Entity
p24269
(dp24270
g11
(lp24271
sg13
S'com.google.common.collect.RegularImmutableBiMap$1'
p24272
sg15
(lp24273
sg17
(lp24274
sg19
(lp24275
sg21
I0
sba(iArchitecture
Entity
p24276
(dp24277
g11
(lp24278
sg13
S'com.google.common.collect.RegularImmutableBiMap$Inverse'
p24279
sg15
(lp24280
sg17
(lp24281
sg19
(lp24282
sg21
I0
sba(iArchitecture
Entity
p24283
(dp24284
g11
(lp24285
sg13
S'com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet'
p24286
sg15
(lp24287
sg17
(lp24288
sg19
(lp24289
sg21
I0
sba(iArchitecture
Entity
p24290
(dp24291
g11
(lp24292
sg13
S'com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1'
p24293
sg15
(lp24294
sg17
(lp24295
sg19
(lp24296
sg21
I0
sba(iArchitecture
Entity
p24297
(dp24298
g11
(lp24299
sg13
S'com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm'
p24300
sg15
(lp24301
sg17
(lp24302
sg19
(lp24303
sg21
I0
sba(iArchitecture
Entity
p24304
(dp24305
g11
(lp24306
sg13
S'com.google.common.collect.RegularImmutableBiMap_CustomFieldSerializer'
p24307
sg15
(lp24308
sg17
(lp24309
sg19
(lp24310
sg21
I0
sba(iArchitecture
Entity
p24311
(dp24312
g11
(lp24313
sg13
S'com.google.common.collect.RegularImmutableList'
p24314
sg15
(lp24315
sg17
(lp24316
sg19
(lp24317
sg21
I0
sba(iArchitecture
Entity
p24318
(dp24319
g11
(lp24320
sg13
S'com.google.common.collect.RegularImmutableList_CustomFieldSerializer'
p24321
sg15
(lp24322
sg17
(lp24323
sg19
(lp24324
sg21
I0
sba(iArchitecture
Entity
p24325
(dp24326
g11
(lp24327
sg13
S'com.google.common.collect.RegularImmutableMap_CustomFieldSerializer'
p24328
sg15
(lp24329
sg17
(lp24330
sg19
(lp24331
sg21
I0
sba(iArchitecture
Entity
p24332
(dp24333
g11
(lp24334
sg13
S'com.google.common.collect.RegularImmutableMultiset'
p24335
sg15
(lp24336
sg17
(lp24337
sg19
(lp24338
sg21
I0
sba(iArchitecture
Entity
p24339
(dp24340
g11
(lp24341
sg13
S'com.google.common.collect.RegularImmutableMultiset$1'
p24342
sg15
(lp24343
sg17
(lp24344
sg19
(lp24345
sg21
I0
sba(iArchitecture
Entity
p24346
(dp24347
g11
(lp24348
sg13
S'com.google.common.collect.RegularImmutableMultiset$ElementSet'
p24349
sg15
(lp24350
sg17
(lp24351
sg19
(lp24352
sg21
I0
sba(iArchitecture
Entity
p24353
(dp24354
g11
(lp24355
sg13
S'com.google.common.collect.RegularImmutableMultiset$NonTerminalEntry'
p24356
sg15
(lp24357
sg17
(lp24358
sg19
(lp24359
sg21
I0
sba(iArchitecture
Entity
p24360
(dp24361
g11
(lp24362
sg13
S'com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer'
p24363
sg15
(lp24364
sg17
(lp24365
sg19
(lp24366
sg21
I0
sba(iArchitecture
Entity
p24367
(dp24368
g11
(lp24369
sg13
S'com.google.common.collect.RegularImmutableSet'
p24370
sg15
(lp24371
sg17
(lp24372
sg19
(lp24373
sg21
I0
sba(iArchitecture
Entity
p24374
(dp24375
g11
(lp24376
sg13
S'com.google.common.collect.RegularImmutableSet_CustomFieldSerializer'
p24377
sg15
(lp24378
sg17
(lp24379
sg19
(lp24380
sg21
I0
sba(iArchitecture
Entity
p24381
(dp24382
g11
(lp24383
sg13
S'com.google.common.collect.RegularImmutableSortedMultiset'
p24384
sg15
(lp24385
sg17
(lp24386
sg19
(lp24387
sg21
I0
sba(iArchitecture
Entity
p24388
(dp24389
g11
(lp24390
sg13
S'com.google.common.collect.RegularImmutableSortedSet'
p24391
sg15
(lp24392
sg17
(lp24393
sg19
(lp24394
sg21
I0
sba(iArchitecture
Entity
p24395
(dp24396
g11
(lp24397
sg13
S'com.google.common.collect.RegularImmutableSortedSet_CustomFieldSerializer'
p24398
sg15
(lp24399
sg17
(lp24400
sg19
(lp24401
sg21
I0
sba(iArchitecture
Entity
p24402
(dp24403
g11
(lp24404
sg13
S'com.google.common.collect.RegularImmutableTable'
p24405
sg15
(lp24406
sg17
(lp24407
sg19
(lp24408
sg21
I0
sba(iArchitecture
Entity
p24409
(dp24410
g11
(lp24411
sg13
S'com.google.common.collect.RegularImmutableTable$1'
p24412
sg15
(lp24413
sg17
(lp24414
sg19
(lp24415
sg21
I0
sba(iArchitecture
Entity
p24416
(dp24417
g11
(lp24418
sg13
S'com.google.common.collect.RegularImmutableTable$CellSet'
p24419
sg15
(lp24420
sg17
(lp24421
sg19
(lp24422
sg21
I0
sba(iArchitecture
Entity
p24423
(dp24424
g11
(lp24425
sg13
S'com.google.common.collect.RegularImmutableTable$Values'
p24426
sg15
(lp24427
sg17
(lp24428
sg19
(lp24429
sg21
I0
sba(iArchitecture
Entity
p24430
(dp24431
g11
(lp24432
sg13
S'com.google.common.collect.ReverseNaturalOrdering'
p24433
sg15
(lp24434
sg17
(lp24435
sg19
(lp24436
sg21
I0
sba(iArchitecture
Entity
p24437
(dp24438
g11
(lp24439
sg13
S'com.google.common.collect.ReverseNaturalOrdering_CustomFieldSerializer'
p24440
sg15
(lp24441
sg17
(lp24442
sg19
(lp24443
sg21
I0
sba(iArchitecture
Entity
p24444
(dp24445
g11
(lp24446
sg13
S'com.google.common.collect.ReverseOrdering'
p24447
sg15
(lp24448
sg17
(lp24449
sg19
(lp24450
sg21
I0
sba(iArchitecture
Entity
p24451
(dp24452
g11
(lp24453
sg13
S'com.google.common.collect.ReverseOrdering_CustomFieldSerializer'
p24454
sg15
(lp24455
sg17
(lp24456
sg19
(lp24457
sg21
I0
sba(iArchitecture
Entity
p24458
(dp24459
g11
(lp24460
sg13
S'com.google.common.collect.RowSortedTable'
p24461
sg15
(lp24462
sg17
(lp24463
sg19
(lp24464
sg21
I0
sba(iArchitecture
Entity
p24465
(dp24466
g11
(lp24467
sg13
S'com.google.common.collect.Serialization'
p24468
sg15
(lp24469
sg17
(lp24470
sg19
(lp24471
sg21
I0
sba(iArchitecture
Entity
p24472
(dp24473
g11
(lp24474
sg13
S'com.google.common.collect.Serialization$1'
p24475
sg15
(lp24476
sg17
(lp24477
sg19
(lp24478
sg21
I0
sba(iArchitecture
Entity
p24479
(dp24480
g11
(lp24481
sg13
S'com.google.common.collect.Serialization$FieldSetter'
p24482
sg15
(lp24483
sg17
(lp24484
sg19
(lp24485
sg21
I0
sba(iArchitecture
Entity
p24486
(dp24487
g11
(lp24488
sg13
S'com.google.common.collect.SetMultimap'
p24489
sg15
(lp24490
sg17
(lp24491
sg19
(lp24492
sg21
I0
sba(iArchitecture
Entity
p24493
(dp24494
g11
(lp24495
sg13
S'com.google.common.collect.Sets'
p24496
sg15
(lp24497
sg17
(lp24498
sg19
(lp24499
sg21
I0
sba(iArchitecture
Entity
p24500
(dp24501
g11
(lp24502
sg13
S'com.google.common.collect.Sets$1'
p24503
sg15
(lp24504
sg17
(lp24505
sg19
(lp24506
sg21
I0
sba(iArchitecture
Entity
p24507
(dp24508
g11
(lp24509
sg13
S'com.google.common.collect.Sets$2'
p24510
sg15
(lp24511
sg17
(lp24512
sg19
(lp24513
sg21
I0
sba(iArchitecture
Entity
p24514
(dp24515
g11
(lp24516
sg13
S'com.google.common.collect.Sets$3'
p24517
sg15
(lp24518
sg17
(lp24519
sg19
(lp24520
sg21
I0
sba(iArchitecture
Entity
p24521
(dp24522
g11
(lp24523
sg13
S'com.google.common.collect.Sets$4'
p24524
sg15
(lp24525
sg17
(lp24526
sg19
(lp24527
sg21
I0
sba(iArchitecture
Entity
p24528
(dp24529
g11
(lp24530
sg13
S'com.google.common.collect.Sets$4$1'
p24531
sg15
(lp24532
sg17
(lp24533
sg19
(lp24534
sg21
I0
sba(iArchitecture
Entity
p24535
(dp24536
g11
(lp24537
sg13
S'com.google.common.collect.Sets$CartesianSet'
p24538
sg15
(lp24539
sg17
(lp24540
sg19
(lp24541
sg21
I0
sba(iArchitecture
Entity
p24542
(dp24543
g11
(lp24544
sg13
S'com.google.common.collect.Sets$CartesianSet$1'
p24545
sg15
(lp24546
sg17
(lp24547
sg19
(lp24548
sg21
I0
sba(iArchitecture
Entity
p24549
(dp24550
g11
(lp24551
sg13
S'com.google.common.collect.Sets$DescendingSet'
p24552
sg15
(lp24553
sg17
(lp24554
sg19
(lp24555
sg21
I0
sba(iArchitecture
Entity
p24556
(dp24557
g11
(lp24558
sg13
S'com.google.common.collect.Sets$FilteredNavigableSet'
p24559
sg15
(lp24560
sg17
(lp24561
sg19
(lp24562
sg21
I0
sba(iArchitecture
Entity
p24563
(dp24564
g11
(lp24565
sg13
S'com.google.common.collect.Sets$FilteredSet'
p24566
sg15
(lp24567
sg17
(lp24568
sg19
(lp24569
sg21
I0
sba(iArchitecture
Entity
p24570
(dp24571
g11
(lp24572
sg13
S'com.google.common.collect.Sets$FilteredSortedSet'
p24573
sg15
(lp24574
sg17
(lp24575
sg19
(lp24576
sg21
I0
sba(iArchitecture
Entity
p24577
(dp24578
g11
(lp24579
sg13
S'com.google.common.collect.Sets$ImprovedAbstractSet'
p24580
sg15
(lp24581
sg17
(lp24582
sg19
(lp24583
sg21
I0
sba(iArchitecture
Entity
p24584
(dp24585
g11
(lp24586
sg13
S'com.google.common.collect.Sets$PowerSet'
p24587
sg15
(lp24588
sg17
(lp24589
sg19
(lp24590
sg21
I0
sba(iArchitecture
Entity
p24591
(dp24592
g11
(lp24593
sg13
S'com.google.common.collect.Sets$PowerSet$1'
p24594
sg15
(lp24595
sg17
(lp24596
sg19
(lp24597
sg21
I0
sba(iArchitecture
Entity
p24598
(dp24599
g11
(lp24600
sg13
S'com.google.common.collect.Sets$SetView'
p24601
sg15
(lp24602
sg17
(lp24603
sg19
(lp24604
sg21
I0
sba(iArchitecture
Entity
p24605
(dp24606
g11
(lp24607
sg13
S'com.google.common.collect.Sets$SubSet'
p24608
sg15
(lp24609
sg17
(lp24610
sg19
(lp24611
sg21
I0
sba(iArchitecture
Entity
p24612
(dp24613
g11
(lp24614
sg13
S'com.google.common.collect.Sets$SubSet$1'
p24615
sg15
(lp24616
sg17
(lp24617
sg19
(lp24618
sg21
I0
sba(iArchitecture
Entity
p24619
(dp24620
g11
(lp24621
sg13
S'com.google.common.collect.Sets$UnmodifiableNavigableSet'
p24622
sg15
(lp24623
sg17
(lp24624
sg19
(lp24625
sg21
I0
sba(iArchitecture
Entity
p24626
(dp24627
g11
(lp24628
sg13
S'com.google.common.collect.SingletonImmutableBiMap'
p24629
sg15
(lp24630
sg17
(lp24631
sg19
(lp24632
sg21
I0
sba(iArchitecture
Entity
p24633
(dp24634
g11
(lp24635
sg13
S'com.google.common.collect.SingletonImmutableBiMap_CustomFieldSerializer'
p24636
sg15
(lp24637
sg17
(lp24638
sg19
(lp24639
sg21
I0
sba(iArchitecture
Entity
p24640
(dp24641
g11
(lp24642
sg13
S'com.google.common.collect.SingletonImmutableList'
p24643
sg15
(lp24644
sg17
(lp24645
sg19
(lp24646
sg21
I0
sba(iArchitecture
Entity
p24647
(dp24648
g11
(lp24649
sg13
S'com.google.common.collect.SingletonImmutableList_CustomFieldSerializer'
p24650
sg15
(lp24651
sg17
(lp24652
sg19
(lp24653
sg21
I0
sba(iArchitecture
Entity
p24654
(dp24655
g11
(lp24656
sg13
S'com.google.common.collect.SingletonImmutableSet'
p24657
sg15
(lp24658
sg17
(lp24659
sg19
(lp24660
sg21
I0
sba(iArchitecture
Entity
p24661
(dp24662
g11
(lp24663
sg13
S'com.google.common.collect.SingletonImmutableSet_CustomFieldSerializer'
p24664
sg15
(lp24665
sg17
(lp24666
sg19
(lp24667
sg21
I0
sba(iArchitecture
Entity
p24668
(dp24669
g11
(lp24670
sg13
S'com.google.common.collect.SingletonImmutableTable'
p24671
sg15
(lp24672
sg17
(lp24673
sg19
(lp24674
sg21
I0
sba(iArchitecture
Entity
p24675
(dp24676
g11
(lp24677
sg13
S'com.google.common.collect.SingletonImmutableTable_CustomFieldSerializer'
p24678
sg15
(lp24679
sg17
(lp24680
sg19
(lp24681
sg21
I0
sba(iArchitecture
Entity
p24682
(dp24683
g11
(lp24684
sg13
S'com.google.common.collect.SortedIterable'
p24685
sg15
(lp24686
sg17
(lp24687
sg19
(lp24688
sg21
I0
sba(iArchitecture
Entity
p24689
(dp24690
g11
(lp24691
sg13
S'com.google.common.collect.SortedIterables'
p24692
sg15
(lp24693
sg17
(lp24694
sg19
(lp24695
sg21
I0
sba(iArchitecture
Entity
p24696
(dp24697
g11
(lp24698
sg13
S'com.google.common.collect.SortedLists'
p24699
sg15
(lp24700
sg17
(lp24701
sg19
(lp24702
sg21
I0
sba(iArchitecture
Entity
p24703
(dp24704
g11
(lp24705
sg13
S'com.google.common.collect.SortedLists$1'
p24706
sg15
(lp24707
sg17
(lp24708
sg19
(lp24709
sg21
I0
sba(iArchitecture
Entity
p24710
(dp24711
g11
(lp24712
sg13
S'com.google.common.collect.SortedLists$KeyAbsentBehavior'
p24713
sg15
(lp24714
sg17
(lp24715
sg19
(lp24716
sg21
I0
sba(iArchitecture
Entity
p24717
(dp24718
g11
(lp24719
sg13
S'com.google.common.collect.SortedLists$KeyAbsentBehavior$1'
p24720
sg15
(lp24721
sg17
(lp24722
sg19
(lp24723
sg21
I0
sba(iArchitecture
Entity
p24724
(dp24725
g11
(lp24726
sg13
S'com.google.common.collect.SortedLists$KeyAbsentBehavior$2'
p24727
sg15
(lp24728
sg17
(lp24729
sg19
(lp24730
sg21
I0
sba(iArchitecture
Entity
p24731
(dp24732
g11
(lp24733
sg13
S'com.google.common.collect.SortedLists$KeyAbsentBehavior$3'
p24734
sg15
(lp24735
sg17
(lp24736
sg19
(lp24737
sg21
I0
sba(iArchitecture
Entity
p24738
(dp24739
g11
(lp24740
sg13
S'com.google.common.collect.SortedLists$KeyPresentBehavior'
p24741
sg15
(lp24742
sg17
(lp24743
sg19
(lp24744
sg21
I0
sba(iArchitecture
Entity
p24745
(dp24746
g11
(lp24747
sg13
S'com.google.common.collect.SortedLists$KeyPresentBehavior$1'
p24748
sg15
(lp24749
sg17
(lp24750
sg19
(lp24751
sg21
I0
sba(iArchitecture
Entity
p24752
(dp24753
g11
(lp24754
sg13
S'com.google.common.collect.SortedLists$KeyPresentBehavior$2'
p24755
sg15
(lp24756
sg17
(lp24757
sg19
(lp24758
sg21
I0
sba(iArchitecture
Entity
p24759
(dp24760
g11
(lp24761
sg13
S'com.google.common.collect.SortedLists$KeyPresentBehavior$3'
p24762
sg15
(lp24763
sg17
(lp24764
sg19
(lp24765
sg21
I0
sba(iArchitecture
Entity
p24766
(dp24767
g11
(lp24768
sg13
S'com.google.common.collect.SortedLists$KeyPresentBehavior$4'
p24769
sg15
(lp24770
sg17
(lp24771
sg19
(lp24772
sg21
I0
sba(iArchitecture
Entity
p24773
(dp24774
g11
(lp24775
sg13
S'com.google.common.collect.SortedLists$KeyPresentBehavior$5'
p24776
sg15
(lp24777
sg17
(lp24778
sg19
(lp24779
sg21
I0
sba(iArchitecture
Entity
p24780
(dp24781
g11
(lp24782
sg13
S'com.google.common.collect.SortedMapDifference'
p24783
sg15
(lp24784
sg17
(lp24785
sg19
(lp24786
sg21
I0
sba(iArchitecture
Entity
p24787
(dp24788
g11
(lp24789
sg13
S'com.google.common.collect.SortedMultiset'
p24790
sg15
(lp24791
sg17
(lp24792
sg19
(lp24793
sg21
I0
sba(iArchitecture
Entity
p24794
(dp24795
g11
(lp24796
sg13
S'com.google.common.collect.SortedMultisetBridge'
p24797
sg15
(lp24798
sg17
(lp24799
sg19
(lp24800
sg21
I0
sba(iArchitecture
Entity
p24801
(dp24802
g11
(lp24803
sg13
S'com.google.common.collect.SortedMultisets'
p24804
sg15
(lp24805
sg17
(lp24806
sg19
(lp24807
sg21
I0
sba(iArchitecture
Entity
p24808
(dp24809
g11
(lp24810
sg13
S'com.google.common.collect.SortedMultisets$ElementSet'
p24811
sg15
(lp24812
sg17
(lp24813
sg19
(lp24814
sg21
I0
sba(iArchitecture
Entity
p24815
(dp24816
g11
(lp24817
sg13
S'com.google.common.collect.SortedMultisets$NavigableElementSet'
p24818
sg15
(lp24819
sg17
(lp24820
sg19
(lp24821
sg21
I0
sba(iArchitecture
Entity
p24822
(dp24823
g11
(lp24824
sg13
S'com.google.common.collect.SortedSetMultimap'
p24825
sg15
(lp24826
sg17
(lp24827
sg19
(lp24828
sg21
I0
sba(iArchitecture
Entity
p24829
(dp24830
g11
(lp24831
sg13
S'com.google.common.collect.SparseImmutableTable'
p24832
sg15
(lp24833
sg17
(lp24834
sg19
(lp24835
sg21
I0
sba(iArchitecture
Entity
p24836
(dp24837
g11
(lp24838
sg13
S'com.google.common.collect.SparseImmutableTable_CustomFieldSerializer'
p24839
sg15
(lp24840
sg17
(lp24841
sg19
(lp24842
sg21
I0
sba(iArchitecture
Entity
p24843
(dp24844
g11
(lp24845
sg13
S'com.google.common.collect.StandardRowSortedTable'
p24846
sg15
(lp24847
sg17
(lp24848
sg19
(lp24849
sg21
I0
sba(iArchitecture
Entity
p24850
(dp24851
g11
(lp24852
sg13
S'com.google.common.collect.StandardRowSortedTable$1'
p24853
sg15
(lp24854
sg17
(lp24855
sg19
(lp24856
sg21
I0
sba(iArchitecture
Entity
p24857
(dp24858
g11
(lp24859
sg13
S'com.google.common.collect.StandardRowSortedTable$RowSortedMap'
p24860
sg15
(lp24861
sg17
(lp24862
sg19
(lp24863
sg21
I0
sba(iArchitecture
Entity
p24864
(dp24865
g11
(lp24866
sg13
S'com.google.common.collect.StandardTable'
p24867
sg15
(lp24868
sg17
(lp24869
sg19
(lp24870
sg21
I0
sba(iArchitecture
Entity
p24871
(dp24872
g11
(lp24873
sg13
S'com.google.common.collect.StandardTable$1'
p24874
sg15
(lp24875
sg17
(lp24876
sg19
(lp24877
sg21
I0
sba(iArchitecture
Entity
p24878
(dp24879
g11
(lp24880
sg13
S'com.google.common.collect.StandardTable$CellIterator'
p24881
sg15
(lp24882
sg17
(lp24883
sg19
(lp24884
sg21
I0
sba(iArchitecture
Entity
p24885
(dp24886
g11
(lp24887
sg13
S'com.google.common.collect.StandardTable$Column'
p24888
sg15
(lp24889
sg17
(lp24890
sg19
(lp24891
sg21
I0
sba(iArchitecture
Entity
p24892
(dp24893
g11
(lp24894
sg13
S'com.google.common.collect.StandardTable$Column$EntrySet'
p24895
sg15
(lp24896
sg17
(lp24897
sg19
(lp24898
sg21
I0
sba(iArchitecture
Entity
p24899
(dp24900
g11
(lp24901
sg13
S'com.google.common.collect.StandardTable$Column$EntrySetIterator'
p24902
sg15
(lp24903
sg17
(lp24904
sg19
(lp24905
sg21
I0
sba(iArchitecture
Entity
p24906
(dp24907
g11
(lp24908
sg13
S'com.google.common.collect.StandardTable$Column$EntrySetIterator$1EntryImpl'
p24909
sg15
(lp24910
sg17
(lp24911
sg19
(lp24912
sg21
I0
sba(iArchitecture
Entity
p24913
(dp24914
g11
(lp24915
sg13
S'com.google.common.collect.StandardTable$Column$KeySet'
p24916
sg15
(lp24917
sg17
(lp24918
sg19
(lp24919
sg21
I0
sba(iArchitecture
Entity
p24920
(dp24921
g11
(lp24922
sg13
S'com.google.common.collect.StandardTable$Column$Values'
p24923
sg15
(lp24924
sg17
(lp24925
sg19
(lp24926
sg21
I0
sba(iArchitecture
Entity
p24927
(dp24928
g11
(lp24929
sg13
S'com.google.common.collect.StandardTable$ColumnKeyIterator'
p24930
sg15
(lp24931
sg17
(lp24932
sg19
(lp24933
sg21
I0
sba(iArchitecture
Entity
p24934
(dp24935
g11
(lp24936
sg13
S'com.google.common.collect.StandardTable$ColumnKeySet'
p24937
sg15
(lp24938
sg17
(lp24939
sg19
(lp24940
sg21
I0
sba(iArchitecture
Entity
p24941
(dp24942
g11
(lp24943
sg13
S'com.google.common.collect.StandardTable$ColumnMap'
p24944
sg15
(lp24945
sg17
(lp24946
sg19
(lp24947
sg21
I0
sba(iArchitecture
Entity
p24948
(dp24949
g11
(lp24950
sg13
S'com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet'
p24951
sg15
(lp24952
sg17
(lp24953
sg19
(lp24954
sg21
I0
sba(iArchitecture
Entity
p24955
(dp24956
g11
(lp24957
sg13
S'com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1'
p24958
sg15
(lp24959
sg17
(lp24960
sg19
(lp24961
sg21
I0
sba(iArchitecture
Entity
p24962
(dp24963
g11
(lp24964
sg13
S'com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues'
p24965
sg15
(lp24966
sg17
(lp24967
sg19
(lp24968
sg21
I0
sba(iArchitecture
Entity
p24969
(dp24970
g11
(lp24971
sg13
S'com.google.common.collect.StandardTable$Row'
p24972
sg15
(lp24973
sg17
(lp24974
sg19
(lp24975
sg21
I0
sba(iArchitecture
Entity
p24976
(dp24977
g11
(lp24978
sg13
S'com.google.common.collect.StandardTable$Row$1'
p24979
sg15
(lp24980
sg17
(lp24981
sg19
(lp24982
sg21
I0
sba(iArchitecture
Entity
p24983
(dp24984
g11
(lp24985
sg13
S'com.google.common.collect.StandardTable$Row$1$1'
p24986
sg15
(lp24987
sg17
(lp24988
sg19
(lp24989
sg21
I0
sba(iArchitecture
Entity
p24990
(dp24991
g11
(lp24992
sg13
S'com.google.common.collect.StandardTable$RowMap'
p24993
sg15
(lp24994
sg17
(lp24995
sg19
(lp24996
sg21
I0
sba(iArchitecture
Entity
p24997
(dp24998
g11
(lp24999
sg13
S'com.google.common.collect.StandardTable$RowMap$EntrySet'
p25000
sg15
(lp25001
sg17
(lp25002
sg19
(lp25003
sg21
I0
sba(iArchitecture
Entity
p25004
(dp25005
g11
(lp25006
sg13
S'com.google.common.collect.StandardTable$RowMap$EntrySet$1'
p25007
sg15
(lp25008
sg17
(lp25009
sg19
(lp25010
sg21
I0
sba(iArchitecture
Entity
p25011
(dp25012
g11
(lp25013
sg13
S'com.google.common.collect.StandardTable$TableSet'
p25014
sg15
(lp25015
sg17
(lp25016
sg19
(lp25017
sg21
I0
sba(iArchitecture
Entity
p25018
(dp25019
g11
(lp25020
sg13
S'com.google.common.collect.Synchronized'
p25021
sg15
(lp25022
sg17
(lp25023
sg19
(lp25024
sg21
I0
sba(iArchitecture
Entity
p25025
(dp25026
g11
(lp25027
sg13
S'com.google.common.collect.Synchronized$1'
p25028
sg15
(lp25029
sg17
(lp25030
sg19
(lp25031
sg21
I0
sba(iArchitecture
Entity
p25032
(dp25033
g11
(lp25034
sg13
S'com.google.common.collect.Synchronized$SynchronizedAsMap'
p25035
sg15
(lp25036
sg17
(lp25037
sg19
(lp25038
sg21
I0
sba(iArchitecture
Entity
p25039
(dp25040
g11
(lp25041
sg13
S'com.google.common.collect.Synchronized$SynchronizedAsMapEntries'
p25042
sg15
(lp25043
sg17
(lp25044
sg19
(lp25045
sg21
I0
sba(iArchitecture
Entity
p25046
(dp25047
g11
(lp25048
sg13
S'com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1'
p25049
sg15
(lp25050
sg17
(lp25051
sg19
(lp25052
sg21
I0
sba(iArchitecture
Entity
p25053
(dp25054
g11
(lp25055
sg13
S'com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1'
p25056
sg15
(lp25057
sg17
(lp25058
sg19
(lp25059
sg21
I0
sba(iArchitecture
Entity
p25060
(dp25061
g11
(lp25062
sg13
S'com.google.common.collect.Synchronized$SynchronizedAsMapValues'
p25063
sg15
(lp25064
sg17
(lp25065
sg19
(lp25066
sg21
I0
sba(iArchitecture
Entity
p25067
(dp25068
g11
(lp25069
sg13
S'com.google.common.collect.Synchronized$SynchronizedAsMapValues$1'
p25070
sg15
(lp25071
sg17
(lp25072
sg19
(lp25073
sg21
I0
sba(iArchitecture
Entity
p25074
(dp25075
g11
(lp25076
sg13
S'com.google.common.collect.Synchronized$SynchronizedBiMap'
p25077
sg15
(lp25078
sg17
(lp25079
sg19
(lp25080
sg21
I0
sba(iArchitecture
Entity
p25081
(dp25082
g11
(lp25083
sg13
S'com.google.common.collect.Synchronized$SynchronizedCollection'
p25084
sg15
(lp25085
sg17
(lp25086
sg19
(lp25087
sg21
I0
sba(iArchitecture
Entity
p25088
(dp25089
g11
(lp25090
sg13
S'com.google.common.collect.Synchronized$SynchronizedDeque'
p25091
sg15
(lp25092
sg17
(lp25093
sg19
(lp25094
sg21
I0
sba(iArchitecture
Entity
p25095
(dp25096
g11
(lp25097
sg13
S'com.google.common.collect.Synchronized$SynchronizedEntry'
p25098
sg15
(lp25099
sg17
(lp25100
sg19
(lp25101
sg21
I0
sba(iArchitecture
Entity
p25102
(dp25103
g11
(lp25104
sg13
S'com.google.common.collect.Synchronized$SynchronizedList'
p25105
sg15
(lp25106
sg17
(lp25107
sg19
(lp25108
sg21
I0
sba(iArchitecture
Entity
p25109
(dp25110
g11
(lp25111
sg13
S'com.google.common.collect.Synchronized$SynchronizedListMultimap'
p25112
sg15
(lp25113
sg17
(lp25114
sg19
(lp25115
sg21
I0
sba(iArchitecture
Entity
p25116
(dp25117
g11
(lp25118
sg13
S'com.google.common.collect.Synchronized$SynchronizedMap'
p25119
sg15
(lp25120
sg17
(lp25121
sg19
(lp25122
sg21
I0
sba(iArchitecture
Entity
p25123
(dp25124
g11
(lp25125
sg13
S'com.google.common.collect.Synchronized$SynchronizedMultimap'
p25126
sg15
(lp25127
sg17
(lp25128
sg19
(lp25129
sg21
I0
sba(iArchitecture
Entity
p25130
(dp25131
g11
(lp25132
sg13
S'com.google.common.collect.Synchronized$SynchronizedMultiset'
p25133
sg15
(lp25134
sg17
(lp25135
sg19
(lp25136
sg21
I0
sba(iArchitecture
Entity
p25137
(dp25138
g11
(lp25139
sg13
S'com.google.common.collect.Synchronized$SynchronizedNavigableMap'
p25140
sg15
(lp25141
sg17
(lp25142
sg19
(lp25143
sg21
I0
sba(iArchitecture
Entity
p25144
(dp25145
g11
(lp25146
sg13
S'com.google.common.collect.Synchronized$SynchronizedNavigableSet'
p25147
sg15
(lp25148
sg17
(lp25149
sg19
(lp25150
sg21
I0
sba(iArchitecture
Entity
p25151
(dp25152
g11
(lp25153
sg13
S'com.google.common.collect.Synchronized$SynchronizedObject'
p25154
sg15
(lp25155
sg17
(lp25156
sg19
(lp25157
sg21
I0
sba(iArchitecture
Entity
p25158
(dp25159
g11
(lp25160
sg13
S'com.google.common.collect.Synchronized$SynchronizedQueue'
p25161
sg15
(lp25162
sg17
(lp25163
sg19
(lp25164
sg21
I0
sba(iArchitecture
Entity
p25165
(dp25166
g11
(lp25167
sg13
S'com.google.common.collect.Synchronized$SynchronizedRandomAccessList'
p25168
sg15
(lp25169
sg17
(lp25170
sg19
(lp25171
sg21
I0
sba(iArchitecture
Entity
p25172
(dp25173
g11
(lp25174
sg13
S'com.google.common.collect.Synchronized$SynchronizedSet'
p25175
sg15
(lp25176
sg17
(lp25177
sg19
(lp25178
sg21
I0
sba(iArchitecture
Entity
p25179
(dp25180
g11
(lp25181
sg13
S'com.google.common.collect.Synchronized$SynchronizedSetMultimap'
p25182
sg15
(lp25183
sg17
(lp25184
sg19
(lp25185
sg21
I0
sba(iArchitecture
Entity
p25186
(dp25187
g11
(lp25188
sg13
S'com.google.common.collect.Synchronized$SynchronizedSortedMap'
p25189
sg15
(lp25190
sg17
(lp25191
sg19
(lp25192
sg21
I0
sba(iArchitecture
Entity
p25193
(dp25194
g11
(lp25195
sg13
S'com.google.common.collect.Synchronized$SynchronizedSortedSet'
p25196
sg15
(lp25197
sg17
(lp25198
sg19
(lp25199
sg21
I0
sba(iArchitecture
Entity
p25200
(dp25201
g11
(lp25202
sg13
S'com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap'
p25203
sg15
(lp25204
sg17
(lp25205
sg19
(lp25206
sg21
I0
sba(iArchitecture
Entity
p25207
(dp25208
g11
(lp25209
sg13
S'com.google.common.collect.Table'
p25210
sg15
(lp25211
sg17
(lp25212
sg19
(lp25213
sg21
I0
sba(iArchitecture
Entity
p25214
(dp25215
g11
(lp25216
sg13
S'com.google.common.collect.Table$Cell'
p25217
sg15
(lp25218
sg17
(lp25219
sg19
(lp25220
sg21
I0
sba(iArchitecture
Entity
p25221
(dp25222
g11
(lp25223
sg13
S'com.google.common.collect.Table_CustomFieldSerializerBase'
p25224
sg15
(lp25225
sg17
(lp25226
sg19
(lp25227
sg21
I0
sba(iArchitecture
Entity
p25228
(dp25229
g11
(lp25230
sg13
S'com.google.common.collect.Tables'
p25231
sg15
(lp25232
sg17
(lp25233
sg19
(lp25234
sg21
I0
sba(iArchitecture
Entity
p25235
(dp25236
g11
(lp25237
sg13
S'com.google.common.collect.Tables$1'
p25238
sg15
(lp25239
sg17
(lp25240
sg19
(lp25241
sg21
I0
sba(iArchitecture
Entity
p25242
(dp25243
g11
(lp25244
sg13
S'com.google.common.collect.Tables$AbstractCell'
p25245
sg15
(lp25246
sg17
(lp25247
sg19
(lp25248
sg21
I0
sba(iArchitecture
Entity
p25249
(dp25250
g11
(lp25251
sg13
S'com.google.common.collect.Tables$ImmutableCell'
p25252
sg15
(lp25253
sg17
(lp25254
sg19
(lp25255
sg21
I0
sba(iArchitecture
Entity
p25256
(dp25257
g11
(lp25258
sg13
S'com.google.common.collect.Tables$TransformedTable'
p25259
sg15
(lp25260
sg17
(lp25261
sg19
(lp25262
sg21
I0
sba(iArchitecture
Entity
p25263
(dp25264
g11
(lp25265
sg13
S'com.google.common.collect.Tables$TransformedTable$1'
p25266
sg15
(lp25267
sg17
(lp25268
sg19
(lp25269
sg21
I0
sba(iArchitecture
Entity
p25270
(dp25271
g11
(lp25272
sg13
S'com.google.common.collect.Tables$TransformedTable$2'
p25273
sg15
(lp25274
sg17
(lp25275
sg19
(lp25276
sg21
I0
sba(iArchitecture
Entity
p25277
(dp25278
g11
(lp25279
sg13
S'com.google.common.collect.Tables$TransformedTable$3'
p25280
sg15
(lp25281
sg17
(lp25282
sg19
(lp25283
sg21
I0
sba(iArchitecture
Entity
p25284
(dp25285
g11
(lp25286
sg13
S'com.google.common.collect.Tables$TransposeTable'
p25287
sg15
(lp25288
sg17
(lp25289
sg19
(lp25290
sg21
I0
sba(iArchitecture
Entity
p25291
(dp25292
g11
(lp25293
sg13
S'com.google.common.collect.Tables$TransposeTable$1'
p25294
sg15
(lp25295
sg17
(lp25296
sg19
(lp25297
sg21
I0
sba(iArchitecture
Entity
p25298
(dp25299
g11
(lp25300
sg13
S'com.google.common.collect.Tables$UnmodifiableRowSortedMap'
p25301
sg15
(lp25302
sg17
(lp25303
sg19
(lp25304
sg21
I0
sba(iArchitecture
Entity
p25305
(dp25306
g11
(lp25307
sg13
S'com.google.common.collect.Tables$UnmodifiableTable'
p25308
sg15
(lp25309
sg17
(lp25310
sg19
(lp25311
sg21
I0
sba(iArchitecture
Entity
p25312
(dp25313
g11
(lp25314
sg13
S'com.google.common.collect.TransformedIterator'
p25315
sg15
(lp25316
sg17
(lp25317
sg19
(lp25318
sg21
I0
sba(iArchitecture
Entity
p25319
(dp25320
g11
(lp25321
sg13
S'com.google.common.collect.TransformedListIterator'
p25322
sg15
(lp25323
sg17
(lp25324
sg19
(lp25325
sg21
I0
sba(iArchitecture
Entity
p25326
(dp25327
g11
(lp25328
sg13
S'com.google.common.collect.TreeBasedTable'
p25329
sg15
(lp25330
sg17
(lp25331
sg19
(lp25332
sg21
I0
sba(iArchitecture
Entity
p25333
(dp25334
g11
(lp25335
sg13
S'com.google.common.collect.TreeBasedTable$1'
p25336
sg15
(lp25337
sg17
(lp25338
sg19
(lp25339
sg21
I0
sba(iArchitecture
Entity
p25340
(dp25341
g11
(lp25342
sg13
S'com.google.common.collect.TreeBasedTable$2'
p25343
sg15
(lp25344
sg17
(lp25345
sg19
(lp25346
sg21
I0
sba(iArchitecture
Entity
p25347
(dp25348
g11
(lp25349
sg13
S'com.google.common.collect.TreeBasedTable$Factory'
p25350
sg15
(lp25351
sg17
(lp25352
sg19
(lp25353
sg21
I0
sba(iArchitecture
Entity
p25354
(dp25355
g11
(lp25356
sg13
S'com.google.common.collect.TreeBasedTable$TreeRow'
p25357
sg15
(lp25358
sg17
(lp25359
sg19
(lp25360
sg21
I0
sba(iArchitecture
Entity
p25361
(dp25362
g11
(lp25363
sg13
S'com.google.common.collect.TreeBasedTable_CustomFieldSerializer'
p25364
sg15
(lp25365
sg17
(lp25366
sg19
(lp25367
sg21
I0
sba(iArchitecture
Entity
p25368
(dp25369
g11
(lp25370
sg13
S'com.google.common.collect.TreeMultimap'
p25371
sg15
(lp25372
sg17
(lp25373
sg19
(lp25374
sg21
I0
sba(iArchitecture
Entity
p25375
(dp25376
g11
(lp25377
sg13
S'com.google.common.collect.TreeMultimap_CustomFieldSerializer'
p25378
sg15
(lp25379
sg17
(lp25380
sg19
(lp25381
sg21
I0
sba(iArchitecture
Entity
p25382
(dp25383
g11
(lp25384
sg13
S'com.google.common.collect.TreeMultiset'
p25385
sg15
(lp25386
sg17
(lp25387
sg19
(lp25388
sg21
I0
sba(iArchitecture
Entity
p25389
(dp25390
g11
(lp25391
sg13
S'com.google.common.collect.TreeMultiset$1'
p25392
sg15
(lp25393
sg17
(lp25394
sg19
(lp25395
sg21
I0
sba(iArchitecture
Entity
p25396
(dp25397
g11
(lp25398
sg13
S'com.google.common.collect.TreeMultiset$2'
p25399
sg15
(lp25400
sg17
(lp25401
sg19
(lp25402
sg21
I0
sba(iArchitecture
Entity
p25403
(dp25404
g11
(lp25405
sg13
S'com.google.common.collect.TreeMultiset$3'
p25406
sg15
(lp25407
sg17
(lp25408
sg19
(lp25409
sg21
I0
sba(iArchitecture
Entity
p25410
(dp25411
g11
(lp25412
sg13
S'com.google.common.collect.TreeMultiset$4'
p25413
sg15
(lp25414
sg17
(lp25415
sg19
(lp25416
sg21
I0
sba(iArchitecture
Entity
p25417
(dp25418
g11
(lp25419
sg13
S'com.google.common.collect.TreeMultiset$Aggregate'
p25420
sg15
(lp25421
sg17
(lp25422
sg19
(lp25423
sg21
I0
sba(iArchitecture
Entity
p25424
(dp25425
g11
(lp25426
sg13
S'com.google.common.collect.TreeMultiset$Aggregate$1'
p25427
sg15
(lp25428
sg17
(lp25429
sg19
(lp25430
sg21
I0
sba(iArchitecture
Entity
p25431
(dp25432
g11
(lp25433
sg13
S'com.google.common.collect.TreeMultiset$Aggregate$2'
p25434
sg15
(lp25435
sg17
(lp25436
sg19
(lp25437
sg21
I0
sba(iArchitecture
Entity
p25438
(dp25439
g11
(lp25440
sg13
S'com.google.common.collect.TreeMultiset$AvlNode'
p25441
sg15
(lp25442
sg17
(lp25443
sg19
(lp25444
sg21
I0
sba(iArchitecture
Entity
p25445
(dp25446
g11
(lp25447
sg13
S'com.google.common.collect.TreeMultiset$Reference'
p25448
sg15
(lp25449
sg17
(lp25450
sg19
(lp25451
sg21
I0
sba(iArchitecture
Entity
p25452
(dp25453
g11
(lp25454
sg13
S'com.google.common.collect.TreeRangeMap'
p25455
sg15
(lp25456
sg17
(lp25457
sg19
(lp25458
sg21
I0
sba(iArchitecture
Entity
p25459
(dp25460
g11
(lp25461
sg13
S'com.google.common.collect.TreeRangeMap$1'
p25462
sg15
(lp25463
sg17
(lp25464
sg19
(lp25465
sg21
I0
sba(iArchitecture
Entity
p25466
(dp25467
g11
(lp25468
sg13
S'com.google.common.collect.TreeRangeMap$AsMapOfRanges'
p25469
sg15
(lp25470
sg17
(lp25471
sg19
(lp25472
sg21
I0
sba(iArchitecture
Entity
p25473
(dp25474
g11
(lp25475
sg13
S'com.google.common.collect.TreeRangeMap$RangeMapEntry'
p25476
sg15
(lp25477
sg17
(lp25478
sg19
(lp25479
sg21
I0
sba(iArchitecture
Entity
p25480
(dp25481
g11
(lp25482
sg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap'
p25483
sg15
(lp25484
sg17
(lp25485
sg19
(lp25486
sg21
I0
sba(iArchitecture
Entity
p25487
(dp25488
g11
(lp25489
sg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap$1'
p25490
sg15
(lp25491
sg17
(lp25492
sg19
(lp25493
sg21
I0
sba(iArchitecture
Entity
p25494
(dp25495
g11
(lp25496
sg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap$1$1'
p25497
sg15
(lp25498
sg17
(lp25499
sg19
(lp25500
sg21
I0
sba(iArchitecture
Entity
p25501
(dp25502
g11
(lp25503
sg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap'
p25504
sg15
(lp25505
sg17
(lp25506
sg19
(lp25507
sg21
I0
sba(iArchitecture
Entity
p25508
(dp25509
g11
(lp25510
sg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1'
p25511
sg15
(lp25512
sg17
(lp25513
sg19
(lp25514
sg21
I0
sba(iArchitecture
Entity
p25515
(dp25516
g11
(lp25517
sg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2'
p25518
sg15
(lp25519
sg17
(lp25520
sg19
(lp25521
sg21
I0
sba(iArchitecture
Entity
p25522
(dp25523
g11
(lp25524
sg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$3'
p25525
sg15
(lp25526
sg17
(lp25527
sg19
(lp25528
sg21
I0
sba(iArchitecture
Entity
p25529
(dp25530
g11
(lp25531
sg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$4'
p25532
sg15
(lp25533
sg17
(lp25534
sg19
(lp25535
sg21
I0
sba(iArchitecture
Entity
p25536
(dp25537
g11
(lp25538
sg13
S'com.google.common.collect.TreeRangeSet'
p25539
sg15
(lp25540
sg17
(lp25541
sg19
(lp25542
sg21
I0
sba(iArchitecture
Entity
p25543
(dp25544
g11
(lp25545
sg13
S'com.google.common.collect.TreeRangeSet$1'
p25546
sg15
(lp25547
sg17
(lp25548
sg19
(lp25549
sg21
I0
sba(iArchitecture
Entity
p25550
(dp25551
g11
(lp25552
sg13
S'com.google.common.collect.TreeRangeSet$AsRanges'
p25553
sg15
(lp25554
sg17
(lp25555
sg19
(lp25556
sg21
I0
sba(iArchitecture
Entity
p25557
(dp25558
g11
(lp25559
sg13
S'com.google.common.collect.TreeRangeSet$Complement'
p25560
sg15
(lp25561
sg17
(lp25562
sg19
(lp25563
sg21
I0
sba(iArchitecture
Entity
p25564
(dp25565
g11
(lp25566
sg13
S'com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound'
p25567
sg15
(lp25568
sg17
(lp25569
sg19
(lp25570
sg21
I0
sba(iArchitecture
Entity
p25571
(dp25572
g11
(lp25573
sg13
S'com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$1'
p25574
sg15
(lp25575
sg17
(lp25576
sg19
(lp25577
sg21
I0
sba(iArchitecture
Entity
p25578
(dp25579
g11
(lp25580
sg13
S'com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$2'
p25581
sg15
(lp25582
sg17
(lp25583
sg19
(lp25584
sg21
I0
sba(iArchitecture
Entity
p25585
(dp25586
g11
(lp25587
sg13
S'com.google.common.collect.TreeRangeSet$RangesByUpperBound'
p25588
sg15
(lp25589
sg17
(lp25590
sg19
(lp25591
sg21
I0
sba(iArchitecture
Entity
p25592
(dp25593
g11
(lp25594
sg13
S'com.google.common.collect.TreeRangeSet$RangesByUpperBound$1'
p25595
sg15
(lp25596
sg17
(lp25597
sg19
(lp25598
sg21
I0
sba(iArchitecture
Entity
p25599
(dp25600
g11
(lp25601
sg13
S'com.google.common.collect.TreeRangeSet$RangesByUpperBound$2'
p25602
sg15
(lp25603
sg17
(lp25604
sg19
(lp25605
sg21
I0
sba(iArchitecture
Entity
p25606
(dp25607
g11
(lp25608
sg13
S'com.google.common.collect.TreeRangeSet$SubRangeSet'
p25609
sg15
(lp25610
sg17
(lp25611
sg19
(lp25612
sg21
I0
sba(iArchitecture
Entity
p25613
(dp25614
g11
(lp25615
sg13
S'com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound'
p25616
sg15
(lp25617
sg17
(lp25618
sg19
(lp25619
sg21
I0
sba(iArchitecture
Entity
p25620
(dp25621
g11
(lp25622
sg13
S'com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$1'
p25623
sg15
(lp25624
sg17
(lp25625
sg19
(lp25626
sg21
I0
sba(iArchitecture
Entity
p25627
(dp25628
g11
(lp25629
sg13
S'com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$2'
p25630
sg15
(lp25631
sg17
(lp25632
sg19
(lp25633
sg21
I0
sba(iArchitecture
Entity
p25634
(dp25635
g11
(lp25636
sg13
S'com.google.common.collect.TreeTraverser'
p25637
sg15
(lp25638
sg17
(lp25639
sg19
(lp25640
sg21
I0
sba(iArchitecture
Entity
p25641
(dp25642
g11
(lp25643
sg13
S'com.google.common.collect.TreeTraverser$1'
p25644
sg15
(lp25645
sg17
(lp25646
sg19
(lp25647
sg21
I0
sba(iArchitecture
Entity
p25648
(dp25649
g11
(lp25650
sg13
S'com.google.common.collect.TreeTraverser$2'
p25651
sg15
(lp25652
sg17
(lp25653
sg19
(lp25654
sg21
I0
sba(iArchitecture
Entity
p25655
(dp25656
g11
(lp25657
sg13
S'com.google.common.collect.TreeTraverser$3'
p25658
sg15
(lp25659
sg17
(lp25660
sg19
(lp25661
sg21
I0
sba(iArchitecture
Entity
p25662
(dp25663
g11
(lp25664
sg13
S'com.google.common.collect.TreeTraverser$BreadthFirstIterator'
p25665
sg15
(lp25666
sg17
(lp25667
sg19
(lp25668
sg21
I0
sba(iArchitecture
Entity
p25669
(dp25670
g11
(lp25671
sg13
S'com.google.common.collect.TreeTraverser$PostOrderIterator'
p25672
sg15
(lp25673
sg17
(lp25674
sg19
(lp25675
sg21
I0
sba(iArchitecture
Entity
p25676
(dp25677
g11
(lp25678
sg13
S'com.google.common.collect.TreeTraverser$PostOrderNode'
p25679
sg15
(lp25680
sg17
(lp25681
sg19
(lp25682
sg21
I0
sba(iArchitecture
Entity
p25683
(dp25684
g11
(lp25685
sg13
S'com.google.common.collect.TreeTraverser$PreOrderIterator'
p25686
sg15
(lp25687
sg17
(lp25688
sg19
(lp25689
sg21
I0
sba(iArchitecture
Entity
p25690
(dp25691
g11
(lp25692
sg13
S'com.google.common.collect.UnmodifiableIterator'
p25693
sg15
(lp25694
sg17
(lp25695
sg19
(lp25696
sg21
I0
sba(iArchitecture
Entity
p25697
(dp25698
g11
(lp25699
sg13
S'com.google.common.collect.UnmodifiableListIterator'
p25700
sg15
(lp25701
sg17
(lp25702
sg19
(lp25703
sg21
I0
sba(iArchitecture
Entity
p25704
(dp25705
g11
(lp25706
sg13
S'com.google.common.collect.UnmodifiableSortedMultiset'
p25707
sg15
(lp25708
sg17
(lp25709
sg19
(lp25710
sg21
I0
sba(iArchitecture
Entity
p25711
(dp25712
g11
(lp25713
sg13
S'com.google.common.collect.UsingToStringOrdering'
p25714
sg15
(lp25715
sg17
(lp25716
sg19
(lp25717
sg21
I0
sba(iArchitecture
Entity
p25718
(dp25719
g11
(lp25720
sg13
S'com.google.common.collect.UsingToStringOrdering_CustomFieldSerializer'
p25721
sg15
(lp25722
sg17
(lp25723
sg19
(lp25724
sg21
I0
sba(iArchitecture
Entity
p25725
(dp25726
g11
(lp25727
sg13
S'com.google.common.collect.WellBehavedMap'
p25728
sg15
(lp25729
sg17
(lp25730
sg19
(lp25731
sg21
I0
sba(iArchitecture
Entity
p25732
(dp25733
g11
(lp25734
sg13
S'com.google.common.collect.WellBehavedMap$1'
p25735
sg15
(lp25736
sg17
(lp25737
sg19
(lp25738
sg21
I0
sba(iArchitecture
Entity
p25739
(dp25740
g11
(lp25741
sg13
S'com.google.common.collect.WellBehavedMap$EntrySet'
p25742
sg15
(lp25743
sg17
(lp25744
sg19
(lp25745
sg21
I0
sba(iArchitecture
Entity
p25746
(dp25747
g11
(lp25748
sg13
S'com.google.common.collect.WellBehavedMap$EntrySet$1'
p25749
sg15
(lp25750
sg17
(lp25751
sg19
(lp25752
sg21
I0
sba(iArchitecture
Entity
p25753
(dp25754
g11
(lp25755
sg13
S'com.google.common.collect.WellBehavedMap$EntrySet$1$1'
p25756
sg15
(lp25757
sg17
(lp25758
sg19
(lp25759
sg21
I0
sba(iArchitecture
Entity
p25760
(dp25761
g11
(lp25762
sg13
S'com.google.common.io.Flushables'
p25763
sg15
(lp25764
sg17
(lp25765
sg19
(lp25766
sg21
I0
sba(iArchitecture
Entity
p25767
(dp25768
g11
(lp25769
sg13
S'com.google.common.primitives.UnsignedLong_CustomFieldSerializer'
p25770
sg15
(lp25771
sg17
(lp25772
sg19
(lp25773
sg21
I0
sba(iArchitecture
Entity
p25774
(dp25775
g11
(lp25776
sg13
S'com.google.common.util.concurrent.ForwardingBlockingQueue'
p25777
sg15
(lp25778
sg17
(lp25779
sg19
(lp25780
sg21
I0
sba(iArchitecture
Entity
p25781
(dp25782
g11
(lp25783
sg13
S'com.google.gwt.user.client.rpc.SerializationException'
p25784
sg15
(lp25785
sg17
(lp25786
sg19
(lp25787
sg21
I0
sba(iArchitecture
Entity
p25788
(dp25789
g11
(lp25790
sg13
S'com.google.gwt.user.client.rpc.SerializationStreamReader'
p25791
sg15
(lp25792
sg17
(lp25793
sg19
(lp25794
sg21
I0
sba(iArchitecture
Entity
p25795
(dp25796
g11
(lp25797
sg13
S'com.google.gwt.user.client.rpc.SerializationStreamWriter'
p25798
sg15
(lp25799
sg17
(lp25800
sg19
(lp25801
sg21
I0
sba(iArchitecture
Entity
p25802
(dp25803
g11
(lp25804
sg13
S'com.google.gwt.user.client.rpc.core.java.util.Collection_CustomFieldSerializerBase'
p25805
sg15
(lp25806
sg17
(lp25807
sg19
(lp25808
sg21
I0
sba(iArchitecture
Entity
p25809
(dp25810
g11
(lp25811
sg13
S'com.google.gwt.user.client.rpc.core.java.util.Map_CustomFieldSerializerBase'
p25812
sg15
(lp25813
sg17
(lp25814
sg19
(lp25815
sg21
I0
sba(iArchitecture
Entity
p25816
(dp25817
g11
(lp25818
sg13
S'com.google.j2objc.annotations.Weak'
p25819
sg15
(lp25820
sg17
(lp25821
sg19
(lp25822
sg21
I0
sbasg1055
(lp25823
g19448
ag19455
ag19462
ag19469
ag19476
ag19483
ag19490
ag19497
ag19504
ag19511
ag19518
ag19525
ag19532
ag19539
ag19546
ag19553
ag19560
ag19567
ag19574
ag19581
ag19588
ag19595
ag19602
ag19609
ag19616
ag19623
ag19630
ag19637
ag19644
ag19651
ag19658
ag19665
ag19672
ag19679
ag19686
ag19693
ag19700
ag19707
ag19714
ag19721
ag19728
ag19735
ag19742
ag19749
ag19756
ag19763
ag19770
ag19777
ag19784
ag19791
ag19798
ag19805
ag19812
ag19819
ag19826
ag19833
ag19840
ag19847
ag19854
ag19861
ag19868
ag19875
ag19882
ag19889
ag19896
ag19903
ag19910
ag19917
ag19924
ag19931
ag19938
ag19945
ag19952
ag19959
ag19966
ag19973
ag19980
ag19987
ag19994
ag20001
ag20008
ag20015
ag20022
ag20029
ag20036
ag20043
ag20050
ag20057
ag20064
ag20071
ag20078
ag20085
ag20092
ag20099
ag20106
ag20113
ag20120
ag20127
ag20134
ag20141
ag20148
ag20155
ag20162
ag20169
ag20176
ag20183
ag20190
ag20197
ag20204
ag20211
ag20218
ag20225
ag20232
ag20239
ag20246
ag20253
ag20260
ag20267
ag20274
ag20281
ag20288
ag20295
ag20302
ag20309
ag20316
ag20323
ag20330
ag20337
ag20344
ag20351
ag20358
ag20365
ag20372
ag20379
ag20386
ag20393
ag20400
ag20407
ag20414
ag20421
ag20428
ag20435
ag20442
ag20449
ag20456
ag20463
ag20470
ag20477
ag20484
ag20491
ag20498
ag20505
ag20512
ag20519
ag20526
ag20533
ag20540
ag20547
ag20554
ag20561
ag20568
ag20575
ag20582
ag20589
ag20596
ag20603
ag20610
ag20617
ag20624
ag20631
ag20638
ag20645
ag20652
ag20659
ag20666
ag20673
ag20680
ag20687
ag20694
ag20701
ag20708
ag20715
ag20722
ag20729
ag20736
ag20743
ag20750
ag20757
ag20764
ag20771
ag20778
ag20785
ag20792
ag20799
ag20806
ag20813
ag20820
ag20827
ag20834
ag20841
ag20848
ag20855
ag20862
ag20869
ag20876
ag20883
ag20890
ag20897
ag20904
ag20911
ag20918
ag20925
ag20932
ag20939
ag20946
ag20953
ag20960
ag20967
ag20974
ag20981
ag20988
ag20995
ag21002
ag21009
ag21016
ag21023
ag21030
ag21037
ag21044
ag21051
ag21058
ag21065
ag21072
ag21079
ag21086
ag21093
ag21100
ag21107
ag21114
ag21121
ag21128
ag21135
ag21142
ag21149
ag21156
ag21163
ag21170
ag21177
ag21184
ag21191
ag21198
ag21205
ag21212
ag21219
ag21226
ag21233
ag21240
ag21247
ag21254
ag21261
ag21268
ag21275
ag21282
ag21289
ag21296
ag21303
ag21310
ag21317
ag21324
ag21331
ag21338
ag21345
ag21352
ag21359
ag21366
ag21373
ag21380
ag21387
ag21394
ag21401
ag21408
ag21415
ag21422
ag21429
ag21436
ag21443
ag21450
ag21457
ag21464
ag21471
ag21478
ag21485
ag21492
ag21499
ag21506
ag21513
ag21520
ag21527
ag21534
ag21541
ag21548
ag21555
ag21562
ag21569
ag21576
ag21583
ag21590
ag21597
ag21604
ag21611
ag21618
ag21625
ag21633
ag21643
ag21651
ag21659
ag21667
ag21675
ag21683
ag21691
ag21699
ag21707
ag21715
ag21723
ag21731
ag21739
ag21747
ag21754
ag21761
ag21768
ag21775
ag21782
ag21789
ag21796
ag21803
ag21810
ag21817
ag21824
ag21831
ag21838
ag21845
ag21852
ag21859
ag21866
ag21873
ag21880
ag21887
ag21894
ag21901
ag21908
ag21915
ag21922
ag21929
ag21936
ag21943
ag21950
ag21957
ag21964
ag21971
ag21978
ag21985
ag21992
ag21999
ag22006
ag22013
ag22020
ag22027
ag22034
ag22041
ag22048
ag22055
ag22062
ag22069
ag22076
ag22083
ag22090
ag22097
ag22104
ag22111
ag22118
ag22125
ag22132
ag22139
ag22146
ag22153
ag22160
ag22167
ag22174
ag22181
ag22188
ag22195
ag22202
ag22209
ag22216
ag22223
ag22230
ag22237
ag22244
ag22251
ag22258
ag22265
ag22272
ag22279
ag22286
ag22293
ag22300
ag22307
ag22314
ag22321
ag22328
ag22335
ag22342
ag22349
ag22356
ag22363
ag22370
ag22377
ag22384
ag22391
ag22398
ag22405
ag22412
ag22419
ag22426
ag22433
ag22440
ag22447
ag22454
ag22461
ag22468
ag22475
ag22482
ag22489
ag22496
ag22503
ag22510
ag22517
ag22524
ag22531
ag22538
ag22545
ag22552
ag22559
ag22566
ag22573
ag22580
ag22587
ag22594
ag22601
ag22608
ag22615
ag22622
ag22629
ag22636
ag22643
ag22650
ag22657
ag22664
ag22671
ag22678
ag22685
ag22692
ag22699
ag22706
ag22713
ag22720
ag22727
ag22734
ag22741
ag22748
ag22755
ag22762
ag22769
ag22776
ag22783
ag22790
ag22797
ag22804
ag22811
ag22818
ag22825
ag22832
ag22839
ag22846
ag22853
ag22860
ag22867
ag22874
ag22881
ag22888
ag22895
ag22902
ag22909
ag22916
ag22923
ag22930
ag22937
ag22944
ag22951
ag22958
ag22965
ag22972
ag22979
ag22986
ag22993
ag23000
ag23007
ag23014
ag23021
ag23028
ag23035
ag23042
ag23049
ag23056
ag23063
ag23070
ag23077
ag23084
ag23091
ag23098
ag23105
ag23112
ag23119
ag23126
ag23133
ag23140
ag23147
ag23154
ag23161
ag23168
ag23175
ag23182
ag23189
ag23196
ag23203
ag23210
ag23217
ag23224
ag23231
ag23238
ag23245
ag23252
ag23259
ag23266
ag23273
ag23280
ag23287
ag23294
ag23301
ag23308
ag23315
ag23322
ag23329
ag23336
ag23343
ag23350
ag23357
ag23364
ag23371
ag23378
ag23385
ag23392
ag23399
ag23406
ag23413
ag23420
ag23427
ag23434
ag23441
ag23448
ag23455
ag23462
ag23469
ag23476
ag23483
ag23490
ag23497
ag23504
ag23511
ag23518
ag23525
ag23532
ag23539
ag23546
ag23553
ag23560
ag23567
ag23574
ag23581
ag23588
ag23595
ag23602
ag23609
ag23616
ag23623
ag23630
ag23637
ag23644
ag23651
ag23658
ag23665
ag23672
ag23679
ag23686
ag23693
ag23700
ag23707
ag23714
ag23721
ag23728
ag23735
ag23742
ag23749
ag23756
ag23763
ag23770
ag23777
ag23784
ag23791
ag23798
ag23805
ag23812
ag23819
ag23826
ag23833
ag23840
ag23847
ag23854
ag23861
ag23868
ag23875
ag23882
ag23889
ag23896
ag23903
ag23910
ag23917
ag23924
ag23931
ag23938
ag23945
ag23952
ag23959
ag23966
ag23973
ag23980
ag23987
ag23994
ag24001
ag24008
ag24015
ag24022
ag24029
ag24036
ag24043
ag24050
ag24057
ag24064
ag24071
ag24078
ag24085
ag24092
ag24100
ag24110
ag24118
ag24126
ag24134
ag24142
ag24149
ag24157
ag24170
ag24181
ag24192
ag24203
ag24214
ag24222
ag24230
ag24237
ag24244
ag24251
ag24258
ag24265
ag24272
ag24279
ag24286
ag24293
ag24300
ag24307
ag24314
ag24321
ag24328
ag24335
ag24342
ag24349
ag24356
ag24363
ag24370
ag24377
ag24384
ag24391
ag24398
ag24405
ag24412
ag24419
ag24426
ag24433
ag24440
ag24447
ag24454
ag24461
ag24468
ag24475
ag24482
ag24489
ag24496
ag24503
ag24510
ag24517
ag24524
ag24531
ag24538
ag24545
ag24552
ag24559
ag24566
ag24573
ag24580
ag24587
ag24594
ag24601
ag24608
ag24615
ag24622
ag24629
ag24636
ag24643
ag24650
ag24657
ag24664
ag24671
ag24678
ag24685
ag24692
ag24699
ag24706
ag24713
ag24720
ag24727
ag24734
ag24741
ag24748
ag24755
ag24762
ag24769
ag24776
ag24783
ag24790
ag24797
ag24804
ag24811
ag24818
ag24825
ag24832
ag24839
ag24846
ag24853
ag24860
ag24867
ag24874
ag24881
ag24888
ag24895
ag24902
ag24909
ag24916
ag24923
ag24930
ag24937
ag24944
ag24951
ag24958
ag24965
ag24972
ag24979
ag24986
ag24993
ag25000
ag25007
ag25014
ag25021
ag25028
ag25035
ag25042
ag25049
ag25056
ag25063
ag25070
ag25077
ag25084
ag25091
ag25098
ag25105
ag25112
ag25119
ag25126
ag25133
ag25140
ag25147
ag25154
ag25161
ag25168
ag25175
ag25182
ag25189
ag25196
ag25203
ag25210
ag25217
ag25224
ag25231
ag25238
ag25245
ag25252
ag25259
ag25266
ag25273
ag25280
ag25287
ag25294
ag25301
ag25308
ag25315
ag25322
ag25329
ag25336
ag25343
ag25350
ag25357
ag25364
ag25371
ag25378
ag25385
ag25392
ag25399
ag25406
ag25413
ag25420
ag25427
ag25434
ag25441
ag25448
ag25455
ag25462
ag25469
ag25476
ag25483
ag25490
ag25497
ag25504
ag25511
ag25518
ag25525
ag25532
ag25539
ag25546
ag25553
ag25560
ag25567
ag25574
ag25581
ag25588
ag25595
ag25602
ag25609
ag25616
ag25623
ag25630
ag25637
ag25644
ag25651
ag25658
ag25665
ag25672
ag25679
ag25686
ag25693
ag25700
ag25707
ag25714
ag25721
ag25728
ag25735
ag25742
ag25749
ag25756
ag25763
ag25770
ag25777
ag25784
ag25791
ag25798
ag25805
ag25812
ag25819
asg21
I0
sg1057
S'com.google.common.collect.ss'
p25824
sba(iArchitecture
Cluster
p25825
(dp25826
g7
(lp25827
(iArchitecture
Entity
p25828
(dp25829
g11
(lp25830
sg13
S'com.google.common.collect.testing.features.SetFeature'
p25831
sg15
(lp25832
sg17
(lp25833
sg19
(lp25834
sg21
I0
sba(iArchitecture
Entity
p25835
(dp25836
g11
(lp25837
sg13
S'com.google.common.collect.testing.features.SetFeature$Require'
p25838
sg15
(lp25839
sg17
(lp25840
sg19
(lp25841
sg21
I0
sbasg1055
(lp25842
g25831
ag25838
asg21
I0
sg1057
S'com.google.common.collect.testing.features.ss'
p25843
sba(iArchitecture
Cluster
p25844
(dp25845
g7
(lp25846
(iArchitecture
Entity
p25847
(dp25848
g11
(lp25849
sg13
S'com.google.common.annotations.GwtCompatible'
p25850
sg15
(lp25851
sg17
(lp25852
sg19
(lp25853
sg21
I0
sba(iArchitecture
Entity
p25854
(dp25855
g11
(lp25856
sg13
S'com.google.common.collect.BiMap'
p25857
sg15
(lp25858
sg17
(lp25859
sg19
(lp25860
sg21
I0
sba(iArchitecture
Entity
p25861
(dp25862
g11
(lp25863
sg13
S'com.google.common.collect.ContiguousSet'
p25864
sg15
(lp25865
sg17
(lp25866
sg19
(lp25867
sg21
I0
sba(iArchitecture
Entity
p25868
(dp25869
g11
(lp25870
sg13
S'com.google.common.collect.EnumMultiset'
p25871
sg15
(lp25872
sg17
(lp25873
sg19
(lp25874
sg21
I0
sba(iArchitecture
Entity
p25875
(dp25876
g11
(lp25877
sg13
S'com.google.common.collect.ForwardingImmutableCollection'
p25878
sg15
(lp25879
sg17
(lp25880
sg19
(lp25881
sg21
I0
sba(iArchitecture
Entity
p25882
(dp25883
g11
(lp25884
sg13
S'com.google.common.collect.ForwardingImmutableList'
p25885
sg15
(lp25886
sg17
(lp25887
sg19
(lp25888
sg21
I0
sba(iArchitecture
Entity
p25889
(dp25890
g11
(lp25891
sg13
S'com.google.common.collect.ForwardingImmutableMap'
p25892
sg15
(lp25893
sg17
(lp25894
sg19
(lp25895
sg21
I0
sba(iArchitecture
Entity
p25896
(dp25897
g11
(lp25898
sg13
S'com.google.common.collect.ForwardingImmutableSet'
p25899
sg15
(lp25900
sg17
(lp25901
sg19
(lp25902
sg21
I0
sba(iArchitecture
Entity
p25903
(dp25904
g11
(lp25905
sg13
S'com.google.common.collect.ForwardingListMultimap'
p25906
sg15
(lp25907
sg17
(lp25908
sg19
(lp25909
sg21
I0
sba(iArchitecture
Entity
p25910
(dp25911
g11
(lp25912
sg13
S'com.google.common.collect.GwtPlatform'
p25913
sg15
(lp25914
sg17
(lp25915
sg19
(lp25916
sg21
I0
sba(iArchitecture
Entity
p25917
(dp25918
g11
(lp25919
sg13
S'com.google.common.collect.HashMultiset'
p25920
sg15
(lp25921
sg17
(lp25922
sg19
(lp25923
sg21
I0
sba(iArchitecture
Entity
p25924
(dp25925
g11
(lp25926
sg13
S'com.google.common.collect.ImmutableCollection'
p25927
sg15
(lp25928
sg17
(lp25929
sg19
(lp25930
sg21
I0
sba(iArchitecture
Entity
p25931
(dp25932
g11
(lp25933
sg13
S'com.google.common.collect.ImmutableCollection$ArrayBasedBuilder'
p25934
sg15
(lp25935
sg17
(lp25936
sg19
(lp25937
sg21
I0
sba(iArchitecture
Entity
p25938
(dp25939
g11
(lp25940
sg13
S'com.google.common.collect.ImmutableCollection$Builder'
p25941
sg15
(lp25942
sg17
(lp25943
sg19
(lp25944
sg21
I0
sba(iArchitecture
Entity
p25945
(dp25946
g11
(lp25947
sg13
S'com.google.common.collect.ImmutableMap'
p25948
sg15
(lp25949
sg17
(lp25950
sg19
(lp25951
sg21
I0
sba(iArchitecture
Entity
p25952
(dp25953
g11
(lp25954
sg13
S'com.google.common.collect.ImmutableMap$1'
p25955
sg15
(lp25956
sg17
(lp25957
sg19
(lp25958
sg21
I0
sba(iArchitecture
Entity
p25959
(dp25960
g11
(lp25961
sg13
S'com.google.common.collect.ImmutableMap$Builder'
p25962
sg15
(lp25963
sg17
(lp25964
sg19
(lp25965
sg21
I0
sba(iArchitecture
Entity
p25966
(dp25967
g11
(lp25968
sg13
S'com.google.common.collect.ImmutableMap$SerializedForm'
p25969
sg15
(lp25970
sg17
(lp25971
sg19
(lp25972
sg21
I0
sba(iArchitecture
Entity
p25973
(dp25974
g11
(lp25975
sg13
S'com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet'
p25976
sg15
(lp25977
sg17
(lp25978
sg19
(lp25979
sg21
I0
sba(iArchitecture
Entity
p25980
(dp25981
g11
(lp25982
sg13
S'com.google.common.collect.ImmutableSortedSet$Builder'
p25983
sg15
(lp25984
sg17
(lp25985
sg19
(lp25986
sg21
I0
sba(iArchitecture
Entity
p25987
(dp25988
g11
(lp25989
sg13
S'com.google.common.collect.ListMultimap'
p25990
sg15
(lp25991
sg17
(lp25992
sg19
(lp25993
sg21
I0
sba(iArchitecture
Entity
p25994
(dp25995
g11
(lp25996
sg13
S'com.google.common.collect.Multimap'
p25997
sg15
(lp25998
sg17
(lp25999
sg19
(lp26000
sg21
I0
sba(iArchitecture
Entity
p26001
(dp26002
g11
(lp26003
sg13
S'com.google.common.collect.Multiset'
p26004
sg15
(lp26005
sg17
(lp26006
sg19
(lp26007
sg21
I0
sba(iArchitecture
Entity
p26008
(dp26009
g11
(lp26010
sg13
S'com.google.common.collect.Multiset$Entry'
p26011
sg15
(lp26012
sg17
(lp26013
sg19
(lp26014
sg21
I0
sba(iArchitecture
Entity
p26015
(dp26016
g11
(lp26017
sg13
S'com.google.common.collect.RegularImmutableAsList'
p26018
sg15
(lp26019
sg17
(lp26020
sg19
(lp26021
sg21
I0
sba(iArchitecture
Entity
p26022
(dp26023
g11
(lp26024
sg13
S'com.google.common.collect.RegularImmutableMap'
p26025
sg15
(lp26026
sg17
(lp26027
sg19
(lp26028
sg21
I0
sba(iArchitecture
Entity
p26029
(dp26030
g11
(lp26031
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$KnownOrder'
p26032
sg15
(lp26033
sg17
(lp26034
sg19
(lp26035
sg21
I0
sba(iArchitecture
Entity
p26036
(dp26037
g11
(lp26038
sg13
S'com.google.common.collect.testing.AnEnum'
p26039
sg15
(lp26040
sg17
(lp26041
sg19
(lp26042
sg21
I0
sba(iArchitecture
Entity
p26043
(dp26044
g11
(lp26045
sg13
S'com.google.common.collect.testing.DerivedGenerator'
p26046
sg15
(lp26047
sg17
(lp26048
sg19
(lp26049
sg21
I0
sba(iArchitecture
Entity
p26050
(dp26051
g11
(lp26052
sg13
S'com.google.common.collect.testing.IteratorFeature'
p26053
sg15
(lp26054
sg17
(lp26055
sg19
(lp26056
sg21
I0
sba(iArchitecture
Entity
p26057
(dp26058
g11
(lp26059
sg13
S'com.google.common.collect.testing.IteratorTester'
p26060
sg15
(lp26061
sg17
(lp26062
sg19
(lp26063
sg21
I0
sba(iArchitecture
Entity
p26064
(dp26065
g11
(lp26066
sg13
S'com.google.common.collect.testing.MinimalIterable'
p26067
sg15
(lp26068
sg17
(lp26069
sg19
(lp26070
sg21
I0
sba(iArchitecture
Entity
p26071
(dp26072
g11
(lp26073
sg13
S'com.google.common.collect.testing.SampleElements'
p26074
sg15
(lp26075
sg17
(lp26076
sg19
(lp26077
sg21
I0
sba(iArchitecture
Entity
p26078
(dp26079
g11
(lp26080
sg13
S'com.google.common.collect.testing.SampleElements$Chars'
p26081
sg15
(lp26082
sg17
(lp26083
sg19
(lp26084
sg21
I0
sba(iArchitecture
Entity
p26085
(dp26086
g11
(lp26087
sg13
S'com.google.common.collect.testing.SampleElements$Collider'
p26088
sg15
(lp26089
sg17
(lp26090
sg19
(lp26091
sg21
I0
sba(iArchitecture
Entity
p26092
(dp26093
g11
(lp26094
sg13
S'com.google.common.collect.testing.SampleElements$Colliders'
p26095
sg15
(lp26096
sg17
(lp26097
sg19
(lp26098
sg21
I0
sba(iArchitecture
Entity
p26099
(dp26100
g11
(lp26101
sg13
S'com.google.common.collect.testing.SampleElements$Enums'
p26102
sg15
(lp26103
sg17
(lp26104
sg19
(lp26105
sg21
I0
sba(iArchitecture
Entity
p26106
(dp26107
g11
(lp26108
sg13
S'com.google.common.collect.testing.SampleElements$Ints'
p26109
sg15
(lp26110
sg17
(lp26111
sg19
(lp26112
sg21
I0
sba(iArchitecture
Entity
p26113
(dp26114
g11
(lp26115
sg13
S'com.google.common.collect.testing.SampleElements$Strings'
p26116
sg15
(lp26117
sg17
(lp26118
sg19
(lp26119
sg21
I0
sba(iArchitecture
Entity
p26120
(dp26121
g11
(lp26122
sg13
S'com.google.common.collect.testing.SampleElements$Unhashables'
p26123
sg15
(lp26124
sg17
(lp26125
sg19
(lp26126
sg21
I0
sba(iArchitecture
Entity
p26127
(dp26128
g11
(lp26129
sg13
S'com.google.common.collect.testing.SortedMapInterfaceTest'
p26130
sg15
(lp26131
sg17
(lp26132
sg19
(lp26133
sg21
I0
sba(iArchitecture
Entity
p26134
(dp26135
g11
(lp26136
sg13
S'com.google.common.collect.testing.TestCharacterListGenerator'
p26137
sg15
(lp26138
sg17
(lp26139
sg19
(lp26140
sg21
I0
sba(iArchitecture
Entity
p26141
(dp26142
g11
(lp26143
sg13
S'com.google.common.collect.testing.TestCollectionGenerator'
p26144
sg15
(lp26145
sg17
(lp26146
sg19
(lp26147
sg21
I0
sba(iArchitecture
Entity
p26148
(dp26149
g11
(lp26150
sg13
S'com.google.common.collect.testing.TestCollidingSetGenerator'
p26151
sg15
(lp26152
sg17
(lp26153
sg19
(lp26154
sg21
I0
sba(iArchitecture
Entity
p26155
(dp26156
g11
(lp26157
V2349
p26158
asg13
S'com.google.common.collect.testing.TestContainerGenerator'
p26159
sg15
(lp26160
VThe [javadoc for TestContainerGenerator.order](https://github.com/google/guava/blob/master/guava-testlib/src/com/google/common/collect/testing/TestContainerGenerator.java#L66) states:\u000a\u000a> This method runs only when CollectionFeature#KNOWN_ORDER is specified when creating the test suite. It should never run when testing containers such as HashSet, which have a non-deterministic iteration order.\u000a\u000aHowever, 74 tests (out of 450) fail with the code below which (as described by the documentation) expects TestContainerGenerator.order not to be called and throws an UnsupportedOperationException for it:\u000a\u000a``` java\u000apublic final class JavaUtilCollectionsTests {\u000a  public static Test suite() {\u000a    TestSuite suite = new TestSuite("HashSet");\u000a    suite.addTest(SetTestSuiteBuilder.<Integer>using(new TestSetGenerator<Integer>() {\u000a      @Override\u000a      public SampleElements<Integer> samples() {\u000a        return new SampleElements<Integer>(-7, 0, Integer.MIN_VALUE, 42, Integer.MAX_VALUE);\u000a      }\u000a\u000a      @Override\u000a      public Integer[] createArray(int length) {\u000a        return new Integer[length];\u000a      }\u000a\u000a      @Override\u000a      public Iterable<Integer> order(List<Integer> insertionOrder) {\u000a        throw new UnsupportedOperationException();\u000a      }\u000a\u000a      @Override\u000a      public Set<Integer> create(Object... elements) {\u000a        List<Integer> values =\u000a            Arrays.stream(elements).map(o -> (Integer) o).collect(Collectors.toList());\u000a        return new HashSet<>(values);\u000a      }\u000a    }).named("HashSet")\u000a        .withFeatures(CollectionSize.ANY, CollectionFeature.GENERAL_PURPOSE,\u000a            CollectionFeature.ALLOWS_NULL_VALUES, CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS)\u000a        .createTestSuite());\u000a    return suite;\u000a  }\u000a}\u000a```\u000a\u000aThe expected result would be for all the tests to pass.\u000a
p26161
asg17
(lp26162
(lp26163
I1
aasg19
(lp26164
VTest suites incorrectly call TestSetGenerator.order
p26165
asg21
I0
sba(iArchitecture
Entity
p26166
(dp26167
g11
(lp26168
sg13
S'com.google.common.collect.testing.TestEnumMapGenerator'
p26169
sg15
(lp26170
sg17
(lp26171
sg19
(lp26172
sg21
I0
sba(iArchitecture
Entity
p26173
(dp26174
g11
(lp26175
sg13
S'com.google.common.collect.testing.TestListGenerator'
p26176
sg15
(lp26177
sg17
(lp26178
sg19
(lp26179
sg21
I0
sba(iArchitecture
Entity
p26180
(dp26181
g11
(lp26182
sg13
S'com.google.common.collect.testing.TestMapEntrySetGenerator'
p26183
sg15
(lp26184
sg17
(lp26185
sg19
(lp26186
sg21
I0
sba(iArchitecture
Entity
p26187
(dp26188
g11
(lp26189
sg13
S'com.google.common.collect.testing.TestMapGenerator'
p26190
sg15
(lp26191
sg17
(lp26192
sg19
(lp26193
sg21
I0
sba(iArchitecture
Entity
p26194
(dp26195
g11
(lp26196
sg13
S'com.google.common.collect.testing.TestStringCollectionGenerator'
p26197
sg15
(lp26198
sg17
(lp26199
sg19
(lp26200
sg21
I0
sba(iArchitecture
Entity
p26201
(dp26202
g11
(lp26203
sg13
S'com.google.common.collect.testing.TestStringSortedSetGenerator'
p26204
sg15
(lp26205
sg17
(lp26206
sg19
(lp26207
sg21
I0
sba(iArchitecture
Entity
p26208
(dp26209
g11
(lp26210
sg13
S'com.google.common.collect.testing.TestSubjectGenerator'
p26211
sg15
(lp26212
sg17
(lp26213
sg19
(lp26214
sg21
I0
sba(iArchitecture
Entity
p26215
(dp26216
g11
(lp26217
sg13
S'com.google.common.collect.testing.TestUnhashableCollectionGenerator'
p26218
sg15
(lp26219
sg17
(lp26220
sg19
(lp26221
sg21
I0
sba(iArchitecture
Entity
p26222
(dp26223
g11
(lp26224
sg13
S'com.google.common.collect.testing.UnhashableObject'
p26225
sg15
(lp26226
sg17
(lp26227
sg19
(lp26228
sg21
I0
sba(iArchitecture
Entity
p26229
(dp26230
g11
(lp26231
sg13
S'com.google.common.collect.testing.features.CollectionSize'
p26232
sg15
(lp26233
sg17
(lp26234
sg19
(lp26235
sg21
I0
sba(iArchitecture
Entity
p26236
(dp26237
g11
(lp26238
sg13
S'com.google.common.collect.testing.features.CollectionSize$Require'
p26239
sg15
(lp26240
sg17
(lp26241
sg19
(lp26242
sg21
I0
sba(iArchitecture
Entity
p26243
(dp26244
g11
(lp26245
sg13
S'com.google.common.collect.testing.features.MapFeature'
p26246
sg15
(lp26247
sg17
(lp26248
sg19
(lp26249
sg21
I0
sba(iArchitecture
Entity
p26250
(dp26251
g11
(lp26252
sg13
S'com.google.common.collect.testing.features.MapFeature$Require'
p26253
sg15
(lp26254
sg17
(lp26255
sg19
(lp26256
sg21
I0
sba(iArchitecture
Entity
p26257
(dp26258
g11
(lp26259
sg13
S'com.google.common.collect.testing.features.TesterAnnotation'
p26260
sg15
(lp26261
sg17
(lp26262
sg19
(lp26263
sg21
I0
sba(iArchitecture
Entity
p26264
(dp26265
g11
(lp26266
sg13
S'com.google.common.collect.testing.google.AbstractBiMapTester'
p26267
sg15
(lp26268
sg17
(lp26269
sg19
(lp26270
sg21
I0
sba(iArchitecture
Entity
p26271
(dp26272
g11
(lp26273
sg13
S'com.google.common.collect.testing.google.AbstractListMultimapTester'
p26274
sg15
(lp26275
sg17
(lp26276
sg19
(lp26277
sg21
I0
sba(iArchitecture
Entity
p26278
(dp26279
g11
(lp26280
sg13
S'com.google.common.collect.testing.google.AbstractMultimapTester'
p26281
sg15
(lp26282
sg17
(lp26283
sg19
(lp26284
sg21
I0
sba(iArchitecture
Entity
p26285
(dp26286
g11
(lp26287
sg13
S'com.google.common.collect.testing.google.AbstractMultisetSetCountTester'
p26288
sg15
(lp26289
sg17
(lp26290
sg19
(lp26291
sg21
I0
sba(iArchitecture
Entity
p26292
(dp26293
g11
(lp26294
sg13
S'com.google.common.collect.testing.google.AbstractMultisetTester'
p26295
sg15
(lp26296
sg17
(lp26297
sg19
(lp26298
sg21
I0
sba(iArchitecture
Entity
p26299
(dp26300
g11
(lp26301
sg13
S'com.google.common.collect.testing.google.BiMapClearTester'
p26302
sg15
(lp26303
sg17
(lp26304
sg19
(lp26305
sg21
I0
sba(iArchitecture
Entity
p26306
(dp26307
g11
(lp26308
sg13
S'com.google.common.collect.testing.google.BiMapGenerators'
p26309
sg15
(lp26310
sg17
(lp26311
sg19
(lp26312
sg21
I0
sba(iArchitecture
Entity
p26313
(dp26314
g11
(lp26315
sg13
S'com.google.common.collect.testing.google.BiMapGenerators$ImmutableBiMapCopyOfEntriesGenerator'
p26316
sg15
(lp26317
sg17
(lp26318
sg19
(lp26319
sg21
I0
sba(iArchitecture
Entity
p26320
(dp26321
g11
(lp26322
sg13
S'com.google.common.collect.testing.google.BiMapGenerators$ImmutableBiMapCopyOfGenerator'
p26323
sg15
(lp26324
sg17
(lp26325
sg19
(lp26326
sg21
I0
sba(iArchitecture
Entity
p26327
(dp26328
g11
(lp26329
sg13
S'com.google.common.collect.testing.google.BiMapGenerators$ImmutableBiMapGenerator'
p26330
sg15
(lp26331
sg17
(lp26332
sg19
(lp26333
sg21
I0
sba(iArchitecture
Entity
p26334
(dp26335
g11
(lp26336
sg13
S'com.google.common.collect.testing.google.BiMapInverseTester'
p26337
sg15
(lp26338
sg17
(lp26339
sg19
(lp26340
sg21
I0
sba(iArchitecture
Entity
p26341
(dp26342
g11
(lp26343
sg13
S'com.google.common.collect.testing.google.BiMapInverseTester$BiMapPair'
p26344
sg15
(lp26345
sg17
(lp26346
sg19
(lp26347
sg21
I0
sba(iArchitecture
Entity
p26348
(dp26349
g11
(lp26350
sg13
S'com.google.common.collect.testing.google.BiMapPutTester'
p26351
sg15
(lp26352
sg17
(lp26353
sg19
(lp26354
sg21
I0
sba(iArchitecture
Entity
p26355
(dp26356
g11
(lp26357
sg13
S'com.google.common.collect.testing.google.BiMapRemoveTester'
p26358
sg15
(lp26359
sg17
(lp26360
sg19
(lp26361
sg21
I0
sba(iArchitecture
Entity
p26362
(dp26363
g11
(lp26364
sg13
S'com.google.common.collect.testing.google.BiMapTestSuiteBuilder'
p26365
sg15
(lp26366
sg17
(lp26367
sg19
(lp26368
sg21
I0
sba(iArchitecture
Entity
p26369
(dp26370
g11
(lp26371
sg13
S'com.google.common.collect.testing.google.BiMapTestSuiteBuilder$NoRecurse'
p26372
sg15
(lp26373
sg17
(lp26374
sg19
(lp26375
sg21
I0
sba(iArchitecture
Entity
p26376
(dp26377
g11
(lp26378
sg13
S'com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators'
p26379
sg15
(lp26380
sg17
(lp26381
sg19
(lp26382
sg21
I0
sba(iArchitecture
Entity
p26383
(dp26384
g11
(lp26385
sg13
S'com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators$BiMapValueSetGenerator'
p26386
sg15
(lp26387
sg17
(lp26388
sg19
(lp26389
sg21
I0
sba(iArchitecture
Entity
p26390
(dp26391
g11
(lp26392
sg13
S'com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators$InverseBiMapGenerator'
p26393
sg15
(lp26394
sg17
(lp26395
sg19
(lp26396
sg21
I0
sba(iArchitecture
Entity
p26397
(dp26398
g11
(lp26399
sg13
S'com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators$MapGenerator'
p26400
sg15
(lp26401
sg17
(lp26402
sg19
(lp26403
sg21
I0
sba(iArchitecture
Entity
p26404
(dp26405
g11
(lp26406
sg13
S'com.google.common.collect.testing.google.GoogleHelpers'
p26407
sg15
(lp26408
sg17
(lp26409
sg19
(lp26410
sg21
I0
sba(iArchitecture
Entity
p26411
(dp26412
g11
(lp26413
sg13
S'com.google.common.collect.testing.google.ListGenerators'
p26414
sg15
(lp26415
sg17
(lp26416
sg19
(lp26417
sg21
I0
sba(iArchitecture
Entity
p26418
(dp26419
g11
(lp26420
sg13
S'com.google.common.collect.testing.google.ListGenerators$1'
p26421
sg15
(lp26422
sg17
(lp26423
sg19
(lp26424
sg21
I0
sba(iArchitecture
Entity
p26425
(dp26426
g11
(lp26427
sg13
S'com.google.common.collect.testing.google.ListGenerators$BuilderAddAllListGenerator'
p26428
sg15
(lp26429
sg17
(lp26430
sg19
(lp26431
sg21
I0
sba(iArchitecture
Entity
p26432
(dp26433
g11
(lp26434
sg13
S'com.google.common.collect.testing.google.ListGenerators$BuilderAddListGenerator'
p26435
sg15
(lp26436
sg17
(lp26437
sg19
(lp26438
sg21
I0
sba(iArchitecture
Entity
p26439
(dp26440
g11
(lp26441
sg13
S'com.google.common.collect.testing.google.ListGenerators$BuilderReversedListGenerator'
p26442
sg15
(lp26443
sg17
(lp26444
sg19
(lp26445
sg21
I0
sba(iArchitecture
Entity
p26446
(dp26447
g11
(lp26448
sg13
S'com.google.common.collect.testing.google.ListGenerators$CharactersOfCharSequenceGenerator'
p26449
sg15
(lp26450
sg17
(lp26451
sg19
(lp26452
sg21
I0
sba(iArchitecture
Entity
p26453
(dp26454
g11
(lp26455
sg13
S'com.google.common.collect.testing.google.ListGenerators$CharactersOfStringGenerator'
p26456
sg15
(lp26457
sg17
(lp26458
sg19
(lp26459
sg21
I0
sba(iArchitecture
Entity
p26460
(dp26461
g11
(lp26462
sg13
S'com.google.common.collect.testing.google.ListGenerators$ImmutableListHeadSubListGenerator'
p26463
sg15
(lp26464
sg17
(lp26465
sg19
(lp26466
sg21
I0
sba(iArchitecture
Entity
p26467
(dp26468
g11
(lp26469
sg13
S'com.google.common.collect.testing.google.ListGenerators$ImmutableListMiddleSubListGenerator'
p26470
sg15
(lp26471
sg17
(lp26472
sg19
(lp26473
sg21
I0
sba(iArchitecture
Entity
p26474
(dp26475
g11
(lp26476
sg13
S'com.google.common.collect.testing.google.ListGenerators$ImmutableListOfGenerator'
p26477
sg15
(lp26478
sg17
(lp26479
sg19
(lp26480
sg21
I0
sba(iArchitecture
Entity
p26481
(dp26482
g11
(lp26483
sg13
S'com.google.common.collect.testing.google.ListGenerators$ImmutableListTailSubListGenerator'
p26484
sg15
(lp26485
sg17
(lp26486
sg19
(lp26487
sg21
I0
sba(iArchitecture
Entity
p26488
(dp26489
g11
(lp26490
sg13
S'com.google.common.collect.testing.google.ListGenerators$TestUnhashableListGenerator'
p26491
sg15
(lp26492
sg17
(lp26493
sg19
(lp26494
sg21
I0
sba(iArchitecture
Entity
p26495
(dp26496
g11
(lp26497
sg13
S'com.google.common.collect.testing.google.ListGenerators$UnhashableElementsImmutableListGenerator'
p26498
sg15
(lp26499
sg17
(lp26500
sg19
(lp26501
sg21
I0
sba(iArchitecture
Entity
p26502
(dp26503
g11
(lp26504
sg13
S'com.google.common.collect.testing.google.ListMultimapAsMapTester'
p26505
sg15
(lp26506
sg17
(lp26507
sg19
(lp26508
sg21
I0
sba(iArchitecture
Entity
p26509
(dp26510
g11
(lp26511
sg13
S'com.google.common.collect.testing.google.ListMultimapEqualsTester'
p26512
sg15
(lp26513
sg17
(lp26514
sg19
(lp26515
sg21
I0
sba(iArchitecture
Entity
p26516
(dp26517
g11
(lp26518
sg13
S'com.google.common.collect.testing.google.ListMultimapPutAllTester'
p26519
sg15
(lp26520
sg17
(lp26521
sg19
(lp26522
sg21
I0
sba(iArchitecture
Entity
p26523
(dp26524
g11
(lp26525
sg13
S'com.google.common.collect.testing.google.ListMultimapPutTester'
p26526
sg15
(lp26527
sg17
(lp26528
sg19
(lp26529
sg21
I0
sba(iArchitecture
Entity
p26530
(dp26531
g11
(lp26532
sg13
S'com.google.common.collect.testing.google.ListMultimapRemoveTester'
p26533
sg15
(lp26534
sg17
(lp26535
sg19
(lp26536
sg21
I0
sba(iArchitecture
Entity
p26537
(dp26538
g11
(lp26539
sg13
S'com.google.common.collect.testing.google.ListMultimapReplaceValuesTester'
p26540
sg15
(lp26541
sg17
(lp26542
sg19
(lp26543
sg21
I0
sba(iArchitecture
Entity
p26544
(dp26545
g11
(lp26546
sg13
S'com.google.common.collect.testing.google.ListMultimapTestSuiteBuilder'
p26547
sg15
(lp26548
sg17
(lp26549
sg19
(lp26550
sg21
I0
sba(iArchitecture
Entity
p26551
(dp26552
g11
(lp26553
sg13
S'com.google.common.collect.testing.google.ListMultimapTestSuiteBuilder$MultimapAsMapGetGenerator'
p26554
sg15
(lp26555
sg17
(lp26556
sg19
(lp26557
sg21
I0
sba(iArchitecture
Entity
p26558
(dp26559
g11
(lp26560
sg13
S'com.google.common.collect.testing.google.ListMultimapTestSuiteBuilder$MultimapGetGenerator'
p26561
sg15
(lp26562
sg17
(lp26563
sg19
(lp26564
sg21
I0
sba(iArchitecture
Entity
p26565
(dp26566
g11
(lp26567
sg13
S'com.google.common.collect.testing.google.MapGenerators'
p26568
sg15
(lp26569
sg17
(lp26570
sg19
(lp26571
sg21
I0
sba(iArchitecture
Entity
p26572
(dp26573
g11
(lp26574
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableEnumMapGenerator'
p26575
sg15
(lp26576
sg17
(lp26577
sg19
(lp26578
sg21
I0
sba(iArchitecture
Entity
p26579
(dp26580
g11
(lp26581
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfEntriesGenerator'
p26582
sg15
(lp26583
sg17
(lp26584
sg19
(lp26585
sg21
I0
sba(iArchitecture
Entity
p26586
(dp26587
g11
(lp26588
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfEnumMapGenerator'
p26589
sg15
(lp26590
sg17
(lp26591
sg19
(lp26592
sg21
I0
sba(iArchitecture
Entity
p26593
(dp26594
g11
(lp26595
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfEnumMapGenerator$1'
p26596
sg15
(lp26597
sg17
(lp26598
sg19
(lp26599
sg21
I0
sba(iArchitecture
Entity
p26600
(dp26601
g11
(lp26602
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfGenerator'
p26603
sg15
(lp26604
sg17
(lp26605
sg19
(lp26606
sg21
I0
sba(iArchitecture
Entity
p26607
(dp26608
g11
(lp26609
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapEntryListGenerator'
p26610
sg15
(lp26611
sg17
(lp26612
sg19
(lp26613
sg21
I0
sba(iArchitecture
Entity
p26614
(dp26615
g11
(lp26616
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapGenerator'
p26617
sg15
(lp26618
sg17
(lp26619
sg19
(lp26620
sg21
I0
sba(iArchitecture
Entity
p26621
(dp26622
g11
(lp26623
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapKeyListGenerator'
p26624
sg15
(lp26625
sg17
(lp26626
sg19
(lp26627
sg21
I0
sba(iArchitecture
Entity
p26628
(dp26629
g11
(lp26630
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapUnhashableValuesGenerator'
p26631
sg15
(lp26632
sg17
(lp26633
sg19
(lp26634
sg21
I0
sba(iArchitecture
Entity
p26635
(dp26636
g11
(lp26637
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapValueListGenerator'
p26638
sg15
(lp26639
sg17
(lp26640
sg19
(lp26641
sg21
I0
sba(iArchitecture
Entity
p26642
(dp26643
g11
(lp26644
sg13
S'com.google.common.collect.testing.google.MultimapAsMapGetTester'
p26645
sg15
(lp26646
sg17
(lp26647
sg19
(lp26648
sg21
I0
sba(iArchitecture
Entity
p26649
(dp26650
g11
(lp26651
sg13
S'com.google.common.collect.testing.google.MultimapAsMapTester'
p26652
sg15
(lp26653
sg17
(lp26654
sg19
(lp26655
sg21
I0
sba(iArchitecture
Entity
p26656
(dp26657
g11
(lp26658
sg13
S'com.google.common.collect.testing.google.MultimapClearTester'
p26659
sg15
(lp26660
sg17
(lp26661
sg19
(lp26662
sg21
I0
sba(iArchitecture
Entity
p26663
(dp26664
g11
(lp26665
sg13
S'com.google.common.collect.testing.google.MultimapContainsEntryTester'
p26666
sg15
(lp26667
sg17
(lp26668
sg19
(lp26669
sg21
I0
sba(iArchitecture
Entity
p26670
(dp26671
g11
(lp26672
sg13
S'com.google.common.collect.testing.google.MultimapContainsKeyTester'
p26673
sg15
(lp26674
sg17
(lp26675
sg19
(lp26676
sg21
I0
sba(iArchitecture
Entity
p26677
(dp26678
g11
(lp26679
sg13
S'com.google.common.collect.testing.google.MultimapContainsValueTester'
p26680
sg15
(lp26681
sg17
(lp26682
sg19
(lp26683
sg21
I0
sba(iArchitecture
Entity
p26684
(dp26685
g11
(lp26686
sg13
S'com.google.common.collect.testing.google.MultimapEntriesTester'
p26687
sg15
(lp26688
sg17
(lp26689
sg19
(lp26690
sg21
I0
sba(iArchitecture
Entity
p26691
(dp26692
g11
(lp26693
sg13
S'com.google.common.collect.testing.google.MultimapEqualsTester'
p26694
sg15
(lp26695
sg17
(lp26696
sg19
(lp26697
sg21
I0
sba(iArchitecture
Entity
p26698
(dp26699
g11
(lp26700
sg13
S'com.google.common.collect.testing.google.MultimapFeature'
p26701
sg15
(lp26702
sg17
(lp26703
sg19
(lp26704
sg21
I0
sba(iArchitecture
Entity
p26705
(dp26706
g11
(lp26707
sg13
S'com.google.common.collect.testing.google.MultimapFeature$Require'
p26708
sg15
(lp26709
sg17
(lp26710
sg19
(lp26711
sg21
I0
sba(iArchitecture
Entity
p26712
(dp26713
g11
(lp26714
sg13
S'com.google.common.collect.testing.google.MultimapGetTester'
p26715
sg15
(lp26716
sg17
(lp26717
sg19
(lp26718
sg21
I0
sba(iArchitecture
Entity
p26719
(dp26720
g11
(lp26721
sg13
S'com.google.common.collect.testing.google.MultimapKeySetTester'
p26722
sg15
(lp26723
sg17
(lp26724
sg19
(lp26725
sg21
I0
sba(iArchitecture
Entity
p26726
(dp26727
g11
(lp26728
sg13
S'com.google.common.collect.testing.google.MultimapKeysTester'
p26729
sg15
(lp26730
sg17
(lp26731
sg19
(lp26732
sg21
I0
sba(iArchitecture
Entity
p26733
(dp26734
g11
(lp26735
sg13
S'com.google.common.collect.testing.google.MultimapPutAllMultimapTester'
p26736
sg15
(lp26737
sg17
(lp26738
sg19
(lp26739
sg21
I0
sba(iArchitecture
Entity
p26740
(dp26741
g11
(lp26742
sg13
S'com.google.common.collect.testing.google.MultimapPutIterableTester'
p26743
sg15
(lp26744
sg17
(lp26745
sg19
(lp26746
sg21
I0
sba(iArchitecture
Entity
p26747
(dp26748
g11
(lp26749
sg13
S'com.google.common.collect.testing.google.MultimapPutIterableTester$1'
p26750
sg15
(lp26751
sg17
(lp26752
sg19
(lp26753
sg21
I0
sba(iArchitecture
Entity
p26754
(dp26755
g11
(lp26756
sg13
S'com.google.common.collect.testing.google.MultimapPutIterableTester$2'
p26757
sg15
(lp26758
sg17
(lp26759
sg19
(lp26760
sg21
I0
sba(iArchitecture
Entity
p26761
(dp26762
g11
(lp26763
sg13
S'com.google.common.collect.testing.google.MultimapPutIterableTester$3'
p26764
sg15
(lp26765
sg17
(lp26766
sg19
(lp26767
sg21
I0
sba(iArchitecture
Entity
p26768
(dp26769
g11
(lp26770
sg13
S'com.google.common.collect.testing.google.MultimapPutIterableTester$4'
p26771
sg15
(lp26772
sg17
(lp26773
sg19
(lp26774
sg21
I0
sba(iArchitecture
Entity
p26775
(dp26776
g11
(lp26777
sg13
S'com.google.common.collect.testing.google.MultimapPutTester'
p26778
sg15
(lp26779
sg17
(lp26780
sg19
(lp26781
sg21
I0
sba(iArchitecture
Entity
p26782
(dp26783
g11
(lp26784
sg13
S'com.google.common.collect.testing.google.MultimapRemoveAllTester'
p26785
sg15
(lp26786
sg17
(lp26787
sg19
(lp26788
sg21
I0
sba(iArchitecture
Entity
p26789
(dp26790
g11
(lp26791
sg13
S'com.google.common.collect.testing.google.MultimapRemoveEntryTester'
p26792
sg15
(lp26793
sg17
(lp26794
sg19
(lp26795
sg21
I0
sba(iArchitecture
Entity
p26796
(dp26797
g11
(lp26798
sg13
S'com.google.common.collect.testing.google.MultimapReplaceValuesTester'
p26799
sg15
(lp26800
sg17
(lp26801
sg19
(lp26802
sg21
I0
sba(iArchitecture
Entity
p26803
(dp26804
g11
(lp26805
sg13
S'com.google.common.collect.testing.google.MultimapSizeTester'
p26806
sg15
(lp26807
sg17
(lp26808
sg19
(lp26809
sg21
I0
sba(iArchitecture
Entity
p26810
(dp26811
g11
(lp26812
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder'
p26813
sg15
(lp26814
sg17
(lp26815
sg19
(lp26816
sg21
I0
sba(iArchitecture
Entity
p26817
(dp26818
g11
(lp26819
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$AsMapGenerator'
p26820
sg15
(lp26821
sg17
(lp26822
sg19
(lp26823
sg21
I0
sba(iArchitecture
Entity
p26824
(dp26825
g11
(lp26826
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$EntriesGenerator'
p26827
sg15
(lp26828
sg17
(lp26829
sg19
(lp26830
sg21
I0
sba(iArchitecture
Entity
p26831
(dp26832
g11
(lp26833
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator'
p26834
sg15
(lp26835
sg17
(lp26836
sg19
(lp26837
sg21
I0
sba(iArchitecture
Entity
p26838
(dp26839
g11
(lp26840
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$MultimapAsMapGetGenerator'
p26841
sg15
(lp26842
sg17
(lp26843
sg19
(lp26844
sg21
I0
sba(iArchitecture
Entity
p26845
(dp26846
g11
(lp26847
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$MultimapGetGenerator'
p26848
sg15
(lp26849
sg17
(lp26850
sg19
(lp26851
sg21
I0
sba(iArchitecture
Entity
p26852
(dp26853
g11
(lp26854
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$ReserializedMultimapGenerator'
p26855
sg15
(lp26856
sg17
(lp26857
sg19
(lp26858
sg21
I0
sba(iArchitecture
Entity
p26859
(dp26860
g11
(lp26861
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$ValuesGenerator'
p26862
sg15
(lp26863
sg17
(lp26864
sg19
(lp26865
sg21
I0
sba(iArchitecture
Entity
p26866
(dp26867
g11
(lp26868
V2418
p26869
asg13
S'com.google.common.collect.testing.google.MultimapToStringTester'
p26870
sg15
(lp26871
VSee a unit test demonstrating the issue here: https://github.com/gpanther/fastutil-guava-tests/blob/master/src/test/java/net/greypanther/guava/tests/tests/CustomToStringTest.java\u000a\u000aIt shows a HashMap subclass which overrides toString and as a result fails tests, even if CollectionFeature.NON_STANDARD_TOSTRING passed to MapTestSuiteBuilder.\u000a\u000aI believe that methods like https://github.com/google/guava/blob/2cd4d629a2b6f1a462643b248e0972f44c5133b7/guava-testlib/src/com/google/common/collect/testing/testers/MapToStringTester.java#L45 should be marked with `@CollectionFeature.Require(absent = NON_STANDARD_TOSTRING)`.\u000a
p26872
asg17
(lp26873
(lp26874
I1
aasg19
(lp26875
VMap tests assert on .toString even when CollectionFeature.NON_STANDARD_TOSTRING is specified
p26876
asg21
I0
sba(iArchitecture
Entity
p26877
(dp26878
g11
(lp26879
sg13
S'com.google.common.collect.testing.google.MultimapValuesTester'
p26880
sg15
(lp26881
sg17
(lp26882
sg19
(lp26883
sg21
I0
sba(iArchitecture
Entity
p26884
(dp26885
g11
(lp26886
sg13
S'com.google.common.collect.testing.google.MultisetAddTester'
p26887
sg15
(lp26888
sg17
(lp26889
sg19
(lp26890
sg21
I0
sba(iArchitecture
Entity
p26891
(dp26892
g11
(lp26893
sg13
S'com.google.common.collect.testing.google.MultisetContainsTester'
p26894
sg15
(lp26895
sg17
(lp26896
sg19
(lp26897
sg21
I0
sba(iArchitecture
Entity
p26898
(dp26899
g11
(lp26900
sg13
S'com.google.common.collect.testing.google.MultisetCountTester'
p26901
sg15
(lp26902
sg17
(lp26903
sg19
(lp26904
sg21
I0
sba(iArchitecture
Entity
p26905
(dp26906
g11
(lp26907
sg13
S'com.google.common.collect.testing.google.MultisetElementSetTester'
p26908
sg15
(lp26909
sg17
(lp26910
sg19
(lp26911
sg21
I0
sba(iArchitecture
Entity
p26912
(dp26913
g11
(lp26914
sg13
S'com.google.common.collect.testing.google.MultisetEntrySetTester'
p26915
sg15
(lp26916
sg17
(lp26917
sg19
(lp26918
sg21
I0
sba(iArchitecture
Entity
p26919
(dp26920
g11
(lp26921
sg13
S'com.google.common.collect.testing.google.MultisetEqualsTester'
p26922
sg15
(lp26923
sg17
(lp26924
sg19
(lp26925
sg21
I0
sba(iArchitecture
Entity
p26926
(dp26927
g11
(lp26928
sg13
S'com.google.common.collect.testing.google.MultisetFeature'
p26929
sg15
(lp26930
sg17
(lp26931
sg19
(lp26932
sg21
I0
sba(iArchitecture
Entity
p26933
(dp26934
g11
(lp26935
sg13
S'com.google.common.collect.testing.google.MultisetFeature$Require'
p26936
sg15
(lp26937
sg17
(lp26938
sg19
(lp26939
sg21
I0
sba(iArchitecture
Entity
p26940
(dp26941
g11
(lp26942
sg13
S'com.google.common.collect.testing.google.MultisetIteratorTester'
p26943
sg15
(lp26944
sg17
(lp26945
sg19
(lp26946
sg21
I0
sba(iArchitecture
Entity
p26947
(dp26948
g11
(lp26949
sg13
S'com.google.common.collect.testing.google.MultisetIteratorTester$1'
p26950
sg15
(lp26951
sg17
(lp26952
sg19
(lp26953
sg21
I0
sba(iArchitecture
Entity
p26954
(dp26955
g11
(lp26956
sg13
S'com.google.common.collect.testing.google.MultisetIteratorTester$2'
p26957
sg15
(lp26958
sg17
(lp26959
sg19
(lp26960
sg21
I0
sba(iArchitecture
Entity
p26961
(dp26962
g11
(lp26963
sg13
S'com.google.common.collect.testing.google.MultisetIteratorTester$3'
p26964
sg15
(lp26965
sg17
(lp26966
sg19
(lp26967
sg21
I0
sba(iArchitecture
Entity
p26968
(dp26969
g11
(lp26970
sg13
S'com.google.common.collect.testing.google.MultisetIteratorTester$4'
p26971
sg15
(lp26972
sg17
(lp26973
sg19
(lp26974
sg21
I0
sba(iArchitecture
Entity
p26975
(dp26976
g11
(lp26977
sg13
S'com.google.common.collect.testing.google.MultisetNavigationTester'
p26978
sg15
(lp26979
sg17
(lp26980
sg19
(lp26981
sg21
I0
sba(iArchitecture
Entity
p26982
(dp26983
g11
(lp26984
sg13
S'com.google.common.collect.testing.google.MultisetNavigationTester$1'
p26985
sg15
(lp26986
sg17
(lp26987
sg19
(lp26988
sg21
I0
sba(iArchitecture
Entity
p26989
(dp26990
g11
(lp26991
sg13
S'com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec'
p26992
sg15
(lp26993
sg17
(lp26994
sg19
(lp26995
sg21
I0
sba(iArchitecture
Entity
p26996
(dp26997
g11
(lp26998
sg13
S'com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$1'
p26999
sg15
(lp27000
sg17
(lp27001
sg19
(lp27002
sg21
I0
sba(iArchitecture
Entity
p27003
(dp27004
g11
(lp27005
sg13
S'com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$2'
p27006
sg15
(lp27007
sg17
(lp27008
sg19
(lp27009
sg21
I0
sba(iArchitecture
Entity
p27010
(dp27011
g11
(lp27012
sg13
S'com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$3'
p27013
sg15
(lp27014
sg17
(lp27015
sg19
(lp27016
sg21
I0
sba(iArchitecture
Entity
p27017
(dp27018
g11
(lp27019
sg13
S'com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$4'
p27020
sg15
(lp27021
sg17
(lp27022
sg19
(lp27023
sg21
I0
sba(iArchitecture
Entity
p27024
(dp27025
g11
(lp27026
sg13
S'com.google.common.collect.testing.google.MultisetReadsTester'
p27027
sg15
(lp27028
sg17
(lp27029
sg19
(lp27030
sg21
I0
sba(iArchitecture
Entity
p27031
(dp27032
g11
(lp27033
sg13
S'com.google.common.collect.testing.google.MultisetRemoveTester'
p27034
sg15
(lp27035
sg17
(lp27036
sg19
(lp27037
sg21
I0
sba(iArchitecture
Entity
p27038
(dp27039
g11
(lp27040
sg13
S'com.google.common.collect.testing.google.MultisetSerializationTester'
p27041
sg15
(lp27042
sg17
(lp27043
sg19
(lp27044
sg21
I0
sba(iArchitecture
Entity
p27045
(dp27046
g11
(lp27047
sg13
S'com.google.common.collect.testing.google.MultisetSetCountConditionallyTester'
p27048
sg15
(lp27049
sg17
(lp27050
sg19
(lp27051
sg21
I0
sba(iArchitecture
Entity
p27052
(dp27053
g11
(lp27054
sg13
S'com.google.common.collect.testing.google.MultisetSetCountUnconditionallyTester'
p27055
sg15
(lp27056
sg17
(lp27057
sg19
(lp27058
sg21
I0
sba(iArchitecture
Entity
p27059
(dp27060
g11
(lp27061
sg13
S'com.google.common.collect.testing.google.MultisetTestSuiteBuilder'
p27062
sg15
(lp27063
sg17
(lp27064
sg19
(lp27065
sg21
I0
sba(iArchitecture
Entity
p27066
(dp27067
g11
(lp27068
sg13
S'com.google.common.collect.testing.google.MultisetTestSuiteBuilder$1'
p27069
sg15
(lp27070
sg17
(lp27071
sg19
(lp27072
sg21
I0
sba(iArchitecture
Entity
p27073
(dp27074
g11
(lp27075
sg13
S'com.google.common.collect.testing.google.MultisetTestSuiteBuilder$ElementSetGenerator'
p27076
sg15
(lp27077
sg17
(lp27078
sg19
(lp27079
sg21
I0
sba(iArchitecture
Entity
p27080
(dp27081
g11
(lp27082
sg13
S'com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator'
p27083
sg15
(lp27084
sg17
(lp27085
sg19
(lp27086
sg21
I0
sba(iArchitecture
Entity
p27087
(dp27088
g11
(lp27089
sg13
S'com.google.common.collect.testing.google.MultisetTestSuiteBuilder$NoRecurse'
p27090
sg15
(lp27091
sg17
(lp27092
sg19
(lp27093
sg21
I0
sba(iArchitecture
Entity
p27094
(dp27095
g11
(lp27096
sg13
S'com.google.common.collect.testing.google.MultisetTestSuiteBuilder$ReserializedMultisetGenerator'
p27097
sg15
(lp27098
sg17
(lp27099
sg19
(lp27100
sg21
I0
sba(iArchitecture
Entity
p27101
(dp27102
g11
(lp27103
sg13
S'com.google.common.collect.testing.google.SetGenerators'
p27104
sg15
(lp27105
sg17
(lp27106
sg19
(lp27107
sg21
I0
sba(iArchitecture
Entity
p27108
(dp27109
g11
(lp27110
sg13
S'com.google.common.collect.testing.google.SetGenerators$1'
p27111
sg15
(lp27112
sg17
(lp27113
sg19
(lp27114
sg21
I0
sba(iArchitecture
Entity
p27115
(dp27116
g11
(lp27117
sg13
S'com.google.common.collect.testing.google.SetGenerators$AbstractContiguousSetGenerator'
p27118
sg15
(lp27119
sg17
(lp27120
sg19
(lp27121
sg21
I0
sba(iArchitecture
Entity
p27122
(dp27123
g11
(lp27124
sg13
S'com.google.common.collect.testing.google.SetGenerators$ContiguousSetDescendingGenerator'
p27125
sg15
(lp27126
sg17
(lp27127
sg19
(lp27128
sg21
I0
sba(iArchitecture
Entity
p27129
(dp27130
g11
(lp27131
sg13
S'com.google.common.collect.testing.google.SetGenerators$ContiguousSetGenerator'
p27132
sg15
(lp27133
sg17
(lp27134
sg19
(lp27135
sg21
I0
sba(iArchitecture
Entity
p27136
(dp27137
g11
(lp27138
sg13
S'com.google.common.collect.testing.google.SetGenerators$ContiguousSetHeadsetGenerator'
p27139
sg15
(lp27140
sg17
(lp27141
sg19
(lp27142
sg21
I0
sba(iArchitecture
Entity
p27143
(dp27144
g11
(lp27145
sg13
S'com.google.common.collect.testing.google.SetGenerators$ContiguousSetSubsetGenerator'
p27146
sg15
(lp27147
sg17
(lp27148
sg19
(lp27149
sg21
I0
sba(iArchitecture
Entity
p27150
(dp27151
g11
(lp27152
sg13
S'com.google.common.collect.testing.google.SetGenerators$ContiguousSetTailsetGenerator'
p27153
sg15
(lp27154
sg17
(lp27155
sg19
(lp27156
sg21
I0
sba(iArchitecture
Entity
p27157
(dp27158
g11
(lp27159
sg13
S'com.google.common.collect.testing.google.SetGenerators$DegeneratedImmutableSetGenerator'
p27160
sg15
(lp27161
sg17
(lp27162
sg19
(lp27163
sg21
I0
sba(iArchitecture
Entity
p27164
(dp27165
g11
(lp27166
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSetAsListGenerator'
p27167
sg15
(lp27168
sg17
(lp27169
sg19
(lp27170
sg21
I0
sba(iArchitecture
Entity
p27171
(dp27172
g11
(lp27173
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSetCopyOfGenerator'
p27174
sg15
(lp27175
sg17
(lp27176
sg19
(lp27177
sg21
I0
sba(iArchitecture
Entity
p27178
(dp27179
g11
(lp27180
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSetWithBadHashesGenerator'
p27181
sg15
(lp27182
sg17
(lp27183
sg19
(lp27184
sg21
I0
sba(iArchitecture
Entity
p27185
(dp27186
g11
(lp27187
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetAsListGenerator'
p27188
sg15
(lp27189
sg17
(lp27190
sg19
(lp27191
sg21
I0
sba(iArchitecture
Entity
p27192
(dp27193
g11
(lp27194
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetAsListSubListGenerator'
p27195
sg15
(lp27196
sg17
(lp27197
sg19
(lp27198
sg21
I0
sba(iArchitecture
Entity
p27199
(dp27200
g11
(lp27201
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetCopyOfGenerator'
p27202
sg15
(lp27203
sg17
(lp27204
sg19
(lp27205
sg21
I0
sba(iArchitecture
Entity
p27206
(dp27207
g11
(lp27208
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetDescendingAsListGenerator'
p27209
sg15
(lp27210
sg17
(lp27211
sg19
(lp27212
sg21
I0
sba(iArchitecture
Entity
p27213
(dp27214
g11
(lp27215
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetDescendingGenerator'
p27216
sg15
(lp27217
sg17
(lp27218
sg19
(lp27219
sg21
I0
sba(iArchitecture
Entity
p27220
(dp27221
g11
(lp27222
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetExplicitComparator'
p27223
sg15
(lp27224
sg17
(lp27225
sg19
(lp27226
sg21
I0
sba(iArchitecture
Entity
p27227
(dp27228
g11
(lp27229
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetExplicitSuperclassComparatorGenerator'
p27230
sg15
(lp27231
sg17
(lp27232
sg19
(lp27233
sg21
I0
sba(iArchitecture
Entity
p27234
(dp27235
g11
(lp27236
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetHeadsetGenerator'
p27237
sg15
(lp27238
sg17
(lp27239
sg19
(lp27240
sg21
I0
sba(iArchitecture
Entity
p27241
(dp27242
g11
(lp27243
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetReversedOrderGenerator'
p27244
sg15
(lp27245
sg17
(lp27246
sg19
(lp27247
sg21
I0
sba(iArchitecture
Entity
p27248
(dp27249
g11
(lp27250
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetSubsetAsListGenerator'
p27251
sg15
(lp27252
sg17
(lp27253
sg19
(lp27254
sg21
I0
sba(iArchitecture
Entity
p27255
(dp27256
g11
(lp27257
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetSubsetAsListSubListGenerator'
p27258
sg15
(lp27259
sg17
(lp27260
sg19
(lp27261
sg21
I0
sba(iArchitecture
Entity
p27262
(dp27263
g11
(lp27264
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetSubsetGenerator'
p27265
sg15
(lp27266
sg17
(lp27267
sg19
(lp27268
sg21
I0
sba(iArchitecture
Entity
p27269
(dp27270
g11
(lp27271
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetTailsetGenerator'
p27272
sg15
(lp27273
sg17
(lp27274
sg19
(lp27275
sg21
I0
sba(iArchitecture
Entity
p27276
(dp27277
g11
(lp27278
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetUnhashableGenerator'
p27279
sg15
(lp27280
sg17
(lp27281
sg19
(lp27282
sg21
I0
sba(iArchitecture
Entity
p27283
(dp27284
g11
(lp27285
sg13
S'com.google.common.collect.testing.google.SetGenerators$TestUnhashableSetGenerator'
p27286
sg15
(lp27287
sg17
(lp27288
sg19
(lp27289
sg21
I0
sba(iArchitecture
Entity
p27290
(dp27291
g11
(lp27292
sg13
S'com.google.common.collect.testing.google.SetMultimapAsMapTester'
p27293
sg15
(lp27294
sg17
(lp27295
sg19
(lp27296
sg21
I0
sba(iArchitecture
Entity
p27297
(dp27298
g11
(lp27299
sg13
S'com.google.common.collect.testing.google.SetMultimapEqualsTester'
p27300
sg15
(lp27301
sg17
(lp27302
sg19
(lp27303
sg21
I0
sba(iArchitecture
Entity
p27304
(dp27305
g11
(lp27306
sg13
S'com.google.common.collect.testing.google.SetMultimapPutAllTester'
p27307
sg15
(lp27308
sg17
(lp27309
sg19
(lp27310
sg21
I0
sba(iArchitecture
Entity
p27311
(dp27312
g11
(lp27313
sg13
S'com.google.common.collect.testing.google.SetMultimapPutTester'
p27314
sg15
(lp27315
sg17
(lp27316
sg19
(lp27317
sg21
I0
sba(iArchitecture
Entity
p27318
(dp27319
g11
(lp27320
sg13
S'com.google.common.collect.testing.google.SetMultimapReplaceValuesTester'
p27321
sg15
(lp27322
sg17
(lp27323
sg19
(lp27324
sg21
I0
sba(iArchitecture
Entity
p27325
(dp27326
g11
(lp27327
sg13
S'com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder'
p27328
sg15
(lp27329
sg17
(lp27330
sg19
(lp27331
sg21
I0
sba(iArchitecture
Entity
p27332
(dp27333
g11
(lp27334
sg13
S'com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder$EntriesGenerator'
p27335
sg15
(lp27336
sg17
(lp27337
sg19
(lp27338
sg21
I0
sba(iArchitecture
Entity
p27339
(dp27340
g11
(lp27341
sg13
S'com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder$MultimapAsMapGetGenerator'
p27342
sg15
(lp27343
sg17
(lp27344
sg19
(lp27345
sg21
I0
sba(iArchitecture
Entity
p27346
(dp27347
g11
(lp27348
sg13
S'com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder$MultimapGetGenerator'
p27349
sg15
(lp27350
sg17
(lp27351
sg19
(lp27352
sg21
I0
sba(iArchitecture
Entity
p27353
(dp27354
g11
(lp27355
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators'
p27356
sg15
(lp27357
sg17
(lp27358
sg19
(lp27359
sg21
I0
sba(iArchitecture
Entity
p27360
(dp27361
g11
(lp27362
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapCopyOfEntriesGenerator'
p27363
sg15
(lp27364
sg17
(lp27365
sg19
(lp27366
sg21
I0
sba(iArchitecture
Entity
p27367
(dp27368
g11
(lp27369
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapEntryListGenerator'
p27370
sg15
(lp27371
sg17
(lp27372
sg19
(lp27373
sg21
I0
sba(iArchitecture
Entity
p27374
(dp27375
g11
(lp27376
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapEntryListGenerator$1'
p27377
sg15
(lp27378
sg17
(lp27379
sg19
(lp27380
sg21
I0
sba(iArchitecture
Entity
p27381
(dp27382
g11
(lp27383
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapGenerator'
p27384
sg15
(lp27385
sg17
(lp27386
sg19
(lp27387
sg21
I0
sba(iArchitecture
Entity
p27388
(dp27389
g11
(lp27390
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapKeyListGenerator'
p27391
sg15
(lp27392
sg17
(lp27393
sg19
(lp27394
sg21
I0
sba(iArchitecture
Entity
p27395
(dp27396
g11
(lp27397
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapValueListGenerator'
p27398
sg15
(lp27399
sg17
(lp27400
sg19
(lp27401
sg21
I0
sba(iArchitecture
Entity
p27402
(dp27403
g11
(lp27404
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder'
p27405
sg15
(lp27406
sg17
(lp27407
sg19
(lp27408
sg21
I0
sba(iArchitecture
Entity
p27409
(dp27410
g11
(lp27411
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$1'
p27412
sg15
(lp27413
sg17
(lp27414
sg19
(lp27415
sg21
I0
sba(iArchitecture
Entity
p27416
(dp27417
g11
(lp27418
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$2'
p27419
sg15
(lp27420
sg17
(lp27421
sg19
(lp27422
sg21
I0
sba(iArchitecture
Entity
p27423
(dp27424
g11
(lp27425
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$3'
p27426
sg15
(lp27427
sg17
(lp27428
sg19
(lp27429
sg21
I0
sba(iArchitecture
Entity
p27430
(dp27431
g11
(lp27432
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$Bound'
p27433
sg15
(lp27434
sg17
(lp27435
sg19
(lp27436
sg21
I0
sba(iArchitecture
Entity
p27437
(dp27438
g11
(lp27439
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$ForwardingTestMultisetGenerator'
p27440
sg15
(lp27441
sg17
(lp27442
sg19
(lp27443
sg21
I0
sba(iArchitecture
Entity
p27444
(dp27445
g11
(lp27446
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$NoRecurse'
p27447
sg15
(lp27448
sg17
(lp27449
sg19
(lp27450
sg21
I0
sba(iArchitecture
Entity
p27451
(dp27452
g11
(lp27453
sg13
S'com.google.common.collect.testing.google.SortedSetMultimapAsMapTester'
p27454
sg15
(lp27455
sg17
(lp27456
sg19
(lp27457
sg21
I0
sba(iArchitecture
Entity
p27458
(dp27459
g11
(lp27460
sg13
S'com.google.common.collect.testing.google.SortedSetMultimapGetTester'
p27461
sg15
(lp27462
sg17
(lp27463
sg19
(lp27464
sg21
I0
sba(iArchitecture
Entity
p27465
(dp27466
g11
(lp27467
sg13
S'com.google.common.collect.testing.google.SortedSetMultimapTestSuiteBuilder'
p27468
sg15
(lp27469
sg17
(lp27470
sg19
(lp27471
sg21
I0
sba(iArchitecture
Entity
p27472
(dp27473
g11
(lp27474
sg13
S'com.google.common.collect.testing.google.TestBiMapGenerator'
p27475
sg15
(lp27476
sg17
(lp27477
sg19
(lp27478
sg21
I0
sba(iArchitecture
Entity
p27479
(dp27480
g11
(lp27481
sg13
S'com.google.common.collect.testing.google.TestEnumMultisetGenerator'
p27482
sg15
(lp27483
sg17
(lp27484
sg19
(lp27485
sg21
I0
sba(iArchitecture
Entity
p27486
(dp27487
g11
(lp27488
sg13
S'com.google.common.collect.testing.google.TestListMultimapGenerator'
p27489
sg15
(lp27490
sg17
(lp27491
sg19
(lp27492
sg21
I0
sba(iArchitecture
Entity
p27493
(dp27494
g11
(lp27495
sg13
S'com.google.common.collect.testing.google.TestMultimapGenerator'
p27496
sg15
(lp27497
sg17
(lp27498
sg19
(lp27499
sg21
I0
sba(iArchitecture
Entity
p27500
(dp27501
g11
(lp27502
sg13
S'com.google.common.collect.testing.google.TestMultisetGenerator'
p27503
sg15
(lp27504
sg17
(lp27505
sg19
(lp27506
sg21
I0
sba(iArchitecture
Entity
p27507
(dp27508
g11
(lp27509
sg13
S'com.google.common.collect.testing.google.TestSetMultimapGenerator'
p27510
sg15
(lp27511
sg17
(lp27512
sg19
(lp27513
sg21
I0
sba(iArchitecture
Entity
p27514
(dp27515
g11
(lp27516
sg13
S'com.google.common.collect.testing.google.TestStringBiMapGenerator'
p27517
sg15
(lp27518
sg17
(lp27519
sg19
(lp27520
sg21
I0
sba(iArchitecture
Entity
p27521
(dp27522
g11
(lp27523
sg13
S'com.google.common.collect.testing.google.TestStringListMultimapGenerator'
p27524
sg15
(lp27525
sg17
(lp27526
sg19
(lp27527
sg21
I0
sba(iArchitecture
Entity
p27528
(dp27529
g11
(lp27530
sg13
S'com.google.common.collect.testing.google.TestStringMultisetGenerator'
p27531
sg15
(lp27532
sg17
(lp27533
sg19
(lp27534
sg21
I0
sba(iArchitecture
Entity
p27535
(dp27536
g11
(lp27537
sg13
S'com.google.common.collect.testing.google.TestStringSetMultimapGenerator'
p27538
sg15
(lp27539
sg17
(lp27540
sg19
(lp27541
sg21
I0
sba(iArchitecture
Entity
p27542
(dp27543
g11
(lp27544
sg13
S'com.google.common.collect.testing.google.UnmodifiableCollectionTests'
p27545
sg15
(lp27546
sg17
(lp27547
sg19
(lp27548
sg21
I0
sba(iArchitecture
Entity
p27549
(dp27550
g11
(lp27551
sg13
S'com.google.common.collect.testing.google.UnmodifiableCollectionTests$1'
p27552
sg15
(lp27553
sg17
(lp27554
sg19
(lp27555
sg21
I0
sba(iArchitecture
Entity
p27556
(dp27557
g11
(lp27558
sg13
S'com.google.common.collect.testing.testers.SetCreationTester'
p27559
sg15
(lp27560
sg17
(lp27561
sg19
(lp27562
sg21
I0
sba(iArchitecture
Entity
p27563
(dp27564
g11
(lp27565
V2430
p27566
asg13
S'com.google.common.net.HttpHeaders'
p27567
sg15
(lp27568
VAs they are [common headers](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Common_non-standard_request_fields) (at least the `X-Forwarded-Host`) it would be nice if they are defined in the class `HttpHeaders`. The `X-Forwared-Port` is used for example in [AWS](http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/x-forwarded-headers.html).\u000a
p27569
asg17
(lp27570
(lp27571
I5
aasg19
(lp27572
VAdd a constant for X-Forwarded-Host and X-Forwarded-Port to HttpHeaders
p27573
asg21
I0
sba(iArchitecture
Entity
p27574
(dp27575
g11
(lp27576
sg13
S'com.google.common.testing.SloppyTearDown'
p27577
sg15
(lp27578
sg17
(lp27579
sg19
(lp27580
sg21
I0
sba(iArchitecture
Entity
p27581
(dp27582
g11
(lp27583
sg13
S'com.google.common.testing.TestLogHandler'
p27584
sg15
(lp27585
sg17
(lp27586
sg19
(lp27587
sg21
I0
sba(iArchitecture
Entity
p27588
(dp27589
g11
(lp27590
sg13
S'junit.framework.TestSuite'
p27591
sg15
(lp27592
sg17
(lp27593
sg19
(lp27594
sg21
I0
sbasg1055
(lp27595
g25850
ag25857
ag25864
ag25871
ag25878
ag25885
ag25892
ag25899
ag25906
ag25913
ag25920
ag25927
ag25934
ag25941
ag25948
ag25955
ag25962
ag25969
ag25976
ag25983
ag25990
ag25997
ag26004
ag26011
ag26018
ag26025
ag26032
ag26039
ag26046
ag26053
ag26060
ag26067
ag26074
ag26081
ag26088
ag26095
ag26102
ag26109
ag26116
ag26123
ag26130
ag26137
ag26144
ag26151
ag26159
ag26169
ag26176
ag26183
ag26190
ag26197
ag26204
ag26211
ag26218
ag26225
ag26232
ag26239
ag26246
ag26253
ag26260
ag26267
ag26274
ag26281
ag26288
ag26295
ag26302
ag26309
ag26316
ag26323
ag26330
ag26337
ag26344
ag26351
ag26358
ag26365
ag26372
ag26379
ag26386
ag26393
ag26400
ag26407
ag26414
ag26421
ag26428
ag26435
ag26442
ag26449
ag26456
ag26463
ag26470
ag26477
ag26484
ag26491
ag26498
ag26505
ag26512
ag26519
ag26526
ag26533
ag26540
ag26547
ag26554
ag26561
ag26568
ag26575
ag26582
ag26589
ag26596
ag26603
ag26610
ag26617
ag26624
ag26631
ag26638
ag26645
ag26652
ag26659
ag26666
ag26673
ag26680
ag26687
ag26694
ag26701
ag26708
ag26715
ag26722
ag26729
ag26736
ag26743
ag26750
ag26757
ag26764
ag26771
ag26778
ag26785
ag26792
ag26799
ag26806
ag26813
ag26820
ag26827
ag26834
ag26841
ag26848
ag26855
ag26862
ag26870
ag26880
ag26887
ag26894
ag26901
ag26908
ag26915
ag26922
ag26929
ag26936
ag26943
ag26950
ag26957
ag26964
ag26971
ag26978
ag26985
ag26992
ag26999
ag27006
ag27013
ag27020
ag27027
ag27034
ag27041
ag27048
ag27055
ag27062
ag27069
ag27076
ag27083
ag27090
ag27097
ag27104
ag27111
ag27118
ag27125
ag27132
ag27139
ag27146
ag27153
ag27160
ag27167
ag27174
ag27181
ag27188
ag27195
ag27202
ag27209
ag27216
ag27223
ag27230
ag27237
ag27244
ag27251
ag27258
ag27265
ag27272
ag27279
ag27286
ag27293
ag27300
ag27307
ag27314
ag27321
ag27328
ag27335
ag27342
ag27349
ag27356
ag27363
ag27370
ag27377
ag27384
ag27391
ag27398
ag27405
ag27412
ag27419
ag27426
ag27433
ag27440
ag27447
ag27454
ag27461
ag27468
ag27475
ag27482
ag27489
ag27496
ag27503
ag27510
ag27517
ag27524
ag27531
ag27538
ag27545
ag27552
ag27559
ag27567
ag27577
ag27584
ag27591
asg21
I0
sg1057
S'com.google.common.collect.testing.google.ss'
p27596
sba(iArchitecture
Cluster
p27597
(dp27598
g7
(lp27599
(iArchitecture
Entity
p27600
(dp27601
g11
(lp27602
sg13
S'com.google.common.collect.testing.AbstractCollectionTestSuiteBuilder'
p27603
sg15
(lp27604
sg17
(lp27605
sg19
(lp27606
sg21
I0
sba(iArchitecture
Entity
p27607
(dp27608
g11
(lp27609
sg13
S'com.google.common.collect.testing.AbstractCollectionTester'
p27610
sg15
(lp27611
sg17
(lp27612
sg19
(lp27613
sg21
I0
sba(iArchitecture
Entity
p27614
(dp27615
g11
(lp27616
sg13
S'com.google.common.collect.testing.AbstractContainerTester'
p27617
sg15
(lp27618
sg17
(lp27619
sg19
(lp27620
sg21
I0
sba(iArchitecture
Entity
p27621
(dp27622
g11
(lp27623
sg13
S'com.google.common.collect.testing.AbstractContainerTester$1'
p27624
sg15
(lp27625
sg17
(lp27626
sg19
(lp27627
sg21
I0
sba(iArchitecture
Entity
p27628
(dp27629
g11
(lp27630
sg13
S'com.google.common.collect.testing.AbstractContainerTester$ArrayWithDuplicate'
p27631
sg15
(lp27632
sg17
(lp27633
sg19
(lp27634
sg21
I0
sba(iArchitecture
Entity
p27635
(dp27636
g11
(lp27637
sg13
S'com.google.common.collect.testing.AbstractIteratorTester'
p27638
sg15
(lp27639
sg17
(lp27640
sg19
(lp27641
sg21
I0
sba(iArchitecture
Entity
p27642
(dp27643
g11
(lp27644
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$1'
p27645
sg15
(lp27646
sg17
(lp27647
sg19
(lp27648
sg21
I0
sba(iArchitecture
Entity
p27649
(dp27650
g11
(lp27651
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$10'
p27652
sg15
(lp27653
sg17
(lp27654
sg19
(lp27655
sg21
I0
sba(iArchitecture
Entity
p27656
(dp27657
g11
(lp27658
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$11'
p27659
sg15
(lp27660
sg17
(lp27661
sg19
(lp27662
sg21
I0
sba(iArchitecture
Entity
p27663
(dp27664
g11
(lp27665
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$12'
p27666
sg15
(lp27667
sg17
(lp27668
sg19
(lp27669
sg21
I0
sba(iArchitecture
Entity
p27670
(dp27671
g11
(lp27672
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$13'
p27673
sg15
(lp27674
sg17
(lp27675
sg19
(lp27676
sg21
I0
sba(iArchitecture
Entity
p27677
(dp27678
g11
(lp27679
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$14'
p27680
sg15
(lp27681
sg17
(lp27682
sg19
(lp27683
sg21
I0
sba(iArchitecture
Entity
p27684
(dp27685
g11
(lp27686
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$2'
p27687
sg15
(lp27688
sg17
(lp27689
sg19
(lp27690
sg21
I0
sba(iArchitecture
Entity
p27691
(dp27692
g11
(lp27693
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$3'
p27694
sg15
(lp27695
sg17
(lp27696
sg19
(lp27697
sg21
I0
sba(iArchitecture
Entity
p27698
(dp27699
g11
(lp27700
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$4'
p27701
sg15
(lp27702
sg17
(lp27703
sg19
(lp27704
sg21
I0
sba(iArchitecture
Entity
p27705
(dp27706
g11
(lp27707
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$5'
p27708
sg15
(lp27709
sg17
(lp27710
sg19
(lp27711
sg21
I0
sba(iArchitecture
Entity
p27712
(dp27713
g11
(lp27714
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$6'
p27715
sg15
(lp27716
sg17
(lp27717
sg19
(lp27718
sg21
I0
sba(iArchitecture
Entity
p27719
(dp27720
g11
(lp27721
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$7'
p27722
sg15
(lp27723
sg17
(lp27724
sg19
(lp27725
sg21
I0
sba(iArchitecture
Entity
p27726
(dp27727
g11
(lp27728
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$8'
p27729
sg15
(lp27730
sg17
(lp27731
sg19
(lp27732
sg21
I0
sba(iArchitecture
Entity
p27733
(dp27734
g11
(lp27735
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$9'
p27736
sg15
(lp27737
sg17
(lp27738
sg19
(lp27739
sg21
I0
sba(iArchitecture
Entity
p27740
(dp27741
g11
(lp27742
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation'
p27743
sg15
(lp27744
sg17
(lp27745
sg19
(lp27746
sg21
I0
sba(iArchitecture
Entity
p27747
(dp27748
g11
(lp27749
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator'
p27750
sg15
(lp27751
sg17
(lp27752
sg19
(lp27753
sg21
I0
sba(iArchitecture
Entity
p27754
(dp27755
g11
(lp27756
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException'
p27757
sg15
(lp27758
sg17
(lp27759
sg19
(lp27760
sg21
I0
sba(iArchitecture
Entity
p27761
(dp27762
g11
(lp27763
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$Stimulus'
p27764
sg15
(lp27765
sg17
(lp27766
sg19
(lp27767
sg21
I0
sba(iArchitecture
Entity
p27768
(dp27769
g11
(lp27770
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$UnknownElementException'
p27771
sg15
(lp27772
sg17
(lp27773
sg19
(lp27774
sg21
I0
sba(iArchitecture
Entity
p27775
(dp27776
g11
(lp27777
sg13
S'com.google.common.collect.testing.AbstractMapTester'
p27778
sg15
(lp27779
sg17
(lp27780
sg19
(lp27781
sg21
I0
sba(iArchitecture
Entity
p27782
(dp27783
g11
(lp27784
sg13
S'com.google.common.collect.testing.AbstractTester'
p27785
sg15
(lp27786
sg17
(lp27787
sg19
(lp27788
sg21
I0
sba(iArchitecture
Entity
p27789
(dp27790
g11
(lp27791
sg13
S'com.google.common.collect.testing.BaseComparable'
p27792
sg15
(lp27793
sg17
(lp27794
sg19
(lp27795
sg21
I0
sba(iArchitecture
Entity
p27796
(dp27797
g11
(lp27798
sg13
S'com.google.common.collect.testing.CollectionTestSuiteBuilder'
p27799
sg15
(lp27800
sg17
(lp27801
sg19
(lp27802
sg21
I0
sba(iArchitecture
Entity
p27803
(dp27804
g11
(lp27805
sg13
S'com.google.common.collect.testing.CollectionTestSuiteBuilder$1'
p27806
sg15
(lp27807
sg17
(lp27808
sg19
(lp27809
sg21
I0
sba(iArchitecture
Entity
p27810
(dp27811
g11
(lp27812
sg13
S'com.google.common.collect.testing.CollectionTestSuiteBuilder$ReserializedCollectionGenerator'
p27813
sg15
(lp27814
sg17
(lp27815
sg19
(lp27816
sg21
I0
sba(iArchitecture
Entity
p27817
(dp27818
g11
(lp27819
sg13
S'com.google.common.collect.testing.ConcurrentMapTestSuiteBuilder'
p27820
sg15
(lp27821
sg17
(lp27822
sg19
(lp27823
sg21
I0
sba(iArchitecture
Entity
p27824
(dp27825
g11
(lp27826
sg13
S'com.google.common.collect.testing.ConcurrentNavigableMapTestSuiteBuilder'
p27827
sg15
(lp27828
sg17
(lp27829
sg19
(lp27830
sg21
I0
sba(iArchitecture
Entity
p27831
(dp27832
g11
(lp27833
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators'
p27834
sg15
(lp27835
sg17
(lp27836
sg19
(lp27837
sg21
I0
sba(iArchitecture
Entity
p27838
(dp27839
g11
(lp27840
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$Bound'
p27841
sg15
(lp27842
sg17
(lp27843
sg19
(lp27844
sg21
I0
sba(iArchitecture
Entity
p27845
(dp27846
g11
(lp27847
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$ForwardingTestMapGenerator'
p27848
sg15
(lp27849
sg17
(lp27850
sg19
(lp27851
sg21
I0
sba(iArchitecture
Entity
p27852
(dp27853
g11
(lp27854
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$MapEntrySetGenerator'
p27855
sg15
(lp27856
sg17
(lp27857
sg19
(lp27858
sg21
I0
sba(iArchitecture
Entity
p27859
(dp27860
g11
(lp27861
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$MapKeySetGenerator'
p27862
sg15
(lp27863
sg17
(lp27864
sg19
(lp27865
sg21
I0
sba(iArchitecture
Entity
p27866
(dp27867
g11
(lp27868
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$MapSortedKeySetGenerator'
p27869
sg15
(lp27870
sg17
(lp27871
sg19
(lp27872
sg21
I0
sba(iArchitecture
Entity
p27873
(dp27874
g11
(lp27875
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator'
p27876
sg15
(lp27877
sg17
(lp27878
sg19
(lp27879
sg21
I0
sba(iArchitecture
Entity
p27880
(dp27881
g11
(lp27882
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator$1'
p27883
sg15
(lp27884
sg17
(lp27885
sg19
(lp27886
sg21
I0
sba(iArchitecture
Entity
p27887
(dp27888
g11
(lp27889
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$SortedMapSubmapTestMapGenerator'
p27890
sg15
(lp27891
sg17
(lp27892
sg19
(lp27893
sg21
I0
sba(iArchitecture
Entity
p27894
(dp27895
g11
(lp27896
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$SortedSetSubsetTestSetGenerator'
p27897
sg15
(lp27898
sg17
(lp27899
sg19
(lp27900
sg21
I0
sba(iArchitecture
Entity
p27901
(dp27902
g11
(lp27903
sg13
S'com.google.common.collect.testing.DerivedComparable'
p27904
sg15
(lp27905
sg17
(lp27906
sg19
(lp27907
sg21
I0
sba(iArchitecture
Entity
p27908
(dp27909
g11
(lp27910
sg13
S'com.google.common.collect.testing.DerivedIteratorTestSuiteBuilder'
p27911
sg15
(lp27912
sg17
(lp27913
sg19
(lp27914
sg21
I0
sba(iArchitecture
Entity
p27915
(dp27916
g11
(lp27917
sg13
S'com.google.common.collect.testing.DerivedTestIteratorGenerator'
p27918
sg15
(lp27919
sg17
(lp27920
sg19
(lp27921
sg21
I0
sba(iArchitecture
Entity
p27922
(dp27923
g11
(lp27924
sg13
S'com.google.common.collect.testing.ExampleIteratorTester'
p27925
sg15
(lp27926
sg17
(lp27927
sg19
(lp27928
sg21
I0
sba(iArchitecture
Entity
p27929
(dp27930
g11
(lp27931
sg13
S'com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder'
p27932
sg15
(lp27933
sg17
(lp27934
sg19
(lp27935
sg21
I0
sba(iArchitecture
Entity
p27936
(dp27937
g11
(lp27938
sg13
S'com.google.common.collect.testing.Helpers'
p27939
sg15
(lp27940
sg17
(lp27941
sg19
(lp27942
sg21
I0
sba(iArchitecture
Entity
p27943
(dp27944
g11
(lp27945
sg13
S'com.google.common.collect.testing.Helpers$1'
p27946
sg15
(lp27947
sg17
(lp27948
sg19
(lp27949
sg21
I0
sba(iArchitecture
Entity
p27950
(dp27951
g11
(lp27952
sg13
S'com.google.common.collect.testing.Helpers$1$1'
p27953
sg15
(lp27954
sg17
(lp27955
sg19
(lp27956
sg21
I0
sba(iArchitecture
Entity
p27957
(dp27958
g11
(lp27959
sg13
S'com.google.common.collect.testing.Helpers$2'
p27960
sg15
(lp27961
sg17
(lp27962
sg19
(lp27963
sg21
I0
sba(iArchitecture
Entity
p27964
(dp27965
g11
(lp27966
sg13
S'com.google.common.collect.testing.Helpers$3'
p27967
sg15
(lp27968
sg17
(lp27969
sg19
(lp27970
sg21
I0
sba(iArchitecture
Entity
p27971
(dp27972
g11
(lp27973
sg13
S'com.google.common.collect.testing.Helpers$4'
p27974
sg15
(lp27975
sg17
(lp27976
sg19
(lp27977
sg21
I0
sba(iArchitecture
Entity
p27978
(dp27979
g11
(lp27980
sg13
S'com.google.common.collect.testing.Helpers$5'
p27981
sg15
(lp27982
sg17
(lp27983
sg19
(lp27984
sg21
I0
sba(iArchitecture
Entity
p27985
(dp27986
g11
(lp27987
sg13
S'com.google.common.collect.testing.Helpers$6'
p27988
sg15
(lp27989
sg17
(lp27990
sg19
(lp27991
sg21
I0
sba(iArchitecture
Entity
p27992
(dp27993
g11
(lp27994
sg13
S'com.google.common.collect.testing.Helpers$GwtTransient'
p27995
sg15
(lp27996
sg17
(lp27997
sg19
(lp27998
sg21
I0
sba(iArchitecture
Entity
p27999
(dp28000
g11
(lp28001
sg13
S'com.google.common.collect.testing.Helpers$NullsBefore'
p28002
sg15
(lp28003
sg17
(lp28004
sg19
(lp28005
sg21
I0
sba(iArchitecture
Entity
p28006
(dp28007
g11
(lp28008
sg13
S'com.google.common.collect.testing.Helpers$NullsBeforeB'
p28009
sg15
(lp28010
sg17
(lp28011
sg19
(lp28012
sg21
I0
sba(iArchitecture
Entity
p28013
(dp28014
g11
(lp28015
sg13
S'com.google.common.collect.testing.Helpers$NullsBeforeTwo'
p28016
sg15
(lp28017
sg17
(lp28018
sg19
(lp28019
sg21
I0
sba(iArchitecture
Entity
p28020
(dp28021
g11
(lp28022
sg13
S'com.google.common.collect.testing.IteratorTestSuiteBuilder'
p28023
sg15
(lp28024
sg17
(lp28025
sg19
(lp28026
sg21
I0
sba(iArchitecture
Entity
p28027
(dp28028
g11
(lp28029
sg13
S'com.google.common.collect.testing.ListTestSuiteBuilder'
p28030
sg15
(lp28031
sg17
(lp28032
sg19
(lp28033
sg21
I0
sba(iArchitecture
Entity
p28034
(dp28035
g11
(lp28036
sg13
S'com.google.common.collect.testing.ListTestSuiteBuilder$1'
p28037
sg15
(lp28038
sg17
(lp28039
sg19
(lp28040
sg21
I0
sba(iArchitecture
Entity
p28041
(dp28042
g11
(lp28043
sg13
S'com.google.common.collect.testing.ListTestSuiteBuilder$ReserializedListGenerator'
p28044
sg15
(lp28045
sg17
(lp28046
sg19
(lp28047
sg21
I0
sba(iArchitecture
Entity
p28048
(dp28049
g11
(lp28050
sg13
S'com.google.common.collect.testing.MapInterfaceTest'
p28051
sg15
(lp28052
sg17
(lp28053
sg19
(lp28054
sg21
I0
sba(iArchitecture
Entity
p28055
(dp28056
g11
(lp28057
sg13
S'com.google.common.collect.testing.MapInterfaceTest$1'
p28058
sg15
(lp28059
sg17
(lp28060
sg19
(lp28061
sg21
I0
sba(iArchitecture
Entity
p28062
(dp28063
g11
(lp28064
sg13
S'com.google.common.collect.testing.MapInterfaceTest$IncompatibleKeyType'
p28065
sg15
(lp28066
sg17
(lp28067
sg19
(lp28068
sg21
I0
sba(iArchitecture
Entity
p28069
(dp28070
g11
(lp28071
sg13
S'com.google.common.collect.testing.MapTestSuiteBuilder'
p28072
sg15
(lp28073
sg17
(lp28074
sg19
(lp28075
sg21
I0
sba(iArchitecture
Entity
p28076
(dp28077
g11
(lp28078
sg13
S'com.google.common.collect.testing.MapTestSuiteBuilder$ReserializedMapGenerator'
p28079
sg15
(lp28080
sg17
(lp28081
sg19
(lp28082
sg21
I0
sba(iArchitecture
Entity
p28083
(dp28084
g11
(lp28085
sg13
S'com.google.common.collect.testing.MinimalCollection'
p28086
sg15
(lp28087
sg17
(lp28088
sg19
(lp28089
sg21
I0
sba(iArchitecture
Entity
p28090
(dp28091
g11
(lp28092
sg13
S'com.google.common.collect.testing.MinimalSet'
p28093
sg15
(lp28094
sg17
(lp28095
sg19
(lp28096
sg21
I0
sba(iArchitecture
Entity
p28097
(dp28098
g11
(lp28099
sg13
S'com.google.common.collect.testing.NavigableMapTestSuiteBuilder'
p28100
sg15
(lp28101
sg17
(lp28102
sg19
(lp28103
sg21
I0
sba(iArchitecture
Entity
p28104
(dp28105
g11
(lp28106
sg13
S'com.google.common.collect.testing.NavigableMapTestSuiteBuilder$DescendingTestMapGenerator'
p28107
sg15
(lp28108
sg17
(lp28109
sg19
(lp28110
sg21
I0
sba(iArchitecture
Entity
p28111
(dp28112
g11
(lp28113
sg13
S'com.google.common.collect.testing.NavigableMapTestSuiteBuilder$NavigableMapSubmapTestMapGenerator'
p28114
sg15
(lp28115
sg17
(lp28116
sg19
(lp28117
sg21
I0
sba(iArchitecture
Entity
p28118
(dp28119
g11
(lp28120
sg13
S'com.google.common.collect.testing.NavigableSetTestSuiteBuilder'
p28121
sg15
(lp28122
sg17
(lp28123
sg19
(lp28124
sg21
I0
sba(iArchitecture
Entity
p28125
(dp28126
g11
(lp28127
sg13
S'com.google.common.collect.testing.NavigableSetTestSuiteBuilder$1'
p28128
sg15
(lp28129
sg17
(lp28130
sg19
(lp28131
sg21
I0
sba(iArchitecture
Entity
p28132
(dp28133
g11
(lp28134
sg13
S'com.google.common.collect.testing.NavigableSetTestSuiteBuilder$NavigableSetSubsetTestSetGenerator'
p28135
sg15
(lp28136
sg17
(lp28137
sg19
(lp28138
sg21
I0
sba(iArchitecture
Entity
p28139
(dp28140
g11
(lp28141
sg13
S'com.google.common.collect.testing.OneSizeGenerator'
p28142
sg15
(lp28143
sg17
(lp28144
sg19
(lp28145
sg21
I0
sba(iArchitecture
Entity
p28146
(dp28147
g11
(lp28148
sg13
S'com.google.common.collect.testing.OneSizeTestContainerGenerator'
p28149
sg15
(lp28150
sg17
(lp28151
sg19
(lp28152
sg21
I0
sba(iArchitecture
Entity
p28153
(dp28154
g11
(lp28155
sg13
S'com.google.common.collect.testing.PerCollectionSizeTestSuiteBuilder'
p28156
sg15
(lp28157
sg17
(lp28158
sg19
(lp28159
sg21
I0
sba(iArchitecture
Entity
p28160
(dp28161
g11
(lp28162
sg13
S'com.google.common.collect.testing.PerCollectionSizeTestSuiteBuilder$OneSizeTestSuiteBuilder'
p28163
sg15
(lp28164
sg17
(lp28165
sg19
(lp28166
sg21
I0
sba(iArchitecture
Entity
p28167
(dp28168
g11
(lp28169
sg13
S'com.google.common.collect.testing.Platform'
p28170
sg15
(lp28171
sg17
(lp28172
sg19
(lp28173
sg21
I0
sba(iArchitecture
Entity
p28174
(dp28175
g11
(lp28176
sg13
S'com.google.common.collect.testing.QueueTestSuiteBuilder'
p28177
sg15
(lp28178
sg17
(lp28179
sg19
(lp28180
sg21
I0
sba(iArchitecture
Entity
p28181
(dp28182
g11
(lp28183
sg13
S'com.google.common.collect.testing.ReserializingTestCollectionGenerator'
p28184
sg15
(lp28185
sg17
(lp28186
sg19
(lp28187
sg21
I0
sba(iArchitecture
Entity
p28188
(dp28189
g11
(lp28190
sg13
S'com.google.common.collect.testing.ReserializingTestSetGenerator'
p28191
sg15
(lp28192
sg17
(lp28193
sg19
(lp28194
sg21
I0
sba(iArchitecture
Entity
p28195
(dp28196
g11
(lp28197
sg13
S'com.google.common.collect.testing.SafeTreeMap'
p28198
sg15
(lp28199
sg17
(lp28200
sg19
(lp28201
sg21
I0
sba(iArchitecture
Entity
p28202
(dp28203
g11
(lp28204
sg13
S'com.google.common.collect.testing.SafeTreeMap$1'
p28205
sg15
(lp28206
sg17
(lp28207
sg19
(lp28208
sg21
I0
sba(iArchitecture
Entity
p28209
(dp28210
g11
(lp28211
sg13
S'com.google.common.collect.testing.SafeTreeMap$2'
p28212
sg15
(lp28213
sg17
(lp28214
sg19
(lp28215
sg21
I0
sba(iArchitecture
Entity
p28216
(dp28217
g11
(lp28218
sg13
S'com.google.common.collect.testing.SafeTreeSet'
p28219
sg15
(lp28220
sg17
(lp28221
sg19
(lp28222
sg21
I0
sba(iArchitecture
Entity
p28223
(dp28224
g11
(lp28225
sg13
S'com.google.common.collect.testing.SafeTreeSet$1'
p28226
sg15
(lp28227
sg17
(lp28228
sg19
(lp28229
sg21
I0
sba(iArchitecture
Entity
p28230
(dp28231
g11
(lp28232
sg13
S'com.google.common.collect.testing.SetTestSuiteBuilder'
p28233
sg15
(lp28234
sg17
(lp28235
sg19
(lp28236
sg21
I0
sba(iArchitecture
Entity
p28237
(dp28238
g11
(lp28239
sg13
S'com.google.common.collect.testing.SetTestSuiteBuilder$1'
p28240
sg15
(lp28241
sg17
(lp28242
sg19
(lp28243
sg21
I0
sba(iArchitecture
Entity
p28244
(dp28245
g11
(lp28246
sg13
S'com.google.common.collect.testing.SetTestSuiteBuilder$ReserializedSetGenerator'
p28247
sg15
(lp28248
sg17
(lp28249
sg19
(lp28250
sg21
I0
sba(iArchitecture
Entity
p28251
(dp28252
g11
(lp28253
sg13
S'com.google.common.collect.testing.SortedMapTestSuiteBuilder'
p28254
sg15
(lp28255
sg17
(lp28256
sg19
(lp28257
sg21
I0
sba(iArchitecture
Entity
p28258
(dp28259
g11
(lp28260
sg13
S'com.google.common.collect.testing.SortedMapTestSuiteBuilder$NoRecurse'
p28261
sg15
(lp28262
sg17
(lp28263
sg19
(lp28264
sg21
I0
sba(iArchitecture
Entity
p28265
(dp28266
g11
(lp28267
sg13
S'com.google.common.collect.testing.SortedSetTestSuiteBuilder'
p28268
sg15
(lp28269
sg17
(lp28270
sg19
(lp28271
sg21
I0
sba(iArchitecture
Entity
p28272
(dp28273
g11
(lp28274
sg13
S'com.google.common.collect.testing.TestEnumSetGenerator'
p28275
sg15
(lp28276
sg17
(lp28277
sg19
(lp28278
sg21
I0
sba(iArchitecture
Entity
p28279
(dp28280
g11
(lp28281
sg13
S'com.google.common.collect.testing.TestIntegerSetGenerator'
p28282
sg15
(lp28283
sg17
(lp28284
sg19
(lp28285
sg21
I0
sba(iArchitecture
Entity
p28286
(dp28287
g11
(lp28288
sg13
S'com.google.common.collect.testing.TestIntegerSortedSetGenerator'
p28289
sg15
(lp28290
sg17
(lp28291
sg19
(lp28292
sg21
I0
sba(iArchitecture
Entity
p28293
(dp28294
g11
(lp28295
sg13
S'com.google.common.collect.testing.TestIteratorGenerator'
p28296
sg15
(lp28297
sg17
(lp28298
sg19
(lp28299
sg21
I0
sba(iArchitecture
Entity
p28300
(dp28301
g11
(lp28302
sg13
S'com.google.common.collect.testing.TestQueueGenerator'
p28303
sg15
(lp28304
sg17
(lp28305
sg19
(lp28306
sg21
I0
sba(iArchitecture
Entity
p28307
(dp28308
g11
(lp28309
sg13
S'com.google.common.collect.testing.TestSetGenerator'
p28310
sg15
(lp28311
sg17
(lp28312
sg19
(lp28313
sg21
I0
sba(iArchitecture
Entity
p28314
(dp28315
g11
(lp28316
sg13
S'com.google.common.collect.testing.TestSortedMapGenerator'
p28317
sg15
(lp28318
sg17
(lp28319
sg19
(lp28320
sg21
I0
sba(iArchitecture
Entity
p28321
(dp28322
g11
(lp28323
sg13
S'com.google.common.collect.testing.TestSortedSetGenerator'
p28324
sg15
(lp28325
sg17
(lp28326
sg19
(lp28327
sg21
I0
sba(iArchitecture
Entity
p28328
(dp28329
g11
(lp28330
sg13
S'com.google.common.collect.testing.TestStringListGenerator'
p28331
sg15
(lp28332
sg17
(lp28333
sg19
(lp28334
sg21
I0
sba(iArchitecture
Entity
p28335
(dp28336
g11
(lp28337
sg13
S'com.google.common.collect.testing.TestStringMapGenerator'
p28338
sg15
(lp28339
sg17
(lp28340
sg19
(lp28341
sg21
I0
sba(iArchitecture
Entity
p28342
(dp28343
g11
(lp28344
sg13
S'com.google.common.collect.testing.TestStringQueueGenerator'
p28345
sg15
(lp28346
sg17
(lp28347
sg19
(lp28348
sg21
I0
sba(iArchitecture
Entity
p28349
(dp28350
g11
(lp28351
sg13
S'com.google.common.collect.testing.TestStringSetGenerator'
p28352
sg15
(lp28353
sg17
(lp28354
sg19
(lp28355
sg21
I0
sba(iArchitecture
Entity
p28356
(dp28357
g11
(lp28358
sg13
S'com.google.common.collect.testing.TestStringSortedMapGenerator'
p28359
sg15
(lp28360
sg17
(lp28361
sg19
(lp28362
sg21
I0
sba(iArchitecture
Entity
p28363
(dp28364
g11
(lp28365
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil'
p28366
sg15
(lp28367
sg17
(lp28368
sg19
(lp28369
sg21
I0
sba(iArchitecture
Entity
p28370
(dp28371
g11
(lp28372
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$1'
p28373
sg15
(lp28374
sg17
(lp28375
sg19
(lp28376
sg21
I0
sba(iArchitecture
Entity
p28377
(dp28378
g11
(lp28379
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$10'
p28380
sg15
(lp28381
sg17
(lp28382
sg19
(lp28383
sg21
I0
sba(iArchitecture
Entity
p28384
(dp28385
g11
(lp28386
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$10$1'
p28387
sg15
(lp28388
sg17
(lp28389
sg19
(lp28390
sg21
I0
sba(iArchitecture
Entity
p28391
(dp28392
g11
(lp28393
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$2'
p28394
sg15
(lp28395
sg17
(lp28396
sg19
(lp28397
sg21
I0
sba(iArchitecture
Entity
p28398
(dp28399
g11
(lp28400
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$3'
p28401
sg15
(lp28402
sg17
(lp28403
sg19
(lp28404
sg21
I0
sba(iArchitecture
Entity
p28405
(dp28406
g11
(lp28407
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$4'
p28408
sg15
(lp28409
sg17
(lp28410
sg19
(lp28411
sg21
I0
sba(iArchitecture
Entity
p28412
(dp28413
g11
(lp28414
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$5'
p28415
sg15
(lp28416
sg17
(lp28417
sg19
(lp28418
sg21
I0
sba(iArchitecture
Entity
p28419
(dp28420
g11
(lp28421
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$6'
p28422
sg15
(lp28423
sg17
(lp28424
sg19
(lp28425
sg21
I0
sba(iArchitecture
Entity
p28426
(dp28427
g11
(lp28428
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$7'
p28429
sg15
(lp28430
sg17
(lp28431
sg19
(lp28432
sg21
I0
sba(iArchitecture
Entity
p28433
(dp28434
g11
(lp28435
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$8'
p28436
sg15
(lp28437
sg17
(lp28438
sg19
(lp28439
sg21
I0
sba(iArchitecture
Entity
p28440
(dp28441
g11
(lp28442
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$9'
p28443
sg15
(lp28444
sg17
(lp28445
sg19
(lp28446
sg21
I0
sba(iArchitecture
Entity
p28447
(dp28448
g11
(lp28449
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$9$1'
p28450
sg15
(lp28451
sg17
(lp28452
sg19
(lp28453
sg21
I0
sba(iArchitecture
Entity
p28454
(dp28455
g11
(lp28456
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil'
p28457
sg15
(lp28458
sg17
(lp28459
sg19
(lp28460
sg21
I0
sba(iArchitecture
Entity
p28461
(dp28462
g11
(lp28463
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$1'
p28464
sg15
(lp28465
sg17
(lp28466
sg19
(lp28467
sg21
I0
sba(iArchitecture
Entity
p28468
(dp28469
g11
(lp28470
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$10'
p28471
sg15
(lp28472
sg17
(lp28473
sg19
(lp28474
sg21
I0
sba(iArchitecture
Entity
p28475
(dp28476
g11
(lp28477
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$2'
p28478
sg15
(lp28479
sg17
(lp28480
sg19
(lp28481
sg21
I0
sba(iArchitecture
Entity
p28482
(dp28483
g11
(lp28484
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$3'
p28485
sg15
(lp28486
sg17
(lp28487
sg19
(lp28488
sg21
I0
sba(iArchitecture
Entity
p28489
(dp28490
g11
(lp28491
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$4'
p28492
sg15
(lp28493
sg17
(lp28494
sg19
(lp28495
sg21
I0
sba(iArchitecture
Entity
p28496
(dp28497
g11
(lp28498
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$5'
p28499
sg15
(lp28500
sg17
(lp28501
sg19
(lp28502
sg21
I0
sba(iArchitecture
Entity
p28503
(dp28504
g11
(lp28505
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$6'
p28506
sg15
(lp28507
sg17
(lp28508
sg19
(lp28509
sg21
I0
sba(iArchitecture
Entity
p28510
(dp28511
g11
(lp28512
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$7'
p28513
sg15
(lp28514
sg17
(lp28515
sg19
(lp28516
sg21
I0
sba(iArchitecture
Entity
p28517
(dp28518
g11
(lp28519
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$8'
p28520
sg15
(lp28521
sg17
(lp28522
sg19
(lp28523
sg21
I0
sba(iArchitecture
Entity
p28524
(dp28525
g11
(lp28526
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$9'
p28527
sg15
(lp28528
sg17
(lp28529
sg19
(lp28530
sg21
I0
sba(iArchitecture
Entity
p28531
(dp28532
g11
(lp28533
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$NullFriendlyComparator'
p28534
sg15
(lp28535
sg17
(lp28536
sg19
(lp28537
sg21
I0
sba(iArchitecture
Entity
p28538
(dp28539
g11
(lp28540
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil'
p28541
sg15
(lp28542
sg17
(lp28543
sg19
(lp28544
sg21
I0
sba(iArchitecture
Entity
p28545
(dp28546
g11
(lp28547
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil$1'
p28548
sg15
(lp28549
sg17
(lp28550
sg19
(lp28551
sg21
I0
sba(iArchitecture
Entity
p28552
(dp28553
g11
(lp28554
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil$2'
p28555
sg15
(lp28556
sg17
(lp28557
sg19
(lp28558
sg21
I0
sba(iArchitecture
Entity
p28559
(dp28560
g11
(lp28561
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil$3'
p28562
sg15
(lp28563
sg17
(lp28564
sg19
(lp28565
sg21
I0
sba(iArchitecture
Entity
p28566
(dp28567
g11
(lp28568
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil$4'
p28569
sg15
(lp28570
sg17
(lp28571
sg19
(lp28572
sg21
I0
sba(iArchitecture
Entity
p28573
(dp28574
g11
(lp28575
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil$5'
p28576
sg15
(lp28577
sg17
(lp28578
sg19
(lp28579
sg21
I0
sba(iArchitecture
Entity
p28580
(dp28581
g11
(lp28582
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil$6'
p28583
sg15
(lp28584
sg17
(lp28585
sg19
(lp28586
sg21
I0
sba(iArchitecture
Entity
p28587
(dp28588
g11
(lp28589
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil'
p28590
sg15
(lp28591
sg17
(lp28592
sg19
(lp28593
sg21
I0
sba(iArchitecture
Entity
p28594
(dp28595
g11
(lp28596
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$1'
p28597
sg15
(lp28598
sg17
(lp28599
sg19
(lp28600
sg21
I0
sba(iArchitecture
Entity
p28601
(dp28602
g11
(lp28603
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$10'
p28604
sg15
(lp28605
sg17
(lp28606
sg19
(lp28607
sg21
I0
sba(iArchitecture
Entity
p28608
(dp28609
g11
(lp28610
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$11'
p28611
sg15
(lp28612
sg17
(lp28613
sg19
(lp28614
sg21
I0
sba(iArchitecture
Entity
p28615
(dp28616
g11
(lp28617
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$11$1'
p28618
sg15
(lp28619
sg17
(lp28620
sg19
(lp28621
sg21
I0
sba(iArchitecture
Entity
p28622
(dp28623
g11
(lp28624
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$12'
p28625
sg15
(lp28626
sg17
(lp28627
sg19
(lp28628
sg21
I0
sba(iArchitecture
Entity
p28629
(dp28630
g11
(lp28631
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$13'
p28632
sg15
(lp28633
sg17
(lp28634
sg19
(lp28635
sg21
I0
sba(iArchitecture
Entity
p28636
(dp28637
g11
(lp28638
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$14'
p28639
sg15
(lp28640
sg17
(lp28641
sg19
(lp28642
sg21
I0
sba(iArchitecture
Entity
p28643
(dp28644
g11
(lp28645
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$2'
p28646
sg15
(lp28647
sg17
(lp28648
sg19
(lp28649
sg21
I0
sba(iArchitecture
Entity
p28650
(dp28651
g11
(lp28652
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$3'
p28653
sg15
(lp28654
sg17
(lp28655
sg19
(lp28656
sg21
I0
sba(iArchitecture
Entity
p28657
(dp28658
g11
(lp28659
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$4'
p28660
sg15
(lp28661
sg17
(lp28662
sg19
(lp28663
sg21
I0
sba(iArchitecture
Entity
p28664
(dp28665
g11
(lp28666
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$5'
p28667
sg15
(lp28668
sg17
(lp28669
sg19
(lp28670
sg21
I0
sba(iArchitecture
Entity
p28671
(dp28672
g11
(lp28673
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$6'
p28674
sg15
(lp28675
sg17
(lp28676
sg19
(lp28677
sg21
I0
sba(iArchitecture
Entity
p28678
(dp28679
g11
(lp28680
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$7'
p28681
sg15
(lp28682
sg17
(lp28683
sg19
(lp28684
sg21
I0
sba(iArchitecture
Entity
p28685
(dp28686
g11
(lp28687
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$8'
p28688
sg15
(lp28689
sg17
(lp28690
sg19
(lp28691
sg21
I0
sba(iArchitecture
Entity
p28692
(dp28693
g11
(lp28694
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$9'
p28695
sg15
(lp28696
sg17
(lp28697
sg19
(lp28698
sg21
I0
sba(iArchitecture
Entity
p28699
(dp28700
g11
(lp28701
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$NullFriendlyComparator'
p28702
sg15
(lp28703
sg17
(lp28704
sg19
(lp28705
sg21
I0
sba(iArchitecture
Entity
p28706
(dp28707
g11
(lp28708
sg13
S'com.google.common.collect.testing.WrongType'
p28709
sg15
(lp28710
sg17
(lp28711
sg19
(lp28712
sg21
I0
sba(iArchitecture
Entity
p28713
(dp28714
g11
(lp28715
sg13
S'com.google.common.collect.testing.features.CollectionFeature'
p28716
sg15
(lp28717
sg17
(lp28718
sg19
(lp28719
sg21
I0
sba(iArchitecture
Entity
p28720
(dp28721
g11
(lp28722
sg13
S'com.google.common.collect.testing.features.CollectionFeature$Require'
p28723
sg15
(lp28724
sg17
(lp28725
sg19
(lp28726
sg21
I0
sba(iArchitecture
Entity
p28727
(dp28728
g11
(lp28729
sg13
S'com.google.common.collect.testing.features.ConflictingRequirementsException'
p28730
sg15
(lp28731
sg17
(lp28732
sg19
(lp28733
sg21
I0
sba(iArchitecture
Entity
p28734
(dp28735
g11
(lp28736
sg13
S'com.google.common.collect.testing.features.Feature'
p28737
sg15
(lp28738
sg17
(lp28739
sg19
(lp28740
sg21
I0
sba(iArchitecture
Entity
p28741
(dp28742
g11
(lp28743
sg13
S'com.google.common.collect.testing.features.FeatureUtil'
p28744
sg15
(lp28745
sg17
(lp28746
sg19
(lp28747
sg21
I0
sba(iArchitecture
Entity
p28748
(dp28749
g11
(lp28750
sg13
S'com.google.common.collect.testing.features.ListFeature'
p28751
sg15
(lp28752
sg17
(lp28753
sg19
(lp28754
sg21
I0
sba(iArchitecture
Entity
p28755
(dp28756
g11
(lp28757
sg13
S'com.google.common.collect.testing.features.ListFeature$Require'
p28758
sg15
(lp28759
sg17
(lp28760
sg19
(lp28761
sg21
I0
sba(iArchitecture
Entity
p28762
(dp28763
g11
(lp28764
sg13
S'com.google.common.collect.testing.features.TesterRequirements'
p28765
sg15
(lp28766
sg17
(lp28767
sg19
(lp28768
sg21
I0
sba(iArchitecture
Entity
p28769
(dp28770
g11
(lp28771
sg13
S'com.google.common.collect.testing.testers.AbstractListIndexOfTester'
p28772
sg15
(lp28773
sg17
(lp28774
sg19
(lp28775
sg21
I0
sba(iArchitecture
Entity
p28776
(dp28777
g11
(lp28778
sg13
S'com.google.common.collect.testing.testers.AbstractListTester'
p28779
sg15
(lp28780
sg17
(lp28781
sg19
(lp28782
sg21
I0
sba(iArchitecture
Entity
p28783
(dp28784
g11
(lp28785
sg13
S'com.google.common.collect.testing.testers.AbstractQueueTester'
p28786
sg15
(lp28787
sg17
(lp28788
sg19
(lp28789
sg21
I0
sba(iArchitecture
Entity
p28790
(dp28791
g11
(lp28792
sg13
S'com.google.common.collect.testing.testers.AbstractSetTester'
p28793
sg15
(lp28794
sg17
(lp28795
sg19
(lp28796
sg21
I0
sba(iArchitecture
Entity
p28797
(dp28798
g11
(lp28799
sg13
S'com.google.common.collect.testing.testers.CollectionAddAllTester'
p28800
sg15
(lp28801
sg17
(lp28802
sg19
(lp28803
sg21
I0
sba(iArchitecture
Entity
p28804
(dp28805
g11
(lp28806
sg13
S'com.google.common.collect.testing.testers.CollectionAddTester'
p28807
sg15
(lp28808
sg17
(lp28809
sg19
(lp28810
sg21
I0
sba(iArchitecture
Entity
p28811
(dp28812
g11
(lp28813
sg13
S'com.google.common.collect.testing.testers.CollectionClearTester'
p28814
sg15
(lp28815
sg17
(lp28816
sg19
(lp28817
sg21
I0
sba(iArchitecture
Entity
p28818
(dp28819
g11
(lp28820
sg13
S'com.google.common.collect.testing.testers.CollectionContainsAllTester'
p28821
sg15
(lp28822
sg17
(lp28823
sg19
(lp28824
sg21
I0
sba(iArchitecture
Entity
p28825
(dp28826
g11
(lp28827
sg13
S'com.google.common.collect.testing.testers.CollectionContainsTester'
p28828
sg15
(lp28829
sg17
(lp28830
sg19
(lp28831
sg21
I0
sba(iArchitecture
Entity
p28832
(dp28833
g11
(lp28834
sg13
S'com.google.common.collect.testing.testers.CollectionCreationTester'
p28835
sg15
(lp28836
sg17
(lp28837
sg19
(lp28838
sg21
I0
sba(iArchitecture
Entity
p28839
(dp28840
g11
(lp28841
sg13
S'com.google.common.collect.testing.testers.CollectionEqualsTester'
p28842
sg15
(lp28843
sg17
(lp28844
sg19
(lp28845
sg21
I0
sba(iArchitecture
Entity
p28846
(dp28847
g11
(lp28848
sg13
S'com.google.common.collect.testing.testers.CollectionIsEmptyTester'
p28849
sg15
(lp28850
sg17
(lp28851
sg19
(lp28852
sg21
I0
sba(iArchitecture
Entity
p28853
(dp28854
g11
(lp28855
sg13
S'com.google.common.collect.testing.testers.CollectionRemoveAllTester'
p28856
sg15
(lp28857
sg17
(lp28858
sg19
(lp28859
sg21
I0
sba(iArchitecture
Entity
p28860
(dp28861
g11
(lp28862
sg13
S'com.google.common.collect.testing.testers.CollectionRemoveTester'
p28863
sg15
(lp28864
sg17
(lp28865
sg19
(lp28866
sg21
I0
sba(iArchitecture
Entity
p28867
(dp28868
g11
(lp28869
sg13
S'com.google.common.collect.testing.testers.CollectionSerializationEqualTester'
p28870
sg15
(lp28871
sg17
(lp28872
sg19
(lp28873
sg21
I0
sba(iArchitecture
Entity
p28874
(dp28875
g11
(lp28876
sg13
S'com.google.common.collect.testing.testers.CollectionSerializationTester'
p28877
sg15
(lp28878
sg17
(lp28879
sg19
(lp28880
sg21
I0
sba(iArchitecture
Entity
p28881
(dp28882
g11
(lp28883
sg13
S'com.google.common.collect.testing.testers.CollectionSizeTester'
p28884
sg15
(lp28885
sg17
(lp28886
sg19
(lp28887
sg21
I0
sba(iArchitecture
Entity
p28888
(dp28889
g11
(lp28890
sg13
S'com.google.common.collect.testing.testers.CollectionToArrayTester'
p28891
sg15
(lp28892
sg17
(lp28893
sg19
(lp28894
sg21
I0
sba(iArchitecture
Entity
p28895
(dp28896
g11
(lp28897
sg13
S'com.google.common.collect.testing.testers.CollectionToStringTester'
p28898
sg15
(lp28899
sg17
(lp28900
sg19
(lp28901
sg21
I0
sba(iArchitecture
Entity
p28902
(dp28903
g11
(lp28904
sg13
S'com.google.common.collect.testing.testers.ConcurrentMapPutIfAbsentTester'
p28905
sg15
(lp28906
sg17
(lp28907
sg19
(lp28908
sg21
I0
sba(iArchitecture
Entity
p28909
(dp28910
g11
(lp28911
sg13
S'com.google.common.collect.testing.testers.ConcurrentMapRemoveTester'
p28912
sg15
(lp28913
sg17
(lp28914
sg19
(lp28915
sg21
I0
sba(iArchitecture
Entity
p28916
(dp28917
g11
(lp28918
sg13
S'com.google.common.collect.testing.testers.ConcurrentMapReplaceEntryTester'
p28919
sg15
(lp28920
sg17
(lp28921
sg19
(lp28922
sg21
I0
sba(iArchitecture
Entity
p28923
(dp28924
g11
(lp28925
sg13
S'com.google.common.collect.testing.testers.ConcurrentMapReplaceTester'
p28926
sg15
(lp28927
sg17
(lp28928
sg19
(lp28929
sg21
I0
sba(iArchitecture
Entity
p28930
(dp28931
g11
(lp28932
sg13
S'com.google.common.collect.testing.testers.ListAddAllAtIndexTester'
p28933
sg15
(lp28934
sg17
(lp28935
sg19
(lp28936
sg21
I0
sba(iArchitecture
Entity
p28937
(dp28938
g11
(lp28939
sg13
S'com.google.common.collect.testing.testers.ListAddAllTester'
p28940
sg15
(lp28941
sg17
(lp28942
sg19
(lp28943
sg21
I0
sba(iArchitecture
Entity
p28944
(dp28945
g11
(lp28946
sg13
S'com.google.common.collect.testing.testers.ListAddAtIndexTester'
p28947
sg15
(lp28948
sg17
(lp28949
sg19
(lp28950
sg21
I0
sba(iArchitecture
Entity
p28951
(dp28952
g11
(lp28953
sg13
S'com.google.common.collect.testing.testers.ListAddTester'
p28954
sg15
(lp28955
sg17
(lp28956
sg19
(lp28957
sg21
I0
sba(iArchitecture
Entity
p28958
(dp28959
g11
(lp28960
sg13
S'com.google.common.collect.testing.testers.ListCreationTester'
p28961
sg15
(lp28962
sg17
(lp28963
sg19
(lp28964
sg21
I0
sba(iArchitecture
Entity
p28965
(dp28966
g11
(lp28967
sg13
S'com.google.common.collect.testing.testers.ListEqualsTester'
p28968
sg15
(lp28969
sg17
(lp28970
sg19
(lp28971
sg21
I0
sba(iArchitecture
Entity
p28972
(dp28973
g11
(lp28974
sg13
S'com.google.common.collect.testing.testers.ListGetTester'
p28975
sg15
(lp28976
sg17
(lp28977
sg19
(lp28978
sg21
I0
sba(iArchitecture
Entity
p28979
(dp28980
g11
(lp28981
sg13
S'com.google.common.collect.testing.testers.ListHashCodeTester'
p28982
sg15
(lp28983
sg17
(lp28984
sg19
(lp28985
sg21
I0
sba(iArchitecture
Entity
p28986
(dp28987
g11
(lp28988
sg13
S'com.google.common.collect.testing.testers.ListIndexOfTester'
p28989
sg15
(lp28990
sg17
(lp28991
sg19
(lp28992
sg21
I0
sba(iArchitecture
Entity
p28993
(dp28994
g11
(lp28995
sg13
S'com.google.common.collect.testing.testers.ListLastIndexOfTester'
p28996
sg15
(lp28997
sg17
(lp28998
sg19
(lp28999
sg21
I0
sba(iArchitecture
Entity
p29000
(dp29001
g11
(lp29002
sg13
S'com.google.common.collect.testing.testers.ListRemoveAllTester'
p29003
sg15
(lp29004
sg17
(lp29005
sg19
(lp29006
sg21
I0
sba(iArchitecture
Entity
p29007
(dp29008
g11
(lp29009
sg13
S'com.google.common.collect.testing.testers.ListRemoveAtIndexTester'
p29010
sg15
(lp29011
sg17
(lp29012
sg19
(lp29013
sg21
I0
sba(iArchitecture
Entity
p29014
(dp29015
g11
(lp29016
sg13
S'com.google.common.collect.testing.testers.ListRemoveTester'
p29017
sg15
(lp29018
sg17
(lp29019
sg19
(lp29020
sg21
I0
sba(iArchitecture
Entity
p29021
(dp29022
g11
(lp29023
sg13
S'com.google.common.collect.testing.testers.ListRetainAllTester'
p29024
sg15
(lp29025
sg17
(lp29026
sg19
(lp29027
sg21
I0
sba(iArchitecture
Entity
p29028
(dp29029
g11
(lp29030
sg13
S'com.google.common.collect.testing.testers.ListSetTester'
p29031
sg15
(lp29032
sg17
(lp29033
sg19
(lp29034
sg21
I0
sba(iArchitecture
Entity
p29035
(dp29036
g11
(lp29037
sg13
S'com.google.common.collect.testing.testers.ListSubListTester'
p29038
sg15
(lp29039
sg17
(lp29040
sg19
(lp29041
sg21
I0
sba(iArchitecture
Entity
p29042
(dp29043
g11
(lp29044
sg13
S'com.google.common.collect.testing.testers.ListToArrayTester'
p29045
sg15
(lp29046
sg17
(lp29047
sg19
(lp29048
sg21
I0
sba(iArchitecture
Entity
p29049
(dp29050
g11
(lp29051
sg13
S'com.google.common.collect.testing.testers.MapClearTester'
p29052
sg15
(lp29053
sg17
(lp29054
sg19
(lp29055
sg21
I0
sba(iArchitecture
Entity
p29056
(dp29057
g11
(lp29058
sg13
S'com.google.common.collect.testing.testers.MapContainsKeyTester'
p29059
sg15
(lp29060
sg17
(lp29061
sg19
(lp29062
sg21
I0
sba(iArchitecture
Entity
p29063
(dp29064
g11
(lp29065
sg13
S'com.google.common.collect.testing.testers.MapContainsValueTester'
p29066
sg15
(lp29067
sg17
(lp29068
sg19
(lp29069
sg21
I0
sba(iArchitecture
Entity
p29070
(dp29071
g11
(lp29072
sg13
S'com.google.common.collect.testing.testers.MapCreationTester'
p29073
sg15
(lp29074
sg17
(lp29075
sg19
(lp29076
sg21
I0
sba(iArchitecture
Entity
p29077
(dp29078
g11
(lp29079
sg13
S'com.google.common.collect.testing.testers.MapEqualsTester'
p29080
sg15
(lp29081
sg17
(lp29082
sg19
(lp29083
sg21
I0
sba(iArchitecture
Entity
p29084
(dp29085
g11
(lp29086
sg13
S'com.google.common.collect.testing.testers.MapGetTester'
p29087
sg15
(lp29088
sg17
(lp29089
sg19
(lp29090
sg21
I0
sba(iArchitecture
Entity
p29091
(dp29092
g11
(lp29093
sg13
S'com.google.common.collect.testing.testers.MapHashCodeTester'
p29094
sg15
(lp29095
sg17
(lp29096
sg19
(lp29097
sg21
I0
sba(iArchitecture
Entity
p29098
(dp29099
g11
(lp29100
sg13
S'com.google.common.collect.testing.testers.MapIsEmptyTester'
p29101
sg15
(lp29102
sg17
(lp29103
sg19
(lp29104
sg21
I0
sba(iArchitecture
Entity
p29105
(dp29106
g11
(lp29107
sg13
S'com.google.common.collect.testing.testers.MapPutAllTester'
p29108
sg15
(lp29109
sg17
(lp29110
sg19
(lp29111
sg21
I0
sba(iArchitecture
Entity
p29112
(dp29113
g11
(lp29114
sg13
S'com.google.common.collect.testing.testers.MapPutTester'
p29115
sg15
(lp29116
sg17
(lp29117
sg19
(lp29118
sg21
I0
sba(iArchitecture
Entity
p29119
(dp29120
g11
(lp29121
sg13
S'com.google.common.collect.testing.testers.MapRemoveTester'
p29122
sg15
(lp29123
sg17
(lp29124
sg19
(lp29125
sg21
I0
sba(iArchitecture
Entity
p29126
(dp29127
g11
(lp29128
sg13
S'com.google.common.collect.testing.testers.MapSerializationTester'
p29129
sg15
(lp29130
sg17
(lp29131
sg19
(lp29132
sg21
I0
sba(iArchitecture
Entity
p29133
(dp29134
g11
(lp29135
sg13
S'com.google.common.collect.testing.testers.MapSizeTester'
p29136
sg15
(lp29137
sg17
(lp29138
sg19
(lp29139
sg21
I0
sba(iArchitecture
Entity
p29140
(dp29141
g11
(lp29142
g26869
asg13
S'com.google.common.collect.testing.testers.MapToStringTester'
p29143
sg15
(lp29144
VSee a unit test demonstrating the issue here: https://github.com/gpanther/fastutil-guava-tests/blob/master/src/test/java/net/greypanther/guava/tests/tests/CustomToStringTest.java\u000a\u000aIt shows a HashMap subclass which overrides toString and as a result fails tests, even if CollectionFeature.NON_STANDARD_TOSTRING passed to MapTestSuiteBuilder.\u000a\u000aI believe that methods like https://github.com/google/guava/blob/2cd4d629a2b6f1a462643b248e0972f44c5133b7/guava-testlib/src/com/google/common/collect/testing/testers/MapToStringTester.java#L45 should be marked with `@CollectionFeature.Require(absent = NON_STANDARD_TOSTRING)`.\u000a
p29145
asg17
(lp29146
g26874
asg19
(lp29147
g26876
asg21
I0
sba(iArchitecture
Entity
p29148
(dp29149
g11
(lp29150
sg13
S'com.google.common.collect.testing.testers.NavigableMapNavigationTester'
p29151
sg15
(lp29152
sg17
(lp29153
sg19
(lp29154
sg21
I0
sba(iArchitecture
Entity
p29155
(dp29156
g11
(lp29157
sg13
S'com.google.common.collect.testing.testers.NavigableSetNavigationTester'
p29158
sg15
(lp29159
sg17
(lp29160
sg19
(lp29161
sg21
I0
sba(iArchitecture
Entity
p29162
(dp29163
g11
(lp29164
sg13
S'com.google.common.collect.testing.testers.Platform'
p29165
sg15
(lp29166
sg17
(lp29167
sg19
(lp29168
sg21
I0
sba(iArchitecture
Entity
p29169
(dp29170
g11
(lp29171
sg13
S'com.google.common.collect.testing.testers.QueueElementTester'
p29172
sg15
(lp29173
sg17
(lp29174
sg19
(lp29175
sg21
I0
sba(iArchitecture
Entity
p29176
(dp29177
g11
(lp29178
sg13
S'com.google.common.collect.testing.testers.QueueOfferTester'
p29179
sg15
(lp29180
sg17
(lp29181
sg19
(lp29182
sg21
I0
sba(iArchitecture
Entity
p29183
(dp29184
g11
(lp29185
sg13
S'com.google.common.collect.testing.testers.QueuePeekTester'
p29186
sg15
(lp29187
sg17
(lp29188
sg19
(lp29189
sg21
I0
sba(iArchitecture
Entity
p29190
(dp29191
g11
(lp29192
sg13
S'com.google.common.collect.testing.testers.QueuePollTester'
p29193
sg15
(lp29194
sg17
(lp29195
sg19
(lp29196
sg21
I0
sba(iArchitecture
Entity
p29197
(dp29198
g11
(lp29199
sg13
S'com.google.common.collect.testing.testers.QueueRemoveTester'
p29200
sg15
(lp29201
sg17
(lp29202
sg19
(lp29203
sg21
I0
sba(iArchitecture
Entity
p29204
(dp29205
g11
(lp29206
sg13
S'com.google.common.collect.testing.testers.SetAddAllTester'
p29207
sg15
(lp29208
sg17
(lp29209
sg19
(lp29210
sg21
I0
sba(iArchitecture
Entity
p29211
(dp29212
g11
(lp29213
sg13
S'com.google.common.collect.testing.testers.SetAddTester'
p29214
sg15
(lp29215
sg17
(lp29216
sg19
(lp29217
sg21
I0
sba(iArchitecture
Entity
p29218
(dp29219
g11
(lp29220
sg13
S'com.google.common.collect.testing.testers.SetEqualsTester'
p29221
sg15
(lp29222
sg17
(lp29223
sg19
(lp29224
sg21
I0
sba(iArchitecture
Entity
p29225
(dp29226
g11
(lp29227
sg13
S'com.google.common.collect.testing.testers.SetHashCodeTester'
p29228
sg15
(lp29229
sg17
(lp29230
sg19
(lp29231
sg21
I0
sba(iArchitecture
Entity
p29232
(dp29233
g11
(lp29234
sg13
S'com.google.common.collect.testing.testers.SetRemoveTester'
p29235
sg15
(lp29236
sg17
(lp29237
sg19
(lp29238
sg21
I0
sba(iArchitecture
Entity
p29239
(dp29240
g11
(lp29241
sg13
S'com.google.common.collect.testing.testers.SortedSetNavigationTester'
p29242
sg15
(lp29243
sg17
(lp29244
sg19
(lp29245
sg21
I0
sba(iArchitecture
Entity
p29246
(dp29247
g11
(lp29248
sg13
S'com.google.common.util.concurrent.testing.MockFutureListener'
p29249
sg15
(lp29250
sg17
(lp29251
sg19
(lp29252
sg21
I0
sba(iArchitecture
Entity
p29253
(dp29254
g11
(lp29255
sg13
S'junit.framework.Assert'
p29256
sg15
(lp29257
sg17
(lp29258
sg19
(lp29259
sg21
I0
sba(iArchitecture
Entity
p29260
(dp29261
g11
(lp29262
sg13
S'junit.framework.Test'
p29263
sg15
(lp29264
sg17
(lp29265
sg19
(lp29266
sg21
I0
sba(iArchitecture
Entity
p29267
(dp29268
g11
(lp29269
sg13
S'junit.framework.TestCase'
p29270
sg15
(lp29271
sg17
(lp29272
sg19
(lp29273
sg21
I0
sbasg1055
(lp29274
g27603
ag27610
ag27617
ag27624
ag27631
ag27638
ag27645
ag27652
ag27659
ag27666
ag27673
ag27680
ag27687
ag27694
ag27701
ag27708
ag27715
ag27722
ag27729
ag27736
ag27743
ag27750
ag27757
ag27764
ag27771
ag27778
ag27785
ag27792
ag27799
ag27806
ag27813
ag27820
ag27827
ag27834
ag27841
ag27848
ag27855
ag27862
ag27869
ag27876
ag27883
ag27890
ag27897
ag27904
ag27911
ag27918
ag27925
ag27932
ag27939
ag27946
ag27953
ag27960
ag27967
ag27974
ag27981
ag27988
ag27995
ag28002
ag28009
ag28016
ag28023
ag28030
ag28037
ag28044
ag28051
ag28058
ag28065
ag28072
ag28079
ag28086
ag28093
ag28100
ag28107
ag28114
ag28121
ag28128
ag28135
ag28142
ag28149
ag28156
ag28163
ag28170
ag28177
ag28184
ag28191
ag28198
ag28205
ag28212
ag28219
ag28226
ag28233
ag28240
ag28247
ag28254
ag28261
ag28268
ag28275
ag28282
ag28289
ag28296
ag28303
ag28310
ag28317
ag28324
ag28331
ag28338
ag28345
ag28352
ag28359
ag28366
ag28373
ag28380
ag28387
ag28394
ag28401
ag28408
ag28415
ag28422
ag28429
ag28436
ag28443
ag28450
ag28457
ag28464
ag28471
ag28478
ag28485
ag28492
ag28499
ag28506
ag28513
ag28520
ag28527
ag28534
ag28541
ag28548
ag28555
ag28562
ag28569
ag28576
ag28583
ag28590
ag28597
ag28604
ag28611
ag28618
ag28625
ag28632
ag28639
ag28646
ag28653
ag28660
ag28667
ag28674
ag28681
ag28688
ag28695
ag28702
ag28709
ag28716
ag28723
ag28730
ag28737
ag28744
ag28751
ag28758
ag28765
ag28772
ag28779
ag28786
ag28793
ag28800
ag28807
ag28814
ag28821
ag28828
ag28835
ag28842
ag28849
ag28856
ag28863
ag28870
ag28877
ag28884
ag28891
ag28898
ag28905
ag28912
ag28919
ag28926
ag28933
ag28940
ag28947
ag28954
ag28961
ag28968
ag28975
ag28982
ag28989
ag28996
ag29003
ag29010
ag29017
ag29024
ag29031
ag29038
ag29045
ag29052
ag29059
ag29066
ag29073
ag29080
ag29087
ag29094
ag29101
ag29108
ag29115
ag29122
ag29129
ag29136
ag29143
ag29151
ag29158
ag29165
ag29172
ag29179
ag29186
ag29193
ag29200
ag29207
ag29214
ag29221
ag29228
ag29235
ag29242
ag29249
ag29256
ag29263
ag29270
asg21
I0
sg1057
S'com.google.common.collect.testing.ss'
p29275
sba(iArchitecture
Cluster
p29276
(dp29277
g7
(lp29278
(iArchitecture
Entity
p29279
(dp29280
g11
(lp29281
sg13
S'com.google.common.collect.testing.ListIteratorTester'
p29282
sg15
(lp29283
sg17
(lp29284
sg19
(lp29285
sg21
I0
sba(iArchitecture
Entity
p29286
(dp29287
g11
(lp29288
sg13
S'com.google.common.collect.testing.testers.CollectionIteratorTester'
p29289
sg15
(lp29290
sg17
(lp29291
sg19
(lp29292
sg21
I0
sba(iArchitecture
Entity
p29293
(dp29294
g11
(lp29295
sg13
S'com.google.common.collect.testing.testers.CollectionIteratorTester$1'
p29296
sg15
(lp29297
sg17
(lp29298
sg19
(lp29299
sg21
I0
sba(iArchitecture
Entity
p29300
(dp29301
g11
(lp29302
sg13
S'com.google.common.collect.testing.testers.CollectionRetainAllTester'
p29303
sg15
(lp29304
sg17
(lp29305
sg19
(lp29306
sg21
I0
sba(iArchitecture
Entity
p29307
(dp29308
g11
(lp29309
sg13
S'com.google.common.collect.testing.testers.CollectionRetainAllTester$1'
p29310
sg15
(lp29311
sg17
(lp29312
sg19
(lp29313
sg21
I0
sba(iArchitecture
Entity
p29314
(dp29315
g11
(lp29316
sg13
S'com.google.common.collect.testing.testers.CollectionRetainAllTester$Target'
p29317
sg15
(lp29318
sg17
(lp29319
sg19
(lp29320
sg21
I0
sba(iArchitecture
Entity
p29321
(dp29322
g11
(lp29323
sg13
S'com.google.common.collect.testing.testers.ListListIteratorTester'
p29324
sg15
(lp29325
sg17
(lp29326
sg19
(lp29327
sg21
I0
sba(iArchitecture
Entity
p29328
(dp29329
g11
(lp29330
sg13
S'com.google.common.collect.testing.testers.ListListIteratorTester$1'
p29331
sg15
(lp29332
sg17
(lp29333
sg19
(lp29334
sg21
I0
sba(iArchitecture
Entity
p29335
(dp29336
g11
(lp29337
sg13
S'com.google.common.collect.testing.testers.MapEntrySetTester'
p29338
sg15
(lp29339
sg17
(lp29340
sg19
(lp29341
sg21
I0
sba(iArchitecture
Entity
p29342
(dp29343
g11
(lp29344
sg13
S'com.google.common.collect.testing.testers.MapEntrySetTester$IncomparableType'
p29345
sg15
(lp29346
sg17
(lp29347
sg19
(lp29348
sg21
I0
sba(iArchitecture
Entity
p29349
(dp29350
g11
(lp29351
sg13
S'com.google.common.collect.testing.testers.SortedMapNavigationTester'
p29352
sg15
(lp29353
sg17
(lp29354
sg19
(lp29355
sg21
I0
sba(iArchitecture
Entity
p29356
(dp29357
g11
(lp29358
sg13
S'com.google.common.collect.testing.testers.SortedMapNavigationTester$1'
p29359
sg15
(lp29360
sg17
(lp29361
sg19
(lp29362
sg21
I0
sbasg1055
(lp29363
g29282
ag29289
ag29296
ag29303
ag29310
ag29317
ag29324
ag29331
ag29338
ag29345
ag29352
ag29359
asg21
I0
sg1057
S'com.google.common.collect.testing.testers.ss'
p29364
sba(iArchitecture
Cluster
p29365
(dp29366
g7
(lp29367
(iArchitecture
Entity
p29368
(dp29369
g11
(lp29370
sg13
S'com.google.common.escape.ArrayBasedCharEscaper'
p29371
sg15
(lp29372
sg17
(lp29373
sg19
(lp29374
sg21
I0
sba(iArchitecture
Entity
p29375
(dp29376
g11
(lp29377
sg13
S'com.google.common.escape.ArrayBasedEscaperMap'
p29378
sg15
(lp29379
sg17
(lp29380
sg19
(lp29381
sg21
I0
sba(iArchitecture
Entity
p29382
(dp29383
g11
(lp29384
sg13
S'com.google.common.escape.CharEscaper'
p29385
sg15
(lp29386
sg17
(lp29387
sg19
(lp29388
sg21
I0
sba(iArchitecture
Entity
p29389
(dp29390
g11
(lp29391
sg13
S'com.google.common.escape.CharEscaperBuilder'
p29392
sg15
(lp29393
sg17
(lp29394
sg19
(lp29395
sg21
I0
sba(iArchitecture
Entity
p29396
(dp29397
g11
(lp29398
sg13
S'com.google.common.escape.CharEscaperBuilder$CharArrayDecorator'
p29399
sg15
(lp29400
sg17
(lp29401
sg19
(lp29402
sg21
I0
sba(iArchitecture
Entity
p29403
(dp29404
g11
(lp29405
sg13
S'com.google.common.escape.Escaper'
p29406
sg15
(lp29407
sg17
(lp29408
sg19
(lp29409
sg21
I0
sba(iArchitecture
Entity
p29410
(dp29411
g11
(lp29412
sg13
S'com.google.common.escape.Escaper$1'
p29413
sg15
(lp29414
sg17
(lp29415
sg19
(lp29416
sg21
I0
sba(iArchitecture
Entity
p29417
(dp29418
g11
(lp29419
sg13
S'com.google.common.escape.Escapers'
p29420
sg15
(lp29421
sg17
(lp29422
sg19
(lp29423
sg21
I0
sba(iArchitecture
Entity
p29424
(dp29425
g11
(lp29426
sg13
S'com.google.common.escape.Escapers$1'
p29427
sg15
(lp29428
sg17
(lp29429
sg19
(lp29430
sg21
I0
sba(iArchitecture
Entity
p29431
(dp29432
g11
(lp29433
sg13
S'com.google.common.escape.Escapers$2'
p29434
sg15
(lp29435
sg17
(lp29436
sg19
(lp29437
sg21
I0
sba(iArchitecture
Entity
p29438
(dp29439
g11
(lp29440
sg13
S'com.google.common.escape.Escapers$Builder'
p29441
sg15
(lp29442
sg17
(lp29443
sg19
(lp29444
sg21
I0
sba(iArchitecture
Entity
p29445
(dp29446
g11
(lp29447
sg13
S'com.google.common.escape.Escapers$Builder$1'
p29448
sg15
(lp29449
sg17
(lp29450
sg19
(lp29451
sg21
I0
sba(iArchitecture
Entity
p29452
(dp29453
g11
(lp29454
sg13
S'com.google.common.escape.Platform'
p29455
sg15
(lp29456
sg17
(lp29457
sg19
(lp29458
sg21
I0
sba(iArchitecture
Entity
p29459
(dp29460
g11
(lp29461
sg13
S'com.google.common.escape.Platform$1'
p29462
sg15
(lp29463
sg17
(lp29464
sg19
(lp29465
sg21
I0
sba(iArchitecture
Entity
p29466
(dp29467
g11
(lp29468
sg13
S'com.google.common.escape.UnicodeEscaper'
p29469
sg15
(lp29470
sg17
(lp29471
sg19
(lp29472
sg21
I0
sba(iArchitecture
Entity
p29473
(dp29474
g11
(lp29475
sg13
S'com.google.common.escape.testing.EscaperAsserts'
p29476
sg15
(lp29477
sg17
(lp29478
sg19
(lp29479
sg21
I0
sba(iArchitecture
Entity
p29480
(dp29481
g11
(lp29482
sg13
S'com.google.common.html.HtmlEscapers'
p29483
sg15
(lp29484
sg17
(lp29485
sg19
(lp29486
sg21
I0
sba(iArchitecture
Entity
p29487
(dp29488
g11
(lp29489
sg13
S'com.google.common.xml.XmlEscapers'
p29490
sg15
(lp29491
sg17
(lp29492
sg19
(lp29493
sg21
I0
sbasg1055
(lp29494
g29371
ag29378
ag29385
ag29392
ag29399
ag29406
ag29413
ag29420
ag29427
ag29434
ag29441
ag29448
ag29455
ag29462
ag29469
ag29476
ag29483
ag29490
asg21
I0
sg1057
S'com.google.common.escape.ss'
p29495
sba(iArchitecture
Cluster
p29496
(dp29497
g7
(lp29498
(iArchitecture
Entity
p29499
(dp29500
g11
(lp29501
sg13
S'com.google.common.eventbus.AllowConcurrentEvents'
p29502
sg15
(lp29503
sg17
(lp29504
sg19
(lp29505
sg21
I0
sba(iArchitecture
Entity
p29506
(dp29507
g11
(lp29508
sg13
S'com.google.common.eventbus.AsyncEventBus'
p29509
sg15
(lp29510
sg17
(lp29511
sg19
(lp29512
sg21
I0
sba(iArchitecture
Entity
p29513
(dp29514
g11
(lp29515
sg13
S'com.google.common.eventbus.DeadEvent'
p29516
sg15
(lp29517
sg17
(lp29518
sg19
(lp29519
sg21
I0
sba(iArchitecture
Entity
p29520
(dp29521
g11
(lp29522
sg13
S'com.google.common.eventbus.Dispatcher'
p29523
sg15
(lp29524
sg17
(lp29525
sg19
(lp29526
sg21
I0
sba(iArchitecture
Entity
p29527
(dp29528
g11
(lp29529
sg13
S'com.google.common.eventbus.Dispatcher$1'
p29530
sg15
(lp29531
sg17
(lp29532
sg19
(lp29533
sg21
I0
sba(iArchitecture
Entity
p29534
(dp29535
g11
(lp29536
sg13
S'com.google.common.eventbus.Dispatcher$ImmediateDispatcher'
p29537
sg15
(lp29538
sg17
(lp29539
sg19
(lp29540
sg21
I0
sba(iArchitecture
Entity
p29541
(dp29542
g11
(lp29543
sg13
S'com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher'
p29544
sg15
(lp29545
sg17
(lp29546
sg19
(lp29547
sg21
I0
sba(iArchitecture
Entity
p29548
(dp29549
g11
(lp29550
sg13
S'com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher$EventWithSubscriber'
p29551
sg15
(lp29552
sg17
(lp29553
sg19
(lp29554
sg21
I0
sba(iArchitecture
Entity
p29555
(dp29556
g11
(lp29557
sg13
S'com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher'
p29558
sg15
(lp29559
sg17
(lp29560
sg19
(lp29561
sg21
I0
sba(iArchitecture
Entity
p29562
(dp29563
g11
(lp29564
sg13
S'com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$1'
p29565
sg15
(lp29566
sg17
(lp29567
sg19
(lp29568
sg21
I0
sba(iArchitecture
Entity
p29569
(dp29570
g11
(lp29571
sg13
S'com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$2'
p29572
sg15
(lp29573
sg17
(lp29574
sg19
(lp29575
sg21
I0
sba(iArchitecture
Entity
p29576
(dp29577
g11
(lp29578
sg13
S'com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$Event'
p29579
sg15
(lp29580
sg17
(lp29581
sg19
(lp29582
sg21
I0
sba(iArchitecture
Entity
p29583
(dp29584
g11
(lp29585
sg13
S'com.google.common.eventbus.EventBus'
p29586
sg15
(lp29587
sg17
(lp29588
sg19
(lp29589
sg21
I0
sba(iArchitecture
Entity
p29590
(dp29591
g11
(lp29592
sg13
S'com.google.common.eventbus.EventBus$LoggingHandler'
p29593
sg15
(lp29594
sg17
(lp29595
sg19
(lp29596
sg21
I0
sba(iArchitecture
Entity
p29597
(dp29598
g11
(lp29599
sg13
S'com.google.common.eventbus.Subscribe'
p29600
sg15
(lp29601
sg17
(lp29602
sg19
(lp29603
sg21
I0
sba(iArchitecture
Entity
p29604
(dp29605
g11
(lp29606
sg13
S'com.google.common.eventbus.Subscriber'
p29607
sg15
(lp29608
sg17
(lp29609
sg19
(lp29610
sg21
I0
sba(iArchitecture
Entity
p29611
(dp29612
g11
(lp29613
sg13
S'com.google.common.eventbus.Subscriber$1'
p29614
sg15
(lp29615
sg17
(lp29616
sg19
(lp29617
sg21
I0
sba(iArchitecture
Entity
p29618
(dp29619
g11
(lp29620
sg13
S'com.google.common.eventbus.Subscriber$SynchronizedSubscriber'
p29621
sg15
(lp29622
sg17
(lp29623
sg19
(lp29624
sg21
I0
sba(iArchitecture
Entity
p29625
(dp29626
g11
(lp29627
sg13
S'com.google.common.eventbus.SubscriberExceptionContext'
p29628
sg15
(lp29629
sg17
(lp29630
sg19
(lp29631
sg21
I0
sba(iArchitecture
Entity
p29632
(dp29633
g11
(lp29634
sg13
S'com.google.common.eventbus.SubscriberExceptionHandler'
p29635
sg15
(lp29636
sg17
(lp29637
sg19
(lp29638
sg21
I0
sba(iArchitecture
Entity
p29639
(dp29640
g11
(lp29641
sg13
S'com.google.common.eventbus.SubscriberRegistry'
p29642
sg15
(lp29643
sg17
(lp29644
sg19
(lp29645
sg21
I0
sba(iArchitecture
Entity
p29646
(dp29647
g11
(lp29648
sg13
S'com.google.common.eventbus.SubscriberRegistry$1'
p29649
sg15
(lp29650
sg17
(lp29651
sg19
(lp29652
sg21
I0
sba(iArchitecture
Entity
p29653
(dp29654
g11
(lp29655
sg13
S'com.google.common.eventbus.SubscriberRegistry$2'
p29656
sg15
(lp29657
sg17
(lp29658
sg19
(lp29659
sg21
I0
sba(iArchitecture
Entity
p29660
(dp29661
g11
(lp29662
sg13
S'com.google.common.eventbus.SubscriberRegistry$MethodIdentifier'
p29663
sg15
(lp29664
sg17
(lp29665
sg19
(lp29666
sg21
I0
sba(iArchitecture
Entity
p29667
(dp29668
g11
(lp29669
sg13
S'com.google.common.reflect.TypeToken$ClassSet'
p29670
sg15
(lp29671
sg17
(lp29672
sg19
(lp29673
sg21
I0
sba(iArchitecture
Entity
p29674
(dp29675
g11
(lp29676
sg13
S'com.google.common.reflect.TypeToken$TypeSet'
p29677
sg15
(lp29678
sg17
(lp29679
sg19
(lp29680
sg21
I0
sbasg1055
(lp29681
g29502
ag29509
ag29516
ag29523
ag29530
ag29537
ag29544
ag29551
ag29558
ag29565
ag29572
ag29579
ag29586
ag29593
ag29600
ag29607
ag29614
ag29621
ag29628
ag29635
ag29642
ag29649
ag29656
ag29663
ag29670
ag29677
asg21
I0
sg1057
S'com.google.common.eventbus.ss'
p29682
sba(iArchitecture
Cluster
p29683
(dp29684
g7
(lp29685
(iArchitecture
Entity
p29686
(dp29687
g11
(lp29688
sg13
S'com.google.common.hash.AbstractByteHasher'
p29689
sg15
(lp29690
sg17
(lp29691
sg19
(lp29692
sg21
I0
sba(iArchitecture
Entity
p29693
(dp29694
g11
(lp29695
sg13
S'com.google.common.hash.AbstractCompositeHashFunction'
p29696
sg15
(lp29697
sg17
(lp29698
sg19
(lp29699
sg21
I0
sba(iArchitecture
Entity
p29700
(dp29701
g11
(lp29702
sg13
S'com.google.common.hash.AbstractCompositeHashFunction$1'
p29703
sg15
(lp29704
sg17
(lp29705
sg19
(lp29706
sg21
I0
sba(iArchitecture
Entity
p29707
(dp29708
g11
(lp29709
sg13
S'com.google.common.hash.AbstractHasher'
p29710
sg15
(lp29711
sg17
(lp29712
sg19
(lp29713
sg21
I0
sba(iArchitecture
Entity
p29714
(dp29715
g11
(lp29716
sg13
S'com.google.common.hash.AbstractNonStreamingHashFunction'
p29717
sg15
(lp29718
sg17
(lp29719
sg19
(lp29720
sg21
I0
sba(iArchitecture
Entity
p29721
(dp29722
g11
(lp29723
sg13
S'com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher'
p29724
sg15
(lp29725
sg17
(lp29726
sg19
(lp29727
sg21
I0
sba(iArchitecture
Entity
p29728
(dp29729
g11
(lp29730
sg13
S'com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream'
p29731
sg15
(lp29732
sg17
(lp29733
sg19
(lp29734
sg21
I0
sba(iArchitecture
Entity
p29735
(dp29736
g11
(lp29737
sg13
S'com.google.common.hash.AbstractStreamingHashFunction'
p29738
sg15
(lp29739
sg17
(lp29740
sg19
(lp29741
sg21
I0
sba(iArchitecture
Entity
p29742
(dp29743
g11
(lp29744
sg13
S'com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher'
p29745
sg15
(lp29746
sg17
(lp29747
sg19
(lp29748
sg21
I0
sba(iArchitecture
Entity
p29749
(dp29750
g11
(lp29751
sg13
S'com.google.common.hash.BloomFilter'
p29752
sg15
(lp29753
sg17
(lp29754
sg19
(lp29755
sg21
I0
sba(iArchitecture
Entity
p29756
(dp29757
g11
(lp29758
sg13
S'com.google.common.hash.BloomFilter$1'
p29759
sg15
(lp29760
sg17
(lp29761
sg19
(lp29762
sg21
I0
sba(iArchitecture
Entity
p29763
(dp29764
g11
(lp29765
sg13
S'com.google.common.hash.BloomFilter$SerialForm'
p29766
sg15
(lp29767
sg17
(lp29768
sg19
(lp29769
sg21
I0
sba(iArchitecture
Entity
p29770
(dp29771
g11
(lp29772
sg13
S'com.google.common.hash.BloomFilter$Strategy'
p29773
sg15
(lp29774
sg17
(lp29775
sg19
(lp29776
sg21
I0
sba(iArchitecture
Entity
p29777
(dp29778
g11
(lp29779
sg13
S'com.google.common.hash.BloomFilterStrategies'
p29780
sg15
(lp29781
sg17
(lp29782
sg19
(lp29783
sg21
I0
sba(iArchitecture
Entity
p29784
(dp29785
g11
(lp29786
sg13
S'com.google.common.hash.BloomFilterStrategies$1'
p29787
sg15
(lp29788
sg17
(lp29789
sg19
(lp29790
sg21
I0
sba(iArchitecture
Entity
p29791
(dp29792
g11
(lp29793
sg13
S'com.google.common.hash.BloomFilterStrategies$2'
p29794
sg15
(lp29795
sg17
(lp29796
sg19
(lp29797
sg21
I0
sba(iArchitecture
Entity
p29798
(dp29799
g11
(lp29800
sg13
S'com.google.common.hash.BloomFilterStrategies$BitArray'
p29801
sg15
(lp29802
sg17
(lp29803
sg19
(lp29804
sg21
I0
sba(iArchitecture
Entity
p29805
(dp29806
g11
(lp29807
sg13
S'com.google.common.hash.ChecksumHashFunction'
p29808
sg15
(lp29809
sg17
(lp29810
sg19
(lp29811
sg21
I0
sba(iArchitecture
Entity
p29812
(dp29813
g11
(lp29814
sg13
S'com.google.common.hash.ChecksumHashFunction$1'
p29815
sg15
(lp29816
sg17
(lp29817
sg19
(lp29818
sg21
I0
sba(iArchitecture
Entity
p29819
(dp29820
g11
(lp29821
sg13
S'com.google.common.hash.ChecksumHashFunction$ChecksumHasher'
p29822
sg15
(lp29823
sg17
(lp29824
sg19
(lp29825
sg21
I0
sba(iArchitecture
Entity
p29826
(dp29827
g11
(lp29828
sg13
S'com.google.common.hash.Crc32cHashFunction'
p29829
sg15
(lp29830
sg17
(lp29831
sg19
(lp29832
sg21
I0
sba(iArchitecture
Entity
p29833
(dp29834
g11
(lp29835
sg13
S'com.google.common.hash.Crc32cHashFunction$Crc32cHasher'
p29836
sg15
(lp29837
sg17
(lp29838
sg19
(lp29839
sg21
I0
sba(iArchitecture
Entity
p29840
(dp29841
g11
(lp29842
sg13
S'com.google.common.hash.Funnel'
p29843
sg15
(lp29844
sg17
(lp29845
sg19
(lp29846
sg21
I0
sba(iArchitecture
Entity
p29847
(dp29848
g11
(lp29849
sg13
S'com.google.common.hash.Funnels'
p29850
sg15
(lp29851
sg17
(lp29852
sg19
(lp29853
sg21
I0
sba(iArchitecture
Entity
p29854
(dp29855
g11
(lp29856
sg13
S'com.google.common.hash.Funnels$ByteArrayFunnel'
p29857
sg15
(lp29858
sg17
(lp29859
sg19
(lp29860
sg21
I0
sba(iArchitecture
Entity
p29861
(dp29862
g11
(lp29863
sg13
S'com.google.common.hash.Funnels$IntegerFunnel'
p29864
sg15
(lp29865
sg17
(lp29866
sg19
(lp29867
sg21
I0
sba(iArchitecture
Entity
p29868
(dp29869
g11
(lp29870
sg13
S'com.google.common.hash.Funnels$LongFunnel'
p29871
sg15
(lp29872
sg17
(lp29873
sg19
(lp29874
sg21
I0
sba(iArchitecture
Entity
p29875
(dp29876
g11
(lp29877
sg13
S'com.google.common.hash.Funnels$SequentialFunnel'
p29878
sg15
(lp29879
sg17
(lp29880
sg19
(lp29881
sg21
I0
sba(iArchitecture
Entity
p29882
(dp29883
g11
(lp29884
sg13
S'com.google.common.hash.Funnels$SinkAsStream'
p29885
sg15
(lp29886
sg17
(lp29887
sg19
(lp29888
sg21
I0
sba(iArchitecture
Entity
p29889
(dp29890
g11
(lp29891
sg13
S'com.google.common.hash.Funnels$StringCharsetFunnel'
p29892
sg15
(lp29893
sg17
(lp29894
sg19
(lp29895
sg21
I0
sba(iArchitecture
Entity
p29896
(dp29897
g11
(lp29898
sg13
S'com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm'
p29899
sg15
(lp29900
sg17
(lp29901
sg19
(lp29902
sg21
I0
sba(iArchitecture
Entity
p29903
(dp29904
g11
(lp29905
sg13
S'com.google.common.hash.Funnels$UnencodedCharsFunnel'
p29906
sg15
(lp29907
sg17
(lp29908
sg19
(lp29909
sg21
I0
sba(iArchitecture
Entity
p29910
(dp29911
g11
(lp29912
sg13
S'com.google.common.hash.HashCode'
p29913
sg15
(lp29914
sg17
(lp29915
sg19
(lp29916
sg21
I0
sba(iArchitecture
Entity
p29917
(dp29918
g11
(lp29919
sg13
S'com.google.common.hash.HashCode$BytesHashCode'
p29920
sg15
(lp29921
sg17
(lp29922
sg19
(lp29923
sg21
I0
sba(iArchitecture
Entity
p29924
(dp29925
g11
(lp29926
sg13
S'com.google.common.hash.HashCode$IntHashCode'
p29927
sg15
(lp29928
sg17
(lp29929
sg19
(lp29930
sg21
I0
sba(iArchitecture
Entity
p29931
(dp29932
g11
(lp29933
sg13
S'com.google.common.hash.HashCode$LongHashCode'
p29934
sg15
(lp29935
sg17
(lp29936
sg19
(lp29937
sg21
I0
sba(iArchitecture
Entity
p29938
(dp29939
g11
(lp29940
sg13
S'com.google.common.hash.HashFunction'
p29941
sg15
(lp29942
sg17
(lp29943
sg19
(lp29944
sg21
I0
sba(iArchitecture
Entity
p29945
(dp29946
g11
(lp29947
sg13
S'com.google.common.hash.Hasher'
p29948
sg15
(lp29949
sg17
(lp29950
sg19
(lp29951
sg21
I0
sba(iArchitecture
Entity
p29952
(dp29953
g11
(lp29954
sg13
S'com.google.common.hash.Hashing'
p29955
sg15
(lp29956
sg17
(lp29957
sg19
(lp29958
sg21
I0
sba(iArchitecture
Entity
p29959
(dp29960
g11
(lp29961
sg13
S'com.google.common.hash.Hashing$1'
p29962
sg15
(lp29963
sg17
(lp29964
sg19
(lp29965
sg21
I0
sba(iArchitecture
Entity
p29966
(dp29967
g11
(lp29968
sg13
S'com.google.common.hash.Hashing$Adler32Holder'
p29969
sg15
(lp29970
sg17
(lp29971
sg19
(lp29972
sg21
I0
sba(iArchitecture
Entity
p29973
(dp29974
g11
(lp29975
sg13
S'com.google.common.hash.Hashing$ChecksumType'
p29976
sg15
(lp29977
sg17
(lp29978
sg19
(lp29979
sg21
I0
sba(iArchitecture
Entity
p29980
(dp29981
g11
(lp29982
sg13
S'com.google.common.hash.Hashing$ChecksumType$1'
p29983
sg15
(lp29984
sg17
(lp29985
sg19
(lp29986
sg21
I0
sba(iArchitecture
Entity
p29987
(dp29988
g11
(lp29989
sg13
S'com.google.common.hash.Hashing$ChecksumType$2'
p29990
sg15
(lp29991
sg17
(lp29992
sg19
(lp29993
sg21
I0
sba(iArchitecture
Entity
p29994
(dp29995
g11
(lp29996
sg13
S'com.google.common.hash.Hashing$ConcatenatedHashFunction'
p29997
sg15
(lp29998
sg17
(lp29999
sg19
(lp30000
sg21
I0
sba(iArchitecture
Entity
p30001
(dp30002
g11
(lp30003
sg13
S'com.google.common.hash.Hashing$Crc32Holder'
p30004
sg15
(lp30005
sg17
(lp30006
sg19
(lp30007
sg21
I0
sba(iArchitecture
Entity
p30008
(dp30009
g11
(lp30010
sg13
S'com.google.common.hash.Hashing$Crc32cHolder'
p30011
sg15
(lp30012
sg17
(lp30013
sg19
(lp30014
sg21
I0
sba(iArchitecture
Entity
p30015
(dp30016
g11
(lp30017
sg13
S'com.google.common.hash.Hashing$LinearCongruentialGenerator'
p30018
sg15
(lp30019
sg17
(lp30020
sg19
(lp30021
sg21
I0
sba(iArchitecture
Entity
p30022
(dp30023
g11
(lp30024
sg13
S'com.google.common.hash.Hashing$Md5Holder'
p30025
sg15
(lp30026
sg17
(lp30027
sg19
(lp30028
sg21
I0
sba(iArchitecture
Entity
p30029
(dp30030
g11
(lp30031
sg13
S'com.google.common.hash.Hashing$Murmur3_128Holder'
p30032
sg15
(lp30033
sg17
(lp30034
sg19
(lp30035
sg21
I0
sba(iArchitecture
Entity
p30036
(dp30037
g11
(lp30038
sg13
S'com.google.common.hash.Hashing$Murmur3_32Holder'
p30039
sg15
(lp30040
sg17
(lp30041
sg19
(lp30042
sg21
I0
sba(iArchitecture
Entity
p30043
(dp30044
g11
(lp30045
sg13
S'com.google.common.hash.Hashing$Sha1Holder'
p30046
sg15
(lp30047
sg17
(lp30048
sg19
(lp30049
sg21
I0
sba(iArchitecture
Entity
p30050
(dp30051
g11
(lp30052
sg13
S'com.google.common.hash.Hashing$Sha256Holder'
p30053
sg15
(lp30054
sg17
(lp30055
sg19
(lp30056
sg21
I0
sba(iArchitecture
Entity
p30057
(dp30058
g11
(lp30059
sg13
S'com.google.common.hash.Hashing$Sha384Holder'
p30060
sg15
(lp30061
sg17
(lp30062
sg19
(lp30063
sg21
I0
sba(iArchitecture
Entity
p30064
(dp30065
g11
(lp30066
sg13
S'com.google.common.hash.Hashing$Sha512Holder'
p30067
sg15
(lp30068
sg17
(lp30069
sg19
(lp30070
sg21
I0
sba(iArchitecture
Entity
p30071
(dp30072
g11
(lp30073
sg13
S'com.google.common.hash.Hashing$SipHash24Holder'
p30074
sg15
(lp30075
sg17
(lp30076
sg19
(lp30077
sg21
I0
sba(iArchitecture
Entity
p30078
(dp30079
g11
(lp30080
sg13
S'com.google.common.hash.MessageDigestHashFunction'
p30081
sg15
(lp30082
sg17
(lp30083
sg19
(lp30084
sg21
I0
sba(iArchitecture
Entity
p30085
(dp30086
g11
(lp30087
sg13
S'com.google.common.hash.MessageDigestHashFunction$1'
p30088
sg15
(lp30089
sg17
(lp30090
sg19
(lp30091
sg21
I0
sba(iArchitecture
Entity
p30092
(dp30093
g11
(lp30094
sg13
S'com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher'
p30095
sg15
(lp30096
sg17
(lp30097
sg19
(lp30098
sg21
I0
sba(iArchitecture
Entity
p30099
(dp30100
g11
(lp30101
sg13
S'com.google.common.hash.MessageDigestHashFunction$SerializedForm'
p30102
sg15
(lp30103
sg17
(lp30104
sg19
(lp30105
sg21
I0
sba(iArchitecture
Entity
p30106
(dp30107
g11
(lp30108
sg13
S'com.google.common.hash.Murmur3_128HashFunction'
p30109
sg15
(lp30110
sg17
(lp30111
sg19
(lp30112
sg21
I0
sba(iArchitecture
Entity
p30113
(dp30114
g11
(lp30115
sg13
S'com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher'
p30116
sg15
(lp30117
sg17
(lp30118
sg19
(lp30119
sg21
I0
sba(iArchitecture
Entity
p30120
(dp30121
g11
(lp30122
sg13
S'com.google.common.hash.Murmur3_32HashFunction'
p30123
sg15
(lp30124
sg17
(lp30125
sg19
(lp30126
sg21
I0
sba(iArchitecture
Entity
p30127
(dp30128
g11
(lp30129
sg13
S'com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher'
p30130
sg15
(lp30131
sg17
(lp30132
sg19
(lp30133
sg21
I0
sba(iArchitecture
Entity
p30134
(dp30135
g11
(lp30136
sg13
S'com.google.common.hash.PrimitiveSink'
p30137
sg15
(lp30138
sg17
(lp30139
sg19
(lp30140
sg21
I0
sba(iArchitecture
Entity
p30141
(dp30142
g11
(lp30143
sg13
S'com.google.common.hash.SipHashFunction'
p30144
sg15
(lp30145
sg17
(lp30146
sg19
(lp30147
sg21
I0
sba(iArchitecture
Entity
p30148
(dp30149
g11
(lp30150
sg13
S'com.google.common.hash.SipHashFunction$SipHasher'
p30151
sg15
(lp30152
sg17
(lp30153
sg19
(lp30154
sg21
I0
sbasg1055
(lp30155
g29689
ag29696
ag29703
ag29710
ag29717
ag29724
ag29731
ag29738
ag29745
ag29752
ag29759
ag29766
ag29773
ag29780
ag29787
ag29794
ag29801
ag29808
ag29815
ag29822
ag29829
ag29836
ag29843
ag29850
ag29857
ag29864
ag29871
ag29878
ag29885
ag29892
ag29899
ag29906
ag29913
ag29920
ag29927
ag29934
ag29941
ag29948
ag29955
ag29962
ag29969
ag29976
ag29983
ag29990
ag29997
ag30004
ag30011
ag30018
ag30025
ag30032
ag30039
ag30046
ag30053
ag30060
ag30067
ag30074
ag30081
ag30088
ag30095
ag30102
ag30109
ag30116
ag30123
ag30130
ag30137
ag30144
ag30151
asg21
I0
sg1057
S'com.google.common.hash.ss'
p30156
sba(iArchitecture
Cluster
p30157
(dp30158
g7
(lp30159
(iArchitecture
Entity
p30160
(dp30161
g11
(lp30162
sg13
S'com.google.common.io.AppendableWriter'
p30163
sg15
(lp30164
sg17
(lp30165
sg19
(lp30166
sg21
I0
sba(iArchitecture
Entity
p30167
(dp30168
g11
(lp30169
V2124
p30170
asg13
S'com.google.common.io.BaseEncoding'
p30171
sg15
(lp30172
VThe next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\u000a\u000aThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\u000a
p30173
asg17
(lp30174
(lp30175
I0
aasg19
(lp30176
VUse String.getBytes(Charset) and other Charset utilities once GWT supports them
p30177
asg21
I0
sba(iArchitecture
Entity
p30178
(dp30179
g11
(lp30180
g30170
asg13
S'com.google.common.io.BaseEncoding$1'
p30181
sg15
(lp30182
VThe next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\u000a\u000aThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\u000a
p30183
asg17
(lp30184
g30175
asg19
(lp30185
g30177
asg21
I0
sba(iArchitecture
Entity
p30186
(dp30187
g11
(lp30188
g30170
asg13
S'com.google.common.io.BaseEncoding$2'
p30189
sg15
(lp30190
VThe next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\u000a\u000aThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\u000a
p30191
asg17
(lp30192
g30175
asg19
(lp30193
g30177
asg21
I0
sba(iArchitecture
Entity
p30194
(dp30195
g11
(lp30196
g30170
asg13
S'com.google.common.io.BaseEncoding$3'
p30197
sg15
(lp30198
VThe next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\u000a\u000aThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\u000a
p30199
asg17
(lp30200
g30175
asg19
(lp30201
g30177
asg21
I0
sba(iArchitecture
Entity
p30202
(dp30203
g11
(lp30204
g30170
asg13
S'com.google.common.io.BaseEncoding$4'
p30205
sg15
(lp30206
VThe next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\u000a\u000aThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\u000a
p30207
asg17
(lp30208
g30175
asg19
(lp30209
g30177
asg21
I0
sba(iArchitecture
Entity
p30210
(dp30211
g11
(lp30212
g30170
asg13
S'com.google.common.io.BaseEncoding$5'
p30213
sg15
(lp30214
VThe next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\u000a\u000aThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\u000a
p30215
asg17
(lp30216
g30175
asg19
(lp30217
g30177
asg21
I0
sba(iArchitecture
Entity
p30218
(dp30219
g11
(lp30220
g30170
asg13
S'com.google.common.io.BaseEncoding$Alphabet'
p30221
sg15
(lp30222
VThe next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\u000a\u000aThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\u000a
p30223
asg17
(lp30224
g30175
asg19
(lp30225
g30177
asg21
I0
sba(iArchitecture
Entity
p30226
(dp30227
g11
(lp30228
g30170
asg13
S'com.google.common.io.BaseEncoding$Base16Encoding'
p30229
sg15
(lp30230
VThe next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\u000a\u000aThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\u000a
p30231
asg17
(lp30232
g30175
asg19
(lp30233
g30177
asg21
I0
sba(iArchitecture
Entity
p30234
(dp30235
g11
(lp30236
g30170
asg13
S'com.google.common.io.BaseEncoding$Base64Encoding'
p30237
sg15
(lp30238
VThe next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\u000a\u000aThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\u000a
p30239
asg17
(lp30240
g30175
asg19
(lp30241
g30177
asg21
I0
sba(iArchitecture
Entity
p30242
(dp30243
g11
(lp30244
g30170
asg13
S'com.google.common.io.BaseEncoding$DecodingException'
p30245
sg15
(lp30246
VThe next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\u000a\u000aThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\u000a
p30247
asg17
(lp30248
g30175
asg19
(lp30249
g30177
asg21
I0
sba(iArchitecture
Entity
p30250
(dp30251
g11
(lp30252
g30170
asg13
S'com.google.common.io.BaseEncoding$SeparatedBaseEncoding'
p30253
sg15
(lp30254
VThe next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\u000a\u000aThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\u000a
p30255
asg17
(lp30256
g30175
asg19
(lp30257
g30177
asg21
I0
sba(iArchitecture
Entity
p30258
(dp30259
g11
(lp30260
g30170
asg13
S'com.google.common.io.BaseEncoding$StandardBaseEncoding'
p30261
sg15
(lp30262
VThe next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\u000a\u000aThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\u000a
p30263
asg17
(lp30264
g30175
asg19
(lp30265
g30177
asg21
I0
sba(iArchitecture
Entity
p30266
(dp30267
g11
(lp30268
g30170
asg13
S'com.google.common.io.BaseEncoding$StandardBaseEncoding$1'
p30269
sg15
(lp30270
VThe next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\u000a\u000aThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\u000a
p30271
asg17
(lp30272
g30175
asg19
(lp30273
g30177
asg21
I0
sba(iArchitecture
Entity
p30274
(dp30275
g11
(lp30276
g30170
asg13
S'com.google.common.io.BaseEncoding$StandardBaseEncoding$2'
p30277
sg15
(lp30278
VThe next GWT release will probably have emulations for `Charset` built in. Internal CL 99622756 will be removing our custom emulations, but I think we can go further, changing calls to methods like `getBytes` to use the `Charset` versions.\u000a\u000aThis assumes that we require the new GWT version for the post-19 Guava release. This was not the plan on #1999 but might be reasonable. Otherwise, we need a workaround. We'd need to figure out if our emulations would interfere with the GWT versions for users who _are_ using the new GWT.\u000a
p30279
asg17
(lp30280
g30175
asg19
(lp30281
g30177
asg21
I0
sba(iArchitecture
Entity
p30282
(dp30283
g11
(lp30284
sg13
S'com.google.common.io.ByteArrayDataInput'
p30285
sg15
(lp30286
sg17
(lp30287
sg19
(lp30288
sg21
I0
sba(iArchitecture
Entity
p30289
(dp30290
g11
(lp30291
sg13
S'com.google.common.io.ByteArrayDataOutput'
p30292
sg15
(lp30293
sg17
(lp30294
sg19
(lp30295
sg21
I0
sba(iArchitecture
Entity
p30296
(dp30297
g11
(lp30298
sg13
S'com.google.common.io.ByteProcessor'
p30299
sg15
(lp30300
sg17
(lp30301
sg19
(lp30302
sg21
I0
sba(iArchitecture
Entity
p30303
(dp30304
g11
(lp30305
sg13
S'com.google.common.io.ByteSink'
p30306
sg15
(lp30307
sg17
(lp30308
sg19
(lp30309
sg21
I0
sba(iArchitecture
Entity
p30310
(dp30311
g11
(lp30312
sg13
S'com.google.common.io.ByteSink$1'
p30313
sg15
(lp30314
sg17
(lp30315
sg19
(lp30316
sg21
I0
sba(iArchitecture
Entity
p30317
(dp30318
g11
(lp30319
sg13
S'com.google.common.io.ByteSink$AsCharSink'
p30320
sg15
(lp30321
sg17
(lp30322
sg19
(lp30323
sg21
I0
sba(iArchitecture
Entity
p30324
(dp30325
g11
(lp30326
sg13
S'com.google.common.io.ByteSource'
p30327
sg15
(lp30328
sg17
(lp30329
sg19
(lp30330
sg21
I0
sba(iArchitecture
Entity
p30331
(dp30332
g11
(lp30333
sg13
S'com.google.common.io.ByteSource$1'
p30334
sg15
(lp30335
sg17
(lp30336
sg19
(lp30337
sg21
I0
sba(iArchitecture
Entity
p30338
(dp30339
g11
(lp30340
sg13
S'com.google.common.io.ByteSource$AsCharSource'
p30341
sg15
(lp30342
sg17
(lp30343
sg19
(lp30344
sg21
I0
sba(iArchitecture
Entity
p30345
(dp30346
g11
(lp30347
sg13
S'com.google.common.io.ByteSource$ByteArrayByteSource'
p30348
sg15
(lp30349
sg17
(lp30350
sg19
(lp30351
sg21
I0
sba(iArchitecture
Entity
p30352
(dp30353
g11
(lp30354
sg13
S'com.google.common.io.ByteSource$ConcatenatedByteSource'
p30355
sg15
(lp30356
sg17
(lp30357
sg19
(lp30358
sg21
I0
sba(iArchitecture
Entity
p30359
(dp30360
g11
(lp30361
sg13
S'com.google.common.io.ByteSource$EmptyByteSource'
p30362
sg15
(lp30363
sg17
(lp30364
sg19
(lp30365
sg21
I0
sba(iArchitecture
Entity
p30366
(dp30367
g11
(lp30368
sg13
S'com.google.common.io.ByteSource$SlicedByteSource'
p30369
sg15
(lp30370
sg17
(lp30371
sg19
(lp30372
sg21
I0
sba(iArchitecture
Entity
p30373
(dp30374
g11
(lp30375
sg13
S'com.google.common.io.ByteStreams'
p30376
sg15
(lp30377
sg17
(lp30378
sg19
(lp30379
sg21
I0
sba(iArchitecture
Entity
p30380
(dp30381
g11
(lp30382
sg13
S'com.google.common.io.ByteStreams$1'
p30383
sg15
(lp30384
sg17
(lp30385
sg19
(lp30386
sg21
I0
sba(iArchitecture
Entity
p30387
(dp30388
g11
(lp30389
sg13
S'com.google.common.io.ByteStreams$ByteArrayDataInputStream'
p30390
sg15
(lp30391
sg17
(lp30392
sg19
(lp30393
sg21
I0
sba(iArchitecture
Entity
p30394
(dp30395
g11
(lp30396
sg13
S'com.google.common.io.ByteStreams$ByteArrayDataOutputStream'
p30397
sg15
(lp30398
sg17
(lp30399
sg19
(lp30400
sg21
I0
sba(iArchitecture
Entity
p30401
(dp30402
g11
(lp30403
sg13
S'com.google.common.io.ByteStreams$FastByteArrayOutputStream'
p30404
sg15
(lp30405
sg17
(lp30406
sg19
(lp30407
sg21
I0
sba(iArchitecture
Entity
p30408
(dp30409
g11
(lp30410
sg13
S'com.google.common.io.ByteStreams$LimitedInputStream'
p30411
sg15
(lp30412
sg17
(lp30413
sg19
(lp30414
sg21
I0
sba(iArchitecture
Entity
p30415
(dp30416
g11
(lp30417
sg13
S'com.google.common.io.CharSequenceReader'
p30418
sg15
(lp30419
sg17
(lp30420
sg19
(lp30421
sg21
I0
sba(iArchitecture
Entity
p30422
(dp30423
g11
(lp30424
sg13
S'com.google.common.io.CharSink'
p30425
sg15
(lp30426
sg17
(lp30427
sg19
(lp30428
sg21
I0
sba(iArchitecture
Entity
p30429
(dp30430
g11
(lp30431
sg13
S'com.google.common.io.CharSource'
p30432
sg15
(lp30433
sg17
(lp30434
sg19
(lp30435
sg21
I0
sba(iArchitecture
Entity
p30436
(dp30437
g11
(lp30438
sg13
S'com.google.common.io.CharSource$CharSequenceCharSource'
p30439
sg15
(lp30440
sg17
(lp30441
sg19
(lp30442
sg21
I0
sba(iArchitecture
Entity
p30443
(dp30444
g11
(lp30445
sg13
S'com.google.common.io.CharSource$CharSequenceCharSource$1'
p30446
sg15
(lp30447
sg17
(lp30448
sg19
(lp30449
sg21
I0
sba(iArchitecture
Entity
p30450
(dp30451
g11
(lp30452
sg13
S'com.google.common.io.CharSource$CharSequenceCharSource$1$1'
p30453
sg15
(lp30454
sg17
(lp30455
sg19
(lp30456
sg21
I0
sba(iArchitecture
Entity
p30457
(dp30458
g11
(lp30459
sg13
S'com.google.common.io.CharSource$ConcatenatedCharSource'
p30460
sg15
(lp30461
sg17
(lp30462
sg19
(lp30463
sg21
I0
sba(iArchitecture
Entity
p30464
(dp30465
g11
(lp30466
sg13
S'com.google.common.io.CharSource$EmptyCharSource'
p30467
sg15
(lp30468
sg17
(lp30469
sg19
(lp30470
sg21
I0
sba(iArchitecture
Entity
p30471
(dp30472
g11
(lp30473
sg13
S'com.google.common.io.CharStreams'
p30474
sg15
(lp30475
sg17
(lp30476
sg19
(lp30477
sg21
I0
sba(iArchitecture
Entity
p30478
(dp30479
g11
(lp30480
sg13
S'com.google.common.io.CharStreams$1'
p30481
sg15
(lp30482
sg17
(lp30483
sg19
(lp30484
sg21
I0
sba(iArchitecture
Entity
p30485
(dp30486
g11
(lp30487
sg13
S'com.google.common.io.CharStreams$NullWriter'
p30488
sg15
(lp30489
sg17
(lp30490
sg19
(lp30491
sg21
I0
sba(iArchitecture
Entity
p30492
(dp30493
g11
(lp30494
sg13
S'com.google.common.io.Closeables'
p30495
sg15
(lp30496
sg17
(lp30497
sg19
(lp30498
sg21
I0
sba(iArchitecture
Entity
p30499
(dp30500
g11
(lp30501
sg13
S'com.google.common.io.Closer'
p30502
sg15
(lp30503
sg17
(lp30504
sg19
(lp30505
sg21
I0
sba(iArchitecture
Entity
p30506
(dp30507
g11
(lp30508
sg13
S'com.google.common.io.Closer$LoggingSuppressor'
p30509
sg15
(lp30510
sg17
(lp30511
sg19
(lp30512
sg21
I0
sba(iArchitecture
Entity
p30513
(dp30514
g11
(lp30515
sg13
S'com.google.common.io.Closer$SuppressingSuppressor'
p30516
sg15
(lp30517
sg17
(lp30518
sg19
(lp30519
sg21
I0
sba(iArchitecture
Entity
p30520
(dp30521
g11
(lp30522
sg13
S'com.google.common.io.Closer$Suppressor'
p30523
sg15
(lp30524
sg17
(lp30525
sg19
(lp30526
sg21
I0
sba(iArchitecture
Entity
p30527
(dp30528
g11
(lp30529
sg13
S'com.google.common.io.FileBackedOutputStream'
p30530
sg15
(lp30531
sg17
(lp30532
sg19
(lp30533
sg21
I0
sba(iArchitecture
Entity
p30534
(dp30535
g11
(lp30536
sg13
S'com.google.common.io.FileBackedOutputStream$1'
p30537
sg15
(lp30538
sg17
(lp30539
sg19
(lp30540
sg21
I0
sba(iArchitecture
Entity
p30541
(dp30542
g11
(lp30543
sg13
S'com.google.common.io.FileBackedOutputStream$2'
p30544
sg15
(lp30545
sg17
(lp30546
sg19
(lp30547
sg21
I0
sba(iArchitecture
Entity
p30548
(dp30549
g11
(lp30550
sg13
S'com.google.common.io.FileBackedOutputStream$MemoryOutput'
p30551
sg15
(lp30552
sg17
(lp30553
sg19
(lp30554
sg21
I0
sba(iArchitecture
Entity
p30555
(dp30556
g11
(lp30557
sg13
S'com.google.common.io.FileWriteMode'
p30558
sg15
(lp30559
sg17
(lp30560
sg19
(lp30561
sg21
I0
sba(iArchitecture
Entity
p30562
(dp30563
g11
(lp30564
sg13
S'com.google.common.io.Files'
p30565
sg15
(lp30566
sg17
(lp30567
sg19
(lp30568
sg21
I0
sba(iArchitecture
Entity
p30569
(dp30570
g11
(lp30571
sg13
S'com.google.common.io.Files$1'
p30572
sg15
(lp30573
sg17
(lp30574
sg19
(lp30575
sg21
I0
sba(iArchitecture
Entity
p30576
(dp30577
g11
(lp30578
sg13
S'com.google.common.io.Files$2'
p30579
sg15
(lp30580
sg17
(lp30581
sg19
(lp30582
sg21
I0
sba(iArchitecture
Entity
p30583
(dp30584
g11
(lp30585
sg13
S'com.google.common.io.Files$FileByteSink'
p30586
sg15
(lp30587
sg17
(lp30588
sg19
(lp30589
sg21
I0
sba(iArchitecture
Entity
p30590
(dp30591
g11
(lp30592
sg13
S'com.google.common.io.Files$FileByteSource'
p30593
sg15
(lp30594
sg17
(lp30595
sg19
(lp30596
sg21
I0
sba(iArchitecture
Entity
p30597
(dp30598
g11
(lp30599
sg13
S'com.google.common.io.Files$FilePredicate'
p30600
sg15
(lp30601
sg17
(lp30602
sg19
(lp30603
sg21
I0
sba(iArchitecture
Entity
p30604
(dp30605
g11
(lp30606
sg13
S'com.google.common.io.Files$FilePredicate$1'
p30607
sg15
(lp30608
sg17
(lp30609
sg19
(lp30610
sg21
I0
sba(iArchitecture
Entity
p30611
(dp30612
g11
(lp30613
sg13
S'com.google.common.io.Files$FilePredicate$2'
p30614
sg15
(lp30615
sg17
(lp30616
sg19
(lp30617
sg21
I0
sba(iArchitecture
Entity
p30618
(dp30619
g11
(lp30620
sg13
S'com.google.common.io.LineBuffer'
p30621
sg15
(lp30622
sg17
(lp30623
sg19
(lp30624
sg21
I0
sba(iArchitecture
Entity
p30625
(dp30626
g11
(lp30627
sg13
S'com.google.common.io.LineProcessor'
p30628
sg15
(lp30629
sg17
(lp30630
sg19
(lp30631
sg21
I0
sba(iArchitecture
Entity
p30632
(dp30633
g11
(lp30634
sg13
S'com.google.common.io.LineReader'
p30635
sg15
(lp30636
sg17
(lp30637
sg19
(lp30638
sg21
I0
sba(iArchitecture
Entity
p30639
(dp30640
g11
(lp30641
sg13
S'com.google.common.io.LineReader$1'
p30642
sg15
(lp30643
sg17
(lp30644
sg19
(lp30645
sg21
I0
sba(iArchitecture
Entity
p30646
(dp30647
g11
(lp30648
sg13
S'com.google.common.io.MultiInputStream'
p30649
sg15
(lp30650
sg17
(lp30651
sg19
(lp30652
sg21
I0
sba(iArchitecture
Entity
p30653
(dp30654
g11
(lp30655
sg13
S'com.google.common.io.MultiReader'
p30656
sg15
(lp30657
sg17
(lp30658
sg19
(lp30659
sg21
I0
sba(iArchitecture
Entity
p30660
(dp30661
g11
(lp30662
sg13
S'com.google.common.io.Resources'
p30663
sg15
(lp30664
sg17
(lp30665
sg19
(lp30666
sg21
I0
sba(iArchitecture
Entity
p30667
(dp30668
g11
(lp30669
sg13
S'com.google.common.io.Resources$1'
p30670
sg15
(lp30671
sg17
(lp30672
sg19
(lp30673
sg21
I0
sba(iArchitecture
Entity
p30674
(dp30675
g11
(lp30676
sg13
S'com.google.common.io.Resources$UrlByteSource'
p30677
sg15
(lp30678
sg17
(lp30679
sg19
(lp30680
sg21
I0
sbasg1055
(lp30681
g30163
ag30171
ag30181
ag30189
ag30197
ag30205
ag30213
ag30221
ag30229
ag30237
ag30245
ag30253
ag30261
ag30269
ag30277
ag30285
ag30292
ag30299
ag30306
ag30313
ag30320
ag30327
ag30334
ag30341
ag30348
ag30355
ag30362
ag30369
ag30376
ag30383
ag30390
ag30397
ag30404
ag30411
ag30418
ag30425
ag30432
ag30439
ag30446
ag30453
ag30460
ag30467
ag30474
ag30481
ag30488
ag30495
ag30502
ag30509
ag30516
ag30523
ag30530
ag30537
ag30544
ag30551
ag30558
ag30565
ag30572
ag30579
ag30586
ag30593
ag30600
ag30607
ag30614
ag30621
ag30628
ag30635
ag30642
ag30649
ag30656
ag30663
ag30670
ag30677
asg21
I0
sg1057
S'com.google.common.io.ss'
p30682
sba(iArchitecture
Cluster
p30683
(dp30684
g7
(lp30685
(iArchitecture
Entity
p30686
(dp30687
g11
(lp30688
sg13
S'com.google.common.math.BigIntegerMath'
p30689
sg15
(lp30690
sg17
(lp30691
sg19
(lp30692
sg21
I0
sba(iArchitecture
Entity
p30693
(dp30694
g11
(lp30695
sg13
S'com.google.common.math.BigIntegerMath$1'
p30696
sg15
(lp30697
sg17
(lp30698
sg19
(lp30699
sg21
I0
sba(iArchitecture
Entity
p30700
(dp30701
g11
(lp30702
sg13
S'com.google.common.math.DoubleMath'
p30703
sg15
(lp30704
sg17
(lp30705
sg19
(lp30706
sg21
I0
sba(iArchitecture
Entity
p30707
(dp30708
g11
(lp30709
sg13
S'com.google.common.math.DoubleMath$1'
p30710
sg15
(lp30711
sg17
(lp30712
sg19
(lp30713
sg21
I0
sba(iArchitecture
Entity
p30714
(dp30715
g11
(lp30716
sg13
S'com.google.common.math.DoubleUtils'
p30717
sg15
(lp30718
sg17
(lp30719
sg19
(lp30720
sg21
I0
sba(iArchitecture
Entity
p30721
(dp30722
g11
(lp30723
sg13
S'com.google.common.math.IntMath'
p30724
sg15
(lp30725
sg17
(lp30726
sg19
(lp30727
sg21
I0
sba(iArchitecture
Entity
p30728
(dp30729
g11
(lp30730
sg13
S'com.google.common.math.IntMath$1'
p30731
sg15
(lp30732
sg17
(lp30733
sg19
(lp30734
sg21
I0
sba(iArchitecture
Entity
p30735
(dp30736
g11
(lp30737
sg13
S'com.google.common.math.LongMath'
p30738
sg15
(lp30739
sg17
(lp30740
sg19
(lp30741
sg21
I0
sba(iArchitecture
Entity
p30742
(dp30743
g11
(lp30744
sg13
S'com.google.common.math.LongMath$1'
p30745
sg15
(lp30746
sg17
(lp30747
sg19
(lp30748
sg21
I0
sba(iArchitecture
Entity
p30749
(dp30750
g11
(lp30751
sg13
S'com.google.common.math.LongMath$MillerRabinTester'
p30752
sg15
(lp30753
sg17
(lp30754
sg19
(lp30755
sg21
I0
sba(iArchitecture
Entity
p30756
(dp30757
g11
(lp30758
sg13
S'com.google.common.math.LongMath$MillerRabinTester$1'
p30759
sg15
(lp30760
sg17
(lp30761
sg19
(lp30762
sg21
I0
sba(iArchitecture
Entity
p30763
(dp30764
g11
(lp30765
sg13
S'com.google.common.math.LongMath$MillerRabinTester$2'
p30766
sg15
(lp30767
sg17
(lp30768
sg19
(lp30769
sg21
I0
sba(iArchitecture
Entity
p30770
(dp30771
g11
(lp30772
sg13
S'com.google.common.math.MathPreconditions'
p30773
sg15
(lp30774
sg17
(lp30775
sg19
(lp30776
sg21
I0
sbasg1055
(lp30777
g30689
ag30696
ag30703
ag30710
ag30717
ag30724
ag30731
ag30738
ag30745
ag30752
ag30759
ag30766
ag30773
asg21
I0
sg1057
S'com.google.common.math.ss'
p30778
sba(iArchitecture
Cluster
p30779
(dp30780
g7
(lp30781
(iArchitecture
Entity
p30782
(dp30783
g11
(lp30784
sg13
S'com.google.common.base.Strings'
p30785
sg15
(lp30786
sg17
(lp30787
sg19
(lp30788
sg21
I0
sba(iArchitecture
Entity
p30789
(dp30790
g11
(lp30791
sg13
S'com.google.common.net.HostAndPort'
p30792
sg15
(lp30793
sg17
(lp30794
sg19
(lp30795
sg21
I0
sba(iArchitecture
Entity
p30796
(dp30797
g11
(lp30798
sg13
S'com.google.common.net.HostSpecifier'
p30799
sg15
(lp30800
sg17
(lp30801
sg19
(lp30802
sg21
I0
sba(iArchitecture
Entity
p30803
(dp30804
g11
(lp30805
sg13
S'com.google.common.net.InetAddresses'
p30806
sg15
(lp30807
sg17
(lp30808
sg19
(lp30809
sg21
I0
sba(iArchitecture
Entity
p30810
(dp30811
g11
(lp30812
sg13
S'com.google.common.net.InetAddresses$TeredoInfo'
p30813
sg15
(lp30814
sg17
(lp30815
sg19
(lp30816
sg21
I0
sba(iArchitecture
Entity
p30817
(dp30818
g11
(lp30819
sg13
S'com.google.common.net.InternetDomainName'
p30820
sg15
(lp30821
sg17
(lp30822
sg19
(lp30823
sg21
I0
sba(iArchitecture
Entity
p30824
(dp30825
g11
(lp30826
V2132
p30827
asg13
S'com.google.common.net.MediaType'
p30828
sg15
(lp30829
VMissed several video MimeTypes in MediaType class:\u000a\u000a```\u000avideo/x-flv\u000avideo/3gpp\u000avideo/3gpp2\u000a```\u000a\u000aand some audio types:\u000a\u000a```\u000aaudio/basic\u000aaudio/L24\u000aaudio/aac\u000aaudio/vorbis\u000aaudio/x-ms-wma\u000aaudio/x-ms-wax\u000aaudio/vnd.rn-realaudio\u000aaudio/vnd.wave\u000a```\u000a
p30830
asg17
(lp30831
(lp30832
I5
aasg19
(lp30833
VAdd video MediaTypes
p30834
asg21
I0
sba(iArchitecture
Entity
p30835
(dp30836
g11
(lp30837
g30827
asg13
S'com.google.common.net.MediaType$1'
p30838
sg15
(lp30839
VMissed several video MimeTypes in MediaType class:\u000a\u000a```\u000avideo/x-flv\u000avideo/3gpp\u000avideo/3gpp2\u000a```\u000a\u000aand some audio types:\u000a\u000a```\u000aaudio/basic\u000aaudio/L24\u000aaudio/aac\u000aaudio/vorbis\u000aaudio/x-ms-wma\u000aaudio/x-ms-wax\u000aaudio/vnd.rn-realaudio\u000aaudio/vnd.wave\u000a```\u000a
p30840
asg17
(lp30841
g30832
asg19
(lp30842
g30834
asg21
I0
sba(iArchitecture
Entity
p30843
(dp30844
g11
(lp30845
g30827
asg13
S'com.google.common.net.MediaType$2'
p30846
sg15
(lp30847
VMissed several video MimeTypes in MediaType class:\u000a\u000a```\u000avideo/x-flv\u000avideo/3gpp\u000avideo/3gpp2\u000a```\u000a\u000aand some audio types:\u000a\u000a```\u000aaudio/basic\u000aaudio/L24\u000aaudio/aac\u000aaudio/vorbis\u000aaudio/x-ms-wma\u000aaudio/x-ms-wax\u000aaudio/vnd.rn-realaudio\u000aaudio/vnd.wave\u000a```\u000a
p30848
asg17
(lp30849
g30832
asg19
(lp30850
g30834
asg21
I0
sba(iArchitecture
Entity
p30851
(dp30852
g11
(lp30853
g30827
asg13
S'com.google.common.net.MediaType$Tokenizer'
p30854
sg15
(lp30855
VMissed several video MimeTypes in MediaType class:\u000a\u000a```\u000avideo/x-flv\u000avideo/3gpp\u000avideo/3gpp2\u000a```\u000a\u000aand some audio types:\u000a\u000a```\u000aaudio/basic\u000aaudio/L24\u000aaudio/aac\u000aaudio/vorbis\u000aaudio/x-ms-wma\u000aaudio/x-ms-wax\u000aaudio/vnd.rn-realaudio\u000aaudio/vnd.wave\u000a```\u000a
p30856
asg17
(lp30857
g30832
asg19
(lp30858
g30834
asg21
I0
sba(iArchitecture
Entity
p30859
(dp30860
g11
(lp30861
sg13
S'com.google.common.net.PercentEscaper'
p30862
sg15
(lp30863
sg17
(lp30864
sg19
(lp30865
sg21
I0
sba(iArchitecture
Entity
p30866
(dp30867
g11
(lp30868
sg13
S'com.google.common.net.UrlEscapers'
p30869
sg15
(lp30870
sg17
(lp30871
sg19
(lp30872
sg21
I0
sba(iArchitecture
Entity
p30873
(dp30874
g11
(lp30875
sg13
S'com.google.thirdparty.publicsuffix.PublicSuffixPatterns'
p30876
sg15
(lp30877
sg17
(lp30878
sg19
(lp30879
sg21
I0
sba(iArchitecture
Entity
p30880
(dp30881
g11
(lp30882
sg13
S'com.google.thirdparty.publicsuffix.PublicSuffixType'
p30883
sg15
(lp30884
sg17
(lp30885
sg19
(lp30886
sg21
I0
sba(iArchitecture
Entity
p30887
(dp30888
g11
(lp30889
sg13
S'com.google.thirdparty.publicsuffix.TrieParser'
p30890
sg15
(lp30891
sg17
(lp30892
sg19
(lp30893
sg21
I0
sbasg1055
(lp30894
g30785
ag30792
ag30799
ag30806
ag30813
ag30820
ag30828
ag30838
ag30846
ag30854
ag30862
ag30869
ag30876
ag30883
ag30890
asg21
I0
sg1057
S'com.google.common.net.ss'
p30895
sba(iArchitecture
Cluster
p30896
(dp30897
g7
(lp30898
(iArchitecture
Entity
p30899
(dp30900
g11
(lp30901
sg13
S'com.google.common.io.LittleEndianDataInputStream'
p30902
sg15
(lp30903
sg17
(lp30904
sg19
(lp30905
sg21
I0
sba(iArchitecture
Entity
p30906
(dp30907
g11
(lp30908
sg13
S'com.google.common.io.LittleEndianDataOutputStream'
p30909
sg15
(lp30910
sg17
(lp30911
sg19
(lp30912
sg21
I0
sba(iArchitecture
Entity
p30913
(dp30914
g11
(lp30915
V1942
p30916
asg13
S'com.google.common.primitives.Booleans'
p30917
sg15
(lp30918
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p30919
asg17
(lp30920
(lp30921
I6
aasg19
(lp30922
VLine comment on requiring Java 6
p30923
asg21
I0
sba(iArchitecture
Entity
p30924
(dp30925
g11
(lp30926
g30916
asg13
S'com.google.common.primitives.Booleans$BooleanArrayAsList'
p30927
sg15
(lp30928
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p30929
asg17
(lp30930
g30921
asg19
(lp30931
g30923
asg21
I0
sba(iArchitecture
Entity
p30932
(dp30933
g11
(lp30934
g30916
asg13
S'com.google.common.primitives.Booleans$LexicographicalComparator'
p30935
sg15
(lp30936
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p30937
asg17
(lp30938
g30921
asg19
(lp30939
g30923
asg21
I0
sba(iArchitecture
Entity
p30940
(dp30941
g11
(lp30942
g30916
asg13
S'com.google.common.primitives.Bytes'
p30943
sg15
(lp30944
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p30945
asg17
(lp30946
g30921
asg19
(lp30947
g30923
asg21
I0
sba(iArchitecture
Entity
p30948
(dp30949
g11
(lp30950
g30916
asg13
S'com.google.common.primitives.Bytes$ByteArrayAsList'
p30951
sg15
(lp30952
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p30953
asg17
(lp30954
g30921
asg19
(lp30955
g30923
asg21
I0
sba(iArchitecture
Entity
p30956
(dp30957
g11
(lp30958
g30916
asg13
S'com.google.common.primitives.Chars'
p30959
sg15
(lp30960
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p30961
asg17
(lp30962
g30921
asg19
(lp30963
g30923
asg21
I0
sba(iArchitecture
Entity
p30964
(dp30965
g11
(lp30966
g30916
asg13
S'com.google.common.primitives.Chars$CharArrayAsList'
p30967
sg15
(lp30968
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p30969
asg17
(lp30970
g30921
asg19
(lp30971
g30923
asg21
I0
sba(iArchitecture
Entity
p30972
(dp30973
g11
(lp30974
g30916
asg13
S'com.google.common.primitives.Chars$LexicographicalComparator'
p30975
sg15
(lp30976
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p30977
asg17
(lp30978
g30921
asg19
(lp30979
g30923
asg21
I0
sba(iArchitecture
Entity
p30980
(dp30981
g11
(lp30982
g30916
asg13
S'com.google.common.primitives.Doubles'
p30983
sg15
(lp30984
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p30985
asg17
(lp30986
g30921
asg19
(lp30987
g30923
asg21
I0
sba(iArchitecture
Entity
p30988
(dp30989
g11
(lp30990
g30916
asg13
S'com.google.common.primitives.Doubles$DoubleArrayAsList'
p30991
sg15
(lp30992
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p30993
asg17
(lp30994
g30921
asg19
(lp30995
g30923
asg21
I0
sba(iArchitecture
Entity
p30996
(dp30997
g11
(lp30998
g30916
asg13
S'com.google.common.primitives.Doubles$DoubleConverter'
p30999
sg15
(lp31000
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p31001
asg17
(lp31002
g30921
asg19
(lp31003
g30923
asg21
I0
sba(iArchitecture
Entity
p31004
(dp31005
g11
(lp31006
g30916
asg13
S'com.google.common.primitives.Doubles$LexicographicalComparator'
p31007
sg15
(lp31008
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p31009
asg17
(lp31010
g30921
asg19
(lp31011
g30923
asg21
I0
sba(iArchitecture
Entity
p31012
(dp31013
g11
(lp31014
g30916
asg13
S'com.google.common.primitives.Floats'
p31015
sg15
(lp31016
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p31017
asg17
(lp31018
g30921
asg19
(lp31019
g30923
asg21
I0
sba(iArchitecture
Entity
p31020
(dp31021
g11
(lp31022
g30916
asg13
S'com.google.common.primitives.Floats$FloatArrayAsList'
p31023
sg15
(lp31024
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p31025
asg17
(lp31026
g30921
asg19
(lp31027
g30923
asg21
I0
sba(iArchitecture
Entity
p31028
(dp31029
g11
(lp31030
g30916
asg13
S'com.google.common.primitives.Floats$FloatConverter'
p31031
sg15
(lp31032
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p31033
asg17
(lp31034
g30921
asg19
(lp31035
g30923
asg21
I0
sba(iArchitecture
Entity
p31036
(dp31037
g11
(lp31038
g30916
asg13
S'com.google.common.primitives.Floats$LexicographicalComparator'
p31039
sg15
(lp31040
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p31041
asg17
(lp31042
g30921
asg19
(lp31043
g30923
asg21
I0
sba(iArchitecture
Entity
p31044
(dp31045
g11
(lp31046
g30916
asg13
S'com.google.common.primitives.Ints'
p31047
sg15
(lp31048
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p31049
asg17
(lp31050
g30921
asg19
(lp31051
g30923
asg21
I0
sba(iArchitecture
Entity
p31052
(dp31053
g11
(lp31054
g30916
asg13
S'com.google.common.primitives.Ints$IntArrayAsList'
p31055
sg15
(lp31056
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p31057
asg17
(lp31058
g30921
asg19
(lp31059
g30923
asg21
I0
sba(iArchitecture
Entity
p31060
(dp31061
g11
(lp31062
g30916
asg13
S'com.google.common.primitives.Ints$IntConverter'
p31063
sg15
(lp31064
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p31065
asg17
(lp31066
g30921
asg19
(lp31067
g30923
asg21
I0
sba(iArchitecture
Entity
p31068
(dp31069
g11
(lp31070
g30916
asg13
S'com.google.common.primitives.Ints$LexicographicalComparator'
p31071
sg15
(lp31072
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p31073
asg17
(lp31074
g30921
asg19
(lp31075
g30923
asg21
I0
sba(iArchitecture
Entity
p31076
(dp31077
g11
(lp31078
g30916
asg13
S'com.google.common.primitives.Longs'
p31079
sg15
(lp31080
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p31081
asg17
(lp31082
g30921
asg19
(lp31083
g30923
asg21
I0
sba(iArchitecture
Entity
p31084
(dp31085
g11
(lp31086
g30916
asg13
S'com.google.common.primitives.Longs$LexicographicalComparator'
p31087
sg15
(lp31088
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p31089
asg17
(lp31090
g30921
asg19
(lp31091
g30923
asg21
I0
sba(iArchitecture
Entity
p31092
(dp31093
g11
(lp31094
g30916
asg13
S'com.google.common.primitives.Longs$LongArrayAsList'
p31095
sg15
(lp31096
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p31097
asg17
(lp31098
g30921
asg19
(lp31099
g30923
asg21
I0
sba(iArchitecture
Entity
p31100
(dp31101
g11
(lp31102
g30916
asg13
S'com.google.common.primitives.Longs$LongConverter'
p31103
sg15
(lp31104
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p31105
asg17
(lp31106
g30921
asg19
(lp31107
g30923
asg21
I0
sba(iArchitecture
Entity
p31108
(dp31109
g11
(lp31110
sg13
S'com.google.common.primitives.ParseRequest'
p31111
sg15
(lp31112
sg17
(lp31113
sg19
(lp31114
sg21
I0
sba(iArchitecture
Entity
p31115
(dp31116
g11
(lp31117
g30916
asg13
S'com.google.common.primitives.Shorts'
p31118
sg15
(lp31119
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p31120
asg17
(lp31121
g30921
asg19
(lp31122
g30923
asg21
I0
sba(iArchitecture
Entity
p31123
(dp31124
g11
(lp31125
g30916
asg13
S'com.google.common.primitives.Shorts$LexicographicalComparator'
p31126
sg15
(lp31127
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p31128
asg17
(lp31129
g30921
asg19
(lp31130
g30923
asg21
I0
sba(iArchitecture
Entity
p31131
(dp31132
g11
(lp31133
g30916
asg13
S'com.google.common.primitives.Shorts$ShortArrayAsList'
p31134
sg15
(lp31135
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p31136
asg17
(lp31137
g30921
asg19
(lp31138
g30923
asg21
I0
sba(iArchitecture
Entity
p31139
(dp31140
g11
(lp31141
g30916
asg13
S'com.google.common.primitives.Shorts$ShortConverter'
p31142
sg15
(lp31143
VPlease see https://github.com/google/guava/blob/master/guava/src/com/google/common/primitives/Booleans.java#L235.\u000a\u000aIsn't Java 6 available?\u000aIf it is, should that comment be removed?\u000aShould the method be removed? (It is private and only used in a single place).\u000a
p31144
asg17
(lp31145
g30921
asg19
(lp31146
g30923
asg21
I0
sba(iArchitecture
Entity
p31147
(dp31148
g11
(lp31149
sg13
S'com.google.common.primitives.SignedBytes'
p31150
sg15
(lp31151
sg17
(lp31152
sg19
(lp31153
sg21
I0
sba(iArchitecture
Entity
p31154
(dp31155
g11
(lp31156
sg13
S'com.google.common.primitives.SignedBytes$LexicographicalComparator'
p31157
sg15
(lp31158
sg17
(lp31159
sg19
(lp31160
sg21
I0
sba(iArchitecture
Entity
p31161
(dp31162
g11
(lp31163
sg13
S'com.google.common.primitives.UnsignedBytes'
p31164
sg15
(lp31165
sg17
(lp31166
sg19
(lp31167
sg21
I0
sba(iArchitecture
Entity
p31168
(dp31169
g11
(lp31170
sg13
S'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder'
p31171
sg15
(lp31172
sg17
(lp31173
sg19
(lp31174
sg21
I0
sba(iArchitecture
Entity
p31175
(dp31176
g11
(lp31177
sg13
S'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator'
p31178
sg15
(lp31179
sg17
(lp31180
sg19
(lp31181
sg21
I0
sba(iArchitecture
Entity
p31182
(dp31183
g11
(lp31184
sg13
S'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator'
p31185
sg15
(lp31186
sg17
(lp31187
sg19
(lp31188
sg21
I0
sba(iArchitecture
Entity
p31189
(dp31190
g11
(lp31191
sg13
S'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1'
p31192
sg15
(lp31193
sg17
(lp31194
sg19
(lp31195
sg21
I0
sba(iArchitecture
Entity
p31196
(dp31197
g11
(lp31198
sg13
S'com.google.common.primitives.UnsignedInts'
p31199
sg15
(lp31200
sg17
(lp31201
sg19
(lp31202
sg21
I0
sba(iArchitecture
Entity
p31203
(dp31204
g11
(lp31205
sg13
S'com.google.common.primitives.UnsignedInts$LexicographicalComparator'
p31206
sg15
(lp31207
sg17
(lp31208
sg19
(lp31209
sg21
I0
sba(iArchitecture
Entity
p31210
(dp31211
g11
(lp31212
sg13
S'com.google.common.primitives.UnsignedLongs'
p31213
sg15
(lp31214
sg17
(lp31215
sg19
(lp31216
sg21
I0
sba(iArchitecture
Entity
p31217
(dp31218
g11
(lp31219
sg13
S'com.google.common.primitives.UnsignedLongs$LexicographicalComparator'
p31220
sg15
(lp31221
sg17
(lp31222
sg19
(lp31223
sg21
I0
sbasg1055
(lp31224
g30902
ag30909
ag30917
ag30927
ag30935
ag30943
ag30951
ag30959
ag30967
ag30975
ag30983
ag30991
ag30999
ag31007
ag31015
ag31023
ag31031
ag31039
ag31047
ag31055
ag31063
ag31071
ag31079
ag31087
ag31095
ag31103
ag31111
ag31118
ag31126
ag31134
ag31142
ag31150
ag31157
ag31164
ag31171
ag31178
ag31185
ag31192
ag31199
ag31206
ag31213
ag31220
asg21
I0
sg1057
S'com.google.common.primitives.ss'
p31225
sba(iArchitecture
Cluster
p31226
(dp31227
g7
(lp31228
(iArchitecture
Entity
p31229
(dp31230
g11
(lp31231
sg13
S'com.google.common.collect.ForwardingMapEntry'
p31232
sg15
(lp31233
sg17
(lp31234
sg19
(lp31235
sg21
I0
sba(iArchitecture
Entity
p31236
(dp31237
g11
(lp31238
sg13
S'com.google.common.collect.ImmutableSet$Builder'
p31239
sg15
(lp31240
sg17
(lp31241
sg19
(lp31242
sg21
I0
sba(iArchitecture
Entity
p31243
(dp31244
g11
(lp31245
V2228
p31246
ag31246
asg13
S'com.google.common.reflect.ClassPath'
p31247
sg15
(lp31248
VIf I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\u000a\u000aA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\u000a
p31249
aVIf I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\u000a\u000aA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\u000a
p31250
asg17
(lp31251
(lp31252
I5
aag31252
asg19
(lp31253
VAdd ClassPath.ResourceInfo.asByteSource()
p31254
ag31254
asg21
I0
sba(iArchitecture
Entity
p31255
(dp31256
g11
(lp31257
g31246
ag31246
asg13
S'com.google.common.reflect.ClassPath$1'
p31258
sg15
(lp31259
VIf I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\u000a\u000aA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\u000a
p31260
aVIf I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\u000a\u000aA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\u000a
p31261
asg17
(lp31262
g31252
ag31252
asg19
(lp31263
g31254
ag31254
asg21
I0
sba(iArchitecture
Entity
p31264
(dp31265
g11
(lp31266
g31246
ag31246
asg13
S'com.google.common.reflect.ClassPath$ClassInfo'
p31267
sg15
(lp31268
VIf I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\u000a\u000aA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\u000a
p31269
aVIf I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\u000a\u000aA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\u000a
p31270
asg17
(lp31271
g31252
ag31252
asg19
(lp31272
g31254
ag31254
asg21
I0
sba(iArchitecture
Entity
p31273
(dp31274
g11
(lp31275
g31246
ag31246
asg13
S'com.google.common.reflect.ClassPath$DefaultScanner'
p31276
sg15
(lp31277
VIf I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\u000a\u000aA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\u000a
p31278
aVIf I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\u000a\u000aA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\u000a
p31279
asg17
(lp31280
g31252
ag31252
asg19
(lp31281
g31254
ag31254
asg21
I0
sba(iArchitecture
Entity
p31282
(dp31283
g11
(lp31284
g31246
ag31246
asg13
S'com.google.common.reflect.ClassPath$ResourceInfo'
p31285
sg15
(lp31286
VIf I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\u000a\u000aA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\u000a
p31287
aVIf I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\u000a\u000aA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\u000a
p31288
asg17
(lp31289
g31252
ag31252
asg19
(lp31290
g31254
ag31254
asg21
I0
sba(iArchitecture
Entity
p31291
(dp31292
g11
(lp31293
g31246
ag31246
asg13
S'com.google.common.reflect.ClassPath$Scanner'
p31294
sg15
(lp31295
VIf I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\u000a\u000aA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\u000a
p31296
aVIf I want to load a resource I have found by classpath scanning with `ClassPath`, I need to use `Resources.asByteSource(resourceInfo.url())`. This is only little code, but hard to discover because it uses a third class `Resources` which is neither related to what I have (`ResourceInfo`) nor what I want (`ByteSource`). I also need to remember that I should go via the URL and that I cannot use `ResourceInfo.getResourceName()`.\u000a\u000aA direct method to get a `ByteSource` from a `ResourceInfo` would make this easier. Alternatively, this should be documented at least.\u000a
p31297
asg17
(lp31298
g31252
ag31252
asg19
(lp31299
g31254
ag31254
asg21
I0
sba(iArchitecture
Entity
p31300
(dp31301
g11
(lp31302
sg13
S'com.google.common.reflect.Element'
p31303
sg15
(lp31304
sg17
(lp31305
sg19
(lp31306
sg21
I0
sba(iArchitecture
Entity
p31307
(dp31308
g11
(lp31309
sg13
S'com.google.common.reflect.ImmutableTypeToInstanceMap'
p31310
sg15
(lp31311
sg17
(lp31312
sg19
(lp31313
sg21
I0
sba(iArchitecture
Entity
p31314
(dp31315
g11
(lp31316
sg13
S'com.google.common.reflect.ImmutableTypeToInstanceMap$1'
p31317
sg15
(lp31318
sg17
(lp31319
sg19
(lp31320
sg21
I0
sba(iArchitecture
Entity
p31321
(dp31322
g11
(lp31323
sg13
S'com.google.common.reflect.ImmutableTypeToInstanceMap$Builder'
p31324
sg15
(lp31325
sg17
(lp31326
sg19
(lp31327
sg21
I0
sba(iArchitecture
Entity
p31328
(dp31329
g11
(lp31330
sg13
S'com.google.common.reflect.Invokable'
p31331
sg15
(lp31332
sg17
(lp31333
sg19
(lp31334
sg21
I0
sba(iArchitecture
Entity
p31335
(dp31336
g11
(lp31337
sg13
S'com.google.common.reflect.Invokable$ConstructorInvokable'
p31338
sg15
(lp31339
sg17
(lp31340
sg19
(lp31341
sg21
I0
sba(iArchitecture
Entity
p31342
(dp31343
g11
(lp31344
sg13
S'com.google.common.reflect.Invokable$MethodInvokable'
p31345
sg15
(lp31346
sg17
(lp31347
sg19
(lp31348
sg21
I0
sba(iArchitecture
Entity
p31349
(dp31350
g11
(lp31351
sg13
S'com.google.common.reflect.MutableTypeToInstanceMap'
p31352
sg15
(lp31353
sg17
(lp31354
sg19
(lp31355
sg21
I0
sba(iArchitecture
Entity
p31356
(dp31357
g11
(lp31358
sg13
S'com.google.common.reflect.MutableTypeToInstanceMap$1'
p31359
sg15
(lp31360
sg17
(lp31361
sg19
(lp31362
sg21
I0
sba(iArchitecture
Entity
p31363
(dp31364
g11
(lp31365
sg13
S'com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry'
p31366
sg15
(lp31367
sg17
(lp31368
sg19
(lp31369
sg21
I0
sba(iArchitecture
Entity
p31370
(dp31371
g11
(lp31372
sg13
S'com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1'
p31373
sg15
(lp31374
sg17
(lp31375
sg19
(lp31376
sg21
I0
sba(iArchitecture
Entity
p31377
(dp31378
g11
(lp31379
sg13
S'com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2'
p31380
sg15
(lp31381
sg17
(lp31382
sg19
(lp31383
sg21
I0
sba(iArchitecture
Entity
p31384
(dp31385
g11
(lp31386
sg13
S'com.google.common.reflect.TypeCapture'
p31387
sg15
(lp31388
sg17
(lp31389
sg19
(lp31390
sg21
I0
sba(iArchitecture
Entity
p31391
(dp31392
g11
(lp31393
sg13
S'com.google.common.reflect.TypeParameter'
p31394
sg15
(lp31395
sg17
(lp31396
sg19
(lp31397
sg21
I0
sba(iArchitecture
Entity
p31398
(dp31399
g11
(lp31400
sg13
S'com.google.common.reflect.TypeResolver'
p31401
sg15
(lp31402
sg17
(lp31403
sg19
(lp31404
sg21
I0
sba(iArchitecture
Entity
p31405
(dp31406
g11
(lp31407
sg13
S'com.google.common.reflect.TypeResolver$1'
p31408
sg15
(lp31409
sg17
(lp31410
sg19
(lp31411
sg21
I0
sba(iArchitecture
Entity
p31412
(dp31413
g11
(lp31414
sg13
S'com.google.common.reflect.TypeResolver$TypeMappingIntrospector'
p31415
sg15
(lp31416
sg17
(lp31417
sg19
(lp31418
sg21
I0
sba(iArchitecture
Entity
p31419
(dp31420
g11
(lp31421
sg13
S'com.google.common.reflect.TypeResolver$TypeTable'
p31422
sg15
(lp31423
sg17
(lp31424
sg19
(lp31425
sg21
I0
sba(iArchitecture
Entity
p31426
(dp31427
g11
(lp31428
sg13
S'com.google.common.reflect.TypeResolver$TypeTable$1'
p31429
sg15
(lp31430
sg17
(lp31431
sg19
(lp31432
sg21
I0
sba(iArchitecture
Entity
p31433
(dp31434
g11
(lp31435
sg13
S'com.google.common.reflect.TypeResolver$TypeVariableKey'
p31436
sg15
(lp31437
sg17
(lp31438
sg19
(lp31439
sg21
I0
sba(iArchitecture
Entity
p31440
(dp31441
g11
(lp31442
sg13
S'com.google.common.reflect.TypeResolver$WildcardCapturer'
p31443
sg15
(lp31444
sg17
(lp31445
sg19
(lp31446
sg21
I0
sba(iArchitecture
Entity
p31447
(dp31448
g11
(lp31449
sg13
S'com.google.common.reflect.TypeToInstanceMap'
p31450
sg15
(lp31451
sg17
(lp31452
sg19
(lp31453
sg21
I0
sba(iArchitecture
Entity
p31454
(dp31455
g11
(lp31456
sg13
S'com.google.common.reflect.TypeToken'
p31457
sg15
(lp31458
sg17
(lp31459
sg19
(lp31460
sg21
I0
sba(iArchitecture
Entity
p31461
(dp31462
g11
(lp31463
sg13
S'com.google.common.reflect.TypeToken$1'
p31464
sg15
(lp31465
sg17
(lp31466
sg19
(lp31467
sg21
I0
sba(iArchitecture
Entity
p31468
(dp31469
g11
(lp31470
sg13
S'com.google.common.reflect.TypeToken$2'
p31471
sg15
(lp31472
sg17
(lp31473
sg19
(lp31474
sg21
I0
sba(iArchitecture
Entity
p31475
(dp31476
g11
(lp31477
sg13
S'com.google.common.reflect.TypeToken$3'
p31478
sg15
(lp31479
sg17
(lp31480
sg19
(lp31481
sg21
I0
sba(iArchitecture
Entity
p31482
(dp31483
g11
(lp31484
sg13
S'com.google.common.reflect.TypeToken$4'
p31485
sg15
(lp31486
sg17
(lp31487
sg19
(lp31488
sg21
I0
sba(iArchitecture
Entity
p31489
(dp31490
g11
(lp31491
sg13
S'com.google.common.reflect.TypeToken$5'
p31492
sg15
(lp31493
sg17
(lp31494
sg19
(lp31495
sg21
I0
sba(iArchitecture
Entity
p31496
(dp31497
g11
(lp31498
sg13
S'com.google.common.reflect.TypeToken$Bounds'
p31499
sg15
(lp31500
sg17
(lp31501
sg19
(lp31502
sg21
I0
sba(iArchitecture
Entity
p31503
(dp31504
g11
(lp31505
sg13
S'com.google.common.reflect.TypeToken$InterfaceSet'
p31506
sg15
(lp31507
sg17
(lp31508
sg19
(lp31509
sg21
I0
sba(iArchitecture
Entity
p31510
(dp31511
g11
(lp31512
sg13
S'com.google.common.reflect.TypeToken$InterfaceSet$1'
p31513
sg15
(lp31514
sg17
(lp31515
sg19
(lp31516
sg21
I0
sba(iArchitecture
Entity
p31517
(dp31518
g11
(lp31519
sg13
S'com.google.common.reflect.TypeToken$SimpleTypeToken'
p31520
sg15
(lp31521
sg17
(lp31522
sg19
(lp31523
sg21
I0
sba(iArchitecture
Entity
p31524
(dp31525
g11
(lp31526
sg13
S'com.google.common.reflect.TypeToken$TypeCollector'
p31527
sg15
(lp31528
sg17
(lp31529
sg19
(lp31530
sg21
I0
sba(iArchitecture
Entity
p31531
(dp31532
g11
(lp31533
sg13
S'com.google.common.reflect.TypeToken$TypeCollector$1'
p31534
sg15
(lp31535
sg17
(lp31536
sg19
(lp31537
sg21
I0
sba(iArchitecture
Entity
p31538
(dp31539
g11
(lp31540
sg13
S'com.google.common.reflect.TypeToken$TypeCollector$2'
p31541
sg15
(lp31542
sg17
(lp31543
sg19
(lp31544
sg21
I0
sba(iArchitecture
Entity
p31545
(dp31546
g11
(lp31547
sg13
S'com.google.common.reflect.TypeToken$TypeCollector$3'
p31548
sg15
(lp31549
sg17
(lp31550
sg19
(lp31551
sg21
I0
sba(iArchitecture
Entity
p31552
(dp31553
g11
(lp31554
sg13
S'com.google.common.reflect.TypeToken$TypeCollector$4'
p31555
sg15
(lp31556
sg17
(lp31557
sg19
(lp31558
sg21
I0
sba(iArchitecture
Entity
p31559
(dp31560
g11
(lp31561
sg13
S'com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector'
p31562
sg15
(lp31563
sg17
(lp31564
sg19
(lp31565
sg21
I0
sba(iArchitecture
Entity
p31566
(dp31567
g11
(lp31568
sg13
S'com.google.common.reflect.TypeToken$TypeFilter'
p31569
sg15
(lp31570
sg17
(lp31571
sg19
(lp31572
sg21
I0
sba(iArchitecture
Entity
p31573
(dp31574
g11
(lp31575
sg13
S'com.google.common.reflect.TypeToken$TypeFilter$1'
p31576
sg15
(lp31577
sg17
(lp31578
sg19
(lp31579
sg21
I0
sba(iArchitecture
Entity
p31580
(dp31581
g11
(lp31582
sg13
S'com.google.common.reflect.TypeToken$TypeFilter$2'
p31583
sg15
(lp31584
sg17
(lp31585
sg19
(lp31586
sg21
I0
sba(iArchitecture
Entity
p31587
(dp31588
g11
(lp31589
sg13
S'com.google.common.reflect.TypeVisitor'
p31590
sg15
(lp31591
sg17
(lp31592
sg19
(lp31593
sg21
I0
sba(iArchitecture
Entity
p31594
(dp31595
g11
(lp31596
sg13
S'com.google.common.reflect.Types'
p31597
sg15
(lp31598
sg17
(lp31599
sg19
(lp31600
sg21
I0
sba(iArchitecture
Entity
p31601
(dp31602
g11
(lp31603
sg13
S'com.google.common.reflect.Types$1'
p31604
sg15
(lp31605
sg17
(lp31606
sg19
(lp31607
sg21
I0
sba(iArchitecture
Entity
p31608
(dp31609
g11
(lp31610
sg13
S'com.google.common.reflect.Types$2'
p31611
sg15
(lp31612
sg17
(lp31613
sg19
(lp31614
sg21
I0
sba(iArchitecture
Entity
p31615
(dp31616
g11
(lp31617
sg13
S'com.google.common.reflect.Types$ClassOwnership'
p31618
sg15
(lp31619
sg17
(lp31620
sg19
(lp31621
sg21
I0
sba(iArchitecture
Entity
p31622
(dp31623
g11
(lp31624
sg13
S'com.google.common.reflect.Types$ClassOwnership$1'
p31625
sg15
(lp31626
sg17
(lp31627
sg19
(lp31628
sg21
I0
sba(iArchitecture
Entity
p31629
(dp31630
g11
(lp31631
sg13
S'com.google.common.reflect.Types$ClassOwnership$1LocalClass'
p31632
sg15
(lp31633
sg17
(lp31634
sg19
(lp31635
sg21
I0
sba(iArchitecture
Entity
p31636
(dp31637
g11
(lp31638
sg13
S'com.google.common.reflect.Types$ClassOwnership$2'
p31639
sg15
(lp31640
sg17
(lp31641
sg19
(lp31642
sg21
I0
sba(iArchitecture
Entity
p31643
(dp31644
g11
(lp31645
sg13
S'com.google.common.reflect.Types$ClassOwnership$3'
p31646
sg15
(lp31647
sg17
(lp31648
sg19
(lp31649
sg21
I0
sba(iArchitecture
Entity
p31650
(dp31651
g11
(lp31652
sg13
S'com.google.common.reflect.Types$GenericArrayTypeImpl'
p31653
sg15
(lp31654
sg17
(lp31655
sg19
(lp31656
sg21
I0
sba(iArchitecture
Entity
p31657
(dp31658
g11
(lp31659
sg13
S'com.google.common.reflect.Types$JavaVersion'
p31660
sg15
(lp31661
sg17
(lp31662
sg19
(lp31663
sg21
I0
sba(iArchitecture
Entity
p31664
(dp31665
g11
(lp31666
sg13
S'com.google.common.reflect.Types$JavaVersion$1'
p31667
sg15
(lp31668
sg17
(lp31669
sg19
(lp31670
sg21
I0
sba(iArchitecture
Entity
p31671
(dp31672
g11
(lp31673
sg13
S'com.google.common.reflect.Types$JavaVersion$2'
p31674
sg15
(lp31675
sg17
(lp31676
sg19
(lp31677
sg21
I0
sba(iArchitecture
Entity
p31678
(dp31679
g11
(lp31680
sg13
S'com.google.common.reflect.Types$JavaVersion$3'
p31681
sg15
(lp31682
sg17
(lp31683
sg19
(lp31684
sg21
I0
sba(iArchitecture
Entity
p31685
(dp31686
g11
(lp31687
sg13
S'com.google.common.reflect.Types$JavaVersion$4'
p31688
sg15
(lp31689
sg17
(lp31690
sg19
(lp31691
sg21
I0
sba(iArchitecture
Entity
p31692
(dp31693
g11
(lp31694
sg13
S'com.google.common.reflect.Types$NativeTypeVariableEquals'
p31695
sg15
(lp31696
sg17
(lp31697
sg19
(lp31698
sg21
I0
sba(iArchitecture
Entity
p31699
(dp31700
g11
(lp31701
sg13
S'com.google.common.reflect.Types$ParameterizedTypeImpl'
p31702
sg15
(lp31703
sg17
(lp31704
sg19
(lp31705
sg21
I0
sba(iArchitecture
Entity
p31706
(dp31707
g11
(lp31708
sg13
S'com.google.common.reflect.Types$TypeVariableImpl'
p31709
sg15
(lp31710
sg17
(lp31711
sg19
(lp31712
sg21
I0
sba(iArchitecture
Entity
p31713
(dp31714
g11
(lp31715
sg13
S'com.google.common.reflect.Types$TypeVariableInvocationHandler'
p31716
sg15
(lp31717
sg17
(lp31718
sg19
(lp31719
sg21
I0
sba(iArchitecture
Entity
p31720
(dp31721
g11
(lp31722
sg13
S'com.google.common.reflect.Types$WildcardTypeImpl'
p31723
sg15
(lp31724
sg17
(lp31725
sg19
(lp31726
sg21
I0
sbasg1055
(lp31727
g31232
ag31239
ag31247
ag31258
ag31267
ag31276
ag31285
ag31294
ag31303
ag31310
ag31317
ag31324
ag31331
ag31338
ag31345
ag31352
ag31359
ag31366
ag31373
ag31380
ag31387
ag31394
ag31401
ag31408
ag31415
ag31422
ag31429
ag31436
ag31443
ag31450
ag31457
ag31464
ag31471
ag31478
ag31485
ag31492
ag31499
ag31506
ag31513
ag31520
ag31527
ag31534
ag31541
ag31548
ag31555
ag31562
ag31569
ag31576
ag31583
ag31590
ag31597
ag31604
ag31611
ag31618
ag31625
ag31632
ag31639
ag31646
ag31653
ag31660
ag31667
ag31674
ag31681
ag31688
ag31695
ag31702
ag31709
ag31716
ag31723
asg21
I0
sg1057
S'com.google.common.reflect.ss'
p31728
sba(iArchitecture
Cluster
p31729
(dp31730
g7
(lp31731
(iArchitecture
Entity
p31732
(dp31733
g11
(lp31734
sg13
S'com.google.common.ForceGuavaCompilationEntryPoint'
p31735
sg15
(lp31736
sg17
(lp31737
sg19
(lp31738
sg21
I0
sba(iArchitecture
Entity
p31739
(dp31740
g11
(lp31741
sg13
S'com.google.gwt.core.client.EntryPoint'
p31742
sg15
(lp31743
sg17
(lp31744
sg19
(lp31745
sg21
I0
sbasg1055
(lp31746
g31735
ag31742
asg21
I0
sg1057
S'com.google.common.ss'
p31747
sba(iArchitecture
Cluster
p31748
(dp31749
g7
(lp31750
(iArchitecture
Entity
p31751
(dp31752
g11
(lp31753
sg13
S'com.google.common.base.Charsets'
p31754
sg15
(lp31755
sg17
(lp31756
sg19
(lp31757
sg21
I0
sba(iArchitecture
Entity
p31758
(dp31759
g11
(lp31760
sg13
S'com.google.common.base.Defaults'
p31761
sg15
(lp31762
sg17
(lp31763
sg19
(lp31764
sg21
I0
sba(iArchitecture
Entity
p31765
(dp31766
g11
(lp31767
sg13
S'com.google.common.collect.ArrayListMultimap'
p31768
sg15
(lp31769
sg17
(lp31770
sg19
(lp31771
sg21
I0
sba(iArchitecture
Entity
p31772
(dp31773
g11
(lp31774
sg13
S'com.google.common.collect.ClassToInstanceMap'
p31775
sg15
(lp31776
sg17
(lp31777
sg19
(lp31778
sg21
I0
sba(iArchitecture
Entity
p31779
(dp31780
g11
(lp31781
sg13
S'com.google.common.collect.HashBasedTable'
p31782
sg15
(lp31783
sg17
(lp31784
sg19
(lp31785
sg21
I0
sba(iArchitecture
Entity
p31786
(dp31787
g11
(lp31788
sg13
S'com.google.common.collect.HashBasedTable$Factory'
p31789
sg15
(lp31790
sg17
(lp31791
sg19
(lp31792
sg21
I0
sba(iArchitecture
Entity
p31793
(dp31794
g11
(lp31795
sg13
S'com.google.common.collect.HashMultimap'
p31796
sg15
(lp31797
sg17
(lp31798
sg19
(lp31799
sg21
I0
sba(iArchitecture
Entity
p31800
(dp31801
g11
(lp31802
sg13
S'com.google.common.collect.ImmutableClassToInstanceMap'
p31803
sg15
(lp31804
sg17
(lp31805
sg19
(lp31806
sg21
I0
sba(iArchitecture
Entity
p31807
(dp31808
g11
(lp31809
sg13
S'com.google.common.collect.ImmutableClassToInstanceMap$1'
p31810
sg15
(lp31811
sg17
(lp31812
sg19
(lp31813
sg21
I0
sba(iArchitecture
Entity
p31814
(dp31815
g11
(lp31816
sg13
S'com.google.common.collect.ImmutableClassToInstanceMap$Builder'
p31817
sg15
(lp31818
sg17
(lp31819
sg19
(lp31820
sg21
I0
sba(iArchitecture
Entity
p31821
(dp31822
g11
(lp31823
sg13
S'com.google.common.collect.ImmutableList$Builder'
p31824
sg15
(lp31825
sg17
(lp31826
sg19
(lp31827
sg21
I0
sba(iArchitecture
Entity
p31828
(dp31829
g11
(lp31830
sg13
S'com.google.common.primitives.Primitives'
p31831
sg15
(lp31832
sg17
(lp31833
sg19
(lp31834
sg21
I0
sba(iArchitecture
Entity
p31835
(dp31836
g11
(lp31837
sg13
S'com.google.common.primitives.UnsignedInteger'
p31838
sg15
(lp31839
sg17
(lp31840
sg19
(lp31841
sg21
I0
sba(iArchitecture
Entity
p31842
(dp31843
g11
(lp31844
sg13
S'com.google.common.primitives.UnsignedLong'
p31845
sg15
(lp31846
sg17
(lp31847
sg19
(lp31848
sg21
I0
sba(iArchitecture
Entity
p31849
(dp31850
g11
(lp31851
sg13
S'com.google.common.reflect.AbstractInvocationHandler'
p31852
sg15
(lp31853
sg17
(lp31854
sg19
(lp31855
sg21
I0
sba(iArchitecture
Entity
p31856
(dp31857
g11
(lp31858
sg13
S'com.google.common.reflect.Parameter'
p31859
sg15
(lp31860
sg17
(lp31861
sg19
(lp31862
sg21
I0
sba(iArchitecture
Entity
p31863
(dp31864
g11
(lp31865
sg13
S'com.google.common.reflect.Reflection'
p31866
sg15
(lp31867
sg17
(lp31868
sg19
(lp31869
sg21
I0
sba(iArchitecture
Entity
p31870
(dp31871
g11
(lp31872
sg13
S'com.google.common.testing.AbstractPackageSanityTests'
p31873
sg15
(lp31874
sg17
(lp31875
sg19
(lp31876
sg21
I0
sba(iArchitecture
Entity
p31877
(dp31878
g11
(lp31879
sg13
S'com.google.common.testing.AbstractPackageSanityTests$1'
p31880
sg15
(lp31881
sg17
(lp31882
sg19
(lp31883
sg21
I0
sba(iArchitecture
Entity
p31884
(dp31885
g11
(lp31886
sg13
S'com.google.common.testing.AbstractPackageSanityTests$2'
p31887
sg15
(lp31888
sg17
(lp31889
sg19
(lp31890
sg21
I0
sba(iArchitecture
Entity
p31891
(dp31892
g11
(lp31893
sg13
S'com.google.common.testing.AbstractPackageSanityTests$Chopper'
p31894
sg15
(lp31895
sg17
(lp31896
sg19
(lp31897
sg21
I0
sba(iArchitecture
Entity
p31898
(dp31899
g11
(lp31900
sg13
S'com.google.common.testing.AbstractPackageSanityTests$Chopper$1'
p31901
sg15
(lp31902
sg17
(lp31903
sg19
(lp31904
sg21
I0
sba(iArchitecture
Entity
p31905
(dp31906
g11
(lp31907
sg13
S'com.google.common.testing.AbstractPackageSanityTests$Chopper$2'
p31908
sg15
(lp31909
sg17
(lp31910
sg19
(lp31911
sg21
I0
sba(iArchitecture
Entity
p31912
(dp31913
g11
(lp31914
sg13
S'com.google.common.testing.ArbitraryInstances'
p31915
sg15
(lp31916
sg17
(lp31917
sg19
(lp31918
sg21
I0
sba(iArchitecture
Entity
p31919
(dp31920
g11
(lp31921
sg13
S'com.google.common.testing.ArbitraryInstances$1'
p31922
sg15
(lp31923
sg17
(lp31924
sg19
(lp31925
sg21
I0
sba(iArchitecture
Entity
p31926
(dp31927
g11
(lp31928
sg13
S'com.google.common.testing.ArbitraryInstances$AlwaysEqual'
p31929
sg15
(lp31930
sg17
(lp31931
sg19
(lp31932
sg21
I0
sba(iArchitecture
Entity
p31933
(dp31934
g11
(lp31935
sg13
S'com.google.common.testing.ArbitraryInstances$ByToString'
p31936
sg15
(lp31937
sg17
(lp31938
sg19
(lp31939
sg21
I0
sba(iArchitecture
Entity
p31940
(dp31941
g11
(lp31942
sg13
S'com.google.common.testing.ArbitraryInstances$Dummies'
p31943
sg15
(lp31944
sg17
(lp31945
sg19
(lp31946
sg21
I0
sba(iArchitecture
Entity
p31947
(dp31948
g11
(lp31949
sg13
S'com.google.common.testing.ArbitraryInstances$Dummies$DeterministicRandom'
p31950
sg15
(lp31951
sg17
(lp31952
sg19
(lp31953
sg21
I0
sba(iArchitecture
Entity
p31954
(dp31955
g11
(lp31956
sg13
S'com.google.common.testing.ArbitraryInstances$Dummies$DummyCountDownLatch'
p31957
sg15
(lp31958
sg17
(lp31959
sg19
(lp31960
sg21
I0
sba(iArchitecture
Entity
p31961
(dp31962
g11
(lp31963
sg13
S'com.google.common.testing.ArbitraryInstances$Dummies$DummyExecutor'
p31964
sg15
(lp31965
sg17
(lp31966
sg19
(lp31967
sg21
I0
sba(iArchitecture
Entity
p31968
(dp31969
g11
(lp31970
sg13
S'com.google.common.testing.ArbitraryInstances$Dummies$DummyRunnable'
p31971
sg15
(lp31972
sg17
(lp31973
sg19
(lp31974
sg21
I0
sba(iArchitecture
Entity
p31975
(dp31976
g11
(lp31977
sg13
S'com.google.common.testing.ArbitraryInstances$Dummies$DummyScheduledThreadPoolExecutor'
p31978
sg15
(lp31979
sg17
(lp31980
sg19
(lp31981
sg21
I0
sba(iArchitecture
Entity
p31982
(dp31983
g11
(lp31984
sg13
S'com.google.common.testing.ArbitraryInstances$Dummies$DummyThreadFactory'
p31985
sg15
(lp31986
sg17
(lp31987
sg19
(lp31988
sg21
I0
sba(iArchitecture
Entity
p31989
(dp31990
g11
(lp31991
sg13
S'com.google.common.testing.ArbitraryInstances$Dummies$InMemoryPrintStream'
p31992
sg15
(lp31993
sg17
(lp31994
sg19
(lp31995
sg21
I0
sba(iArchitecture
Entity
p31996
(dp31997
g11
(lp31998
sg13
S'com.google.common.testing.ArbitraryInstances$Dummies$InMemoryPrintWriter'
p31999
sg15
(lp32000
sg17
(lp32001
sg19
(lp32002
sg21
I0
sba(iArchitecture
Entity
p32003
(dp32004
g11
(lp32005
sg13
S'com.google.common.testing.ArbitraryInstances$NullByteSink'
p32006
sg15
(lp32007
sg17
(lp32008
sg19
(lp32009
sg21
I0
sba(iArchitecture
Entity
p32010
(dp32011
g11
(lp32012
sg13
S'com.google.common.testing.ClassSanityTester'
p32013
sg15
(lp32014
sg17
(lp32015
sg19
(lp32016
sg21
I0
sba(iArchitecture
Entity
p32017
(dp32018
g11
(lp32019
sg13
S'com.google.common.testing.ClassSanityTester$1'
p32020
sg15
(lp32021
sg17
(lp32022
sg19
(lp32023
sg21
I0
sba(iArchitecture
Entity
p32024
(dp32025
g11
(lp32026
sg13
S'com.google.common.testing.ClassSanityTester$2'
p32027
sg15
(lp32028
sg17
(lp32029
sg19
(lp32030
sg21
I0
sba(iArchitecture
Entity
p32031
(dp32032
g11
(lp32033
sg13
S'com.google.common.testing.ClassSanityTester$3'
p32034
sg15
(lp32035
sg17
(lp32036
sg19
(lp32037
sg21
I0
sba(iArchitecture
Entity
p32038
(dp32039
g11
(lp32040
sg13
S'com.google.common.testing.ClassSanityTester$4'
p32041
sg15
(lp32042
sg17
(lp32043
sg19
(lp32044
sg21
I0
sba(iArchitecture
Entity
p32045
(dp32046
g11
(lp32047
sg13
S'com.google.common.testing.ClassSanityTester$5'
p32048
sg15
(lp32049
sg17
(lp32050
sg19
(lp32051
sg21
I0
sba(iArchitecture
Entity
p32052
(dp32053
g11
(lp32054
sg13
S'com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester'
p32055
sg15
(lp32056
sg17
(lp32057
sg19
(lp32058
sg21
I0
sba(iArchitecture
Entity
p32059
(dp32060
g11
(lp32061
sg13
S'com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException'
p32062
sg15
(lp32063
sg17
(lp32064
sg19
(lp32065
sg21
I0
sba(iArchitecture
Entity
p32066
(dp32067
g11
(lp32068
sg13
S'com.google.common.testing.ClassSanityTester$ParameterHasNoDistinctValueException'
p32069
sg15
(lp32070
sg17
(lp32071
sg19
(lp32072
sg21
I0
sba(iArchitecture
Entity
p32073
(dp32074
g11
(lp32075
sg13
S'com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException'
p32076
sg15
(lp32077
sg17
(lp32078
sg19
(lp32079
sg21
I0
sba(iArchitecture
Entity
p32080
(dp32081
g11
(lp32082
sg13
S'com.google.common.testing.ClassSanityTester$SerializableDummyProxy'
p32083
sg15
(lp32084
sg17
(lp32085
sg19
(lp32086
sg21
I0
sba(iArchitecture
Entity
p32087
(dp32088
g11
(lp32089
sg13
S'com.google.common.testing.ClusterException'
p32090
sg15
(lp32091
sg17
(lp32092
sg19
(lp32093
sg21
I0
sba(iArchitecture
Entity
p32094
(dp32095
g11
(lp32096
sg13
S'com.google.common.testing.DummyProxy'
p32097
sg15
(lp32098
sg17
(lp32099
sg19
(lp32100
sg21
I0
sba(iArchitecture
Entity
p32101
(dp32102
g11
(lp32103
sg13
S'com.google.common.testing.DummyProxy$DummyHandler'
p32104
sg15
(lp32105
sg17
(lp32106
sg19
(lp32107
sg21
I0
sba(iArchitecture
Entity
p32108
(dp32109
g11
(lp32110
sg13
S'com.google.common.testing.EqualsTester'
p32111
sg15
(lp32112
sg17
(lp32113
sg19
(lp32114
sg21
I0
sba(iArchitecture
Entity
p32115
(dp32116
g11
(lp32117
sg13
S'com.google.common.testing.EqualsTester$NotAnInstance'
p32118
sg15
(lp32119
sg17
(lp32120
sg19
(lp32121
sg21
I0
sba(iArchitecture
Entity
p32122
(dp32123
g11
(lp32124
sg13
S'com.google.common.testing.EquivalenceTester'
p32125
sg15
(lp32126
sg17
(lp32127
sg19
(lp32128
sg21
I0
sba(iArchitecture
Entity
p32129
(dp32130
g11
(lp32131
sg13
S'com.google.common.testing.ForwardingWrapperTester'
p32132
sg15
(lp32133
sg17
(lp32134
sg19
(lp32135
sg21
I0
sba(iArchitecture
Entity
p32136
(dp32137
g11
(lp32138
sg13
S'com.google.common.testing.ForwardingWrapperTester$1'
p32139
sg15
(lp32140
sg17
(lp32141
sg19
(lp32142
sg21
I0
sba(iArchitecture
Entity
p32143
(dp32144
g11
(lp32145
sg13
S'com.google.common.testing.ForwardingWrapperTester$InteractionTester'
p32146
sg15
(lp32147
sg17
(lp32148
sg19
(lp32149
sg21
I0
sba(iArchitecture
Entity
p32150
(dp32151
g11
(lp32152
sg13
S'com.google.common.testing.FreshValueGenerator'
p32153
sg15
(lp32154
sg17
(lp32155
sg19
(lp32156
sg21
I0
sba(iArchitecture
Entity
p32157
(dp32158
g11
(lp32159
sg13
S'com.google.common.testing.FreshValueGenerator$1'
p32160
sg15
(lp32161
sg17
(lp32162
sg19
(lp32163
sg21
I0
sba(iArchitecture
Entity
p32164
(dp32165
g11
(lp32166
sg13
S'com.google.common.testing.FreshValueGenerator$2'
p32167
sg15
(lp32168
sg17
(lp32169
sg19
(lp32170
sg21
I0
sba(iArchitecture
Entity
p32171
(dp32172
g11
(lp32173
sg13
S'com.google.common.testing.FreshValueGenerator$3'
p32174
sg15
(lp32175
sg17
(lp32176
sg19
(lp32177
sg21
I0
sba(iArchitecture
Entity
p32178
(dp32179
g11
(lp32180
sg13
S'com.google.common.testing.FreshValueGenerator$4'
p32181
sg15
(lp32182
sg17
(lp32183
sg19
(lp32184
sg21
I0
sba(iArchitecture
Entity
p32185
(dp32186
g11
(lp32187
sg13
S'com.google.common.testing.FreshValueGenerator$Empty'
p32188
sg15
(lp32189
sg17
(lp32190
sg19
(lp32191
sg21
I0
sba(iArchitecture
Entity
p32192
(dp32193
g11
(lp32194
sg13
S'com.google.common.testing.FreshValueGenerator$FreshInvocationHandler'
p32195
sg15
(lp32196
sg17
(lp32197
sg19
(lp32198
sg21
I0
sba(iArchitecture
Entity
p32199
(dp32200
g11
(lp32201
sg13
S'com.google.common.testing.FreshValueGenerator$Generates'
p32202
sg15
(lp32203
sg17
(lp32204
sg19
(lp32205
sg21
I0
sba(iArchitecture
Entity
p32206
(dp32207
g11
(lp32208
sg13
S'com.google.common.testing.GcFinalization'
p32209
sg15
(lp32210
sg17
(lp32211
sg19
(lp32212
sg21
I0
sba(iArchitecture
Entity
p32213
(dp32214
g11
(lp32215
sg13
S'com.google.common.testing.GcFinalization$1'
p32216
sg15
(lp32217
sg17
(lp32218
sg19
(lp32219
sg21
I0
sba(iArchitecture
Entity
p32220
(dp32221
g11
(lp32222
sg13
S'com.google.common.testing.GcFinalization$2'
p32223
sg15
(lp32224
sg17
(lp32225
sg19
(lp32226
sg21
I0
sba(iArchitecture
Entity
p32227
(dp32228
g11
(lp32229
sg13
S'com.google.common.testing.GcFinalization$3'
p32230
sg15
(lp32231
sg17
(lp32232
sg19
(lp32233
sg21
I0
sba(iArchitecture
Entity
p32234
(dp32235
g11
(lp32236
sg13
S'com.google.common.testing.GcFinalization$FinalizationPredicate'
p32237
sg15
(lp32238
sg17
(lp32239
sg19
(lp32240
sg21
I0
sba(iArchitecture
Entity
p32241
(dp32242
g11
(lp32243
V1819
p32244
ag32244
asg13
S'com.google.common.testing.NullPointerTester'
p32245
sg15
(lp32246
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32247
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32248
asg17
(lp32249
(lp32250
I1
aag32250
asg19
(lp32251
VNullPointerTester should not require @Nullable on the param of an equals() override
p32252
ag32252
asg21
I0
sba(iArchitecture
Entity
p32253
(dp32254
g11
(lp32255
g32244
ag32244
asg13
S'com.google.common.testing.NullPointerTester$1'
p32256
sg15
(lp32257
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32258
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32259
asg17
(lp32260
g32250
ag32250
asg19
(lp32261
g32252
ag32252
asg21
I0
sba(iArchitecture
Entity
p32262
(dp32263
g11
(lp32264
g32244
ag32244
asg13
S'com.google.common.testing.NullPointerTester$2'
p32265
sg15
(lp32266
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32267
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32268
asg17
(lp32269
g32250
ag32250
asg19
(lp32270
g32252
ag32252
asg21
I0
sba(iArchitecture
Entity
p32271
(dp32272
g11
(lp32273
g32244
ag32244
asg13
S'com.google.common.testing.NullPointerTester$ExceptionTypePolicy'
p32274
sg15
(lp32275
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32276
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32277
asg17
(lp32278
g32250
ag32250
asg19
(lp32279
g32252
ag32252
asg21
I0
sba(iArchitecture
Entity
p32280
(dp32281
g11
(lp32282
g32244
ag32244
asg13
S'com.google.common.testing.NullPointerTester$ExceptionTypePolicy$1'
p32283
sg15
(lp32284
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32285
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32286
asg17
(lp32287
g32250
ag32250
asg19
(lp32288
g32252
ag32252
asg21
I0
sba(iArchitecture
Entity
p32289
(dp32290
g11
(lp32291
g32244
ag32244
asg13
S'com.google.common.testing.NullPointerTester$ExceptionTypePolicy$2'
p32292
sg15
(lp32293
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32294
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32295
asg17
(lp32296
g32250
ag32250
asg19
(lp32297
g32252
ag32252
asg21
I0
sba(iArchitecture
Entity
p32298
(dp32299
g11
(lp32300
g32244
ag32244
asg13
S'com.google.common.testing.NullPointerTester$Signature'
p32301
sg15
(lp32302
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32303
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32304
asg17
(lp32305
g32250
ag32250
asg19
(lp32306
g32252
ag32252
asg21
I0
sba(iArchitecture
Entity
p32307
(dp32308
g11
(lp32309
g32244
ag32244
asg13
S'com.google.common.testing.NullPointerTester$Visibility'
p32310
sg15
(lp32311
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32312
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32313
asg17
(lp32314
g32250
ag32250
asg19
(lp32315
g32252
ag32252
asg21
I0
sba(iArchitecture
Entity
p32316
(dp32317
g11
(lp32318
g32244
ag32244
asg13
S'com.google.common.testing.NullPointerTester$Visibility$1'
p32319
sg15
(lp32320
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32321
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32322
asg17
(lp32323
g32250
ag32250
asg19
(lp32324
g32252
ag32252
asg21
I0
sba(iArchitecture
Entity
p32325
(dp32326
g11
(lp32327
g32244
ag32244
asg13
S'com.google.common.testing.NullPointerTester$Visibility$2'
p32328
sg15
(lp32329
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32330
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32331
asg17
(lp32332
g32250
ag32250
asg19
(lp32333
g32252
ag32252
asg21
I0
sba(iArchitecture
Entity
p32334
(dp32335
g11
(lp32336
g32244
ag32244
asg13
S'com.google.common.testing.NullPointerTester$Visibility$3'
p32337
sg15
(lp32338
V_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32339
aV_[Original issue](https://code.google.com/p/guava-libraries/issues/detail?id=1819) created by **ogregoire** on 2014-07-29 at 03:35 PM_\u000a\u000a---\u000a\u000aWhen I call the following, the test case fails (see full test case in attachment).\u000a\u000a&nbsp;&nbsp;new ClassSanityTester().testNulls(MyObject.class);\u000a\u000aI get the following error: No exception thrown for parameter at index 0 from MyObjectTest$MyObject.public boolean MyObjectTest$MyObject.equals(java.lang.Object)[null] for class MyObjectTest$MyObject\u000a\u000aClearly, this indicates that it expects a call to "equals(Object)" to throw a NullPointerException. That method should never throw an exception but rather return true or false. The test seems to skip this assertion and I'm surprised this hasn't been reported earlier. \u000a\u000aPlease make it so ClassSanityTester#testNulls(Class) doesn't fail when equals is behaving correctly (see the test case where testEquals(MyObject.class succeeds).\u000a\u000aOn a side note, the text returned should be adapted as it mentions three times MyObjectTest$MyObject. That's 2 too many, and it renders the whole error message nearly not understandable.\u000a
p32340
asg17
(lp32341
g32250
ag32250
asg19
(lp32342
g32252
ag32252
asg21
I0
sba(iArchitecture
Entity
p32343
(dp32344
g11
(lp32345
sg13
S'com.google.common.testing.Platform'
p32346
sg15
(lp32347
sg17
(lp32348
sg19
(lp32349
sg21
I0
sba(iArchitecture
Entity
p32350
(dp32351
g11
(lp32352
sg13
S'com.google.common.testing.RelationshipTester'
p32353
sg15
(lp32354
sg17
(lp32355
sg19
(lp32356
sg21
I0
sba(iArchitecture
Entity
p32357
(dp32358
g11
(lp32359
sg13
S'com.google.common.testing.RelationshipTester$Item'
p32360
sg15
(lp32361
sg17
(lp32362
sg19
(lp32363
sg21
I0
sba(iArchitecture
Entity
p32364
(dp32365
g11
(lp32366
sg13
S'com.google.common.testing.RelationshipTester$ItemReporter'
p32367
sg15
(lp32368
sg17
(lp32369
sg19
(lp32370
sg21
I0
sba(iArchitecture
Entity
p32371
(dp32372
g11
(lp32373
sg13
S'com.google.common.testing.SerializableTester'
p32374
sg15
(lp32375
sg17
(lp32376
sg19
(lp32377
sg21
I0
sba(iArchitecture
Entity
p32378
(dp32379
g11
(lp32380
sg13
S'com.google.common.testing.TearDown'
p32381
sg15
(lp32382
sg17
(lp32383
sg19
(lp32384
sg21
I0
sba(iArchitecture
Entity
p32385
(dp32386
g11
(lp32387
sg13
S'com.google.common.testing.TearDownAccepter'
p32388
sg15
(lp32389
sg17
(lp32390
sg19
(lp32391
sg21
I0
sba(iArchitecture
Entity
p32392
(dp32393
g11
(lp32394
sg13
S'com.google.common.testing.TearDownStack'
p32395
sg15
(lp32396
sg17
(lp32397
sg19
(lp32398
sg21
I0
sba(iArchitecture
Entity
p32399
(dp32400
g11
(lp32401
sg13
S'junit.framework.AssertionFailedError'
p32402
sg15
(lp32403
sg17
(lp32404
sg19
(lp32405
sg21
I0
sba(iArchitecture
Entity
p32406
(dp32407
g11
(lp32408
sg13
S'org.junit.Test'
p32409
sg15
(lp32410
sg17
(lp32411
sg19
(lp32412
sg21
I0
sbasg1055
(lp32413
g31754
ag31761
ag31768
ag31775
ag31782
ag31789
ag31796
ag31803
ag31810
ag31817
ag31824
ag31831
ag31838
ag31845
ag31852
ag31859
ag31866
ag31873
ag31880
ag31887
ag31894
ag31901
ag31908
ag31915
ag31922
ag31929
ag31936
ag31943
ag31950
ag31957
ag31964
ag31971
ag31978
ag31985
ag31992
ag31999
ag32006
ag32013
ag32020
ag32027
ag32034
ag32041
ag32048
ag32055
ag32062
ag32069
ag32076
ag32083
ag32090
ag32097
ag32104
ag32111
ag32118
ag32125
ag32132
ag32139
ag32146
ag32153
ag32160
ag32167
ag32174
ag32181
ag32188
ag32195
ag32202
ag32209
ag32216
ag32223
ag32230
ag32237
ag32245
ag32256
ag32265
ag32274
ag32283
ag32292
ag32301
ag32310
ag32319
ag32328
ag32337
ag32346
ag32353
ag32360
ag32367
ag32374
ag32381
ag32388
ag32395
ag32402
ag32409
asg21
I0
sg1057
S'com.google.common.testing.ss'
p32414
sba(iArchitecture
Cluster
p32415
(dp32416
g7
(lp32417
(iArchitecture
Entity
p32418
(dp32419
g11
(lp32420
sg13
S'com.google.common.base.Supplier'
p32421
sg15
(lp32422
sg17
(lp32423
sg19
(lp32424
sg21
I0
sba(iArchitecture
Entity
p32425
(dp32426
g11
(lp32427
sg13
S'com.google.common.collect.ForwardingObject'
p32428
sg15
(lp32429
sg17
(lp32430
sg19
(lp32431
sg21
I0
sba(iArchitecture
Entity
p32432
(dp32433
g11
(lp32434
sg13
S'com.google.common.collect.ObjectArrays'
p32435
sg15
(lp32436
sg17
(lp32437
sg19
(lp32438
sg21
I0
sba(iArchitecture
Entity
p32439
(dp32440
g11
(lp32441
sg13
S'com.google.common.collect.Queues'
p32442
sg15
(lp32443
sg17
(lp32444
sg19
(lp32445
sg21
I0
sba(iArchitecture
Entity
p32446
(dp32447
g11
(lp32448
sg13
S'com.google.common.util.concurrent.AbstractCheckedFuture'
p32449
sg15
(lp32450
sg17
(lp32451
sg19
(lp32452
sg21
I0
sba(iArchitecture
Entity
p32453
(dp32454
g11
(lp32455
sg13
S'com.google.common.util.concurrent.AbstractExecutionThreadService'
p32456
sg15
(lp32457
sg17
(lp32458
sg19
(lp32459
sg21
I0
sba(iArchitecture
Entity
p32460
(dp32461
g11
(lp32462
sg13
S'com.google.common.util.concurrent.AbstractExecutionThreadService$1'
p32463
sg15
(lp32464
sg17
(lp32465
sg19
(lp32466
sg21
I0
sba(iArchitecture
Entity
p32467
(dp32468
g11
(lp32469
sg13
S'com.google.common.util.concurrent.AbstractExecutionThreadService$1$1'
p32470
sg15
(lp32471
sg17
(lp32472
sg19
(lp32473
sg21
I0
sba(iArchitecture
Entity
p32474
(dp32475
g11
(lp32476
sg13
S'com.google.common.util.concurrent.AbstractExecutionThreadService$1$2'
p32477
sg15
(lp32478
sg17
(lp32479
sg19
(lp32480
sg21
I0
sba(iArchitecture
Entity
p32481
(dp32482
g11
(lp32483
sg13
S'com.google.common.util.concurrent.AbstractExecutionThreadService$2'
p32484
sg15
(lp32485
sg17
(lp32486
sg19
(lp32487
sg21
I0
sba(iArchitecture
Entity
p32488
(dp32489
g11
(lp32490
V1961
p32491
asg13
S'com.google.common.util.concurrent.AbstractFuture'
p32492
sg15
(lp32493
VOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p32494
asg17
(lp32495
(lp32496
I0
aasg19
(lp32497
VMake immediateFailedFuture and immediateCancelledFuture return a TrustedFuture?
p32498
asg21
I0
sba(iArchitecture
Entity
p32499
(dp32500
g11
(lp32501
g32491
asg13
S'com.google.common.util.concurrent.AbstractFuture$1'
p32502
sg15
(lp32503
VOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p32504
asg17
(lp32505
g32496
asg19
(lp32506
g32498
asg21
I0
sba(iArchitecture
Entity
p32507
(dp32508
g11
(lp32509
g32491
asg13
S'com.google.common.util.concurrent.AbstractFuture$AtomicHelper'
p32510
sg15
(lp32511
VOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p32512
asg17
(lp32513
g32496
asg19
(lp32514
g32498
asg21
I0
sba(iArchitecture
Entity
p32515
(dp32516
g11
(lp32517
g32491
asg13
S'com.google.common.util.concurrent.AbstractFuture$Cancellation'
p32518
sg15
(lp32519
VOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p32520
asg17
(lp32521
g32496
asg19
(lp32522
g32498
asg21
I0
sba(iArchitecture
Entity
p32523
(dp32524
g11
(lp32525
g32491
asg13
S'com.google.common.util.concurrent.AbstractFuture$Failure'
p32526
sg15
(lp32527
VOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p32528
asg17
(lp32529
g32496
asg19
(lp32530
g32498
asg21
I0
sba(iArchitecture
Entity
p32531
(dp32532
g11
(lp32533
g32491
asg13
S'com.google.common.util.concurrent.AbstractFuture$Failure$1'
p32534
sg15
(lp32535
VOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p32536
asg17
(lp32537
g32496
asg19
(lp32538
g32498
asg21
I0
sba(iArchitecture
Entity
p32539
(dp32540
g11
(lp32541
g32491
asg13
S'com.google.common.util.concurrent.AbstractFuture$Listener'
p32542
sg15
(lp32543
VOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p32544
asg17
(lp32545
g32496
asg19
(lp32546
g32498
asg21
I0
sba(iArchitecture
Entity
p32547
(dp32548
g11
(lp32549
g32491
asg13
S'com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper'
p32550
sg15
(lp32551
VOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p32552
asg17
(lp32553
g32496
asg19
(lp32554
g32498
asg21
I0
sba(iArchitecture
Entity
p32555
(dp32556
g11
(lp32557
g32491
asg13
S'com.google.common.util.concurrent.AbstractFuture$SetFuture'
p32558
sg15
(lp32559
VOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p32560
asg17
(lp32561
g32496
asg19
(lp32562
g32498
asg21
I0
sba(iArchitecture
Entity
p32563
(dp32564
g11
(lp32565
g32491
asg13
S'com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper'
p32566
sg15
(lp32567
VOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p32568
asg17
(lp32569
g32496
asg19
(lp32570
g32498
asg21
I0
sba(iArchitecture
Entity
p32571
(dp32572
g11
(lp32573
g32491
asg13
S'com.google.common.util.concurrent.AbstractFuture$TrustedFuture'
p32574
sg15
(lp32575
VOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p32576
asg17
(lp32577
g32496
asg19
(lp32578
g32498
asg21
I0
sba(iArchitecture
Entity
p32579
(dp32580
g11
(lp32581
g32491
asg13
S'com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper'
p32582
sg15
(lp32583
VOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p32584
asg17
(lp32585
g32496
asg19
(lp32586
g32498
asg21
I0
sba(iArchitecture
Entity
p32587
(dp32588
g11
(lp32589
g32491
asg13
S'com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1'
p32590
sg15
(lp32591
VOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p32592
asg17
(lp32593
g32496
asg19
(lp32594
g32498
asg21
I0
sba(iArchitecture
Entity
p32595
(dp32596
g11
(lp32597
g32491
asg13
S'com.google.common.util.concurrent.AbstractFuture$Waiter'
p32598
sg15
(lp32599
VOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p32600
asg17
(lp32601
g32496
asg19
(lp32602
g32498
asg21
I0
sba(iArchitecture
Entity
p32603
(dp32604
g11
(lp32605
sg13
S'com.google.common.util.concurrent.AbstractIdleService'
p32606
sg15
(lp32607
sg17
(lp32608
sg19
(lp32609
sg21
I0
sba(iArchitecture
Entity
p32610
(dp32611
g11
(lp32612
sg13
S'com.google.common.util.concurrent.AbstractIdleService$1'
p32613
sg15
(lp32614
sg17
(lp32615
sg19
(lp32616
sg21
I0
sba(iArchitecture
Entity
p32617
(dp32618
g11
(lp32619
sg13
S'com.google.common.util.concurrent.AbstractIdleService$DelegateService'
p32620
sg15
(lp32621
sg17
(lp32622
sg19
(lp32623
sg21
I0
sba(iArchitecture
Entity
p32624
(dp32625
g11
(lp32626
sg13
S'com.google.common.util.concurrent.AbstractIdleService$DelegateService$1'
p32627
sg15
(lp32628
sg17
(lp32629
sg19
(lp32630
sg21
I0
sba(iArchitecture
Entity
p32631
(dp32632
g11
(lp32633
sg13
S'com.google.common.util.concurrent.AbstractIdleService$DelegateService$2'
p32634
sg15
(lp32635
sg17
(lp32636
sg19
(lp32637
sg21
I0
sba(iArchitecture
Entity
p32638
(dp32639
g11
(lp32640
sg13
S'com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier'
p32641
sg15
(lp32642
sg17
(lp32643
sg19
(lp32644
sg21
I0
sba(iArchitecture
Entity
p32645
(dp32646
g11
(lp32647
sg13
S'com.google.common.util.concurrent.AbstractScheduledService'
p32648
sg15
(lp32649
sg17
(lp32650
sg19
(lp32651
sg21
I0
sba(iArchitecture
Entity
p32652
(dp32653
g11
(lp32654
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$1'
p32655
sg15
(lp32656
sg17
(lp32657
sg19
(lp32658
sg21
I0
sba(iArchitecture
Entity
p32659
(dp32660
g11
(lp32661
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$1ThreadFactoryImpl'
p32662
sg15
(lp32663
sg17
(lp32664
sg19
(lp32665
sg21
I0
sba(iArchitecture
Entity
p32666
(dp32667
g11
(lp32668
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler'
p32669
sg15
(lp32670
sg17
(lp32671
sg19
(lp32672
sg21
I0
sba(iArchitecture
Entity
p32673
(dp32674
g11
(lp32675
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable'
p32676
sg15
(lp32677
sg17
(lp32678
sg19
(lp32679
sg21
I0
sba(iArchitecture
Entity
p32680
(dp32681
g11
(lp32682
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule'
p32683
sg15
(lp32684
sg17
(lp32685
sg19
(lp32686
sg21
I0
sba(iArchitecture
Entity
p32687
(dp32688
g11
(lp32689
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$Scheduler'
p32690
sg15
(lp32691
sg17
(lp32692
sg19
(lp32693
sg21
I0
sba(iArchitecture
Entity
p32694
(dp32695
g11
(lp32696
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1'
p32697
sg15
(lp32698
sg17
(lp32699
sg19
(lp32700
sg21
I0
sba(iArchitecture
Entity
p32701
(dp32702
g11
(lp32703
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2'
p32704
sg15
(lp32705
sg17
(lp32706
sg19
(lp32707
sg21
I0
sba(iArchitecture
Entity
p32708
(dp32709
g11
(lp32710
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate'
p32711
sg15
(lp32712
sg17
(lp32713
sg19
(lp32714
sg21
I0
sba(iArchitecture
Entity
p32715
(dp32716
g11
(lp32717
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$1'
p32718
sg15
(lp32719
sg17
(lp32720
sg19
(lp32721
sg21
I0
sba(iArchitecture
Entity
p32722
(dp32723
g11
(lp32724
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$2'
p32725
sg15
(lp32726
sg17
(lp32727
sg19
(lp32728
sg21
I0
sba(iArchitecture
Entity
p32729
(dp32730
g11
(lp32731
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$3'
p32732
sg15
(lp32733
sg17
(lp32734
sg19
(lp32735
sg21
I0
sba(iArchitecture
Entity
p32736
(dp32737
g11
(lp32738
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$Task'
p32739
sg15
(lp32740
sg17
(lp32741
sg19
(lp32742
sg21
I0
sba(iArchitecture
Entity
p32743
(dp32744
g11
(lp32745
sg13
S'com.google.common.util.concurrent.AbstractService'
p32746
sg15
(lp32747
sg17
(lp32748
sg19
(lp32749
sg21
I0
sba(iArchitecture
Entity
p32750
(dp32751
g11
(lp32752
sg13
S'com.google.common.util.concurrent.AbstractService$1'
p32753
sg15
(lp32754
sg17
(lp32755
sg19
(lp32756
sg21
I0
sba(iArchitecture
Entity
p32757
(dp32758
g11
(lp32759
sg13
S'com.google.common.util.concurrent.AbstractService$2'
p32760
sg15
(lp32761
sg17
(lp32762
sg19
(lp32763
sg21
I0
sba(iArchitecture
Entity
p32764
(dp32765
g11
(lp32766
sg13
S'com.google.common.util.concurrent.AbstractService$3'
p32767
sg15
(lp32768
sg17
(lp32769
sg19
(lp32770
sg21
I0
sba(iArchitecture
Entity
p32771
(dp32772
g11
(lp32773
sg13
S'com.google.common.util.concurrent.AbstractService$4'
p32774
sg15
(lp32775
sg17
(lp32776
sg19
(lp32777
sg21
I0
sba(iArchitecture
Entity
p32778
(dp32779
g11
(lp32780
sg13
S'com.google.common.util.concurrent.AbstractService$5'
p32781
sg15
(lp32782
sg17
(lp32783
sg19
(lp32784
sg21
I0
sba(iArchitecture
Entity
p32785
(dp32786
g11
(lp32787
sg13
S'com.google.common.util.concurrent.AbstractService$6'
p32788
sg15
(lp32789
sg17
(lp32790
sg19
(lp32791
sg21
I0
sba(iArchitecture
Entity
p32792
(dp32793
g11
(lp32794
sg13
S'com.google.common.util.concurrent.AbstractService$HasReachedRunningGuard'
p32795
sg15
(lp32796
sg17
(lp32797
sg19
(lp32798
sg21
I0
sba(iArchitecture
Entity
p32799
(dp32800
g11
(lp32801
sg13
S'com.google.common.util.concurrent.AbstractService$IsStartableGuard'
p32802
sg15
(lp32803
sg17
(lp32804
sg19
(lp32805
sg21
I0
sba(iArchitecture
Entity
p32806
(dp32807
g11
(lp32808
sg13
S'com.google.common.util.concurrent.AbstractService$IsStoppableGuard'
p32809
sg15
(lp32810
sg17
(lp32811
sg19
(lp32812
sg21
I0
sba(iArchitecture
Entity
p32813
(dp32814
g11
(lp32815
sg13
S'com.google.common.util.concurrent.AbstractService$IsStoppedGuard'
p32816
sg15
(lp32817
sg17
(lp32818
sg19
(lp32819
sg21
I0
sba(iArchitecture
Entity
p32820
(dp32821
g11
(lp32822
sg13
S'com.google.common.util.concurrent.AbstractService$StateSnapshot'
p32823
sg15
(lp32824
sg17
(lp32825
sg19
(lp32826
sg21
I0
sba(iArchitecture
Entity
p32827
(dp32828
g11
(lp32829
V2463
p32830
ag32830
asg13
S'com.google.common.util.concurrent.AggregateFuture'
p32831
sg15
(lp32832
VWe already do in `AbstractFuture`.\u000a
p32833
aVWe already do in `AbstractFuture`.\u000a
p32834
asg17
(lp32835
(lp32836
I1
aag32836
asg19
(lp32837
VWork around Samsung 5.0.x Atomic*FieldUpdater bug in AggregateFutureState and InterruptibleTask
p32838
ag32838
asg21
I0
sba(iArchitecture
Entity
p32839
(dp32840
g11
(lp32841
g32830
ag32830
asg13
S'com.google.common.util.concurrent.AggregateFuture$RunningState'
p32842
sg15
(lp32843
VWe already do in `AbstractFuture`.\u000a
p32844
aVWe already do in `AbstractFuture`.\u000a
p32845
asg17
(lp32846
g32836
ag32836
asg19
(lp32847
g32838
ag32838
asg21
I0
sba(iArchitecture
Entity
p32848
(dp32849
g11
(lp32850
g32830
ag32830
asg13
S'com.google.common.util.concurrent.AggregateFuture$RunningState$1'
p32851
sg15
(lp32852
VWe already do in `AbstractFuture`.\u000a
p32853
aVWe already do in `AbstractFuture`.\u000a
p32854
asg17
(lp32855
g32836
ag32836
asg19
(lp32856
g32838
ag32838
asg21
I0
sba(iArchitecture
Entity
p32857
(dp32858
g11
(lp32859
g32830
ag32830
asg13
S'com.google.common.util.concurrent.AggregateFutureState'
p32860
sg15
(lp32861
VWe already do in `AbstractFuture`.\u000a
p32862
aVWe already do in `AbstractFuture`.\u000a
p32863
asg17
(lp32864
g32836
ag32836
asg19
(lp32865
g32838
ag32838
asg21
I0
sba(iArchitecture
Entity
p32866
(dp32867
g11
(lp32868
sg13
S'com.google.common.util.concurrent.AsyncFunction'
p32869
sg15
(lp32870
sg17
(lp32871
sg19
(lp32872
sg21
I0
sba(iArchitecture
Entity
p32873
(dp32874
g11
(lp32875
sg13
S'com.google.common.util.concurrent.AtomicLongMap'
p32876
sg15
(lp32877
sg17
(lp32878
sg19
(lp32879
sg21
I0
sba(iArchitecture
Entity
p32880
(dp32881
g11
(lp32882
sg13
S'com.google.common.util.concurrent.AtomicLongMap$1'
p32883
sg15
(lp32884
sg17
(lp32885
sg19
(lp32886
sg21
I0
sba(iArchitecture
Entity
p32887
(dp32888
g11
(lp32889
sg13
S'com.google.common.util.concurrent.Callables'
p32890
sg15
(lp32891
sg17
(lp32892
sg19
(lp32893
sg21
I0
sba(iArchitecture
Entity
p32894
(dp32895
g11
(lp32896
sg13
S'com.google.common.util.concurrent.Callables$1'
p32897
sg15
(lp32898
sg17
(lp32899
sg19
(lp32900
sg21
I0
sba(iArchitecture
Entity
p32901
(dp32902
g11
(lp32903
sg13
S'com.google.common.util.concurrent.Callables$2'
p32904
sg15
(lp32905
sg17
(lp32906
sg19
(lp32907
sg21
I0
sba(iArchitecture
Entity
p32908
(dp32909
g11
(lp32910
sg13
S'com.google.common.util.concurrent.Callables$3'
p32911
sg15
(lp32912
sg17
(lp32913
sg19
(lp32914
sg21
I0
sba(iArchitecture
Entity
p32915
(dp32916
g11
(lp32917
sg13
S'com.google.common.util.concurrent.CheckedFuture'
p32918
sg15
(lp32919
sg17
(lp32920
sg19
(lp32921
sg21
I0
sba(iArchitecture
Entity
p32922
(dp32923
g11
(lp32924
sg13
S'com.google.common.util.concurrent.CollectionFuture'
p32925
sg15
(lp32926
sg17
(lp32927
sg19
(lp32928
sg21
I0
sba(iArchitecture
Entity
p32929
(dp32930
g11
(lp32931
sg13
S'com.google.common.util.concurrent.CollectionFuture$CollectionFutureRunningState'
p32932
sg15
(lp32933
sg17
(lp32934
sg19
(lp32935
sg21
I0
sba(iArchitecture
Entity
p32936
(dp32937
g11
(lp32938
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory'
p32939
sg15
(lp32940
sg17
(lp32941
sg19
(lp32942
sg21
I0
sba(iArchitecture
Entity
p32943
(dp32944
g11
(lp32945
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$1'
p32946
sg15
(lp32947
sg17
(lp32948
sg19
(lp32949
sg21
I0
sba(iArchitecture
Entity
p32950
(dp32951
g11
(lp32952
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock'
p32953
sg15
(lp32954
sg17
(lp32955
sg19
(lp32956
sg21
I0
sba(iArchitecture
Entity
p32957
(dp32958
g11
(lp32959
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock'
p32960
sg15
(lp32961
sg17
(lp32962
sg19
(lp32963
sg21
I0
sba(iArchitecture
Entity
p32964
(dp32965
g11
(lp32966
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock'
p32967
sg15
(lp32968
sg17
(lp32969
sg19
(lp32970
sg21
I0
sba(iArchitecture
Entity
p32971
(dp32972
g11
(lp32973
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock'
p32974
sg15
(lp32975
sg17
(lp32976
sg19
(lp32977
sg21
I0
sba(iArchitecture
Entity
p32978
(dp32979
g11
(lp32980
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock'
p32981
sg15
(lp32982
sg17
(lp32983
sg19
(lp32984
sg21
I0
sba(iArchitecture
Entity
p32985
(dp32986
g11
(lp32987
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace'
p32988
sg15
(lp32989
sg17
(lp32990
sg19
(lp32991
sg21
I0
sba(iArchitecture
Entity
p32992
(dp32993
g11
(lp32994
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode'
p32995
sg15
(lp32996
sg17
(lp32997
sg19
(lp32998
sg21
I0
sba(iArchitecture
Entity
p32999
(dp33000
g11
(lp33001
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$Policies'
p33002
sg15
(lp33003
sg17
(lp33004
sg19
(lp33005
sg21
I0
sba(iArchitecture
Entity
p33006
(dp33007
g11
(lp33008
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$1'
p33009
sg15
(lp33010
sg17
(lp33011
sg19
(lp33012
sg21
I0
sba(iArchitecture
Entity
p33013
(dp33014
g11
(lp33015
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$2'
p33016
sg15
(lp33017
sg17
(lp33018
sg19
(lp33019
sg21
I0
sba(iArchitecture
Entity
p33020
(dp33021
g11
(lp33022
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$3'
p33023
sg15
(lp33024
sg17
(lp33025
sg19
(lp33026
sg21
I0
sba(iArchitecture
Entity
p33027
(dp33028
g11
(lp33029
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$Policy'
p33030
sg15
(lp33031
sg17
(lp33032
sg19
(lp33033
sg21
I0
sba(iArchitecture
Entity
p33034
(dp33035
g11
(lp33036
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException'
p33037
sg15
(lp33038
sg17
(lp33039
sg19
(lp33040
sg21
I0
sba(iArchitecture
Entity
p33041
(dp33042
g11
(lp33043
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering'
p33044
sg15
(lp33045
sg17
(lp33046
sg19
(lp33047
sg21
I0
sba(iArchitecture
Entity
p33048
(dp33049
g11
(lp33050
sg13
S'com.google.common.util.concurrent.ExecutionError'
p33051
sg15
(lp33052
sg17
(lp33053
sg19
(lp33054
sg21
I0
sba(iArchitecture
Entity
p33055
(dp33056
g11
(lp33057
sg13
S'com.google.common.util.concurrent.ExecutionList'
p33058
sg15
(lp33059
sg17
(lp33060
sg19
(lp33061
sg21
I0
sba(iArchitecture
Entity
p33062
(dp33063
g11
(lp33064
sg13
S'com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair'
p33065
sg15
(lp33066
sg17
(lp33067
sg19
(lp33068
sg21
I0
sba(iArchitecture
Entity
p33069
(dp33070
g11
(lp33071
sg13
S'com.google.common.util.concurrent.ForwardingCheckedFuture'
p33072
sg15
(lp33073
sg17
(lp33074
sg19
(lp33075
sg21
I0
sba(iArchitecture
Entity
p33076
(dp33077
g11
(lp33078
sg13
S'com.google.common.util.concurrent.ForwardingCheckedFuture$SimpleForwardingCheckedFuture'
p33079
sg15
(lp33080
sg17
(lp33081
sg19
(lp33082
sg21
I0
sba(iArchitecture
Entity
p33083
(dp33084
g11
(lp33085
sg13
S'com.google.common.util.concurrent.ForwardingExecutorService'
p33086
sg15
(lp33087
sg17
(lp33088
sg19
(lp33089
sg21
I0
sba(iArchitecture
Entity
p33090
(dp33091
g11
(lp33092
sg13
S'com.google.common.util.concurrent.ForwardingFuture'
p33093
sg15
(lp33094
sg17
(lp33095
sg19
(lp33096
sg21
I0
sba(iArchitecture
Entity
p33097
(dp33098
g11
(lp33099
sg13
S'com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture'
p33100
sg15
(lp33101
sg17
(lp33102
sg19
(lp33103
sg21
I0
sba(iArchitecture
Entity
p33104
(dp33105
g11
(lp33106
sg13
S'com.google.common.util.concurrent.ForwardingListeningExecutorService'
p33107
sg15
(lp33108
sg17
(lp33109
sg19
(lp33110
sg21
I0
sba(iArchitecture
Entity
p33111
(dp33112
g11
(lp33113
sg13
S'com.google.common.util.concurrent.FutureCallback'
p33114
sg15
(lp33115
sg17
(lp33116
sg19
(lp33117
sg21
I0
sba(iArchitecture
Entity
p33118
(dp33119
g11
(lp33120
sg13
S'com.google.common.util.concurrent.FutureFallback'
p33121
sg15
(lp33122
sg17
(lp33123
sg19
(lp33124
sg21
I0
sba(iArchitecture
Entity
p33125
(dp33126
g11
(lp33127
g32830
ag32491
ag32491
aV1999
p33128
aV2379
p33129
aV2254
p33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures'
p33131
sg15
(lp33132
VWe already do in `AbstractFuture`.\u000a
p33133
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33134
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33135
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33136
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33137
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33138
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33139
asg17
(lp33140
g32836
ag32496
ag32496
a(lp33141
I7
aa(lp33142
I2
aa(lp33143
I1
aag33143
asg19
(lp33144
g32838
ag32498
ag32498
aVRelease a Guava that supports+requires GWT 2.8.0 upon GWT release
p33145
aVBetter documentation of Futures.catching GWT availability
p33146
aVNesting Futures.transform() eats StackOverflowError and causes the Future to hang forever
p33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33148
(dp33149
g11
(lp33150
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$1'
p33151
sg15
(lp33152
VWe already do in `AbstractFuture`.\u000a
p33153
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33154
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33155
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33156
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33157
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33158
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33159
asg17
(lp33160
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33161
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33162
(dp33163
g11
(lp33164
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$2'
p33165
sg15
(lp33166
VWe already do in `AbstractFuture`.\u000a
p33167
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33168
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33169
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33170
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33171
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33172
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33173
asg17
(lp33174
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33175
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33176
(dp33177
g11
(lp33178
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$2$1'
p33179
sg15
(lp33180
VWe already do in `AbstractFuture`.\u000a
p33181
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33182
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33183
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33184
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33185
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33186
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33187
asg17
(lp33188
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33189
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33190
(dp33191
g11
(lp33192
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$3'
p33193
sg15
(lp33194
VWe already do in `AbstractFuture`.\u000a
p33195
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33196
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33197
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33198
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33199
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33200
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33201
asg17
(lp33202
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33203
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33204
(dp33205
g11
(lp33206
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$4'
p33207
sg15
(lp33208
VWe already do in `AbstractFuture`.\u000a
p33209
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33210
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33211
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33212
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33213
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33214
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33215
asg17
(lp33216
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33217
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33218
(dp33219
g11
(lp33220
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$5'
p33221
sg15
(lp33222
VWe already do in `AbstractFuture`.\u000a
p33223
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33224
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33225
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33226
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33227
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33228
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33229
asg17
(lp33230
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33231
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33232
(dp33233
g11
(lp33234
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$6'
p33235
sg15
(lp33236
VWe already do in `AbstractFuture`.\u000a
p33237
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33238
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33239
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33240
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33241
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33242
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33243
asg17
(lp33244
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33245
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33246
(dp33247
g11
(lp33248
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$AbstractCatchingFuture'
p33249
sg15
(lp33250
VWe already do in `AbstractFuture`.\u000a
p33251
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33252
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33253
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33254
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33255
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33256
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33257
asg17
(lp33258
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33259
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33260
(dp33261
g11
(lp33262
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$AbstractChainingFuture'
p33263
sg15
(lp33264
VWe already do in `AbstractFuture`.\u000a
p33265
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33266
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33267
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33268
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33269
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33270
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33271
asg17
(lp33272
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33273
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33274
(dp33275
g11
(lp33276
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$AsyncCatchingFuture'
p33277
sg15
(lp33278
VWe already do in `AbstractFuture`.\u000a
p33279
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33280
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33281
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33282
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33283
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33284
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33285
asg17
(lp33286
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33287
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33288
(dp33289
g11
(lp33290
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$AsyncChainingFuture'
p33291
sg15
(lp33292
VWe already do in `AbstractFuture`.\u000a
p33293
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33294
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33295
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33296
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33297
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33298
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33299
asg17
(lp33300
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33301
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33302
(dp33303
g11
(lp33304
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$CatchingFuture'
p33305
sg15
(lp33306
VWe already do in `AbstractFuture`.\u000a
p33307
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33308
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33309
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33310
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33311
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33312
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33313
asg17
(lp33314
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33315
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33316
(dp33317
g11
(lp33318
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$ChainingFuture'
p33319
sg15
(lp33320
VWe already do in `AbstractFuture`.\u000a
p33321
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33322
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33323
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33324
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33325
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33326
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33327
asg17
(lp33328
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33329
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33330
(dp33331
g11
(lp33332
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$ImmediateCancelledFuture'
p33333
sg15
(lp33334
VWe already do in `AbstractFuture`.\u000a
p33335
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33336
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33337
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33338
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33339
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33340
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33341
asg17
(lp33342
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33343
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33344
(dp33345
g11
(lp33346
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$ImmediateFailedCheckedFuture'
p33347
sg15
(lp33348
VWe already do in `AbstractFuture`.\u000a
p33349
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33350
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33351
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33352
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33353
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33354
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33355
asg17
(lp33356
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33357
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33358
(dp33359
g11
(lp33360
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$ImmediateFailedFuture'
p33361
sg15
(lp33362
VWe already do in `AbstractFuture`.\u000a
p33363
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33364
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33365
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33366
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33367
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33368
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33369
asg17
(lp33370
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33371
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33372
(dp33373
g11
(lp33374
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$ImmediateFuture'
p33375
sg15
(lp33376
VWe already do in `AbstractFuture`.\u000a
p33377
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33378
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33379
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33380
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33381
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33382
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33383
asg17
(lp33384
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33385
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33386
(dp33387
g11
(lp33388
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$ImmediateSuccessfulCheckedFuture'
p33389
sg15
(lp33390
VWe already do in `AbstractFuture`.\u000a
p33391
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33392
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33393
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33394
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33395
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33396
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33397
asg17
(lp33398
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33399
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33400
(dp33401
g11
(lp33402
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$ImmediateSuccessfulFuture'
p33403
sg15
(lp33404
VWe already do in `AbstractFuture`.\u000a
p33405
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33406
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33407
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33408
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33409
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33410
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33411
asg17
(lp33412
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33413
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33414
(dp33415
g11
(lp33416
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$ListFuture'
p33417
sg15
(lp33418
VWe already do in `AbstractFuture`.\u000a
p33419
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33420
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33421
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33422
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33423
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33424
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33425
asg17
(lp33426
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33427
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33428
(dp33429
g11
(lp33430
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$ListFuture$ListFutureRunningState'
p33431
sg15
(lp33432
VWe already do in `AbstractFuture`.\u000a
p33433
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33434
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33435
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33436
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33437
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33438
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33439
asg17
(lp33440
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33441
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33442
(dp33443
g11
(lp33444
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$MappingCheckedFuture'
p33445
sg15
(lp33446
VWe already do in `AbstractFuture`.\u000a
p33447
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33448
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33449
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33450
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33451
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33452
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33453
asg17
(lp33454
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33455
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33456
(dp33457
g11
(lp33458
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture'
p33459
sg15
(lp33460
VWe already do in `AbstractFuture`.\u000a
p33461
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33462
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33463
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33464
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33465
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33466
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33467
asg17
(lp33468
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33469
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33470
(dp33471
g11
(lp33472
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture$1'
p33473
sg15
(lp33474
VWe already do in `AbstractFuture`.\u000a
p33475
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33476
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33477
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33478
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33479
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33480
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33481
asg17
(lp33482
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33483
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33484
(dp33485
g11
(lp33486
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$TimeoutFuture'
p33487
sg15
(lp33488
VWe already do in `AbstractFuture`.\u000a
p33489
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33490
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33491
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33492
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33493
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33494
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33495
asg17
(lp33496
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33497
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33498
(dp33499
g11
(lp33500
g32830
ag32491
ag32491
ag33128
ag33129
ag33130
ag33130
asg13
S'com.google.common.util.concurrent.Futures$TimeoutFuture$Fire'
p33501
sg15
(lp33502
VWe already do in `AbstractFuture`.\u000a
p33503
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33504
aVOn the theory that most things should be a `TrustedFuture` :)\u000a\u000aWe would probably skip `immediateFuture` because there's little to optimize there: We'd basically be replacing one field access with another.\u000a\u000aBut why not do `immediateFuture` anyway? `TrustedFuture` is a bit larger than `immediateFuture`, since it stores listeners and waiters ("would increase the size of the immediateFuture implementations by a least 8 bytes a piece (+ padding)," per Luke).\u000a\u000aWe care about that less with failed and cancelled futures, since they have large `Exception` objects associated with them already.\u000a\u000aAlternatively, we could special-case `ImmediateFuture` in the same way that we special-case `TrustedFuture` -- either with a separate `instanceof` branch or with an interface. Then we could do all the whole `immediate*Future` family with no cost... unless the branch/interface has a performance cost.\u000a
p33505
aV- @lowasser internal CL 88242480 wants to use `SimpleImmutableEntry`.\u000a- Internal CL 86210805 can be rolled back to use `AssertionError(String, Throwable)`.\u000a- @kak internal CL 83767705 wanted to use `Arrays.copyOf`.\u000a- My internal CL 59647656 wants to remove `AbstractIteratorTester` workarounds for bugs in `java.util` classes fixed in new releases of GWT.\u000a\u000aGWT 2.7.0 was released in November. But note that we had bug reports from users of GWT 2.5.1 as late as October 2014, 9 months after the release of 2.6.0. We should get some idea of how quickly external users update the version of GWT they use.\u000a
p33506
aVPreviously we at least showed [the `@GwtIncompatible` reason in the Javadoc](http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html#catching%28com.google.common.util.concurrent.ListenableFuture, java.lang.Class, com.google.common.base.Function%29). But this will be going away in 20.0 with the removal of `@GwtIncompatible` reasons.\u000a\u000aFurthermore, even _with_ the reason, I saw multiple people who were confused.\u000a\u000aThere are various directions we could go here, including removing `@GwtIncompatible` (by adding a manual emulation to `Futures.java` ). But I'm wondering if, whichever direction we go, we pretty much need to start the Javadoc with **This is available under GWT, but you need to pass `Throwable.class` specifically.**\u000a
p33507
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33508
aVHey!\u000aI found that the following test will fail with a TimeoutException (the Future hangs indefinitely): \u000a\u000a``` java\u000a  static final int REPS = 10000;\u000a  @Test\u000a  public void hangs() throws InterruptedException, TimeoutException {\u000a    SettableFuture<Integer> settableFuture = SettableFuture.create();\u000a    ListenableFuture<Integer> chained = settableFuture;\u000a    for (int i = 0; i < REPS; ++i) {\u000a      chained = Futures.transform(chained, Functions.<Integer>identity());\u000a    }\u000a    settableFuture.set(0);\u000a\u000a    Futures.get(chained, 10, TimeUnit.SECONDS, TimeoutException.class);\u000a  }\u000a```\u000a\u000aBut if I change REPS to be something smaller, like 1000 (this will depend on the size of the stack) then the test passes. I think the root cause is is that the exception can't 'surface' to the final `chained` Future due to a StackOverflowError caused by repeated DirectExecutor.execute application.\u000a\u000aMy logging config may be screwed up, but I didn't see a log for this or anything, which made finding this a bit of a chore. I checked that this happens with Guava 18 and 19. Apologies if this is a KP or already filed (I tried searching Issues, but nothing related pops up).\u000a
p33509
asg17
(lp33510
g32836
ag32496
ag32496
ag33141
ag33142
ag33143
ag33143
asg19
(lp33511
g32838
ag32498
ag32498
ag33145
ag33146
ag33147
ag33147
asg21
I0
sba(iArchitecture
Entity
p33512
(dp33513
g11
(lp33514
sg13
S'com.google.common.util.concurrent.FuturesGetChecked'
p33515
sg15
(lp33516
sg17
(lp33517
sg19
(lp33518
sg21
I0
sba(iArchitecture
Entity
p33519
(dp33520
g11
(lp33521
sg13
S'com.google.common.util.concurrent.FuturesGetChecked$1'
p33522
sg15
(lp33523
sg17
(lp33524
sg19
(lp33525
sg21
I0
sba(iArchitecture
Entity
p33526
(dp33527
g11
(lp33528
sg13
S'com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator'
p33529
sg15
(lp33530
sg17
(lp33531
sg19
(lp33532
sg21
I0
sba(iArchitecture
Entity
p33533
(dp33534
g11
(lp33535
sg13
S'com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder'
p33536
sg15
(lp33537
sg17
(lp33538
sg19
(lp33539
sg21
I0
sba(iArchitecture
Entity
p33540
(dp33541
g11
(lp33542
sg13
S'com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator'
p33543
sg15
(lp33544
sg17
(lp33545
sg19
(lp33546
sg21
I0
sba(iArchitecture
Entity
p33547
(dp33548
g11
(lp33549
sg13
S'com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator$1'
p33550
sg15
(lp33551
sg17
(lp33552
sg19
(lp33553
sg21
I0
sba(iArchitecture
Entity
p33554
(dp33555
g11
(lp33556
sg13
S'com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator'
p33557
sg15
(lp33558
sg17
(lp33559
sg19
(lp33560
sg21
I0
sba(iArchitecture
Entity
p33561
(dp33562
g11
(lp33563
sg13
S'com.google.common.util.concurrent.GwtFuturesCatchingSpecialization'
p33564
sg15
(lp33565
sg17
(lp33566
sg19
(lp33567
sg21
I0
sba(iArchitecture
Entity
p33568
(dp33569
g11
(lp33570
g32830
asg13
S'com.google.common.util.concurrent.InterruptibleTask'
p33571
sg15
(lp33572
VWe already do in `AbstractFuture`.\u000a
p33573
asg17
(lp33574
g32836
asg19
(lp33575
g32838
asg21
I0
sba(iArchitecture
Entity
p33576
(dp33577
g11
(lp33578
sg13
S'com.google.common.util.concurrent.JdkFutureAdapters'
p33579
sg15
(lp33580
sg17
(lp33581
sg19
(lp33582
sg21
I0
sba(iArchitecture
Entity
p33583
(dp33584
g11
(lp33585
sg13
S'com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter'
p33586
sg15
(lp33587
sg17
(lp33588
sg19
(lp33589
sg21
I0
sba(iArchitecture
Entity
p33590
(dp33591
g11
(lp33592
sg13
S'com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter$1'
p33593
sg15
(lp33594
sg17
(lp33595
sg19
(lp33596
sg21
I0
sba(iArchitecture
Entity
p33597
(dp33598
g11
(lp33599
sg13
S'com.google.common.util.concurrent.ListenableFuture'
p33600
sg15
(lp33601
sg17
(lp33602
sg19
(lp33603
sg21
I0
sba(iArchitecture
Entity
p33604
(dp33605
g11
(lp33606
sg13
S'com.google.common.util.concurrent.ListenerCallQueue'
p33607
sg15
(lp33608
sg17
(lp33609
sg19
(lp33610
sg21
I0
sba(iArchitecture
Entity
p33611
(dp33612
g11
(lp33613
sg13
S'com.google.common.util.concurrent.ListenerCallQueue$Callback'
p33614
sg15
(lp33615
sg17
(lp33616
sg19
(lp33617
sg21
I0
sba(iArchitecture
Entity
p33618
(dp33619
g11
(lp33620
sg13
S'com.google.common.util.concurrent.ListeningExecutorService'
p33621
sg15
(lp33622
sg17
(lp33623
sg19
(lp33624
sg21
I0
sba(iArchitecture
Entity
p33625
(dp33626
g11
(lp33627
sg13
S'com.google.common.util.concurrent.Monitor'
p33628
sg15
(lp33629
sg17
(lp33630
sg19
(lp33631
sg21
I0
sba(iArchitecture
Entity
p33632
(dp33633
g11
(lp33634
sg13
S'com.google.common.util.concurrent.Monitor$Guard'
p33635
sg15
(lp33636
sg17
(lp33637
sg19
(lp33638
sg21
I0
sba(iArchitecture
Entity
p33639
(dp33640
g11
(lp33641
sg13
S'com.google.common.util.concurrent.MoreExecutors'
p33642
sg15
(lp33643
sg17
(lp33644
sg19
(lp33645
sg21
I0
sba(iArchitecture
Entity
p33646
(dp33647
g11
(lp33648
sg13
S'com.google.common.util.concurrent.MoreExecutors$1'
p33649
sg15
(lp33650
sg17
(lp33651
sg19
(lp33652
sg21
I0
sba(iArchitecture
Entity
p33653
(dp33654
g11
(lp33655
sg13
S'com.google.common.util.concurrent.MoreExecutors$2'
p33656
sg15
(lp33657
sg17
(lp33658
sg19
(lp33659
sg21
I0
sba(iArchitecture
Entity
p33660
(dp33661
g11
(lp33662
sg13
S'com.google.common.util.concurrent.MoreExecutors$3'
p33663
sg15
(lp33664
sg17
(lp33665
sg19
(lp33666
sg21
I0
sba(iArchitecture
Entity
p33667
(dp33668
g11
(lp33669
sg13
S'com.google.common.util.concurrent.MoreExecutors$4'
p33670
sg15
(lp33671
sg17
(lp33672
sg19
(lp33673
sg21
I0
sba(iArchitecture
Entity
p33674
(dp33675
g11
(lp33676
sg13
S'com.google.common.util.concurrent.MoreExecutors$Application'
p33677
sg15
(lp33678
sg17
(lp33679
sg19
(lp33680
sg21
I0
sba(iArchitecture
Entity
p33681
(dp33682
g11
(lp33683
sg13
S'com.google.common.util.concurrent.MoreExecutors$Application$1'
p33684
sg15
(lp33685
sg17
(lp33686
sg19
(lp33687
sg21
I0
sba(iArchitecture
Entity
p33688
(dp33689
g11
(lp33690
sg13
S'com.google.common.util.concurrent.MoreExecutors$DirectExecutor'
p33691
sg15
(lp33692
sg17
(lp33693
sg19
(lp33694
sg21
I0
sba(iArchitecture
Entity
p33695
(dp33696
g11
(lp33697
sg13
S'com.google.common.util.concurrent.MoreExecutors$DirectExecutorService'
p33698
sg15
(lp33699
sg17
(lp33700
sg19
(lp33701
sg21
I0
sba(iArchitecture
Entity
p33702
(dp33703
g11
(lp33704
sg13
S'com.google.common.util.concurrent.MoreExecutors$ListeningDecorator'
p33705
sg15
(lp33706
sg17
(lp33707
sg19
(lp33708
sg21
I0
sba(iArchitecture
Entity
p33709
(dp33710
g11
(lp33711
sg13
S'com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator'
p33712
sg15
(lp33713
sg17
(lp33714
sg19
(lp33715
sg21
I0
sba(iArchitecture
Entity
p33716
(dp33717
g11
(lp33718
sg13
S'com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask'
p33719
sg15
(lp33720
sg17
(lp33721
sg19
(lp33722
sg21
I0
sba(iArchitecture
Entity
p33723
(dp33724
g11
(lp33725
sg13
S'com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask'
p33726
sg15
(lp33727
sg17
(lp33728
sg19
(lp33729
sg21
I0
sba(iArchitecture
Entity
p33730
(dp33731
g11
(lp33732
sg13
S'com.google.common.util.concurrent.Platform'
p33733
sg15
(lp33734
sg17
(lp33735
sg19
(lp33736
sg21
I0
sba(iArchitecture
Entity
p33737
(dp33738
g11
(lp33739
sg13
S'com.google.common.util.concurrent.RateLimiter'
p33740
sg15
(lp33741
sg17
(lp33742
sg19
(lp33743
sg21
I0
sba(iArchitecture
Entity
p33744
(dp33745
g11
(lp33746
sg13
S'com.google.common.util.concurrent.RateLimiter$SleepingStopwatch'
p33747
sg15
(lp33748
sg17
(lp33749
sg19
(lp33750
sg21
I0
sba(iArchitecture
Entity
p33751
(dp33752
g11
(lp33753
sg13
S'com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1'
p33754
sg15
(lp33755
sg17
(lp33756
sg19
(lp33757
sg21
I0
sba(iArchitecture
Entity
p33758
(dp33759
g11
(lp33760
sg13
S'com.google.common.util.concurrent.Runnables'
p33761
sg15
(lp33762
sg17
(lp33763
sg19
(lp33764
sg21
I0
sba(iArchitecture
Entity
p33765
(dp33766
g11
(lp33767
sg13
S'com.google.common.util.concurrent.Runnables$1'
p33768
sg15
(lp33769
sg17
(lp33770
sg19
(lp33771
sg21
I0
sba(iArchitecture
Entity
p33772
(dp33773
g11
(lp33774
sg13
S'com.google.common.util.concurrent.SerializingExecutor'
p33775
sg15
(lp33776
sg17
(lp33777
sg19
(lp33778
sg21
I0
sba(iArchitecture
Entity
p33779
(dp33780
g11
(lp33781
sg13
S'com.google.common.util.concurrent.SerializingExecutor$1'
p33782
sg15
(lp33783
sg17
(lp33784
sg19
(lp33785
sg21
I0
sba(iArchitecture
Entity
p33786
(dp33787
g11
(lp33788
sg13
S'com.google.common.util.concurrent.SerializingExecutor$QueueWorker'
p33789
sg15
(lp33790
sg17
(lp33791
sg19
(lp33792
sg21
I0
sba(iArchitecture
Entity
p33793
(dp33794
g11
(lp33795
sg13
S'com.google.common.util.concurrent.Service'
p33796
sg15
(lp33797
sg17
(lp33798
sg19
(lp33799
sg21
I0
sba(iArchitecture
Entity
p33800
(dp33801
g11
(lp33802
sg13
S'com.google.common.util.concurrent.Service$1'
p33803
sg15
(lp33804
sg17
(lp33805
sg19
(lp33806
sg21
I0
sba(iArchitecture
Entity
p33807
(dp33808
g11
(lp33809
sg13
S'com.google.common.util.concurrent.Service$Listener'
p33810
sg15
(lp33811
sg17
(lp33812
sg19
(lp33813
sg21
I0
sba(iArchitecture
Entity
p33814
(dp33815
g11
(lp33816
sg13
S'com.google.common.util.concurrent.Service$State'
p33817
sg15
(lp33818
sg17
(lp33819
sg19
(lp33820
sg21
I0
sba(iArchitecture
Entity
p33821
(dp33822
g11
(lp33823
sg13
S'com.google.common.util.concurrent.Service$State$1'
p33824
sg15
(lp33825
sg17
(lp33826
sg19
(lp33827
sg21
I0
sba(iArchitecture
Entity
p33828
(dp33829
g11
(lp33830
sg13
S'com.google.common.util.concurrent.Service$State$2'
p33831
sg15
(lp33832
sg17
(lp33833
sg19
(lp33834
sg21
I0
sba(iArchitecture
Entity
p33835
(dp33836
g11
(lp33837
sg13
S'com.google.common.util.concurrent.Service$State$3'
p33838
sg15
(lp33839
sg17
(lp33840
sg19
(lp33841
sg21
I0
sba(iArchitecture
Entity
p33842
(dp33843
g11
(lp33844
sg13
S'com.google.common.util.concurrent.Service$State$4'
p33845
sg15
(lp33846
sg17
(lp33847
sg19
(lp33848
sg21
I0
sba(iArchitecture
Entity
p33849
(dp33850
g11
(lp33851
sg13
S'com.google.common.util.concurrent.Service$State$5'
p33852
sg15
(lp33853
sg17
(lp33854
sg19
(lp33855
sg21
I0
sba(iArchitecture
Entity
p33856
(dp33857
g11
(lp33858
sg13
S'com.google.common.util.concurrent.Service$State$6'
p33859
sg15
(lp33860
sg17
(lp33861
sg19
(lp33862
sg21
I0
sba(iArchitecture
Entity
p33863
(dp33864
g11
(lp33865
sg13
S'com.google.common.util.concurrent.ServiceManager'
p33866
sg15
(lp33867
sg17
(lp33868
sg19
(lp33869
sg21
I0
sba(iArchitecture
Entity
p33870
(dp33871
g11
(lp33872
sg13
S'com.google.common.util.concurrent.ServiceManager$1'
p33873
sg15
(lp33874
sg17
(lp33875
sg19
(lp33876
sg21
I0
sba(iArchitecture
Entity
p33877
(dp33878
g11
(lp33879
sg13
S'com.google.common.util.concurrent.ServiceManager$2'
p33880
sg15
(lp33881
sg17
(lp33882
sg19
(lp33883
sg21
I0
sba(iArchitecture
Entity
p33884
(dp33885
g11
(lp33886
sg13
S'com.google.common.util.concurrent.ServiceManager$EmptyServiceManagerWarning'
p33887
sg15
(lp33888
sg17
(lp33889
sg19
(lp33890
sg21
I0
sba(iArchitecture
Entity
p33891
(dp33892
g11
(lp33893
sg13
S'com.google.common.util.concurrent.ServiceManager$Listener'
p33894
sg15
(lp33895
sg17
(lp33896
sg19
(lp33897
sg21
I0
sba(iArchitecture
Entity
p33898
(dp33899
g11
(lp33900
sg13
S'com.google.common.util.concurrent.ServiceManager$NoOpService'
p33901
sg15
(lp33902
sg17
(lp33903
sg19
(lp33904
sg21
I0
sba(iArchitecture
Entity
p33905
(dp33906
g11
(lp33907
sg13
S'com.google.common.util.concurrent.ServiceManager$ServiceListener'
p33908
sg15
(lp33909
sg17
(lp33910
sg19
(lp33911
sg21
I0
sba(iArchitecture
Entity
p33912
(dp33913
g11
(lp33914
sg13
S'com.google.common.util.concurrent.ServiceManager$ServiceManagerState'
p33915
sg15
(lp33916
sg17
(lp33917
sg19
(lp33918
sg21
I0
sba(iArchitecture
Entity
p33919
(dp33920
g11
(lp33921
sg13
S'com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1'
p33922
sg15
(lp33923
sg17
(lp33924
sg19
(lp33925
sg21
I0
sba(iArchitecture
Entity
p33926
(dp33927
g11
(lp33928
sg13
S'com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2'
p33929
sg15
(lp33930
sg17
(lp33931
sg19
(lp33932
sg21
I0
sba(iArchitecture
Entity
p33933
(dp33934
g11
(lp33935
sg13
S'com.google.common.util.concurrent.ServiceManager$ServiceManagerState$AwaitHealthGuard'
p33936
sg15
(lp33937
sg17
(lp33938
sg19
(lp33939
sg21
I0
sba(iArchitecture
Entity
p33940
(dp33941
g11
(lp33942
sg13
S'com.google.common.util.concurrent.ServiceManager$ServiceManagerState$StoppedGuard'
p33943
sg15
(lp33944
sg17
(lp33945
sg19
(lp33946
sg21
I0
sba(iArchitecture
Entity
p33947
(dp33948
g11
(lp33949
sg13
S'com.google.common.util.concurrent.SettableFuture'
p33950
sg15
(lp33951
sg17
(lp33952
sg19
(lp33953
sg21
I0
sba(iArchitecture
Entity
p33954
(dp33955
g11
(lp33956
sg13
S'com.google.common.util.concurrent.SimpleTimeLimiter'
p33957
sg15
(lp33958
sg17
(lp33959
sg19
(lp33960
sg21
I0
sba(iArchitecture
Entity
p33961
(dp33962
g11
(lp33963
sg13
S'com.google.common.util.concurrent.SimpleTimeLimiter$1'
p33964
sg15
(lp33965
sg17
(lp33966
sg19
(lp33967
sg21
I0
sba(iArchitecture
Entity
p33968
(dp33969
g11
(lp33970
sg13
S'com.google.common.util.concurrent.SimpleTimeLimiter$1$1'
p33971
sg15
(lp33972
sg17
(lp33973
sg19
(lp33974
sg21
I0
sba(iArchitecture
Entity
p33975
(dp33976
g11
(lp33977
sg13
S'com.google.common.util.concurrent.SmoothRateLimiter'
p33978
sg15
(lp33979
sg17
(lp33980
sg19
(lp33981
sg21
I0
sba(iArchitecture
Entity
p33982
(dp33983
g11
(lp33984
sg13
S'com.google.common.util.concurrent.SmoothRateLimiter$1'
p33985
sg15
(lp33986
sg17
(lp33987
sg19
(lp33988
sg21
I0
sba(iArchitecture
Entity
p33989
(dp33990
g11
(lp33991
sg13
S'com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty'
p33992
sg15
(lp33993
sg17
(lp33994
sg19
(lp33995
sg21
I0
sba(iArchitecture
Entity
p33996
(dp33997
g11
(lp33998
sg13
S'com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp'
p33999
sg15
(lp34000
sg17
(lp34001
sg19
(lp34002
sg21
I0
sba(iArchitecture
Entity
p34003
(dp34004
g11
(lp34005
sg13
S'com.google.common.util.concurrent.Striped'
p34006
sg15
(lp34007
sg17
(lp34008
sg19
(lp34009
sg21
I0
sba(iArchitecture
Entity
p34010
(dp34011
g11
(lp34012
sg13
S'com.google.common.util.concurrent.Striped$1'
p34013
sg15
(lp34014
sg17
(lp34015
sg19
(lp34016
sg21
I0
sba(iArchitecture
Entity
p34017
(dp34018
g11
(lp34019
sg13
S'com.google.common.util.concurrent.Striped$2'
p34020
sg15
(lp34021
sg17
(lp34022
sg19
(lp34023
sg21
I0
sba(iArchitecture
Entity
p34024
(dp34025
g11
(lp34026
sg13
S'com.google.common.util.concurrent.Striped$3'
p34027
sg15
(lp34028
sg17
(lp34029
sg19
(lp34030
sg21
I0
sba(iArchitecture
Entity
p34031
(dp34032
g11
(lp34033
sg13
S'com.google.common.util.concurrent.Striped$4'
p34034
sg15
(lp34035
sg17
(lp34036
sg19
(lp34037
sg21
I0
sba(iArchitecture
Entity
p34038
(dp34039
g11
(lp34040
sg13
S'com.google.common.util.concurrent.Striped$5'
p34041
sg15
(lp34042
sg17
(lp34043
sg19
(lp34044
sg21
I0
sba(iArchitecture
Entity
p34045
(dp34046
g11
(lp34047
sg13
S'com.google.common.util.concurrent.Striped$CompactStriped'
p34048
sg15
(lp34049
sg17
(lp34050
sg19
(lp34051
sg21
I0
sba(iArchitecture
Entity
p34052
(dp34053
g11
(lp34054
sg13
S'com.google.common.util.concurrent.Striped$LargeLazyStriped'
p34055
sg15
(lp34056
sg17
(lp34057
sg19
(lp34058
sg21
I0
sba(iArchitecture
Entity
p34059
(dp34060
g11
(lp34061
sg13
S'com.google.common.util.concurrent.Striped$PaddedLock'
p34062
sg15
(lp34063
sg17
(lp34064
sg19
(lp34065
sg21
I0
sba(iArchitecture
Entity
p34066
(dp34067
g11
(lp34068
sg13
S'com.google.common.util.concurrent.Striped$PaddedSemaphore'
p34069
sg15
(lp34070
sg17
(lp34071
sg19
(lp34072
sg21
I0
sba(iArchitecture
Entity
p34073
(dp34074
g11
(lp34075
sg13
S'com.google.common.util.concurrent.Striped$PowerOfTwoStriped'
p34076
sg15
(lp34077
sg17
(lp34078
sg19
(lp34079
sg21
I0
sba(iArchitecture
Entity
p34080
(dp34081
g11
(lp34082
sg13
S'com.google.common.util.concurrent.Striped$SmallLazyStriped'
p34083
sg15
(lp34084
sg17
(lp34085
sg19
(lp34086
sg21
I0
sba(iArchitecture
Entity
p34087
(dp34088
g11
(lp34089
sg13
S'com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference'
p34090
sg15
(lp34091
sg17
(lp34092
sg19
(lp34093
sg21
I0
sba(iArchitecture
Entity
p34094
(dp34095
g11
(lp34096
sg13
S'com.google.common.util.concurrent.ThreadFactoryBuilder'
p34097
sg15
(lp34098
sg17
(lp34099
sg19
(lp34100
sg21
I0
sba(iArchitecture
Entity
p34101
(dp34102
g11
(lp34103
sg13
S'com.google.common.util.concurrent.ThreadFactoryBuilder$1'
p34104
sg15
(lp34105
sg17
(lp34106
sg19
(lp34107
sg21
I0
sba(iArchitecture
Entity
p34108
(dp34109
g11
(lp34110
sg13
S'com.google.common.util.concurrent.TimeLimiter'
p34111
sg15
(lp34112
sg17
(lp34113
sg19
(lp34114
sg21
I0
sba(iArchitecture
Entity
p34115
(dp34116
g11
(lp34117
sg13
S'com.google.common.util.concurrent.TrustedListenableFutureTask'
p34118
sg15
(lp34119
sg17
(lp34120
sg19
(lp34121
sg21
I0
sba(iArchitecture
Entity
p34122
(dp34123
g11
(lp34124
sg13
S'com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask'
p34125
sg15
(lp34126
sg17
(lp34127
sg19
(lp34128
sg21
I0
sba(iArchitecture
Entity
p34129
(dp34130
g11
(lp34131
sg13
S'com.google.common.util.concurrent.UncaughtExceptionHandlers'
p34132
sg15
(lp34133
sg17
(lp34134
sg19
(lp34135
sg21
I0
sba(iArchitecture
Entity
p34136
(dp34137
g11
(lp34138
sg13
S'com.google.common.util.concurrent.UncaughtExceptionHandlers$Exiter'
p34139
sg15
(lp34140
sg17
(lp34141
sg19
(lp34142
sg21
I0
sba(iArchitecture
Entity
p34143
(dp34144
g11
(lp34145
sg13
S'com.google.common.util.concurrent.UncheckedExecutionException'
p34146
sg15
(lp34147
sg17
(lp34148
sg19
(lp34149
sg21
I0
sba(iArchitecture
Entity
p34150
(dp34151
g11
(lp34152
sg13
S'com.google.common.util.concurrent.UncheckedTimeoutException'
p34153
sg15
(lp34154
sg17
(lp34155
sg19
(lp34156
sg21
I0
sba(iArchitecture
Entity
p34157
(dp34158
g11
(lp34159
sg13
S'com.google.common.util.concurrent.Uninterruptibles'
p34160
sg15
(lp34161
sg17
(lp34162
sg19
(lp34163
sg21
I0
sba(iArchitecture
Entity
p34164
(dp34165
g11
(lp34166
sg13
S'com.google.common.util.concurrent.WrappingExecutorService'
p34167
sg15
(lp34168
sg17
(lp34169
sg19
(lp34170
sg21
I0
sba(iArchitecture
Entity
p34171
(dp34172
g11
(lp34173
sg13
S'com.google.common.util.concurrent.WrappingExecutorService$1'
p34174
sg15
(lp34175
sg17
(lp34176
sg19
(lp34177
sg21
I0
sba(iArchitecture
Entity
p34178
(dp34179
g11
(lp34180
sg13
S'com.google.common.util.concurrent.WrappingScheduledExecutorService'
p34181
sg15
(lp34182
sg17
(lp34183
sg19
(lp34184
sg21
I0
sba(iArchitecture
Entity
p34185
(dp34186
g11
(lp34187
sg13
S'istFutureRunningState'
p34188
sg15
(lp34189
sg17
(lp34190
sg19
(lp34191
sg21
I0
sba(iArchitecture
Entity
p34192
(dp34193
g11
(lp34194
sg13
S'org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement'
p34195
sg15
(lp34196
sg17
(lp34197
sg19
(lp34198
sg21
I0
sbasg1055
(lp34199
g32421
ag32428
ag32435
ag32442
ag32449
ag32456
ag32463
ag32470
ag32477
ag32484
ag32492
ag32502
ag32510
ag32518
ag32526
ag32534
ag32542
ag32550
ag32558
ag32566
ag32574
ag32582
ag32590
ag32598
ag32606
ag32613
ag32620
ag32627
ag32634
ag32641
ag32648
ag32655
ag32662
ag32669
ag32676
ag32683
ag32690
ag32697
ag32704
ag32711
ag32718
ag32725
ag32732
ag32739
ag32746
ag32753
ag32760
ag32767
ag32774
ag32781
ag32788
ag32795
ag32802
ag32809
ag32816
ag32823
ag32831
ag32842
ag32851
ag32860
ag32869
ag32876
ag32883
ag32890
ag32897
ag32904
ag32911
ag32918
ag32925
ag32932
ag32939
ag32946
ag32953
ag32960
ag32967
ag32974
ag32981
ag32988
ag32995
ag33002
ag33009
ag33016
ag33023
ag33030
ag33037
ag33044
ag33051
ag33058
ag33065
ag33072
ag33079
ag33086
ag33093
ag33100
ag33107
ag33114
ag33121
ag33131
ag33151
ag33165
ag33179
ag33193
ag33207
ag33221
ag33235
ag33249
ag33263
ag33277
ag33291
ag33305
ag33319
ag33333
ag33347
ag33361
ag33375
ag33389
ag33403
ag33417
ag33431
ag33445
ag33459
ag33473
ag33487
ag33501
ag33515
ag33522
ag33529
ag33536
ag33543
ag33550
ag33557
ag33564
ag33571
ag33579
ag33586
ag33593
ag33600
ag33607
ag33614
ag33621
ag33628
ag33635
ag33642
ag33649
ag33656
ag33663
ag33670
ag33677
ag33684
ag33691
ag33698
ag33705
ag33712
ag33719
ag33726
ag33733
ag33740
ag33747
ag33754
ag33761
ag33768
ag33775
ag33782
ag33789
ag33796
ag33803
ag33810
ag33817
ag33824
ag33831
ag33838
ag33845
ag33852
ag33859
ag33866
ag33873
ag33880
ag33887
ag33894
ag33901
ag33908
ag33915
ag33922
ag33929
ag33936
ag33943
ag33950
ag33957
ag33964
ag33971
ag33978
ag33985
ag33992
ag33999
ag34006
ag34013
ag34020
ag34027
ag34034
ag34041
ag34048
ag34055
ag34062
ag34069
ag34076
ag34083
ag34090
ag34097
ag34104
ag34111
ag34118
ag34125
ag34132
ag34139
ag34146
ag34153
ag34160
ag34167
ag34174
ag34181
ag34188
ag34195
asg21
I0
sg1057
S'com.google.common.util.concurrent.ss'
p34200
sba(iArchitecture
Cluster
p34201
(dp34202
g7
(lp34203
(iArchitecture
Entity
p34204
(dp34205
g11
(lp34206
sg13
S'com.google.common.util.concurrent.AbstractListeningExecutorService'
p34207
sg15
(lp34208
sg17
(lp34209
sg19
(lp34210
sg21
I0
sba(iArchitecture
Entity
p34211
(dp34212
g11
(lp34213
sg13
S'com.google.common.util.concurrent.ForwardingListenableFuture'
p34214
sg15
(lp34215
sg17
(lp34216
sg19
(lp34217
sg21
I0
sba(iArchitecture
Entity
p34218
(dp34219
g11
(lp34220
sg13
S'com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture'
p34221
sg15
(lp34222
sg17
(lp34223
sg19
(lp34224
sg21
I0
sba(iArchitecture
Entity
p34225
(dp34226
g11
(lp34227
sg13
S'com.google.common.util.concurrent.ListenableScheduledFuture'
p34228
sg15
(lp34229
sg17
(lp34230
sg19
(lp34231
sg21
I0
sba(iArchitecture
Entity
p34232
(dp34233
g11
(lp34234
sg13
S'com.google.common.util.concurrent.ListeningScheduledExecutorService'
p34235
sg15
(lp34236
sg17
(lp34237
sg19
(lp34238
sg21
I0
sba(iArchitecture
Entity
p34239
(dp34240
g11
(lp34241
sg13
S'com.google.common.util.concurrent.testing.AbstractCheckedFutureTest'
p34242
sg15
(lp34243
sg17
(lp34244
sg19
(lp34245
sg21
I0
sba(iArchitecture
Entity
p34246
(dp34247
g11
(lp34248
sg13
S'com.google.common.util.concurrent.testing.AbstractCheckedFutureTest$1'
p34249
sg15
(lp34250
sg17
(lp34251
sg19
(lp34252
sg21
I0
sba(iArchitecture
Entity
p34253
(dp34254
g11
(lp34255
sg13
S'com.google.common.util.concurrent.testing.AbstractCheckedFutureTest$2'
p34256
sg15
(lp34257
sg17
(lp34258
sg19
(lp34259
sg21
I0
sba(iArchitecture
Entity
p34260
(dp34261
g11
(lp34262
sg13
S'com.google.common.util.concurrent.testing.AbstractCheckedFutureTest$3'
p34263
sg15
(lp34264
sg17
(lp34265
sg19
(lp34266
sg21
I0
sba(iArchitecture
Entity
p34267
(dp34268
g11
(lp34269
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest'
p34270
sg15
(lp34271
sg17
(lp34272
sg19
(lp34273
sg21
I0
sba(iArchitecture
Entity
p34274
(dp34275
g11
(lp34276
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest$1'
p34277
sg15
(lp34278
sg17
(lp34279
sg19
(lp34280
sg21
I0
sba(iArchitecture
Entity
p34281
(dp34282
g11
(lp34283
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest$2'
p34284
sg15
(lp34285
sg17
(lp34286
sg19
(lp34287
sg21
I0
sba(iArchitecture
Entity
p34288
(dp34289
g11
(lp34290
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest$3'
p34291
sg15
(lp34292
sg17
(lp34293
sg19
(lp34294
sg21
I0
sba(iArchitecture
Entity
p34295
(dp34296
g11
(lp34297
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest$4'
p34298
sg15
(lp34299
sg17
(lp34300
sg19
(lp34301
sg21
I0
sba(iArchitecture
Entity
p34302
(dp34303
g11
(lp34304
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest$5'
p34305
sg15
(lp34306
sg17
(lp34307
sg19
(lp34308
sg21
I0
sba(iArchitecture
Entity
p34309
(dp34310
g11
(lp34311
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest$6'
p34312
sg15
(lp34313
sg17
(lp34314
sg19
(lp34315
sg21
I0
sba(iArchitecture
Entity
p34316
(dp34317
g11
(lp34318
sg13
S'com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService'
p34319
sg15
(lp34320
sg17
(lp34321
sg19
(lp34322
sg21
I0
sba(iArchitecture
Entity
p34323
(dp34324
g11
(lp34325
sg13
S'com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService$ImmediateScheduledFuture'
p34326
sg15
(lp34327
sg17
(lp34328
sg19
(lp34329
sg21
I0
sba(iArchitecture
Entity
p34330
(dp34331
g11
(lp34332
sg13
S'com.google.common.util.concurrent.testing.TestingExecutors'
p34333
sg15
(lp34334
sg17
(lp34335
sg19
(lp34336
sg21
I0
sba(iArchitecture
Entity
p34337
(dp34338
g11
(lp34339
sg13
S'com.google.common.util.concurrent.testing.TestingExecutors$1'
p34340
sg15
(lp34341
sg17
(lp34342
sg19
(lp34343
sg21
I0
sba(iArchitecture
Entity
p34344
(dp34345
g11
(lp34346
sg13
S'com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService'
p34347
sg15
(lp34348
sg17
(lp34349
sg19
(lp34350
sg21
I0
sba(iArchitecture
Entity
p34351
(dp34352
g11
(lp34353
sg13
S'com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService$NeverScheduledFuture'
p34354
sg15
(lp34355
sg17
(lp34356
sg19
(lp34357
sg21
I0
sbasg1055
(lp34358
g34207
ag34214
ag34221
ag34228
ag34235
ag34242
ag34249
ag34256
ag34263
ag34270
ag34277
ag34284
ag34291
ag34298
ag34305
ag34312
ag34319
ag34326
ag34333
ag34340
ag34347
ag34354
asg21
I0
sg1057
S'com.google.common.util.concurrent.testing.ss'
p34359
sbasg17405
g17406
sg1055
(lp34360
sg17408
I00
sg1057
S'v19.0'
p34361
sba(iArchitecture
Architecture
p34362
(dp34363
g3
(lp34364
(iArchitecture
Cluster
p34365
(dp34366
g7
(lp34367
(iArchitecture
Entity
p34368
(dp34369
g11
(lp34370
sg13
S'com.google.common.annotations.GwtIncompatible'
p34371
sg15
(lp34372
sg17
(lp34373
sg19
(lp34374
sg21
I0
sba(iArchitecture
Entity
p34375
(dp34376
g11
(lp34377
sg13
S'com.google.common.base.AbstractIterator'
p34378
sg15
(lp34379
sg17
(lp34380
sg19
(lp34381
sg21
I0
sba(iArchitecture
Entity
p34382
(dp34383
g11
(lp34384
sg13
S'com.google.common.base.AbstractIterator$1'
p34385
sg15
(lp34386
sg17
(lp34387
sg19
(lp34388
sg21
I0
sba(iArchitecture
Entity
p34389
(dp34390
g11
(lp34391
sg13
S'com.google.common.base.AbstractIterator$State'
p34392
sg15
(lp34393
sg17
(lp34394
sg19
(lp34395
sg21
I0
sba(iArchitecture
Entity
p34396
(dp34397
g11
(lp34398
sg13
S'com.google.common.base.Ascii'
p34399
sg15
(lp34400
sg17
(lp34401
sg19
(lp34402
sg21
I0
sba(iArchitecture
Entity
p34403
(dp34404
g11
(lp34405
sg13
S'com.google.common.base.CaseFormat'
p34406
sg15
(lp34407
sg17
(lp34408
sg19
(lp34409
sg21
I0
sba(iArchitecture
Entity
p34410
(dp34411
g11
(lp34412
sg13
S'com.google.common.base.CaseFormat$1'
p34413
sg15
(lp34414
sg17
(lp34415
sg19
(lp34416
sg21
I0
sba(iArchitecture
Entity
p34417
(dp34418
g11
(lp34419
sg13
S'com.google.common.base.CaseFormat$2'
p34420
sg15
(lp34421
sg17
(lp34422
sg19
(lp34423
sg21
I0
sba(iArchitecture
Entity
p34424
(dp34425
g11
(lp34426
sg13
S'com.google.common.base.CaseFormat$3'
p34427
sg15
(lp34428
sg17
(lp34429
sg19
(lp34430
sg21
I0
sba(iArchitecture
Entity
p34431
(dp34432
g11
(lp34433
sg13
S'com.google.common.base.CaseFormat$4'
p34434
sg15
(lp34435
sg17
(lp34436
sg19
(lp34437
sg21
I0
sba(iArchitecture
Entity
p34438
(dp34439
g11
(lp34440
sg13
S'com.google.common.base.CaseFormat$5'
p34441
sg15
(lp34442
sg17
(lp34443
sg19
(lp34444
sg21
I0
sba(iArchitecture
Entity
p34445
(dp34446
g11
(lp34447
sg13
S'com.google.common.base.CaseFormat$StringConverter'
p34448
sg15
(lp34449
sg17
(lp34450
sg19
(lp34451
sg21
I0
sba(iArchitecture
Entity
p34452
(dp34453
g11
(lp34454
sg13
S'com.google.common.base.CharMatcher'
p34455
sg15
(lp34456
sg17
(lp34457
sg19
(lp34458
sg21
I0
sba(iArchitecture
Entity
p34459
(dp34460
g11
(lp34461
sg13
S'com.google.common.base.CharMatcher$1'
p34462
sg15
(lp34463
sg17
(lp34464
sg19
(lp34465
sg21
I0
sba(iArchitecture
Entity
p34466
(dp34467
g11
(lp34468
sg13
S'com.google.common.base.CharMatcher$And'
p34469
sg15
(lp34470
sg17
(lp34471
sg19
(lp34472
sg21
I0
sba(iArchitecture
Entity
p34473
(dp34474
g11
(lp34475
sg13
S'com.google.common.base.CharMatcher$Any'
p34476
sg15
(lp34477
sg17
(lp34478
sg19
(lp34479
sg21
I0
sba(iArchitecture
Entity
p34480
(dp34481
g11
(lp34482
sg13
S'com.google.common.base.CharMatcher$AnyOf'
p34483
sg15
(lp34484
sg17
(lp34485
sg19
(lp34486
sg21
I0
sba(iArchitecture
Entity
p34487
(dp34488
g11
(lp34489
sg13
S'com.google.common.base.CharMatcher$Ascii'
p34490
sg15
(lp34491
sg17
(lp34492
sg19
(lp34493
sg21
I0
sba(iArchitecture
Entity
p34494
(dp34495
g11
(lp34496
sg13
S'com.google.common.base.CharMatcher$BitSetMatcher'
p34497
sg15
(lp34498
sg17
(lp34499
sg19
(lp34500
sg21
I0
sba(iArchitecture
Entity
p34501
(dp34502
g11
(lp34503
sg13
S'com.google.common.base.CharMatcher$BreakingWhitespace'
p34504
sg15
(lp34505
sg17
(lp34506
sg19
(lp34507
sg21
I0
sba(iArchitecture
Entity
p34508
(dp34509
g11
(lp34510
sg13
S'com.google.common.base.CharMatcher$Digit'
p34511
sg15
(lp34512
sg17
(lp34513
sg19
(lp34514
sg21
I0
sba(iArchitecture
Entity
p34515
(dp34516
g11
(lp34517
sg13
S'com.google.common.base.CharMatcher$FastMatcher'
p34518
sg15
(lp34519
sg17
(lp34520
sg19
(lp34521
sg21
I0
sba(iArchitecture
Entity
p34522
(dp34523
g11
(lp34524
sg13
S'com.google.common.base.CharMatcher$ForPredicate'
p34525
sg15
(lp34526
sg17
(lp34527
sg19
(lp34528
sg21
I0
sba(iArchitecture
Entity
p34529
(dp34530
g11
(lp34531
sg13
S'com.google.common.base.CharMatcher$InRange'
p34532
sg15
(lp34533
sg17
(lp34534
sg19
(lp34535
sg21
I0
sba(iArchitecture
Entity
p34536
(dp34537
g11
(lp34538
sg13
S'com.google.common.base.CharMatcher$Invisible'
p34539
sg15
(lp34540
sg17
(lp34541
sg19
(lp34542
sg21
I0
sba(iArchitecture
Entity
p34543
(dp34544
g11
(lp34545
sg13
S'com.google.common.base.CharMatcher$Is'
p34546
sg15
(lp34547
sg17
(lp34548
sg19
(lp34549
sg21
I0
sba(iArchitecture
Entity
p34550
(dp34551
g11
(lp34552
sg13
S'com.google.common.base.CharMatcher$IsEither'
p34553
sg15
(lp34554
sg17
(lp34555
sg19
(lp34556
sg21
I0
sba(iArchitecture
Entity
p34557
(dp34558
g11
(lp34559
sg13
S'com.google.common.base.CharMatcher$IsNot'
p34560
sg15
(lp34561
sg17
(lp34562
sg19
(lp34563
sg21
I0
sba(iArchitecture
Entity
p34564
(dp34565
g11
(lp34566
sg13
S'com.google.common.base.CharMatcher$JavaDigit'
p34567
sg15
(lp34568
sg17
(lp34569
sg19
(lp34570
sg21
I0
sba(iArchitecture
Entity
p34571
(dp34572
g11
(lp34573
sg13
S'com.google.common.base.CharMatcher$JavaIsoControl'
p34574
sg15
(lp34575
sg17
(lp34576
sg19
(lp34577
sg21
I0
sba(iArchitecture
Entity
p34578
(dp34579
g11
(lp34580
sg13
S'com.google.common.base.CharMatcher$JavaLetter'
p34581
sg15
(lp34582
sg17
(lp34583
sg19
(lp34584
sg21
I0
sba(iArchitecture
Entity
p34585
(dp34586
g11
(lp34587
sg13
S'com.google.common.base.CharMatcher$JavaLetterOrDigit'
p34588
sg15
(lp34589
sg17
(lp34590
sg19
(lp34591
sg21
I0
sba(iArchitecture
Entity
p34592
(dp34593
g11
(lp34594
sg13
S'com.google.common.base.CharMatcher$JavaLowerCase'
p34595
sg15
(lp34596
sg17
(lp34597
sg19
(lp34598
sg21
I0
sba(iArchitecture
Entity
p34599
(dp34600
g11
(lp34601
sg13
S'com.google.common.base.CharMatcher$JavaUpperCase'
p34602
sg15
(lp34603
sg17
(lp34604
sg19
(lp34605
sg21
I0
sba(iArchitecture
Entity
p34606
(dp34607
g11
(lp34608
sg13
S'com.google.common.base.CharMatcher$NamedFastMatcher'
p34609
sg15
(lp34610
sg17
(lp34611
sg19
(lp34612
sg21
I0
sba(iArchitecture
Entity
p34613
(dp34614
g11
(lp34615
sg13
S'com.google.common.base.CharMatcher$Negated'
p34616
sg15
(lp34617
sg17
(lp34618
sg19
(lp34619
sg21
I0
sba(iArchitecture
Entity
p34620
(dp34621
g11
(lp34622
sg13
S'com.google.common.base.CharMatcher$NegatedFastMatcher'
p34623
sg15
(lp34624
sg17
(lp34625
sg19
(lp34626
sg21
I0
sba(iArchitecture
Entity
p34627
(dp34628
g11
(lp34629
sg13
S'com.google.common.base.CharMatcher$None'
p34630
sg15
(lp34631
sg17
(lp34632
sg19
(lp34633
sg21
I0
sba(iArchitecture
Entity
p34634
(dp34635
g11
(lp34636
sg13
S'com.google.common.base.CharMatcher$Or'
p34637
sg15
(lp34638
sg17
(lp34639
sg19
(lp34640
sg21
I0
sba(iArchitecture
Entity
p34641
(dp34642
g11
(lp34643
sg13
S'com.google.common.base.CharMatcher$RangesMatcher'
p34644
sg15
(lp34645
sg17
(lp34646
sg19
(lp34647
sg21
I0
sba(iArchitecture
Entity
p34648
(dp34649
g11
(lp34650
sg13
S'com.google.common.base.CharMatcher$SingleWidth'
p34651
sg15
(lp34652
sg17
(lp34653
sg19
(lp34654
sg21
I0
sba(iArchitecture
Entity
p34655
(dp34656
g11
(lp34657
sg13
S'com.google.common.base.CharMatcher$Whitespace'
p34658
sg15
(lp34659
sg17
(lp34660
sg19
(lp34661
sg21
I0
sba(iArchitecture
Entity
p34662
(dp34663
g11
(lp34664
sg13
S'com.google.common.base.CommonMatcher'
p34665
sg15
(lp34666
sg17
(lp34667
sg19
(lp34668
sg21
I0
sba(iArchitecture
Entity
p34669
(dp34670
g11
(lp34671
sg13
S'com.google.common.base.CommonPattern'
p34672
sg15
(lp34673
sg17
(lp34674
sg19
(lp34675
sg21
I0
sba(iArchitecture
Entity
p34676
(dp34677
g11
(lp34678
sg13
S'com.google.common.base.Converter'
p34679
sg15
(lp34680
sg17
(lp34681
sg19
(lp34682
sg21
I0
sba(iArchitecture
Entity
p34683
(dp34684
g11
(lp34685
sg13
S'com.google.common.base.Converter$1'
p34686
sg15
(lp34687
sg17
(lp34688
sg19
(lp34689
sg21
I0
sba(iArchitecture
Entity
p34690
(dp34691
g11
(lp34692
sg13
S'com.google.common.base.Converter$1$1'
p34693
sg15
(lp34694
sg17
(lp34695
sg19
(lp34696
sg21
I0
sba(iArchitecture
Entity
p34697
(dp34698
g11
(lp34699
sg13
S'com.google.common.base.Converter$ConverterComposition'
p34700
sg15
(lp34701
sg17
(lp34702
sg19
(lp34703
sg21
I0
sba(iArchitecture
Entity
p34704
(dp34705
g11
(lp34706
sg13
S'com.google.common.base.Converter$FunctionBasedConverter'
p34707
sg15
(lp34708
sg17
(lp34709
sg19
(lp34710
sg21
I0
sba(iArchitecture
Entity
p34711
(dp34712
g11
(lp34713
sg13
S'com.google.common.base.Converter$IdentityConverter'
p34714
sg15
(lp34715
sg17
(lp34716
sg19
(lp34717
sg21
I0
sba(iArchitecture
Entity
p34718
(dp34719
g11
(lp34720
sg13
S'com.google.common.base.Converter$ReverseConverter'
p34721
sg15
(lp34722
sg17
(lp34723
sg19
(lp34724
sg21
I0
sba(iArchitecture
Entity
p34725
(dp34726
g11
(lp34727
sg13
S'com.google.common.base.Enums'
p34728
sg15
(lp34729
sg17
(lp34730
sg19
(lp34731
sg21
I0
sba(iArchitecture
Entity
p34732
(dp34733
g11
(lp34734
sg13
S'com.google.common.base.Enums$StringConverter'
p34735
sg15
(lp34736
sg17
(lp34737
sg19
(lp34738
sg21
I0
sba(iArchitecture
Entity
p34739
(dp34740
g11
(lp34741
sg13
S'com.google.common.base.Equivalence'
p34742
sg15
(lp34743
sg17
(lp34744
sg19
(lp34745
sg21
I0
sba(iArchitecture
Entity
p34746
(dp34747
g11
(lp34748
sg13
S'com.google.common.base.Equivalence$1'
p34749
sg15
(lp34750
sg17
(lp34751
sg19
(lp34752
sg21
I0
sba(iArchitecture
Entity
p34753
(dp34754
g11
(lp34755
sg13
S'com.google.common.base.Equivalence$Equals'
p34756
sg15
(lp34757
sg17
(lp34758
sg19
(lp34759
sg21
I0
sba(iArchitecture
Entity
p34760
(dp34761
g11
(lp34762
sg13
S'com.google.common.base.Equivalence$EquivalentToPredicate'
p34763
sg15
(lp34764
sg17
(lp34765
sg19
(lp34766
sg21
I0
sba(iArchitecture
Entity
p34767
(dp34768
g11
(lp34769
sg13
S'com.google.common.base.Equivalence$Identity'
p34770
sg15
(lp34771
sg17
(lp34772
sg19
(lp34773
sg21
I0
sba(iArchitecture
Entity
p34774
(dp34775
g11
(lp34776
sg13
S'com.google.common.base.Equivalence$Wrapper'
p34777
sg15
(lp34778
sg17
(lp34779
sg19
(lp34780
sg21
I0
sba(iArchitecture
Entity
p34781
(dp34782
g11
(lp34783
sg13
S'com.google.common.base.ExtraObjectsMethodsForWeb'
p34784
sg15
(lp34785
sg17
(lp34786
sg19
(lp34787
sg21
I0
sba(iArchitecture
Entity
p34788
(dp34789
g11
(lp34790
sg13
S'com.google.common.base.FinalizablePhantomReference'
p34791
sg15
(lp34792
sg17
(lp34793
sg19
(lp34794
sg21
I0
sba(iArchitecture
Entity
p34795
(dp34796
g11
(lp34797
sg13
S'com.google.common.base.FinalizableReference'
p34798
sg15
(lp34799
sg17
(lp34800
sg19
(lp34801
sg21
I0
sba(iArchitecture
Entity
p34802
(dp34803
g11
(lp34804
sg13
S'com.google.common.base.FinalizableReferenceQueue'
p34805
sg15
(lp34806
sg17
(lp34807
sg19
(lp34808
sg21
I0
sba(iArchitecture
Entity
p34809
(dp34810
g11
(lp34811
sg13
S'com.google.common.base.FinalizableReferenceQueue$DecoupledLoader'
p34812
sg15
(lp34813
sg17
(lp34814
sg19
(lp34815
sg21
I0
sba(iArchitecture
Entity
p34816
(dp34817
g11
(lp34818
sg13
S'com.google.common.base.FinalizableReferenceQueue$DirectLoader'
p34819
sg15
(lp34820
sg17
(lp34821
sg19
(lp34822
sg21
I0
sba(iArchitecture
Entity
p34823
(dp34824
g11
(lp34825
sg13
S'com.google.common.base.FinalizableReferenceQueue$FinalizerLoader'
p34826
sg15
(lp34827
sg17
(lp34828
sg19
(lp34829
sg21
I0
sba(iArchitecture
Entity
p34830
(dp34831
g11
(lp34832
sg13
S'com.google.common.base.FinalizableReferenceQueue$SystemLoader'
p34833
sg15
(lp34834
sg17
(lp34835
sg19
(lp34836
sg21
I0
sba(iArchitecture
Entity
p34837
(dp34838
g11
(lp34839
sg13
S'com.google.common.base.FinalizableSoftReference'
p34840
sg15
(lp34841
sg17
(lp34842
sg19
(lp34843
sg21
I0
sba(iArchitecture
Entity
p34844
(dp34845
g11
(lp34846
sg13
S'com.google.common.base.FinalizableWeakReference'
p34847
sg15
(lp34848
sg17
(lp34849
sg19
(lp34850
sg21
I0
sba(iArchitecture
Entity
p34851
(dp34852
g11
(lp34853
sg13
S'com.google.common.base.Function'
p34854
sg15
(lp34855
sg17
(lp34856
sg19
(lp34857
sg21
I0
sba(iArchitecture
Entity
p34858
(dp34859
g11
(lp34860
sg13
S'com.google.common.base.FunctionalEquivalence'
p34861
sg15
(lp34862
sg17
(lp34863
sg19
(lp34864
sg21
I0
sba(iArchitecture
Entity
p34865
(dp34866
g11
(lp34867
sg13
S'com.google.common.base.Functions'
p34868
sg15
(lp34869
sg17
(lp34870
sg19
(lp34871
sg21
I0
sba(iArchitecture
Entity
p34872
(dp34873
g11
(lp34874
sg13
S'com.google.common.base.Functions$1'
p34875
sg15
(lp34876
sg17
(lp34877
sg19
(lp34878
sg21
I0
sba(iArchitecture
Entity
p34879
(dp34880
g11
(lp34881
sg13
S'com.google.common.base.Functions$ConstantFunction'
p34882
sg15
(lp34883
sg17
(lp34884
sg19
(lp34885
sg21
I0
sba(iArchitecture
Entity
p34886
(dp34887
g11
(lp34888
sg13
S'com.google.common.base.Functions$ForMapWithDefault'
p34889
sg15
(lp34890
sg17
(lp34891
sg19
(lp34892
sg21
I0
sba(iArchitecture
Entity
p34893
(dp34894
g11
(lp34895
sg13
S'com.google.common.base.Functions$FunctionComposition'
p34896
sg15
(lp34897
sg17
(lp34898
sg19
(lp34899
sg21
I0
sba(iArchitecture
Entity
p34900
(dp34901
g11
(lp34902
sg13
S'com.google.common.base.Functions$FunctionForMapNoDefault'
p34903
sg15
(lp34904
sg17
(lp34905
sg19
(lp34906
sg21
I0
sba(iArchitecture
Entity
p34907
(dp34908
g11
(lp34909
sg13
S'com.google.common.base.Functions$IdentityFunction'
p34910
sg15
(lp34911
sg17
(lp34912
sg19
(lp34913
sg21
I0
sba(iArchitecture
Entity
p34914
(dp34915
g11
(lp34916
sg13
S'com.google.common.base.Functions$PredicateFunction'
p34917
sg15
(lp34918
sg17
(lp34919
sg19
(lp34920
sg21
I0
sba(iArchitecture
Entity
p34921
(dp34922
g11
(lp34923
sg13
S'com.google.common.base.Functions$SupplierFunction'
p34924
sg15
(lp34925
sg17
(lp34926
sg19
(lp34927
sg21
I0
sba(iArchitecture
Entity
p34928
(dp34929
g11
(lp34930
sg13
S'com.google.common.base.Functions$ToStringFunction'
p34931
sg15
(lp34932
sg17
(lp34933
sg19
(lp34934
sg21
I0
sba(iArchitecture
Entity
p34935
(dp34936
g11
(lp34937
sg13
S'com.google.common.base.GwtSerializationDependencies'
p34938
sg15
(lp34939
sg17
(lp34940
sg19
(lp34941
sg21
I0
sba(iArchitecture
Entity
p34942
(dp34943
g11
(lp34944
sg13
S'com.google.common.base.GwtSerializationDependencies$OptionalDependencies'
p34945
sg15
(lp34946
sg17
(lp34947
sg19
(lp34948
sg21
I0
sba(iArchitecture
Entity
p34949
(dp34950
g11
(lp34951
sg13
S'com.google.common.base.JdkPattern'
p34952
sg15
(lp34953
sg17
(lp34954
sg19
(lp34955
sg21
I0
sba(iArchitecture
Entity
p34956
(dp34957
g11
(lp34958
sg13
S'com.google.common.base.JdkPattern$JdkMatcher'
p34959
sg15
(lp34960
sg17
(lp34961
sg19
(lp34962
sg21
I0
sba(iArchitecture
Entity
p34963
(dp34964
g11
(lp34965
sg13
S'com.google.common.base.Joiner'
p34966
sg15
(lp34967
sg17
(lp34968
sg19
(lp34969
sg21
I0
sba(iArchitecture
Entity
p34970
(dp34971
g11
(lp34972
sg13
S'com.google.common.base.Joiner$1'
p34973
sg15
(lp34974
sg17
(lp34975
sg19
(lp34976
sg21
I0
sba(iArchitecture
Entity
p34977
(dp34978
g11
(lp34979
sg13
S'com.google.common.base.Joiner$2'
p34980
sg15
(lp34981
sg17
(lp34982
sg19
(lp34983
sg21
I0
sba(iArchitecture
Entity
p34984
(dp34985
g11
(lp34986
sg13
S'com.google.common.base.Joiner$3'
p34987
sg15
(lp34988
sg17
(lp34989
sg19
(lp34990
sg21
I0
sba(iArchitecture
Entity
p34991
(dp34992
g11
(lp34993
sg13
S'com.google.common.base.Joiner$MapJoiner'
p34994
sg15
(lp34995
sg17
(lp34996
sg19
(lp34997
sg21
I0
sba(iArchitecture
Entity
p34998
(dp34999
g11
(lp35000
sg13
S'com.google.common.base.MoreObjects'
p35001
sg15
(lp35002
sg17
(lp35003
sg19
(lp35004
sg21
I0
sba(iArchitecture
Entity
p35005
(dp35006
g11
(lp35007
sg13
S'com.google.common.base.MoreObjects$1'
p35008
sg15
(lp35009
sg17
(lp35010
sg19
(lp35011
sg21
I0
sba(iArchitecture
Entity
p35012
(dp35013
g11
(lp35014
sg13
S'com.google.common.base.MoreObjects$ToStringHelper'
p35015
sg15
(lp35016
sg17
(lp35017
sg19
(lp35018
sg21
I0
sba(iArchitecture
Entity
p35019
(dp35020
g11
(lp35021
sg13
S'com.google.common.base.MoreObjects$ToStringHelper$ValueHolder'
p35022
sg15
(lp35023
sg17
(lp35024
sg19
(lp35025
sg21
I0
sba(iArchitecture
Entity
p35026
(dp35027
g11
(lp35028
sg13
S'com.google.common.base.Objects'
p35029
sg15
(lp35030
sg17
(lp35031
sg19
(lp35032
sg21
I0
sba(iArchitecture
Entity
p35033
(dp35034
g11
(lp35035
sg13
S'com.google.common.base.Objects$1'
p35036
sg15
(lp35037
sg17
(lp35038
sg19
(lp35039
sg21
I0
sba(iArchitecture
Entity
p35040
(dp35041
g11
(lp35042
sg13
S'com.google.common.base.Objects$ToStringHelper'
p35043
sg15
(lp35044
sg17
(lp35045
sg19
(lp35046
sg21
I0
sba(iArchitecture
Entity
p35047
(dp35048
g11
(lp35049
sg13
S'com.google.common.base.Objects$ToStringHelper$ValueHolder'
p35050
sg15
(lp35051
sg17
(lp35052
sg19
(lp35053
sg21
I0
sba(iArchitecture
Entity
p35054
(dp35055
g11
(lp35056
sg13
S'com.google.common.base.Optional$1'
p35057
sg15
(lp35058
sg17
(lp35059
sg19
(lp35060
sg21
I0
sba(iArchitecture
Entity
p35061
(dp35062
g11
(lp35063
sg13
S'com.google.common.base.Optional$1$1'
p35064
sg15
(lp35065
sg17
(lp35066
sg19
(lp35067
sg21
I0
sba(iArchitecture
Entity
p35068
(dp35069
g11
(lp35070
sg13
S'com.google.common.base.PairwiseEquivalence'
p35071
sg15
(lp35072
sg17
(lp35073
sg19
(lp35074
sg21
I0
sba(iArchitecture
Entity
p35075
(dp35076
g11
(lp35077
sg13
S'com.google.common.base.PatternCompiler'
p35078
sg15
(lp35079
sg17
(lp35080
sg19
(lp35081
sg21
I0
sba(iArchitecture
Entity
p35082
(dp35083
g11
(lp35084
sg13
S'com.google.common.base.Platform'
p35085
sg15
(lp35086
sg17
(lp35087
sg19
(lp35088
sg21
I0
sba(iArchitecture
Entity
p35089
(dp35090
g11
(lp35091
sg13
S'com.google.common.base.Platform$1'
p35092
sg15
(lp35093
sg17
(lp35094
sg19
(lp35095
sg21
I0
sba(iArchitecture
Entity
p35096
(dp35097
g11
(lp35098
sg13
S'com.google.common.base.Platform$JdkPatternCompiler'
p35099
sg15
(lp35100
sg17
(lp35101
sg19
(lp35102
sg21
I0
sba(iArchitecture
Entity
p35103
(dp35104
g11
(lp35105
sg13
S'com.google.common.base.Predicate'
p35106
sg15
(lp35107
sg17
(lp35108
sg19
(lp35109
sg21
I0
sba(iArchitecture
Entity
p35110
(dp35111
g11
(lp35112
sg13
S'com.google.common.base.Predicates'
p35113
sg15
(lp35114
sg17
(lp35115
sg19
(lp35116
sg21
I0
sba(iArchitecture
Entity
p35117
(dp35118
g11
(lp35119
sg13
S'com.google.common.base.Predicates$1'
p35120
sg15
(lp35121
sg17
(lp35122
sg19
(lp35123
sg21
I0
sba(iArchitecture
Entity
p35124
(dp35125
g11
(lp35126
sg13
S'com.google.common.base.Predicates$AndPredicate'
p35127
sg15
(lp35128
sg17
(lp35129
sg19
(lp35130
sg21
I0
sba(iArchitecture
Entity
p35131
(dp35132
g11
(lp35133
sg13
S'com.google.common.base.Predicates$CompositionPredicate'
p35134
sg15
(lp35135
sg17
(lp35136
sg19
(lp35137
sg21
I0
sba(iArchitecture
Entity
p35138
(dp35139
g11
(lp35140
sg13
S'com.google.common.base.Predicates$ContainsPatternFromStringPredicate'
p35141
sg15
(lp35142
sg17
(lp35143
sg19
(lp35144
sg21
I0
sba(iArchitecture
Entity
p35145
(dp35146
g11
(lp35147
sg13
S'com.google.common.base.Predicates$ContainsPatternPredicate'
p35148
sg15
(lp35149
sg17
(lp35150
sg19
(lp35151
sg21
I0
sba(iArchitecture
Entity
p35152
(dp35153
g11
(lp35154
sg13
S'com.google.common.base.Predicates$InPredicate'
p35155
sg15
(lp35156
sg17
(lp35157
sg19
(lp35158
sg21
I0
sba(iArchitecture
Entity
p35159
(dp35160
g11
(lp35161
sg13
S'com.google.common.base.Predicates$InstanceOfPredicate'
p35162
sg15
(lp35163
sg17
(lp35164
sg19
(lp35165
sg21
I0
sba(iArchitecture
Entity
p35166
(dp35167
g11
(lp35168
sg13
S'com.google.common.base.Predicates$IsEqualToPredicate'
p35169
sg15
(lp35170
sg17
(lp35171
sg19
(lp35172
sg21
I0
sba(iArchitecture
Entity
p35173
(dp35174
g11
(lp35175
sg13
S'com.google.common.base.Predicates$NotPredicate'
p35176
sg15
(lp35177
sg17
(lp35178
sg19
(lp35179
sg21
I0
sba(iArchitecture
Entity
p35180
(dp35181
g11
(lp35182
sg13
S'com.google.common.base.Predicates$ObjectPredicate'
p35183
sg15
(lp35184
sg17
(lp35185
sg19
(lp35186
sg21
I0
sba(iArchitecture
Entity
p35187
(dp35188
g11
(lp35189
sg13
S'com.google.common.base.Predicates$ObjectPredicate$1'
p35190
sg15
(lp35191
sg17
(lp35192
sg19
(lp35193
sg21
I0
sba(iArchitecture
Entity
p35194
(dp35195
g11
(lp35196
sg13
S'com.google.common.base.Predicates$ObjectPredicate$2'
p35197
sg15
(lp35198
sg17
(lp35199
sg19
(lp35200
sg21
I0
sba(iArchitecture
Entity
p35201
(dp35202
g11
(lp35203
sg13
S'com.google.common.base.Predicates$ObjectPredicate$3'
p35204
sg15
(lp35205
sg17
(lp35206
sg19
(lp35207
sg21
I0
sba(iArchitecture
Entity
p35208
(dp35209
g11
(lp35210
sg13
S'com.google.common.base.Predicates$ObjectPredicate$4'
p35211
sg15
(lp35212
sg17
(lp35213
sg19
(lp35214
sg21
I0
sba(iArchitecture
Entity
p35215
(dp35216
g11
(lp35217
sg13
S'com.google.common.base.Predicates$OrPredicate'
p35218
sg15
(lp35219
sg17
(lp35220
sg19
(lp35221
sg21
I0
sba(iArchitecture
Entity
p35222
(dp35223
g11
(lp35224
sg13
S'com.google.common.base.Predicates$SubtypeOfPredicate'
p35225
sg15
(lp35226
sg17
(lp35227
sg19
(lp35228
sg21
I0
sba(iArchitecture
Entity
p35229
(dp35230
g11
(lp35231
sg13
S'com.google.common.base.SmallCharMatcher'
p35232
sg15
(lp35233
sg17
(lp35234
sg19
(lp35235
sg21
I0
sba(iArchitecture
Entity
p35236
(dp35237
g11
(lp35238
sg13
S'com.google.common.base.Splitter'
p35239
sg15
(lp35240
sg17
(lp35241
sg19
(lp35242
sg21
I0
sba(iArchitecture
Entity
p35243
(dp35244
g11
(lp35245
sg13
S'com.google.common.base.Splitter$1'
p35246
sg15
(lp35247
sg17
(lp35248
sg19
(lp35249
sg21
I0
sba(iArchitecture
Entity
p35250
(dp35251
g11
(lp35252
sg13
S'com.google.common.base.Splitter$1$1'
p35253
sg15
(lp35254
sg17
(lp35255
sg19
(lp35256
sg21
I0
sba(iArchitecture
Entity
p35257
(dp35258
g11
(lp35259
sg13
S'com.google.common.base.Splitter$2'
p35260
sg15
(lp35261
sg17
(lp35262
sg19
(lp35263
sg21
I0
sba(iArchitecture
Entity
p35264
(dp35265
g11
(lp35266
sg13
S'com.google.common.base.Splitter$2$1'
p35267
sg15
(lp35268
sg17
(lp35269
sg19
(lp35270
sg21
I0
sba(iArchitecture
Entity
p35271
(dp35272
g11
(lp35273
sg13
S'com.google.common.base.Splitter$3'
p35274
sg15
(lp35275
sg17
(lp35276
sg19
(lp35277
sg21
I0
sba(iArchitecture
Entity
p35278
(dp35279
g11
(lp35280
sg13
S'com.google.common.base.Splitter$3$1'
p35281
sg15
(lp35282
sg17
(lp35283
sg19
(lp35284
sg21
I0
sba(iArchitecture
Entity
p35285
(dp35286
g11
(lp35287
sg13
S'com.google.common.base.Splitter$4'
p35288
sg15
(lp35289
sg17
(lp35290
sg19
(lp35291
sg21
I0
sba(iArchitecture
Entity
p35292
(dp35293
g11
(lp35294
sg13
S'com.google.common.base.Splitter$4$1'
p35295
sg15
(lp35296
sg17
(lp35297
sg19
(lp35298
sg21
I0
sba(iArchitecture
Entity
p35299
(dp35300
g11
(lp35301
sg13
S'com.google.common.base.Splitter$5'
p35302
sg15
(lp35303
sg17
(lp35304
sg19
(lp35305
sg21
I0
sba(iArchitecture
Entity
p35306
(dp35307
g11
(lp35308
sg13
S'com.google.common.base.Splitter$MapSplitter'
p35309
sg15
(lp35310
sg17
(lp35311
sg19
(lp35312
sg21
I0
sba(iArchitecture
Entity
p35313
(dp35314
g11
(lp35315
sg13
S'com.google.common.base.Splitter$SplittingIterator'
p35316
sg15
(lp35317
sg17
(lp35318
sg19
(lp35319
sg21
I0
sba(iArchitecture
Entity
p35320
(dp35321
g11
(lp35322
sg13
S'com.google.common.base.Splitter$Strategy'
p35323
sg15
(lp35324
sg17
(lp35325
sg19
(lp35326
sg21
I0
sba(iArchitecture
Entity
p35327
(dp35328
g11
(lp35329
sg13
S'com.google.common.base.StandardSystemProperty'
p35330
sg15
(lp35331
sg17
(lp35332
sg19
(lp35333
sg21
I0
sba(iArchitecture
Entity
p35334
(dp35335
g11
(lp35336
sg13
S'com.google.common.base.Stopwatch'
p35337
sg15
(lp35338
sg17
(lp35339
sg19
(lp35340
sg21
I0
sba(iArchitecture
Entity
p35341
(dp35342
g11
(lp35343
sg13
S'com.google.common.base.Stopwatch$1'
p35344
sg15
(lp35345
sg17
(lp35346
sg19
(lp35347
sg21
I0
sba(iArchitecture
Entity
p35348
(dp35349
g11
(lp35350
sg13
S'com.google.common.base.Suppliers'
p35351
sg15
(lp35352
sg17
(lp35353
sg19
(lp35354
sg21
I0
sba(iArchitecture
Entity
p35355
(dp35356
g11
(lp35357
sg13
S'com.google.common.base.Suppliers$ExpiringMemoizingSupplier'
p35358
sg15
(lp35359
sg17
(lp35360
sg19
(lp35361
sg21
I0
sba(iArchitecture
Entity
p35362
(dp35363
g11
(lp35364
sg13
S'com.google.common.base.Suppliers$MemoizingSupplier'
p35365
sg15
(lp35366
sg17
(lp35367
sg19
(lp35368
sg21
I0
sba(iArchitecture
Entity
p35369
(dp35370
g11
(lp35371
sg13
S'com.google.common.base.Suppliers$SupplierComposition'
p35372
sg15
(lp35373
sg17
(lp35374
sg19
(lp35375
sg21
I0
sba(iArchitecture
Entity
p35376
(dp35377
g11
(lp35378
sg13
S'com.google.common.base.Suppliers$SupplierFunction'
p35379
sg15
(lp35380
sg17
(lp35381
sg19
(lp35382
sg21
I0
sba(iArchitecture
Entity
p35383
(dp35384
g11
(lp35385
sg13
S'com.google.common.base.Suppliers$SupplierFunctionImpl'
p35386
sg15
(lp35387
sg17
(lp35388
sg19
(lp35389
sg21
I0
sba(iArchitecture
Entity
p35390
(dp35391
g11
(lp35392
sg13
S'com.google.common.base.Suppliers$SupplierOfInstance'
p35393
sg15
(lp35394
sg17
(lp35395
sg19
(lp35396
sg21
I0
sba(iArchitecture
Entity
p35397
(dp35398
g11
(lp35399
sg13
S'com.google.common.base.Suppliers$ThreadSafeSupplier'
p35400
sg15
(lp35401
sg17
(lp35402
sg19
(lp35403
sg21
I0
sba(iArchitecture
Entity
p35404
(dp35405
g11
(lp35406
V2866
p35407
ag35407
ag35407
ag35407
ag35407
asg13
S'com.google.common.base.Throwables'
p35408
sg15
(lp35409
VException cause can be set by initCause method which can lead to a circular reference:\u000a```java\u000aException cause = new Exception();\u000aException exception = new Exception(cause);\u000acause.initCause(exception);\u000a```\u000aCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\u000a\u000aIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. 
p35410
aVException cause can be set by initCause method which can lead to a circular reference:\u000a```java\u000aException cause = new Exception();\u000aException exception = new Exception(cause);\u000acause.initCause(exception);\u000a```\u000aCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\u000a\u000aIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. 
p35411
aVException cause can be set by initCause method which can lead to a circular reference:\u000a```java\u000aException cause = new Exception();\u000aException exception = new Exception(cause);\u000acause.initCause(exception);\u000a```\u000aCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\u000a\u000aIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. 
p35412
aVException cause can be set by initCause method which can lead to a circular reference:\u000a```java\u000aException cause = new Exception();\u000aException exception = new Exception(cause);\u000acause.initCause(exception);\u000a```\u000aCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\u000a\u000aIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. 
p35413
aVException cause can be set by initCause method which can lead to a circular reference:\u000a```java\u000aException cause = new Exception();\u000aException exception = new Exception(cause);\u000acause.initCause(exception);\u000a```\u000aCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\u000a\u000aIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. 
p35414
asg17
(lp35415
(lp35416
I0
aag35416
ag35416
ag35416
ag35416
asg19
(lp35417
VMake Throwables.getCausalChain and Throwables.getRootCause cyclic reference safe
p35418
ag35418
ag35418
ag35418
ag35418
asg21
I0
sba(iArchitecture
Entity
p35419
(dp35420
g11
(lp35421
g35407
ag35407
ag35407
ag35407
ag35407
asg13
S'com.google.common.base.Throwables$1'
p35422
sg15
(lp35423
VException cause can be set by initCause method which can lead to a circular reference:\u000a```java\u000aException cause = new Exception();\u000aException exception = new Exception(cause);\u000acause.initCause(exception);\u000a```\u000aCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\u000a\u000aIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. 
p35424
aVException cause can be set by initCause method which can lead to a circular reference:\u000a```java\u000aException cause = new Exception();\u000aException exception = new Exception(cause);\u000acause.initCause(exception);\u000a```\u000aCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\u000a\u000aIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. 
p35425
aVException cause can be set by initCause method which can lead to a circular reference:\u000a```java\u000aException cause = new Exception();\u000aException exception = new Exception(cause);\u000acause.initCause(exception);\u000a```\u000aCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\u000a\u000aIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. 
p35426
aVException cause can be set by initCause method which can lead to a circular reference:\u000a```java\u000aException cause = new Exception();\u000aException exception = new Exception(cause);\u000acause.initCause(exception);\u000a```\u000aCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\u000a\u000aIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. 
p35427
aVException cause can be set by initCause method which can lead to a circular reference:\u000a```java\u000aException cause = new Exception();\u000aException exception = new Exception(cause);\u000acause.initCause(exception);\u000a```\u000aCalling `Throwables.getCausalChain( exception )` or `Throwables.getRootCause( exception )` could lead to an infinitive loop.\u000a\u000aIt is good idea to use a `Set` to add cause exceptions to avoid iterating over a circular reference when `Set.add` method returns `false`. 
p35428
asg17
(lp35429
g35416
ag35416
ag35416
ag35416
ag35416
asg19
(lp35430
g35418
ag35418
ag35418
ag35418
ag35418
asg21
I0
sba(iArchitecture
Entity
p35431
(dp35432
g11
(lp35433
sg13
S'com.google.common.base.Ticker'
p35434
sg15
(lp35435
sg17
(lp35436
sg19
(lp35437
sg21
I0
sba(iArchitecture
Entity
p35438
(dp35439
g11
(lp35440
sg13
S'com.google.common.base.Ticker$1'
p35441
sg15
(lp35442
sg17
(lp35443
sg19
(lp35444
sg21
I0
sba(iArchitecture
Entity
p35445
(dp35446
g11
(lp35447
sg13
S'com.google.common.base.Verify'
p35448
sg15
(lp35449
sg17
(lp35450
sg19
(lp35451
sg21
I0
sba(iArchitecture
Entity
p35452
(dp35453
g11
(lp35454
sg13
S'com.google.common.base.VerifyException'
p35455
sg15
(lp35456
sg17
(lp35457
sg19
(lp35458
sg21
I0
sba(iArchitecture
Entity
p35459
(dp35460
g11
(lp35461
sg13
S'com.google.common.io.Flushables'
p35462
sg15
(lp35463
sg17
(lp35464
sg19
(lp35465
sg21
I0
sba(iArchitecture
Entity
p35466
(dp35467
g11
(lp35468
sg13
S'com.google.common.util.concurrent.AtomicDouble'
p35469
sg15
(lp35470
sg17
(lp35471
sg19
(lp35472
sg21
I0
sba(iArchitecture
Entity
p35473
(dp35474
g11
(lp35475
sg13
S'com.google.common.util.concurrent.AtomicDoubleArray'
p35476
sg15
(lp35477
sg17
(lp35478
sg19
(lp35479
sg21
I0
sba(iArchitecture
Entity
p35480
(dp35481
g11
(lp35482
sg13
S'com.google.common.util.concurrent.Atomics'
p35483
sg15
(lp35484
sg17
(lp35485
sg19
(lp35486
sg21
I0
sba(iArchitecture
Entity
p35487
(dp35488
g11
(lp35489
sg13
S'com.google.common.util.concurrent.ForwardingBlockingQueue'
p35490
sg15
(lp35491
sg17
(lp35492
sg19
(lp35493
sg21
I0
sbasg1055
(lp35494
g34371
ag34378
ag34385
ag34392
ag34399
ag34406
ag34413
ag34420
ag34427
ag34434
ag34441
ag34448
ag34455
ag34462
ag34469
ag34476
ag34483
ag34490
ag34497
ag34504
ag34511
ag34518
ag34525
ag34532
ag34539
ag34546
ag34553
ag34560
ag34567
ag34574
ag34581
ag34588
ag34595
ag34602
ag34609
ag34616
ag34623
ag34630
ag34637
ag34644
ag34651
ag34658
ag34665
ag34672
ag34679
ag34686
ag34693
ag34700
ag34707
ag34714
ag34721
ag34728
ag34735
ag34742
ag34749
ag34756
ag34763
ag34770
ag34777
ag34784
ag34791
ag34798
ag34805
ag34812
ag34819
ag34826
ag34833
ag34840
ag34847
ag34854
ag34861
ag34868
ag34875
ag34882
ag34889
ag34896
ag34903
ag34910
ag34917
ag34924
ag34931
ag34938
ag34945
ag34952
ag34959
ag34966
ag34973
ag34980
ag34987
ag34994
ag35001
ag35008
ag35015
ag35022
ag35029
ag35036
ag35043
ag35050
ag35057
ag35064
ag35071
ag35078
ag35085
ag35092
ag35099
ag35106
ag35113
ag35120
ag35127
ag35134
ag35141
ag35148
ag35155
ag35162
ag35169
ag35176
ag35183
ag35190
ag35197
ag35204
ag35211
ag35218
ag35225
ag35232
ag35239
ag35246
ag35253
ag35260
ag35267
ag35274
ag35281
ag35288
ag35295
ag35302
ag35309
ag35316
ag35323
ag35330
ag35337
ag35344
ag35351
ag35358
ag35365
ag35372
ag35379
ag35386
ag35393
ag35400
ag35408
ag35422
ag35434
ag35441
ag35448
ag35455
ag35462
ag35469
ag35476
ag35483
ag35490
asg21
I0
sg1057
S'com.google.common.base.ss'
p35495
sba(iArchitecture
Cluster
p35496
(dp35497
g7
(lp35498
(iArchitecture
Entity
p35499
(dp35500
g11
(lp35501
sg13
S'com.google.common.base.Preconditions'
p35502
sg15
(lp35503
sg17
(lp35504
sg19
(lp35505
sg21
I0
sba(iArchitecture
Entity
p35506
(dp35507
g11
(lp35508
sg13
S'com.google.common.base.Utf8'
p35509
sg15
(lp35510
sg17
(lp35511
sg19
(lp35512
sg21
I0
sba(iArchitecture
Entity
p35513
(dp35514
g11
(lp35515
sg13
S'com.google.common.cache.AbstractCache'
p35516
sg15
(lp35517
sg17
(lp35518
sg19
(lp35519
sg21
I0
sba(iArchitecture
Entity
p35520
(dp35521
g11
(lp35522
sg13
S'com.google.common.cache.AbstractCache$SimpleStatsCounter'
p35523
sg15
(lp35524
sg17
(lp35525
sg19
(lp35526
sg21
I0
sba(iArchitecture
Entity
p35527
(dp35528
g11
(lp35529
sg13
S'com.google.common.cache.AbstractCache$StatsCounter'
p35530
sg15
(lp35531
sg17
(lp35532
sg19
(lp35533
sg21
I0
sba(iArchitecture
Entity
p35534
(dp35535
g11
(lp35536
sg13
S'com.google.common.cache.Cache'
p35537
sg15
(lp35538
sg17
(lp35539
sg19
(lp35540
sg21
I0
sba(iArchitecture
Entity
p35541
(dp35542
g11
(lp35543
sg13
S'com.google.common.cache.CacheBuilder'
p35544
sg15
(lp35545
sg17
(lp35546
sg19
(lp35547
sg21
I0
sba(iArchitecture
Entity
p35548
(dp35549
g11
(lp35550
sg13
S'com.google.common.cache.CacheBuilder$1'
p35551
sg15
(lp35552
sg17
(lp35553
sg19
(lp35554
sg21
I0
sba(iArchitecture
Entity
p35555
(dp35556
g11
(lp35557
sg13
S'com.google.common.cache.CacheBuilder$2'
p35558
sg15
(lp35559
sg17
(lp35560
sg19
(lp35561
sg21
I0
sba(iArchitecture
Entity
p35562
(dp35563
g11
(lp35564
sg13
S'com.google.common.cache.CacheBuilder$3'
p35565
sg15
(lp35566
sg17
(lp35567
sg19
(lp35568
sg21
I0
sba(iArchitecture
Entity
p35569
(dp35570
g11
(lp35571
sg13
S'com.google.common.cache.CacheBuilder$NullListener'
p35572
sg15
(lp35573
sg17
(lp35574
sg19
(lp35575
sg21
I0
sba(iArchitecture
Entity
p35576
(dp35577
g11
(lp35578
sg13
S'com.google.common.cache.CacheBuilder$OneWeigher'
p35579
sg15
(lp35580
sg17
(lp35581
sg19
(lp35582
sg21
I0
sba(iArchitecture
Entity
p35583
(dp35584
g11
(lp35585
sg13
S'com.google.common.cache.CacheBuilderSpec'
p35586
sg15
(lp35587
sg17
(lp35588
sg19
(lp35589
sg21
I0
sba(iArchitecture
Entity
p35590
(dp35591
g11
(lp35592
sg13
S'com.google.common.cache.CacheBuilderSpec$1'
p35593
sg15
(lp35594
sg17
(lp35595
sg19
(lp35596
sg21
I0
sba(iArchitecture
Entity
p35597
(dp35598
g11
(lp35599
sg13
S'com.google.common.cache.CacheBuilderSpec$AccessDurationParser'
p35600
sg15
(lp35601
sg17
(lp35602
sg19
(lp35603
sg21
I0
sba(iArchitecture
Entity
p35604
(dp35605
g11
(lp35606
sg13
S'com.google.common.cache.CacheBuilderSpec$ConcurrencyLevelParser'
p35607
sg15
(lp35608
sg17
(lp35609
sg19
(lp35610
sg21
I0
sba(iArchitecture
Entity
p35611
(dp35612
g11
(lp35613
sg13
S'com.google.common.cache.CacheBuilderSpec$DurationParser'
p35614
sg15
(lp35615
sg17
(lp35616
sg19
(lp35617
sg21
I0
sba(iArchitecture
Entity
p35618
(dp35619
g11
(lp35620
sg13
S'com.google.common.cache.CacheBuilderSpec$InitialCapacityParser'
p35621
sg15
(lp35622
sg17
(lp35623
sg19
(lp35624
sg21
I0
sba(iArchitecture
Entity
p35625
(dp35626
g11
(lp35627
sg13
S'com.google.common.cache.CacheBuilderSpec$IntegerParser'
p35628
sg15
(lp35629
sg17
(lp35630
sg19
(lp35631
sg21
I0
sba(iArchitecture
Entity
p35632
(dp35633
g11
(lp35634
sg13
S'com.google.common.cache.CacheBuilderSpec$KeyStrengthParser'
p35635
sg15
(lp35636
sg17
(lp35637
sg19
(lp35638
sg21
I0
sba(iArchitecture
Entity
p35639
(dp35640
g11
(lp35641
sg13
S'com.google.common.cache.CacheBuilderSpec$LongParser'
p35642
sg15
(lp35643
sg17
(lp35644
sg19
(lp35645
sg21
I0
sba(iArchitecture
Entity
p35646
(dp35647
g11
(lp35648
sg13
S'com.google.common.cache.CacheBuilderSpec$MaximumSizeParser'
p35649
sg15
(lp35650
sg17
(lp35651
sg19
(lp35652
sg21
I0
sba(iArchitecture
Entity
p35653
(dp35654
g11
(lp35655
sg13
S'com.google.common.cache.CacheBuilderSpec$MaximumWeightParser'
p35656
sg15
(lp35657
sg17
(lp35658
sg19
(lp35659
sg21
I0
sba(iArchitecture
Entity
p35660
(dp35661
g11
(lp35662
sg13
S'com.google.common.cache.CacheBuilderSpec$RecordStatsParser'
p35663
sg15
(lp35664
sg17
(lp35665
sg19
(lp35666
sg21
I0
sba(iArchitecture
Entity
p35667
(dp35668
g11
(lp35669
sg13
S'com.google.common.cache.CacheBuilderSpec$RefreshDurationParser'
p35670
sg15
(lp35671
sg17
(lp35672
sg19
(lp35673
sg21
I0
sba(iArchitecture
Entity
p35674
(dp35675
g11
(lp35676
sg13
S'com.google.common.cache.CacheBuilderSpec$ValueParser'
p35677
sg15
(lp35678
sg17
(lp35679
sg19
(lp35680
sg21
I0
sba(iArchitecture
Entity
p35681
(dp35682
g11
(lp35683
sg13
S'com.google.common.cache.CacheBuilderSpec$ValueStrengthParser'
p35684
sg15
(lp35685
sg17
(lp35686
sg19
(lp35687
sg21
I0
sba(iArchitecture
Entity
p35688
(dp35689
g11
(lp35690
sg13
S'com.google.common.cache.CacheBuilderSpec$WriteDurationParser'
p35691
sg15
(lp35692
sg17
(lp35693
sg19
(lp35694
sg21
I0
sba(iArchitecture
Entity
p35695
(dp35696
g11
(lp35697
sg13
S'com.google.common.cache.CacheLoader'
p35698
sg15
(lp35699
sg17
(lp35700
sg19
(lp35701
sg21
I0
sba(iArchitecture
Entity
p35702
(dp35703
g11
(lp35704
sg13
S'com.google.common.cache.CacheLoader$1'
p35705
sg15
(lp35706
sg17
(lp35707
sg19
(lp35708
sg21
I0
sba(iArchitecture
Entity
p35709
(dp35710
g11
(lp35711
sg13
S'com.google.common.cache.CacheLoader$1$1'
p35712
sg15
(lp35713
sg17
(lp35714
sg19
(lp35715
sg21
I0
sba(iArchitecture
Entity
p35716
(dp35717
g11
(lp35718
sg13
S'com.google.common.cache.CacheLoader$FunctionToCacheLoader'
p35719
sg15
(lp35720
sg17
(lp35721
sg19
(lp35722
sg21
I0
sba(iArchitecture
Entity
p35723
(dp35724
g11
(lp35725
sg13
S'com.google.common.cache.CacheLoader$InvalidCacheLoadException'
p35726
sg15
(lp35727
sg17
(lp35728
sg19
(lp35729
sg21
I0
sba(iArchitecture
Entity
p35730
(dp35731
g11
(lp35732
sg13
S'com.google.common.cache.CacheLoader$SupplierToCacheLoader'
p35733
sg15
(lp35734
sg17
(lp35735
sg19
(lp35736
sg21
I0
sba(iArchitecture
Entity
p35737
(dp35738
g11
(lp35739
sg13
S'com.google.common.cache.CacheLoader$UnsupportedLoadingOperationException'
p35740
sg15
(lp35741
sg17
(lp35742
sg19
(lp35743
sg21
I0
sba(iArchitecture
Entity
p35744
(dp35745
g11
(lp35746
sg13
S'com.google.common.cache.CacheStats'
p35747
sg15
(lp35748
sg17
(lp35749
sg19
(lp35750
sg21
I0
sba(iArchitecture
Entity
p35751
(dp35752
g11
(lp35753
sg13
S'com.google.common.cache.ForwardingCache'
p35754
sg15
(lp35755
sg17
(lp35756
sg19
(lp35757
sg21
I0
sba(iArchitecture
Entity
p35758
(dp35759
g11
(lp35760
sg13
S'com.google.common.cache.ForwardingCache$SimpleForwardingCache'
p35761
sg15
(lp35762
sg17
(lp35763
sg19
(lp35764
sg21
I0
sba(iArchitecture
Entity
p35765
(dp35766
g11
(lp35767
sg13
S'com.google.common.cache.ForwardingLoadingCache'
p35768
sg15
(lp35769
sg17
(lp35770
sg19
(lp35771
sg21
I0
sba(iArchitecture
Entity
p35772
(dp35773
g11
(lp35774
sg13
S'com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache'
p35775
sg15
(lp35776
sg17
(lp35777
sg19
(lp35778
sg21
I0
sba(iArchitecture
Entity
p35779
(dp35780
g11
(lp35781
sg13
S'com.google.common.cache.LoadingCache'
p35782
sg15
(lp35783
sg17
(lp35784
sg19
(lp35785
sg21
I0
sba(iArchitecture
Entity
p35786
(dp35787
g11
(lp35788
sg13
S'com.google.common.cache.LocalCache'
p35789
sg15
(lp35790
sg17
(lp35791
sg19
(lp35792
sg21
I0
sba(iArchitecture
Entity
p35793
(dp35794
g11
(lp35795
sg13
S'com.google.common.cache.LocalCache$1'
p35796
sg15
(lp35797
sg17
(lp35798
sg19
(lp35799
sg21
I0
sba(iArchitecture
Entity
p35800
(dp35801
g11
(lp35802
sg13
S'com.google.common.cache.LocalCache$2'
p35803
sg15
(lp35804
sg17
(lp35805
sg19
(lp35806
sg21
I0
sba(iArchitecture
Entity
p35807
(dp35808
g11
(lp35809
sg13
S'com.google.common.cache.LocalCache$AbstractCacheSet'
p35810
sg15
(lp35811
sg17
(lp35812
sg19
(lp35813
sg21
I0
sba(iArchitecture
Entity
p35814
(dp35815
g11
(lp35816
sg13
S'com.google.common.cache.LocalCache$AbstractReferenceEntry'
p35817
sg15
(lp35818
sg17
(lp35819
sg19
(lp35820
sg21
I0
sba(iArchitecture
Entity
p35821
(dp35822
g11
(lp35823
sg13
S'com.google.common.cache.LocalCache$AccessQueue'
p35824
sg15
(lp35825
sg17
(lp35826
sg19
(lp35827
sg21
I0
sba(iArchitecture
Entity
p35828
(dp35829
g11
(lp35830
sg13
S'com.google.common.cache.LocalCache$AccessQueue$1'
p35831
sg15
(lp35832
sg17
(lp35833
sg19
(lp35834
sg21
I0
sba(iArchitecture
Entity
p35835
(dp35836
g11
(lp35837
sg13
S'com.google.common.cache.LocalCache$AccessQueue$2'
p35838
sg15
(lp35839
sg17
(lp35840
sg19
(lp35841
sg21
I0
sba(iArchitecture
Entity
p35842
(dp35843
g11
(lp35844
sg13
S'com.google.common.cache.LocalCache$EntryFactory'
p35845
sg15
(lp35846
sg17
(lp35847
sg19
(lp35848
sg21
I0
sba(iArchitecture
Entity
p35849
(dp35850
g11
(lp35851
sg13
S'com.google.common.cache.LocalCache$EntryFactory$1'
p35852
sg15
(lp35853
sg17
(lp35854
sg19
(lp35855
sg21
I0
sba(iArchitecture
Entity
p35856
(dp35857
g11
(lp35858
sg13
S'com.google.common.cache.LocalCache$EntryFactory$2'
p35859
sg15
(lp35860
sg17
(lp35861
sg19
(lp35862
sg21
I0
sba(iArchitecture
Entity
p35863
(dp35864
g11
(lp35865
sg13
S'com.google.common.cache.LocalCache$EntryFactory$3'
p35866
sg15
(lp35867
sg17
(lp35868
sg19
(lp35869
sg21
I0
sba(iArchitecture
Entity
p35870
(dp35871
g11
(lp35872
sg13
S'com.google.common.cache.LocalCache$EntryFactory$4'
p35873
sg15
(lp35874
sg17
(lp35875
sg19
(lp35876
sg21
I0
sba(iArchitecture
Entity
p35877
(dp35878
g11
(lp35879
sg13
S'com.google.common.cache.LocalCache$EntryFactory$5'
p35880
sg15
(lp35881
sg17
(lp35882
sg19
(lp35883
sg21
I0
sba(iArchitecture
Entity
p35884
(dp35885
g11
(lp35886
sg13
S'com.google.common.cache.LocalCache$EntryFactory$6'
p35887
sg15
(lp35888
sg17
(lp35889
sg19
(lp35890
sg21
I0
sba(iArchitecture
Entity
p35891
(dp35892
g11
(lp35893
sg13
S'com.google.common.cache.LocalCache$EntryFactory$7'
p35894
sg15
(lp35895
sg17
(lp35896
sg19
(lp35897
sg21
I0
sba(iArchitecture
Entity
p35898
(dp35899
g11
(lp35900
sg13
S'com.google.common.cache.LocalCache$EntryFactory$8'
p35901
sg15
(lp35902
sg17
(lp35903
sg19
(lp35904
sg21
I0
sba(iArchitecture
Entity
p35905
(dp35906
g11
(lp35907
sg13
S'com.google.common.cache.LocalCache$EntryIterator'
p35908
sg15
(lp35909
sg17
(lp35910
sg19
(lp35911
sg21
I0
sba(iArchitecture
Entity
p35912
(dp35913
g11
(lp35914
sg13
S'com.google.common.cache.LocalCache$EntrySet'
p35915
sg15
(lp35916
sg17
(lp35917
sg19
(lp35918
sg21
I0
sba(iArchitecture
Entity
p35919
(dp35920
g11
(lp35921
sg13
S'com.google.common.cache.LocalCache$HashIterator'
p35922
sg15
(lp35923
sg17
(lp35924
sg19
(lp35925
sg21
I0
sba(iArchitecture
Entity
p35926
(dp35927
g11
(lp35928
sg13
S'com.google.common.cache.LocalCache$KeyIterator'
p35929
sg15
(lp35930
sg17
(lp35931
sg19
(lp35932
sg21
I0
sba(iArchitecture
Entity
p35933
(dp35934
g11
(lp35935
sg13
S'com.google.common.cache.LocalCache$KeySet'
p35936
sg15
(lp35937
sg17
(lp35938
sg19
(lp35939
sg21
I0
sba(iArchitecture
Entity
p35940
(dp35941
g11
(lp35942
sg13
S'com.google.common.cache.LocalCache$LoadingSerializationProxy'
p35943
sg15
(lp35944
sg17
(lp35945
sg19
(lp35946
sg21
I0
sba(iArchitecture
Entity
p35947
(dp35948
g11
(lp35949
sg13
S'com.google.common.cache.LocalCache$LoadingValueReference'
p35950
sg15
(lp35951
sg17
(lp35952
sg19
(lp35953
sg21
I0
sba(iArchitecture
Entity
p35954
(dp35955
g11
(lp35956
sg13
S'com.google.common.cache.LocalCache$LoadingValueReference$1'
p35957
sg15
(lp35958
sg17
(lp35959
sg19
(lp35960
sg21
I0
sba(iArchitecture
Entity
p35961
(dp35962
g11
(lp35963
sg13
S'com.google.common.cache.LocalCache$LocalLoadingCache'
p35964
sg15
(lp35965
sg17
(lp35966
sg19
(lp35967
sg21
I0
sba(iArchitecture
Entity
p35968
(dp35969
g11
(lp35970
sg13
S'com.google.common.cache.LocalCache$LocalManualCache'
p35971
sg15
(lp35972
sg17
(lp35973
sg19
(lp35974
sg21
I0
sba(iArchitecture
Entity
p35975
(dp35976
g11
(lp35977
sg13
S'com.google.common.cache.LocalCache$LocalManualCache$1'
p35978
sg15
(lp35979
sg17
(lp35980
sg19
(lp35981
sg21
I0
sba(iArchitecture
Entity
p35982
(dp35983
g11
(lp35984
sg13
S'com.google.common.cache.LocalCache$ManualSerializationProxy'
p35985
sg15
(lp35986
sg17
(lp35987
sg19
(lp35988
sg21
I0
sba(iArchitecture
Entity
p35989
(dp35990
g11
(lp35991
sg13
S'com.google.common.cache.LocalCache$NullEntry'
p35992
sg15
(lp35993
sg17
(lp35994
sg19
(lp35995
sg21
I0
sba(iArchitecture
Entity
p35996
(dp35997
g11
(lp35998
sg13
S'com.google.common.cache.LocalCache$ReferenceEntry'
p35999
sg15
(lp36000
sg17
(lp36001
sg19
(lp36002
sg21
I0
sba(iArchitecture
Entity
p36003
(dp36004
g11
(lp36005
sg13
S'com.google.common.cache.LocalCache$Segment'
p36006
sg15
(lp36007
sg17
(lp36008
sg19
(lp36009
sg21
I0
sba(iArchitecture
Entity
p36010
(dp36011
g11
(lp36012
sg13
S'com.google.common.cache.LocalCache$Segment$1'
p36013
sg15
(lp36014
sg17
(lp36015
sg19
(lp36016
sg21
I0
sba(iArchitecture
Entity
p36017
(dp36018
g11
(lp36019
sg13
S'com.google.common.cache.LocalCache$SoftValueReference'
p36020
sg15
(lp36021
sg17
(lp36022
sg19
(lp36023
sg21
I0
sba(iArchitecture
Entity
p36024
(dp36025
g11
(lp36026
sg13
S'com.google.common.cache.LocalCache$Strength'
p36027
sg15
(lp36028
sg17
(lp36029
sg19
(lp36030
sg21
I0
sba(iArchitecture
Entity
p36031
(dp36032
g11
(lp36033
sg13
S'com.google.common.cache.LocalCache$Strength$1'
p36034
sg15
(lp36035
sg17
(lp36036
sg19
(lp36037
sg21
I0
sba(iArchitecture
Entity
p36038
(dp36039
g11
(lp36040
sg13
S'com.google.common.cache.LocalCache$Strength$2'
p36041
sg15
(lp36042
sg17
(lp36043
sg19
(lp36044
sg21
I0
sba(iArchitecture
Entity
p36045
(dp36046
g11
(lp36047
sg13
S'com.google.common.cache.LocalCache$Strength$3'
p36048
sg15
(lp36049
sg17
(lp36050
sg19
(lp36051
sg21
I0
sba(iArchitecture
Entity
p36052
(dp36053
g11
(lp36054
sg13
S'com.google.common.cache.LocalCache$StrongAccessEntry'
p36055
sg15
(lp36056
sg17
(lp36057
sg19
(lp36058
sg21
I0
sba(iArchitecture
Entity
p36059
(dp36060
g11
(lp36061
sg13
S'com.google.common.cache.LocalCache$StrongAccessWriteEntry'
p36062
sg15
(lp36063
sg17
(lp36064
sg19
(lp36065
sg21
I0
sba(iArchitecture
Entity
p36066
(dp36067
g11
(lp36068
sg13
S'com.google.common.cache.LocalCache$StrongEntry'
p36069
sg15
(lp36070
sg17
(lp36071
sg19
(lp36072
sg21
I0
sba(iArchitecture
Entity
p36073
(dp36074
g11
(lp36075
sg13
S'com.google.common.cache.LocalCache$StrongValueReference'
p36076
sg15
(lp36077
sg17
(lp36078
sg19
(lp36079
sg21
I0
sba(iArchitecture
Entity
p36080
(dp36081
g11
(lp36082
sg13
S'com.google.common.cache.LocalCache$StrongWriteEntry'
p36083
sg15
(lp36084
sg17
(lp36085
sg19
(lp36086
sg21
I0
sba(iArchitecture
Entity
p36087
(dp36088
g11
(lp36089
sg13
S'com.google.common.cache.LocalCache$ValueIterator'
p36090
sg15
(lp36091
sg17
(lp36092
sg19
(lp36093
sg21
I0
sba(iArchitecture
Entity
p36094
(dp36095
g11
(lp36096
sg13
S'com.google.common.cache.LocalCache$ValueReference'
p36097
sg15
(lp36098
sg17
(lp36099
sg19
(lp36100
sg21
I0
sba(iArchitecture
Entity
p36101
(dp36102
g11
(lp36103
sg13
S'com.google.common.cache.LocalCache$Values'
p36104
sg15
(lp36105
sg17
(lp36106
sg19
(lp36107
sg21
I0
sba(iArchitecture
Entity
p36108
(dp36109
g11
(lp36110
sg13
S'com.google.common.cache.LocalCache$WeakAccessEntry'
p36111
sg15
(lp36112
sg17
(lp36113
sg19
(lp36114
sg21
I0
sba(iArchitecture
Entity
p36115
(dp36116
g11
(lp36117
sg13
S'com.google.common.cache.LocalCache$WeakAccessWriteEntry'
p36118
sg15
(lp36119
sg17
(lp36120
sg19
(lp36121
sg21
I0
sba(iArchitecture
Entity
p36122
(dp36123
g11
(lp36124
sg13
S'com.google.common.cache.LocalCache$WeakEntry'
p36125
sg15
(lp36126
sg17
(lp36127
sg19
(lp36128
sg21
I0
sba(iArchitecture
Entity
p36129
(dp36130
g11
(lp36131
sg13
S'com.google.common.cache.LocalCache$WeakValueReference'
p36132
sg15
(lp36133
sg17
(lp36134
sg19
(lp36135
sg21
I0
sba(iArchitecture
Entity
p36136
(dp36137
g11
(lp36138
sg13
S'com.google.common.cache.LocalCache$WeakWriteEntry'
p36139
sg15
(lp36140
sg17
(lp36141
sg19
(lp36142
sg21
I0
sba(iArchitecture
Entity
p36143
(dp36144
g11
(lp36145
sg13
S'com.google.common.cache.LocalCache$WeightedSoftValueReference'
p36146
sg15
(lp36147
sg17
(lp36148
sg19
(lp36149
sg21
I0
sba(iArchitecture
Entity
p36150
(dp36151
g11
(lp36152
sg13
S'com.google.common.cache.LocalCache$WeightedStrongValueReference'
p36153
sg15
(lp36154
sg17
(lp36155
sg19
(lp36156
sg21
I0
sba(iArchitecture
Entity
p36157
(dp36158
g11
(lp36159
sg13
S'com.google.common.cache.LocalCache$WeightedWeakValueReference'
p36160
sg15
(lp36161
sg17
(lp36162
sg19
(lp36163
sg21
I0
sba(iArchitecture
Entity
p36164
(dp36165
g11
(lp36166
sg13
S'com.google.common.cache.LocalCache$WriteQueue'
p36167
sg15
(lp36168
sg17
(lp36169
sg19
(lp36170
sg21
I0
sba(iArchitecture
Entity
p36171
(dp36172
g11
(lp36173
sg13
S'com.google.common.cache.LocalCache$WriteQueue$1'
p36174
sg15
(lp36175
sg17
(lp36176
sg19
(lp36177
sg21
I0
sba(iArchitecture
Entity
p36178
(dp36179
g11
(lp36180
sg13
S'com.google.common.cache.LocalCache$WriteQueue$2'
p36181
sg15
(lp36182
sg17
(lp36183
sg19
(lp36184
sg21
I0
sba(iArchitecture
Entity
p36185
(dp36186
g11
(lp36187
sg13
S'com.google.common.cache.LocalCache$WriteThroughEntry'
p36188
sg15
(lp36189
sg17
(lp36190
sg19
(lp36191
sg21
I0
sba(iArchitecture
Entity
p36192
(dp36193
g11
(lp36194
sg13
S'com.google.common.cache.LongAddable'
p36195
sg15
(lp36196
sg17
(lp36197
sg19
(lp36198
sg21
I0
sba(iArchitecture
Entity
p36199
(dp36200
g11
(lp36201
sg13
S'com.google.common.cache.LongAddables'
p36202
sg15
(lp36203
sg17
(lp36204
sg19
(lp36205
sg21
I0
sba(iArchitecture
Entity
p36206
(dp36207
g11
(lp36208
sg13
S'com.google.common.cache.LongAddables$1'
p36209
sg15
(lp36210
sg17
(lp36211
sg19
(lp36212
sg21
I0
sba(iArchitecture
Entity
p36213
(dp36214
g11
(lp36215
sg13
S'com.google.common.cache.LongAddables$2'
p36216
sg15
(lp36217
sg17
(lp36218
sg19
(lp36219
sg21
I0
sba(iArchitecture
Entity
p36220
(dp36221
g11
(lp36222
sg13
S'com.google.common.cache.LongAddables$PureJavaLongAddable'
p36223
sg15
(lp36224
sg17
(lp36225
sg19
(lp36226
sg21
I0
sba(iArchitecture
Entity
p36227
(dp36228
g11
(lp36229
sg13
S'com.google.common.cache.LongAdder'
p36230
sg15
(lp36231
sg17
(lp36232
sg19
(lp36233
sg21
I0
sba(iArchitecture
Entity
p36234
(dp36235
g11
(lp36236
sg13
S'com.google.common.cache.RemovalCause'
p36237
sg15
(lp36238
sg17
(lp36239
sg19
(lp36240
sg21
I0
sba(iArchitecture
Entity
p36241
(dp36242
g11
(lp36243
sg13
S'com.google.common.cache.RemovalCause$1'
p36244
sg15
(lp36245
sg17
(lp36246
sg19
(lp36247
sg21
I0
sba(iArchitecture
Entity
p36248
(dp36249
g11
(lp36250
sg13
S'com.google.common.cache.RemovalCause$2'
p36251
sg15
(lp36252
sg17
(lp36253
sg19
(lp36254
sg21
I0
sba(iArchitecture
Entity
p36255
(dp36256
g11
(lp36257
sg13
S'com.google.common.cache.RemovalCause$3'
p36258
sg15
(lp36259
sg17
(lp36260
sg19
(lp36261
sg21
I0
sba(iArchitecture
Entity
p36262
(dp36263
g11
(lp36264
sg13
S'com.google.common.cache.RemovalCause$4'
p36265
sg15
(lp36266
sg17
(lp36267
sg19
(lp36268
sg21
I0
sba(iArchitecture
Entity
p36269
(dp36270
g11
(lp36271
sg13
S'com.google.common.cache.RemovalCause$5'
p36272
sg15
(lp36273
sg17
(lp36274
sg19
(lp36275
sg21
I0
sba(iArchitecture
Entity
p36276
(dp36277
g11
(lp36278
sg13
S'com.google.common.cache.RemovalListener'
p36279
sg15
(lp36280
sg17
(lp36281
sg19
(lp36282
sg21
I0
sba(iArchitecture
Entity
p36283
(dp36284
g11
(lp36285
sg13
S'com.google.common.cache.RemovalListeners'
p36286
sg15
(lp36287
sg17
(lp36288
sg19
(lp36289
sg21
I0
sba(iArchitecture
Entity
p36290
(dp36291
g11
(lp36292
sg13
S'com.google.common.cache.RemovalListeners$1'
p36293
sg15
(lp36294
sg17
(lp36295
sg19
(lp36296
sg21
I0
sba(iArchitecture
Entity
p36297
(dp36298
g11
(lp36299
sg13
S'com.google.common.cache.RemovalListeners$1$1'
p36300
sg15
(lp36301
sg17
(lp36302
sg19
(lp36303
sg21
I0
sba(iArchitecture
Entity
p36304
(dp36305
g11
(lp36306
sg13
S'com.google.common.cache.RemovalNotification'
p36307
sg15
(lp36308
sg17
(lp36309
sg19
(lp36310
sg21
I0
sba(iArchitecture
Entity
p36311
(dp36312
g11
(lp36313
sg13
S'com.google.common.cache.Striped64'
p36314
sg15
(lp36315
sg17
(lp36316
sg19
(lp36317
sg21
I0
sba(iArchitecture
Entity
p36318
(dp36319
g11
(lp36320
sg13
S'com.google.common.cache.Striped64$1'
p36321
sg15
(lp36322
sg17
(lp36323
sg19
(lp36324
sg21
I0
sba(iArchitecture
Entity
p36325
(dp36326
g11
(lp36327
sg13
S'com.google.common.cache.Striped64$Cell'
p36328
sg15
(lp36329
sg17
(lp36330
sg19
(lp36331
sg21
I0
sba(iArchitecture
Entity
p36332
(dp36333
g11
(lp36334
sg13
S'com.google.common.cache.Weigher'
p36335
sg15
(lp36336
sg17
(lp36337
sg19
(lp36338
sg21
I0
sba(iArchitecture
Entity
p36339
(dp36340
g11
(lp36341
sg13
S'com.google.common.escape.ArrayBasedUnicodeEscaper'
p36342
sg15
(lp36343
sg17
(lp36344
sg19
(lp36345
sg21
I0
sba(iArchitecture
Entity
p36346
(dp36347
g11
(lp36348
sg13
S'com.google.common.hash.HashingInputStream'
p36349
sg15
(lp36350
sg17
(lp36351
sg19
(lp36352
sg21
I0
sba(iArchitecture
Entity
p36353
(dp36354
g11
(lp36355
sg13
S'com.google.common.hash.HashingOutputStream'
p36356
sg15
(lp36357
sg17
(lp36358
sg19
(lp36359
sg21
I0
sba(iArchitecture
Entity
p36360
(dp36361
g11
(lp36362
sg13
S'com.google.common.io.CountingInputStream'
p36363
sg15
(lp36364
sg17
(lp36365
sg19
(lp36366
sg21
I0
sba(iArchitecture
Entity
p36367
(dp36368
g11
(lp36369
sg13
S'com.google.common.io.CountingOutputStream'
p36370
sg15
(lp36371
sg17
(lp36372
sg19
(lp36373
sg21
I0
sba(iArchitecture
Entity
p36374
(dp36375
g11
(lp36376
sg13
S'com.google.common.io.PatternFilenameFilter'
p36377
sg15
(lp36378
sg17
(lp36379
sg19
(lp36380
sg21
I0
sba(iArchitecture
Entity
p36381
(dp36382
g11
(lp36383
sg13
S'com.google.common.testing.FakeTicker'
p36384
sg15
(lp36385
sg17
(lp36386
sg19
(lp36387
sg21
I0
sba(iArchitecture
Entity
p36388
(dp36389
g11
(lp36390
sg13
S'com.google.common.util.concurrent.FakeTimeLimiter'
p36391
sg15
(lp36392
sg17
(lp36393
sg19
(lp36394
sg21
I0
sba(iArchitecture
Entity
p36395
(dp36396
g11
(lp36397
sg13
S'com.google.common.util.concurrent.ListenableFutureTask'
p36398
sg15
(lp36399
sg17
(lp36400
sg19
(lp36401
sg21
I0
sbasg1055
(lp36402
g35502
ag35509
ag35516
ag35523
ag35530
ag35537
ag35544
ag35551
ag35558
ag35565
ag35572
ag35579
ag35586
ag35593
ag35600
ag35607
ag35614
ag35621
ag35628
ag35635
ag35642
ag35649
ag35656
ag35663
ag35670
ag35677
ag35684
ag35691
ag35698
ag35705
ag35712
ag35719
ag35726
ag35733
ag35740
ag35747
ag35754
ag35761
ag35768
ag35775
ag35782
ag35789
ag35796
ag35803
ag35810
ag35817
ag35824
ag35831
ag35838
ag35845
ag35852
ag35859
ag35866
ag35873
ag35880
ag35887
ag35894
ag35901
ag35908
ag35915
ag35922
ag35929
ag35936
ag35943
ag35950
ag35957
ag35964
ag35971
ag35978
ag35985
ag35992
ag35999
ag36006
ag36013
ag36020
ag36027
ag36034
ag36041
ag36048
ag36055
ag36062
ag36069
ag36076
ag36083
ag36090
ag36097
ag36104
ag36111
ag36118
ag36125
ag36132
ag36139
ag36146
ag36153
ag36160
ag36167
ag36174
ag36181
ag36188
ag36195
ag36202
ag36209
ag36216
ag36223
ag36230
ag36237
ag36244
ag36251
ag36258
ag36265
ag36272
ag36279
ag36286
ag36293
ag36300
ag36307
ag36314
ag36321
ag36328
ag36335
ag36342
ag36349
ag36356
ag36363
ag36370
ag36377
ag36384
ag36391
ag36398
asg21
I0
sg1057
S'com.google.common.cache.ss'
p36403
sba(iArchitecture
Cluster
p36404
(dp36405
g7
(lp36406
(iArchitecture
Entity
p36407
(dp36408
g11
(lp36409
sg13
S'com.google.common.annotations.VisibleForTesting'
p36410
sg15
(lp36411
sg17
(lp36412
sg19
(lp36413
sg21
I0
sba(iArchitecture
Entity
p36414
(dp36415
g11
(lp36416
sg13
S'com.google.common.base.Absent'
p36417
sg15
(lp36418
sg17
(lp36419
sg19
(lp36420
sg21
I0
sba(iArchitecture
Entity
p36421
(dp36422
g11
(lp36423
sg13
S'com.google.common.base.Absent_CustomFieldSerializer'
p36424
sg15
(lp36425
sg17
(lp36426
sg19
(lp36427
sg21
I0
sba(iArchitecture
Entity
p36428
(dp36429
g11
(lp36430
sg13
S'com.google.common.base.Optional'
p36431
sg15
(lp36432
sg17
(lp36433
sg19
(lp36434
sg21
I0
sba(iArchitecture
Entity
p36435
(dp36436
g11
(lp36437
sg13
S'com.google.common.base.PairwiseEquivalence_CustomFieldSerializer'
p36438
sg15
(lp36439
sg17
(lp36440
sg19
(lp36441
sg21
I0
sba(iArchitecture
Entity
p36442
(dp36443
g11
(lp36444
sg13
S'com.google.common.base.Present'
p36445
sg15
(lp36446
sg17
(lp36447
sg19
(lp36448
sg21
I0
sba(iArchitecture
Entity
p36449
(dp36450
g11
(lp36451
sg13
S'com.google.common.base.Present_CustomFieldSerializer'
p36452
sg15
(lp36453
sg17
(lp36454
sg19
(lp36455
sg21
I0
sba(iArchitecture
Entity
p36456
(dp36457
g11
(lp36458
sg13
S'com.google.common.cache.AbstractLoadingCache'
p36459
sg15
(lp36460
sg17
(lp36461
sg19
(lp36462
sg21
I0
sba(iArchitecture
Entity
p36463
(dp36464
g11
(lp36465
sg13
S'com.google.common.collect.AbstractBiMap'
p36466
sg15
(lp36467
sg17
(lp36468
sg19
(lp36469
sg21
I0
sba(iArchitecture
Entity
p36470
(dp36471
g11
(lp36472
sg13
S'com.google.common.collect.AbstractBiMap$1'
p36473
sg15
(lp36474
sg17
(lp36475
sg19
(lp36476
sg21
I0
sba(iArchitecture
Entity
p36477
(dp36478
g11
(lp36479
sg13
S'com.google.common.collect.AbstractBiMap$BiMapEntry'
p36480
sg15
(lp36481
sg17
(lp36482
sg19
(lp36483
sg21
I0
sba(iArchitecture
Entity
p36484
(dp36485
g11
(lp36486
sg13
S'com.google.common.collect.AbstractBiMap$EntrySet'
p36487
sg15
(lp36488
sg17
(lp36489
sg19
(lp36490
sg21
I0
sba(iArchitecture
Entity
p36491
(dp36492
g11
(lp36493
sg13
S'com.google.common.collect.AbstractBiMap$Inverse'
p36494
sg15
(lp36495
sg17
(lp36496
sg19
(lp36497
sg21
I0
sba(iArchitecture
Entity
p36498
(dp36499
g11
(lp36500
sg13
S'com.google.common.collect.AbstractBiMap$KeySet'
p36501
sg15
(lp36502
sg17
(lp36503
sg19
(lp36504
sg21
I0
sba(iArchitecture
Entity
p36505
(dp36506
g11
(lp36507
sg13
S'com.google.common.collect.AbstractBiMap$ValueSet'
p36508
sg15
(lp36509
sg17
(lp36510
sg19
(lp36511
sg21
I0
sba(iArchitecture
Entity
p36512
(dp36513
g11
(lp36514
sg13
S'com.google.common.collect.AbstractIndexedListIterator'
p36515
sg15
(lp36516
sg17
(lp36517
sg19
(lp36518
sg21
I0
sba(iArchitecture
Entity
p36519
(dp36520
g11
(lp36521
sg13
S'com.google.common.collect.AbstractIterator'
p36522
sg15
(lp36523
sg17
(lp36524
sg19
(lp36525
sg21
I0
sba(iArchitecture
Entity
p36526
(dp36527
g11
(lp36528
sg13
S'com.google.common.collect.AbstractIterator$1'
p36529
sg15
(lp36530
sg17
(lp36531
sg19
(lp36532
sg21
I0
sba(iArchitecture
Entity
p36533
(dp36534
g11
(lp36535
sg13
S'com.google.common.collect.AbstractIterator$State'
p36536
sg15
(lp36537
sg17
(lp36538
sg19
(lp36539
sg21
I0
sba(iArchitecture
Entity
p36540
(dp36541
g11
(lp36542
sg13
S'com.google.common.collect.AbstractListMultimap'
p36543
sg15
(lp36544
sg17
(lp36545
sg19
(lp36546
sg21
I0
sba(iArchitecture
Entity
p36547
(dp36548
g11
(lp36549
sg13
S'com.google.common.collect.AbstractMapBasedMultimap'
p36550
sg15
(lp36551
sg17
(lp36552
sg19
(lp36553
sg21
I0
sba(iArchitecture
Entity
p36554
(dp36555
g11
(lp36556
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$1'
p36557
sg15
(lp36558
sg17
(lp36559
sg19
(lp36560
sg21
I0
sba(iArchitecture
Entity
p36561
(dp36562
g11
(lp36563
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$2'
p36564
sg15
(lp36565
sg17
(lp36566
sg19
(lp36567
sg21
I0
sba(iArchitecture
Entity
p36568
(dp36569
g11
(lp36570
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$AsMap'
p36571
sg15
(lp36572
sg17
(lp36573
sg19
(lp36574
sg21
I0
sba(iArchitecture
Entity
p36575
(dp36576
g11
(lp36577
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries'
p36578
sg15
(lp36579
sg17
(lp36580
sg19
(lp36581
sg21
I0
sba(iArchitecture
Entity
p36582
(dp36583
g11
(lp36584
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator'
p36585
sg15
(lp36586
sg17
(lp36587
sg19
(lp36588
sg21
I0
sba(iArchitecture
Entity
p36589
(dp36590
g11
(lp36591
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$Itr'
p36592
sg15
(lp36593
sg17
(lp36594
sg19
(lp36595
sg21
I0
sba(iArchitecture
Entity
p36596
(dp36597
g11
(lp36598
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$KeySet'
p36599
sg15
(lp36600
sg17
(lp36601
sg19
(lp36602
sg21
I0
sba(iArchitecture
Entity
p36603
(dp36604
g11
(lp36605
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$KeySet$1'
p36606
sg15
(lp36607
sg17
(lp36608
sg19
(lp36609
sg21
I0
sba(iArchitecture
Entity
p36610
(dp36611
g11
(lp36612
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap'
p36613
sg15
(lp36614
sg17
(lp36615
sg19
(lp36616
sg21
I0
sba(iArchitecture
Entity
p36617
(dp36618
g11
(lp36619
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet'
p36620
sg15
(lp36621
sg17
(lp36622
sg19
(lp36623
sg21
I0
sba(iArchitecture
Entity
p36624
(dp36625
g11
(lp36626
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList'
p36627
sg15
(lp36628
sg17
(lp36629
sg19
(lp36630
sg21
I0
sba(iArchitecture
Entity
p36631
(dp36632
g11
(lp36633
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap'
p36634
sg15
(lp36635
sg17
(lp36636
sg19
(lp36637
sg21
I0
sba(iArchitecture
Entity
p36638
(dp36639
g11
(lp36640
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet'
p36641
sg15
(lp36642
sg17
(lp36643
sg19
(lp36644
sg21
I0
sba(iArchitecture
Entity
p36645
(dp36646
g11
(lp36647
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection'
p36648
sg15
(lp36649
sg17
(lp36650
sg19
(lp36651
sg21
I0
sba(iArchitecture
Entity
p36652
(dp36653
g11
(lp36654
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator'
p36655
sg15
(lp36656
sg17
(lp36657
sg19
(lp36658
sg21
I0
sba(iArchitecture
Entity
p36659
(dp36660
g11
(lp36661
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedList'
p36662
sg15
(lp36663
sg17
(lp36664
sg19
(lp36665
sg21
I0
sba(iArchitecture
Entity
p36666
(dp36667
g11
(lp36668
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator'
p36669
sg15
(lp36670
sg17
(lp36671
sg19
(lp36672
sg21
I0
sba(iArchitecture
Entity
p36673
(dp36674
g11
(lp36675
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet'
p36676
sg15
(lp36677
sg17
(lp36678
sg19
(lp36679
sg21
I0
sba(iArchitecture
Entity
p36680
(dp36681
g11
(lp36682
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedSet'
p36683
sg15
(lp36684
sg17
(lp36685
sg19
(lp36686
sg21
I0
sba(iArchitecture
Entity
p36687
(dp36688
g11
(lp36689
sg13
S'com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet'
p36690
sg15
(lp36691
sg17
(lp36692
sg19
(lp36693
sg21
I0
sba(iArchitecture
Entity
p36694
(dp36695
g11
(lp36696
sg13
S'com.google.common.collect.AbstractMapBasedMultiset'
p36697
sg15
(lp36698
sg17
(lp36699
sg19
(lp36700
sg21
I0
sba(iArchitecture
Entity
p36701
(dp36702
g11
(lp36703
sg13
S'com.google.common.collect.AbstractMapBasedMultiset$1'
p36704
sg15
(lp36705
sg17
(lp36706
sg19
(lp36707
sg21
I0
sba(iArchitecture
Entity
p36708
(dp36709
g11
(lp36710
sg13
S'com.google.common.collect.AbstractMapBasedMultiset$1$1'
p36711
sg15
(lp36712
sg17
(lp36713
sg19
(lp36714
sg21
I0
sba(iArchitecture
Entity
p36715
(dp36716
g11
(lp36717
sg13
S'com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator'
p36718
sg15
(lp36719
sg17
(lp36720
sg19
(lp36721
sg21
I0
sba(iArchitecture
Entity
p36722
(dp36723
g11
(lp36724
sg13
S'com.google.common.collect.AbstractMapEntry'
p36725
sg15
(lp36726
sg17
(lp36727
sg19
(lp36728
sg21
I0
sba(iArchitecture
Entity
p36729
(dp36730
g11
(lp36731
sg13
S'com.google.common.collect.AbstractMultimap'
p36732
sg15
(lp36733
sg17
(lp36734
sg19
(lp36735
sg21
I0
sba(iArchitecture
Entity
p36736
(dp36737
g11
(lp36738
sg13
S'com.google.common.collect.AbstractMultimap$1'
p36739
sg15
(lp36740
sg17
(lp36741
sg19
(lp36742
sg21
I0
sba(iArchitecture
Entity
p36743
(dp36744
g11
(lp36745
sg13
S'com.google.common.collect.AbstractMultimap$Entries'
p36746
sg15
(lp36747
sg17
(lp36748
sg19
(lp36749
sg21
I0
sba(iArchitecture
Entity
p36750
(dp36751
g11
(lp36752
sg13
S'com.google.common.collect.AbstractMultimap$EntrySet'
p36753
sg15
(lp36754
sg17
(lp36755
sg19
(lp36756
sg21
I0
sba(iArchitecture
Entity
p36757
(dp36758
g11
(lp36759
sg13
S'com.google.common.collect.AbstractMultimap$Values'
p36760
sg15
(lp36761
sg17
(lp36762
sg19
(lp36763
sg21
I0
sba(iArchitecture
Entity
p36764
(dp36765
g11
(lp36766
sg13
S'com.google.common.collect.AbstractMultiset'
p36767
sg15
(lp36768
sg17
(lp36769
sg19
(lp36770
sg21
I0
sba(iArchitecture
Entity
p36771
(dp36772
g11
(lp36773
sg13
S'com.google.common.collect.AbstractMultiset$ElementSet'
p36774
sg15
(lp36775
sg17
(lp36776
sg19
(lp36777
sg21
I0
sba(iArchitecture
Entity
p36778
(dp36779
g11
(lp36780
sg13
S'com.google.common.collect.AbstractMultiset$EntrySet'
p36781
sg15
(lp36782
sg17
(lp36783
sg19
(lp36784
sg21
I0
sba(iArchitecture
Entity
p36785
(dp36786
g11
(lp36787
sg13
S'com.google.common.collect.AbstractNavigableMap'
p36788
sg15
(lp36789
sg17
(lp36790
sg19
(lp36791
sg21
I0
sba(iArchitecture
Entity
p36792
(dp36793
g11
(lp36794
sg13
S'com.google.common.collect.AbstractNavigableMap$1'
p36795
sg15
(lp36796
sg17
(lp36797
sg19
(lp36798
sg21
I0
sba(iArchitecture
Entity
p36799
(dp36800
g11
(lp36801
sg13
S'com.google.common.collect.AbstractNavigableMap$DescendingMap'
p36802
sg15
(lp36803
sg17
(lp36804
sg19
(lp36805
sg21
I0
sba(iArchitecture
Entity
p36806
(dp36807
g11
(lp36808
sg13
S'com.google.common.collect.AbstractRangeSet'
p36809
sg15
(lp36810
sg17
(lp36811
sg19
(lp36812
sg21
I0
sba(iArchitecture
Entity
p36813
(dp36814
g11
(lp36815
sg13
S'com.google.common.collect.AbstractSequentialIterator'
p36816
sg15
(lp36817
sg17
(lp36818
sg19
(lp36819
sg21
I0
sba(iArchitecture
Entity
p36820
(dp36821
g11
(lp36822
sg13
S'com.google.common.collect.AbstractSetMultimap'
p36823
sg15
(lp36824
sg17
(lp36825
sg19
(lp36826
sg21
I0
sba(iArchitecture
Entity
p36827
(dp36828
g11
(lp36829
sg13
S'com.google.common.collect.AbstractSortedKeySortedSetMultimap'
p36830
sg15
(lp36831
sg17
(lp36832
sg19
(lp36833
sg21
I0
sba(iArchitecture
Entity
p36834
(dp36835
g11
(lp36836
sg13
S'com.google.common.collect.AbstractSortedMultiset'
p36837
sg15
(lp36838
sg17
(lp36839
sg19
(lp36840
sg21
I0
sba(iArchitecture
Entity
p36841
(dp36842
g11
(lp36843
sg13
S'com.google.common.collect.AbstractSortedMultiset$1DescendingMultisetImpl'
p36844
sg15
(lp36845
sg17
(lp36846
sg19
(lp36847
sg21
I0
sba(iArchitecture
Entity
p36848
(dp36849
g11
(lp36850
sg13
S'com.google.common.collect.AbstractSortedSetMultimap'
p36851
sg15
(lp36852
sg17
(lp36853
sg19
(lp36854
sg21
I0
sba(iArchitecture
Entity
p36855
(dp36856
g11
(lp36857
sg13
S'com.google.common.collect.AbstractTable'
p36858
sg15
(lp36859
sg17
(lp36860
sg19
(lp36861
sg21
I0
sba(iArchitecture
Entity
p36862
(dp36863
g11
(lp36864
sg13
S'com.google.common.collect.AbstractTable$1'
p36865
sg15
(lp36866
sg17
(lp36867
sg19
(lp36868
sg21
I0
sba(iArchitecture
Entity
p36869
(dp36870
g11
(lp36871
sg13
S'com.google.common.collect.AbstractTable$CellSet'
p36872
sg15
(lp36873
sg17
(lp36874
sg19
(lp36875
sg21
I0
sba(iArchitecture
Entity
p36876
(dp36877
g11
(lp36878
sg13
S'com.google.common.collect.AbstractTable$Values'
p36879
sg15
(lp36880
sg17
(lp36881
sg19
(lp36882
sg21
I0
sba(iArchitecture
Entity
p36883
(dp36884
g11
(lp36885
sg13
S'com.google.common.collect.AllEqualOrdering'
p36886
sg15
(lp36887
sg17
(lp36888
sg19
(lp36889
sg21
I0
sba(iArchitecture
Entity
p36890
(dp36891
g11
(lp36892
sg13
S'com.google.common.collect.AllEqualOrdering_CustomFieldSerializer'
p36893
sg15
(lp36894
sg17
(lp36895
sg19
(lp36896
sg21
I0
sba(iArchitecture
Entity
p36897
(dp36898
g11
(lp36899
sg13
S'com.google.common.collect.ArrayListMultimap_CustomFieldSerializer'
p36900
sg15
(lp36901
sg17
(lp36902
sg19
(lp36903
sg21
I0
sba(iArchitecture
Entity
p36904
(dp36905
g11
(lp36906
sg13
S'com.google.common.collect.ArrayTable'
p36907
sg15
(lp36908
sg17
(lp36909
sg19
(lp36910
sg21
I0
sba(iArchitecture
Entity
p36911
(dp36912
g11
(lp36913
sg13
S'com.google.common.collect.ArrayTable$1'
p36914
sg15
(lp36915
sg17
(lp36916
sg19
(lp36917
sg21
I0
sba(iArchitecture
Entity
p36918
(dp36919
g11
(lp36920
sg13
S'com.google.common.collect.ArrayTable$1$1'
p36921
sg15
(lp36922
sg17
(lp36923
sg19
(lp36924
sg21
I0
sba(iArchitecture
Entity
p36925
(dp36926
g11
(lp36927
sg13
S'com.google.common.collect.ArrayTable$ArrayMap'
p36928
sg15
(lp36929
sg17
(lp36930
sg19
(lp36931
sg21
I0
sba(iArchitecture
Entity
p36932
(dp36933
g11
(lp36934
sg13
S'com.google.common.collect.ArrayTable$ArrayMap$1'
p36935
sg15
(lp36936
sg17
(lp36937
sg19
(lp36938
sg21
I0
sba(iArchitecture
Entity
p36939
(dp36940
g11
(lp36941
sg13
S'com.google.common.collect.ArrayTable$ArrayMap$1$1'
p36942
sg15
(lp36943
sg17
(lp36944
sg19
(lp36945
sg21
I0
sba(iArchitecture
Entity
p36946
(dp36947
g11
(lp36948
sg13
S'com.google.common.collect.ArrayTable$Column'
p36949
sg15
(lp36950
sg17
(lp36951
sg19
(lp36952
sg21
I0
sba(iArchitecture
Entity
p36953
(dp36954
g11
(lp36955
sg13
S'com.google.common.collect.ArrayTable$ColumnMap'
p36956
sg15
(lp36957
sg17
(lp36958
sg19
(lp36959
sg21
I0
sba(iArchitecture
Entity
p36960
(dp36961
g11
(lp36962
sg13
S'com.google.common.collect.ArrayTable$Row'
p36963
sg15
(lp36964
sg17
(lp36965
sg19
(lp36966
sg21
I0
sba(iArchitecture
Entity
p36967
(dp36968
g11
(lp36969
sg13
S'com.google.common.collect.ArrayTable$RowMap'
p36970
sg15
(lp36971
sg17
(lp36972
sg19
(lp36973
sg21
I0
sba(iArchitecture
Entity
p36974
(dp36975
g11
(lp36976
sg13
S'com.google.common.collect.BinaryTreeTraverser'
p36977
sg15
(lp36978
sg17
(lp36979
sg19
(lp36980
sg21
I0
sba(iArchitecture
Entity
p36981
(dp36982
g11
(lp36983
sg13
S'com.google.common.collect.BinaryTreeTraverser$1'
p36984
sg15
(lp36985
sg17
(lp36986
sg19
(lp36987
sg21
I0
sba(iArchitecture
Entity
p36988
(dp36989
g11
(lp36990
sg13
S'com.google.common.collect.BinaryTreeTraverser$1$1'
p36991
sg15
(lp36992
sg17
(lp36993
sg19
(lp36994
sg21
I0
sba(iArchitecture
Entity
p36995
(dp36996
g11
(lp36997
sg13
S'com.google.common.collect.BinaryTreeTraverser$2'
p36998
sg15
(lp36999
sg17
(lp37000
sg19
(lp37001
sg21
I0
sba(iArchitecture
Entity
p37002
(dp37003
g11
(lp37004
sg13
S'com.google.common.collect.BinaryTreeTraverser$InOrderIterator'
p37005
sg15
(lp37006
sg17
(lp37007
sg19
(lp37008
sg21
I0
sba(iArchitecture
Entity
p37009
(dp37010
g11
(lp37011
sg13
S'com.google.common.collect.BinaryTreeTraverser$PostOrderIterator'
p37012
sg15
(lp37013
sg17
(lp37014
sg19
(lp37015
sg21
I0
sba(iArchitecture
Entity
p37016
(dp37017
g11
(lp37018
sg13
S'com.google.common.collect.BinaryTreeTraverser$PreOrderIterator'
p37019
sg15
(lp37020
sg17
(lp37021
sg19
(lp37022
sg21
I0
sba(iArchitecture
Entity
p37023
(dp37024
g11
(lp37025
sg13
S'com.google.common.collect.BoundType'
p37026
sg15
(lp37027
sg17
(lp37028
sg19
(lp37029
sg21
I0
sba(iArchitecture
Entity
p37030
(dp37031
g11
(lp37032
sg13
S'com.google.common.collect.BoundType$1'
p37033
sg15
(lp37034
sg17
(lp37035
sg19
(lp37036
sg21
I0
sba(iArchitecture
Entity
p37037
(dp37038
g11
(lp37039
sg13
S'com.google.common.collect.BoundType$2'
p37040
sg15
(lp37041
sg17
(lp37042
sg19
(lp37043
sg21
I0
sba(iArchitecture
Entity
p37044
(dp37045
g11
(lp37046
sg13
S'com.google.common.collect.ByFunctionOrdering'
p37047
sg15
(lp37048
sg17
(lp37049
sg19
(lp37050
sg21
I0
sba(iArchitecture
Entity
p37051
(dp37052
g11
(lp37053
sg13
S'com.google.common.collect.ByFunctionOrdering_CustomFieldSerializer'
p37054
sg15
(lp37055
sg17
(lp37056
sg19
(lp37057
sg21
I0
sba(iArchitecture
Entity
p37058
(dp37059
g11
(lp37060
sg13
S'com.google.common.collect.CartesianList'
p37061
sg15
(lp37062
sg17
(lp37063
sg19
(lp37064
sg21
I0
sba(iArchitecture
Entity
p37065
(dp37066
g11
(lp37067
sg13
S'com.google.common.collect.CartesianList$1'
p37068
sg15
(lp37069
sg17
(lp37070
sg19
(lp37071
sg21
I0
sba(iArchitecture
Entity
p37072
(dp37073
g11
(lp37074
sg13
S'com.google.common.collect.CollectPreconditions'
p37075
sg15
(lp37076
sg17
(lp37077
sg19
(lp37078
sg21
I0
sba(iArchitecture
Entity
p37079
(dp37080
g11
(lp37081
sg13
S'com.google.common.collect.Collections2'
p37082
sg15
(lp37083
sg17
(lp37084
sg19
(lp37085
sg21
I0
sba(iArchitecture
Entity
p37086
(dp37087
g11
(lp37088
sg13
S'com.google.common.collect.Collections2$1'
p37089
sg15
(lp37090
sg17
(lp37091
sg19
(lp37092
sg21
I0
sba(iArchitecture
Entity
p37093
(dp37094
g11
(lp37095
sg13
S'com.google.common.collect.Collections2$FilteredCollection'
p37096
sg15
(lp37097
sg17
(lp37098
sg19
(lp37099
sg21
I0
sba(iArchitecture
Entity
p37100
(dp37101
g11
(lp37102
sg13
S'com.google.common.collect.Collections2$OrderedPermutationCollection'
p37103
sg15
(lp37104
sg17
(lp37105
sg19
(lp37106
sg21
I0
sba(iArchitecture
Entity
p37107
(dp37108
g11
(lp37109
sg13
S'com.google.common.collect.Collections2$OrderedPermutationIterator'
p37110
sg15
(lp37111
sg17
(lp37112
sg19
(lp37113
sg21
I0
sba(iArchitecture
Entity
p37114
(dp37115
g11
(lp37116
sg13
S'com.google.common.collect.Collections2$PermutationCollection'
p37117
sg15
(lp37118
sg17
(lp37119
sg19
(lp37120
sg21
I0
sba(iArchitecture
Entity
p37121
(dp37122
g11
(lp37123
sg13
S'com.google.common.collect.Collections2$PermutationIterator'
p37124
sg15
(lp37125
sg17
(lp37126
sg19
(lp37127
sg21
I0
sba(iArchitecture
Entity
p37128
(dp37129
g11
(lp37130
sg13
S'com.google.common.collect.Collections2$TransformedCollection'
p37131
sg15
(lp37132
sg17
(lp37133
sg19
(lp37134
sg21
I0
sba(iArchitecture
Entity
p37135
(dp37136
g11
(lp37137
sg13
S'com.google.common.collect.ComparatorOrdering'
p37138
sg15
(lp37139
sg17
(lp37140
sg19
(lp37141
sg21
I0
sba(iArchitecture
Entity
p37142
(dp37143
g11
(lp37144
sg13
S'com.google.common.collect.ComparatorOrdering_CustomFieldSerializer'
p37145
sg15
(lp37146
sg17
(lp37147
sg19
(lp37148
sg21
I0
sba(iArchitecture
Entity
p37149
(dp37150
g11
(lp37151
sg13
S'com.google.common.collect.ComparisonChain'
p37152
sg15
(lp37153
sg17
(lp37154
sg19
(lp37155
sg21
I0
sba(iArchitecture
Entity
p37156
(dp37157
g11
(lp37158
sg13
S'com.google.common.collect.ComparisonChain$1'
p37159
sg15
(lp37160
sg17
(lp37161
sg19
(lp37162
sg21
I0
sba(iArchitecture
Entity
p37163
(dp37164
g11
(lp37165
sg13
S'com.google.common.collect.ComparisonChain$InactiveComparisonChain'
p37166
sg15
(lp37167
sg17
(lp37168
sg19
(lp37169
sg21
I0
sba(iArchitecture
Entity
p37170
(dp37171
g11
(lp37172
sg13
S'com.google.common.collect.CompoundOrdering'
p37173
sg15
(lp37174
sg17
(lp37175
sg19
(lp37176
sg21
I0
sba(iArchitecture
Entity
p37177
(dp37178
g11
(lp37179
sg13
S'com.google.common.collect.CompoundOrdering_CustomFieldSerializer'
p37180
sg15
(lp37181
sg17
(lp37182
sg19
(lp37183
sg21
I0
sba(iArchitecture
Entity
p37184
(dp37185
g11
(lp37186
sg13
S'com.google.common.collect.ConcurrentHashMultiset'
p37187
sg15
(lp37188
sg17
(lp37189
sg19
(lp37190
sg21
I0
sba(iArchitecture
Entity
p37191
(dp37192
g11
(lp37193
sg13
S'com.google.common.collect.ConcurrentHashMultiset$1'
p37194
sg15
(lp37195
sg17
(lp37196
sg19
(lp37197
sg21
I0
sba(iArchitecture
Entity
p37198
(dp37199
g11
(lp37200
sg13
S'com.google.common.collect.ConcurrentHashMultiset$2'
p37201
sg15
(lp37202
sg17
(lp37203
sg19
(lp37204
sg21
I0
sba(iArchitecture
Entity
p37205
(dp37206
g11
(lp37207
sg13
S'com.google.common.collect.ConcurrentHashMultiset$3'
p37208
sg15
(lp37209
sg17
(lp37210
sg19
(lp37211
sg21
I0
sba(iArchitecture
Entity
p37212
(dp37213
g11
(lp37214
sg13
S'com.google.common.collect.ConcurrentHashMultiset$EntrySet'
p37215
sg15
(lp37216
sg17
(lp37217
sg19
(lp37218
sg21
I0
sba(iArchitecture
Entity
p37219
(dp37220
g11
(lp37221
sg13
S'com.google.common.collect.ConcurrentHashMultiset$FieldSettersHolder'
p37222
sg15
(lp37223
sg17
(lp37224
sg19
(lp37225
sg21
I0
sba(iArchitecture
Entity
p37226
(dp37227
g11
(lp37228
sg13
S'com.google.common.collect.Constraint'
p37229
sg15
(lp37230
sg17
(lp37231
sg19
(lp37232
sg21
I0
sba(iArchitecture
Entity
p37233
(dp37234
g11
(lp37235
sg13
S'com.google.common.collect.Constraints'
p37236
sg15
(lp37237
sg17
(lp37238
sg19
(lp37239
sg21
I0
sba(iArchitecture
Entity
p37240
(dp37241
g11
(lp37242
sg13
S'com.google.common.collect.Constraints$ConstrainedCollection'
p37243
sg15
(lp37244
sg17
(lp37245
sg19
(lp37246
sg21
I0
sba(iArchitecture
Entity
p37247
(dp37248
g11
(lp37249
sg13
S'com.google.common.collect.Constraints$ConstrainedList'
p37250
sg15
(lp37251
sg17
(lp37252
sg19
(lp37253
sg21
I0
sba(iArchitecture
Entity
p37254
(dp37255
g11
(lp37256
sg13
S'com.google.common.collect.Constraints$ConstrainedListIterator'
p37257
sg15
(lp37258
sg17
(lp37259
sg19
(lp37260
sg21
I0
sba(iArchitecture
Entity
p37261
(dp37262
g11
(lp37263
sg13
S'com.google.common.collect.Constraints$ConstrainedRandomAccessList'
p37264
sg15
(lp37265
sg17
(lp37266
sg19
(lp37267
sg21
I0
sba(iArchitecture
Entity
p37268
(dp37269
g11
(lp37270
sg13
S'com.google.common.collect.Constraints$ConstrainedSet'
p37271
sg15
(lp37272
sg17
(lp37273
sg19
(lp37274
sg21
I0
sba(iArchitecture
Entity
p37275
(dp37276
g11
(lp37277
sg13
S'com.google.common.collect.Constraints$ConstrainedSortedSet'
p37278
sg15
(lp37279
sg17
(lp37280
sg19
(lp37281
sg21
I0
sba(iArchitecture
Entity
p37282
(dp37283
g11
(lp37284
sg13
S'com.google.common.collect.ConsumingQueueIterator'
p37285
sg15
(lp37286
sg17
(lp37287
sg19
(lp37288
sg21
I0
sba(iArchitecture
Entity
p37289
(dp37290
g11
(lp37291
sg13
S'com.google.common.collect.Count'
p37292
sg15
(lp37293
sg17
(lp37294
sg19
(lp37295
sg21
I0
sba(iArchitecture
Entity
p37296
(dp37297
g11
(lp37298
sg13
S'com.google.common.collect.Cut'
p37299
sg15
(lp37300
sg17
(lp37301
sg19
(lp37302
sg21
I0
sba(iArchitecture
Entity
p37303
(dp37304
g11
(lp37305
sg13
S'com.google.common.collect.Cut$1'
p37306
sg15
(lp37307
sg17
(lp37308
sg19
(lp37309
sg21
I0
sba(iArchitecture
Entity
p37310
(dp37311
g11
(lp37312
sg13
S'com.google.common.collect.Cut$AboveAll'
p37313
sg15
(lp37314
sg17
(lp37315
sg19
(lp37316
sg21
I0
sba(iArchitecture
Entity
p37317
(dp37318
g11
(lp37319
sg13
S'com.google.common.collect.Cut$AboveValue'
p37320
sg15
(lp37321
sg17
(lp37322
sg19
(lp37323
sg21
I0
sba(iArchitecture
Entity
p37324
(dp37325
g11
(lp37326
sg13
S'com.google.common.collect.Cut$BelowAll'
p37327
sg15
(lp37328
sg17
(lp37329
sg19
(lp37330
sg21
I0
sba(iArchitecture
Entity
p37331
(dp37332
g11
(lp37333
sg13
S'com.google.common.collect.Cut$BelowValue'
p37334
sg15
(lp37335
sg17
(lp37336
sg19
(lp37337
sg21
I0
sba(iArchitecture
Entity
p37338
(dp37339
g11
(lp37340
sg13
S'com.google.common.collect.DenseImmutableTable'
p37341
sg15
(lp37342
sg17
(lp37343
sg19
(lp37344
sg21
I0
sba(iArchitecture
Entity
p37345
(dp37346
g11
(lp37347
sg13
S'com.google.common.collect.DenseImmutableTable$1'
p37348
sg15
(lp37349
sg17
(lp37350
sg19
(lp37351
sg21
I0
sba(iArchitecture
Entity
p37352
(dp37353
g11
(lp37354
sg13
S'com.google.common.collect.DenseImmutableTable$Column'
p37355
sg15
(lp37356
sg17
(lp37357
sg19
(lp37358
sg21
I0
sba(iArchitecture
Entity
p37359
(dp37360
g11
(lp37361
sg13
S'com.google.common.collect.DenseImmutableTable$ColumnMap'
p37362
sg15
(lp37363
sg17
(lp37364
sg19
(lp37365
sg21
I0
sba(iArchitecture
Entity
p37366
(dp37367
g11
(lp37368
sg13
S'com.google.common.collect.DenseImmutableTable$ImmutableArrayMap'
p37369
sg15
(lp37370
sg17
(lp37371
sg19
(lp37372
sg21
I0
sba(iArchitecture
Entity
p37373
(dp37374
g11
(lp37375
sg13
S'com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1'
p37376
sg15
(lp37377
sg17
(lp37378
sg19
(lp37379
sg21
I0
sba(iArchitecture
Entity
p37380
(dp37381
g11
(lp37382
sg13
S'com.google.common.collect.DenseImmutableTable$Row'
p37383
sg15
(lp37384
sg17
(lp37385
sg19
(lp37386
sg21
I0
sba(iArchitecture
Entity
p37387
(dp37388
g11
(lp37389
sg13
S'com.google.common.collect.DenseImmutableTable$RowMap'
p37390
sg15
(lp37391
sg17
(lp37392
sg19
(lp37393
sg21
I0
sba(iArchitecture
Entity
p37394
(dp37395
g11
(lp37396
sg13
S'com.google.common.collect.DenseImmutableTable_CustomFieldSerializer'
p37397
sg15
(lp37398
sg17
(lp37399
sg19
(lp37400
sg21
I0
sba(iArchitecture
Entity
p37401
(dp37402
g11
(lp37403
sg13
S'com.google.common.collect.DescendingImmutableSortedMultiset'
p37404
sg15
(lp37405
sg17
(lp37406
sg19
(lp37407
sg21
I0
sba(iArchitecture
Entity
p37408
(dp37409
g11
(lp37410
sg13
S'com.google.common.collect.DescendingImmutableSortedSet'
p37411
sg15
(lp37412
sg17
(lp37413
sg19
(lp37414
sg21
I0
sba(iArchitecture
Entity
p37415
(dp37416
g11
(lp37417
sg13
S'com.google.common.collect.DescendingMultiset'
p37418
sg15
(lp37419
sg17
(lp37420
sg19
(lp37421
sg21
I0
sba(iArchitecture
Entity
p37422
(dp37423
g11
(lp37424
sg13
S'com.google.common.collect.DescendingMultiset$1EntrySetImpl'
p37425
sg15
(lp37426
sg17
(lp37427
sg19
(lp37428
sg21
I0
sba(iArchitecture
Entity
p37429
(dp37430
g11
(lp37431
sg13
S'com.google.common.collect.DiscreteDomain'
p37432
sg15
(lp37433
sg17
(lp37434
sg19
(lp37435
sg21
I0
sba(iArchitecture
Entity
p37436
(dp37437
g11
(lp37438
sg13
S'com.google.common.collect.DiscreteDomain$BigIntegerDomain'
p37439
sg15
(lp37440
sg17
(lp37441
sg19
(lp37442
sg21
I0
sba(iArchitecture
Entity
p37443
(dp37444
g11
(lp37445
sg13
S'com.google.common.collect.DiscreteDomain$IntegerDomain'
p37446
sg15
(lp37447
sg17
(lp37448
sg19
(lp37449
sg21
I0
sba(iArchitecture
Entity
p37450
(dp37451
g11
(lp37452
sg13
S'com.google.common.collect.DiscreteDomain$LongDomain'
p37453
sg15
(lp37454
sg17
(lp37455
sg19
(lp37456
sg21
I0
sba(iArchitecture
Entity
p37457
(dp37458
g11
(lp37459
sg13
S'com.google.common.collect.EmptyContiguousSet'
p37460
sg15
(lp37461
sg17
(lp37462
sg19
(lp37463
sg21
I0
sba(iArchitecture
Entity
p37464
(dp37465
g11
(lp37466
sg13
S'com.google.common.collect.EmptyContiguousSet$1'
p37467
sg15
(lp37468
sg17
(lp37469
sg19
(lp37470
sg21
I0
sba(iArchitecture
Entity
p37471
(dp37472
g11
(lp37473
sg13
S'com.google.common.collect.EmptyContiguousSet$SerializedForm'
p37474
sg15
(lp37475
sg17
(lp37476
sg19
(lp37477
sg21
I0
sba(iArchitecture
Entity
p37478
(dp37479
g11
(lp37480
sg13
S'com.google.common.collect.EmptyImmutableListMultimap_CustomFieldSerializer'
p37481
sg15
(lp37482
sg17
(lp37483
sg19
(lp37484
sg21
I0
sba(iArchitecture
Entity
p37485
(dp37486
g11
(lp37487
sg13
S'com.google.common.collect.EmptyImmutableSetMultimap'
p37488
sg15
(lp37489
sg17
(lp37490
sg19
(lp37491
sg21
I0
sba(iArchitecture
Entity
p37492
(dp37493
g11
(lp37494
sg13
S'com.google.common.collect.EmptyImmutableSetMultimap_CustomFieldSerializer'
p37495
sg15
(lp37496
sg17
(lp37497
sg19
(lp37498
sg21
I0
sba(iArchitecture
Entity
p37499
(dp37500
g11
(lp37501
sg13
S'com.google.common.collect.EnumBiMap'
p37502
sg15
(lp37503
sg17
(lp37504
sg19
(lp37505
sg21
I0
sba(iArchitecture
Entity
p37506
(dp37507
g11
(lp37508
sg13
S'com.google.common.collect.EnumHashBiMap'
p37509
sg15
(lp37510
sg17
(lp37511
sg19
(lp37512
sg21
I0
sba(iArchitecture
Entity
p37513
(dp37514
g11
(lp37515
sg13
S'com.google.common.collect.EvictingQueue'
p37516
sg15
(lp37517
sg17
(lp37518
sg19
(lp37519
sg21
I0
sba(iArchitecture
Entity
p37520
(dp37521
g11
(lp37522
sg13
S'com.google.common.collect.ExplicitOrdering'
p37523
sg15
(lp37524
sg17
(lp37525
sg19
(lp37526
sg21
I0
sba(iArchitecture
Entity
p37527
(dp37528
g11
(lp37529
sg13
S'com.google.common.collect.ExplicitOrdering_CustomFieldSerializer'
p37530
sg15
(lp37531
sg17
(lp37532
sg19
(lp37533
sg21
I0
sba(iArchitecture
Entity
p37534
(dp37535
g11
(lp37536
sg13
S'com.google.common.collect.FilteredEntryMultimap'
p37537
sg15
(lp37538
sg17
(lp37539
sg19
(lp37540
sg21
I0
sba(iArchitecture
Entity
p37541
(dp37542
g11
(lp37543
sg13
S'com.google.common.collect.FilteredEntryMultimap$AsMap'
p37544
sg15
(lp37545
sg17
(lp37546
sg19
(lp37547
sg21
I0
sba(iArchitecture
Entity
p37548
(dp37549
g11
(lp37550
sg13
S'com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl'
p37551
sg15
(lp37552
sg17
(lp37553
sg19
(lp37554
sg21
I0
sba(iArchitecture
Entity
p37555
(dp37556
g11
(lp37557
sg13
S'com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl$1'
p37558
sg15
(lp37559
sg17
(lp37560
sg19
(lp37561
sg21
I0
sba(iArchitecture
Entity
p37562
(dp37563
g11
(lp37564
sg13
S'com.google.common.collect.FilteredEntryMultimap$AsMap$1KeySetImpl'
p37565
sg15
(lp37566
sg17
(lp37567
sg19
(lp37568
sg21
I0
sba(iArchitecture
Entity
p37569
(dp37570
g11
(lp37571
sg13
S'com.google.common.collect.FilteredEntryMultimap$AsMap$1ValuesImpl'
p37572
sg15
(lp37573
sg17
(lp37574
sg19
(lp37575
sg21
I0
sba(iArchitecture
Entity
p37576
(dp37577
g11
(lp37578
sg13
S'com.google.common.collect.FilteredEntryMultimap$Keys'
p37579
sg15
(lp37580
sg17
(lp37581
sg19
(lp37582
sg21
I0
sba(iArchitecture
Entity
p37583
(dp37584
g11
(lp37585
sg13
S'com.google.common.collect.FilteredEntryMultimap$Keys$1'
p37586
sg15
(lp37587
sg17
(lp37588
sg19
(lp37589
sg21
I0
sba(iArchitecture
Entity
p37590
(dp37591
g11
(lp37592
sg13
S'com.google.common.collect.FilteredEntryMultimap$Keys$1$1'
p37593
sg15
(lp37594
sg17
(lp37595
sg19
(lp37596
sg21
I0
sba(iArchitecture
Entity
p37597
(dp37598
g11
(lp37599
sg13
S'com.google.common.collect.FilteredEntryMultimap$ValuePredicate'
p37600
sg15
(lp37601
sg17
(lp37602
sg19
(lp37603
sg21
I0
sba(iArchitecture
Entity
p37604
(dp37605
g11
(lp37606
sg13
S'com.google.common.collect.FilteredEntrySetMultimap'
p37607
sg15
(lp37608
sg17
(lp37609
sg19
(lp37610
sg21
I0
sba(iArchitecture
Entity
p37611
(dp37612
g11
(lp37613
sg13
S'com.google.common.collect.FilteredKeyListMultimap'
p37614
sg15
(lp37615
sg17
(lp37616
sg19
(lp37617
sg21
I0
sba(iArchitecture
Entity
p37618
(dp37619
g11
(lp37620
sg13
S'com.google.common.collect.FilteredKeyMultimap'
p37621
sg15
(lp37622
sg17
(lp37623
sg19
(lp37624
sg21
I0
sba(iArchitecture
Entity
p37625
(dp37626
g11
(lp37627
sg13
S'com.google.common.collect.FilteredKeyMultimap$AddRejectingList'
p37628
sg15
(lp37629
sg17
(lp37630
sg19
(lp37631
sg21
I0
sba(iArchitecture
Entity
p37632
(dp37633
g11
(lp37634
sg13
S'com.google.common.collect.FilteredKeyMultimap$AddRejectingSet'
p37635
sg15
(lp37636
sg17
(lp37637
sg19
(lp37638
sg21
I0
sba(iArchitecture
Entity
p37639
(dp37640
g11
(lp37641
sg13
S'com.google.common.collect.FilteredKeyMultimap$Entries'
p37642
sg15
(lp37643
sg17
(lp37644
sg19
(lp37645
sg21
I0
sba(iArchitecture
Entity
p37646
(dp37647
g11
(lp37648
sg13
S'com.google.common.collect.FilteredKeySetMultimap'
p37649
sg15
(lp37650
sg17
(lp37651
sg19
(lp37652
sg21
I0
sba(iArchitecture
Entity
p37653
(dp37654
g11
(lp37655
sg13
S'com.google.common.collect.FilteredKeySetMultimap$EntrySet'
p37656
sg15
(lp37657
sg17
(lp37658
sg19
(lp37659
sg21
I0
sba(iArchitecture
Entity
p37660
(dp37661
g11
(lp37662
sg13
S'com.google.common.collect.FilteredMultimap'
p37663
sg15
(lp37664
sg17
(lp37665
sg19
(lp37666
sg21
I0
sba(iArchitecture
Entity
p37667
(dp37668
g11
(lp37669
sg13
S'com.google.common.collect.FilteredMultimapValues'
p37670
sg15
(lp37671
sg17
(lp37672
sg19
(lp37673
sg21
I0
sba(iArchitecture
Entity
p37674
(dp37675
g11
(lp37676
sg13
S'com.google.common.collect.FilteredSetMultimap'
p37677
sg15
(lp37678
sg17
(lp37679
sg19
(lp37680
sg21
I0
sba(iArchitecture
Entity
p37681
(dp37682
g11
(lp37683
sg13
S'com.google.common.collect.FluentIterable'
p37684
sg15
(lp37685
sg17
(lp37686
sg19
(lp37687
sg21
I0
sba(iArchitecture
Entity
p37688
(dp37689
g11
(lp37690
sg13
S'com.google.common.collect.FluentIterable$1'
p37691
sg15
(lp37692
sg17
(lp37693
sg19
(lp37694
sg21
I0
sba(iArchitecture
Entity
p37695
(dp37696
g11
(lp37697
sg13
S'com.google.common.collect.FluentIterable$2'
p37698
sg15
(lp37699
sg17
(lp37700
sg19
(lp37701
sg21
I0
sba(iArchitecture
Entity
p37702
(dp37703
g11
(lp37704
sg13
S'com.google.common.collect.FluentIterable$FromIterableFunction'
p37705
sg15
(lp37706
sg17
(lp37707
sg19
(lp37708
sg21
I0
sba(iArchitecture
Entity
p37709
(dp37710
g11
(lp37711
sg13
S'com.google.common.collect.ForwardingBlockingDeque'
p37712
sg15
(lp37713
sg17
(lp37714
sg19
(lp37715
sg21
I0
sba(iArchitecture
Entity
p37716
(dp37717
g11
(lp37718
sg13
S'com.google.common.collect.ForwardingCollection'
p37719
sg15
(lp37720
sg17
(lp37721
sg19
(lp37722
sg21
I0
sba(iArchitecture
Entity
p37723
(dp37724
g11
(lp37725
sg13
S'com.google.common.collect.ForwardingConcurrentMap'
p37726
sg15
(lp37727
sg17
(lp37728
sg19
(lp37729
sg21
I0
sba(iArchitecture
Entity
p37730
(dp37731
g11
(lp37732
sg13
S'com.google.common.collect.ForwardingDeque'
p37733
sg15
(lp37734
sg17
(lp37735
sg19
(lp37736
sg21
I0
sba(iArchitecture
Entity
p37737
(dp37738
g11
(lp37739
sg13
S'com.google.common.collect.ForwardingIterator'
p37740
sg15
(lp37741
sg17
(lp37742
sg19
(lp37743
sg21
I0
sba(iArchitecture
Entity
p37744
(dp37745
g11
(lp37746
sg13
S'com.google.common.collect.ForwardingList'
p37747
sg15
(lp37748
sg17
(lp37749
sg19
(lp37750
sg21
I0
sba(iArchitecture
Entity
p37751
(dp37752
g11
(lp37753
sg13
S'com.google.common.collect.ForwardingListIterator'
p37754
sg15
(lp37755
sg17
(lp37756
sg19
(lp37757
sg21
I0
sba(iArchitecture
Entity
p37758
(dp37759
g11
(lp37760
sg13
S'com.google.common.collect.ForwardingMap'
p37761
sg15
(lp37762
sg17
(lp37763
sg19
(lp37764
sg21
I0
sba(iArchitecture
Entity
p37765
(dp37766
g11
(lp37767
sg13
S'com.google.common.collect.ForwardingMap$StandardEntrySet'
p37768
sg15
(lp37769
sg17
(lp37770
sg19
(lp37771
sg21
I0
sba(iArchitecture
Entity
p37772
(dp37773
g11
(lp37774
sg13
S'com.google.common.collect.ForwardingMap$StandardKeySet'
p37775
sg15
(lp37776
sg17
(lp37777
sg19
(lp37778
sg21
I0
sba(iArchitecture
Entity
p37779
(dp37780
g11
(lp37781
sg13
S'com.google.common.collect.ForwardingMap$StandardValues'
p37782
sg15
(lp37783
sg17
(lp37784
sg19
(lp37785
sg21
I0
sba(iArchitecture
Entity
p37786
(dp37787
g11
(lp37788
sg13
S'com.google.common.collect.ForwardingMultimap'
p37789
sg15
(lp37790
sg17
(lp37791
sg19
(lp37792
sg21
I0
sba(iArchitecture
Entity
p37793
(dp37794
g11
(lp37795
sg13
S'com.google.common.collect.ForwardingMultiset'
p37796
sg15
(lp37797
sg17
(lp37798
sg19
(lp37799
sg21
I0
sba(iArchitecture
Entity
p37800
(dp37801
g11
(lp37802
sg13
S'com.google.common.collect.ForwardingMultiset$StandardElementSet'
p37803
sg15
(lp37804
sg17
(lp37805
sg19
(lp37806
sg21
I0
sba(iArchitecture
Entity
p37807
(dp37808
g11
(lp37809
sg13
S'com.google.common.collect.ForwardingNavigableMap'
p37810
sg15
(lp37811
sg17
(lp37812
sg19
(lp37813
sg21
I0
sba(iArchitecture
Entity
p37814
(dp37815
g11
(lp37816
sg13
S'com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap'
p37817
sg15
(lp37818
sg17
(lp37819
sg19
(lp37820
sg21
I0
sba(iArchitecture
Entity
p37821
(dp37822
g11
(lp37823
sg13
S'com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1'
p37824
sg15
(lp37825
sg17
(lp37826
sg19
(lp37827
sg21
I0
sba(iArchitecture
Entity
p37828
(dp37829
g11
(lp37830
sg13
S'com.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet'
p37831
sg15
(lp37832
sg17
(lp37833
sg19
(lp37834
sg21
I0
sba(iArchitecture
Entity
p37835
(dp37836
g11
(lp37837
sg13
S'com.google.common.collect.ForwardingNavigableSet'
p37838
sg15
(lp37839
sg17
(lp37840
sg19
(lp37841
sg21
I0
sba(iArchitecture
Entity
p37842
(dp37843
g11
(lp37844
sg13
S'com.google.common.collect.ForwardingNavigableSet$StandardDescendingSet'
p37845
sg15
(lp37846
sg17
(lp37847
sg19
(lp37848
sg21
I0
sba(iArchitecture
Entity
p37849
(dp37850
g11
(lp37851
sg13
S'com.google.common.collect.ForwardingQueue'
p37852
sg15
(lp37853
sg17
(lp37854
sg19
(lp37855
sg21
I0
sba(iArchitecture
Entity
p37856
(dp37857
g11
(lp37858
sg13
S'com.google.common.collect.ForwardingSet'
p37859
sg15
(lp37860
sg17
(lp37861
sg19
(lp37862
sg21
I0
sba(iArchitecture
Entity
p37863
(dp37864
g11
(lp37865
sg13
S'com.google.common.collect.ForwardingSetMultimap'
p37866
sg15
(lp37867
sg17
(lp37868
sg19
(lp37869
sg21
I0
sba(iArchitecture
Entity
p37870
(dp37871
g11
(lp37872
sg13
S'com.google.common.collect.ForwardingSortedMap'
p37873
sg15
(lp37874
sg17
(lp37875
sg19
(lp37876
sg21
I0
sba(iArchitecture
Entity
p37877
(dp37878
g11
(lp37879
sg13
S'com.google.common.collect.ForwardingSortedMap$StandardKeySet'
p37880
sg15
(lp37881
sg17
(lp37882
sg19
(lp37883
sg21
I0
sba(iArchitecture
Entity
p37884
(dp37885
g11
(lp37886
sg13
S'com.google.common.collect.ForwardingSortedMultiset'
p37887
sg15
(lp37888
sg17
(lp37889
sg19
(lp37890
sg21
I0
sba(iArchitecture
Entity
p37891
(dp37892
g11
(lp37893
sg13
S'com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset'
p37894
sg15
(lp37895
sg17
(lp37896
sg19
(lp37897
sg21
I0
sba(iArchitecture
Entity
p37898
(dp37899
g11
(lp37900
sg13
S'com.google.common.collect.ForwardingSortedMultiset$StandardElementSet'
p37901
sg15
(lp37902
sg17
(lp37903
sg19
(lp37904
sg21
I0
sba(iArchitecture
Entity
p37905
(dp37906
g11
(lp37907
sg13
S'com.google.common.collect.ForwardingSortedSet'
p37908
sg15
(lp37909
sg17
(lp37910
sg19
(lp37911
sg21
I0
sba(iArchitecture
Entity
p37912
(dp37913
g11
(lp37914
sg13
S'com.google.common.collect.ForwardingSortedSetMultimap'
p37915
sg15
(lp37916
sg17
(lp37917
sg19
(lp37918
sg21
I0
sba(iArchitecture
Entity
p37919
(dp37920
g11
(lp37921
sg13
S'com.google.common.collect.ForwardingTable'
p37922
sg15
(lp37923
sg17
(lp37924
sg19
(lp37925
sg21
I0
sba(iArchitecture
Entity
p37926
(dp37927
g11
(lp37928
sg13
S'com.google.common.collect.GeneralRange'
p37929
sg15
(lp37930
sg17
(lp37931
sg19
(lp37932
sg21
I0
sba(iArchitecture
Entity
p37933
(dp37934
g11
(lp37935
sg13
S'com.google.common.collect.GwtSerializationDependencies'
p37936
sg15
(lp37937
sg17
(lp37938
sg19
(lp37939
sg21
I0
sba(iArchitecture
Entity
p37940
(dp37941
g11
(lp37942
sg13
S'com.google.common.collect.GwtSerializationDependencies$HashBasedTableDependencies'
p37943
sg15
(lp37944
sg17
(lp37945
sg19
(lp37946
sg21
I0
sba(iArchitecture
Entity
p37947
(dp37948
g11
(lp37949
sg13
S'com.google.common.collect.GwtSerializationDependencies$ImmutableListMultimapDependencies'
p37950
sg15
(lp37951
sg17
(lp37952
sg19
(lp37953
sg21
I0
sba(iArchitecture
Entity
p37954
(dp37955
g11
(lp37956
sg13
S'com.google.common.collect.GwtSerializationDependencies$ImmutableSetMultimapDependencies'
p37957
sg15
(lp37958
sg17
(lp37959
sg19
(lp37960
sg21
I0
sba(iArchitecture
Entity
p37961
(dp37962
g11
(lp37963
sg13
S'com.google.common.collect.GwtSerializationDependencies$ImmutableTableDependencies'
p37964
sg15
(lp37965
sg17
(lp37966
sg19
(lp37967
sg21
I0
sba(iArchitecture
Entity
p37968
(dp37969
g11
(lp37970
sg13
S'com.google.common.collect.GwtSerializationDependencies$LinkedListMultimapDependencies'
p37971
sg15
(lp37972
sg17
(lp37973
sg19
(lp37974
sg21
I0
sba(iArchitecture
Entity
p37975
(dp37976
g11
(lp37977
sg13
S'com.google.common.collect.GwtSerializationDependencies$TreeBasedTableDependencies'
p37978
sg15
(lp37979
sg17
(lp37980
sg19
(lp37981
sg21
I0
sba(iArchitecture
Entity
p37982
(dp37983
g11
(lp37984
sg13
S'com.google.common.collect.GwtSerializationDependencies$TreeMultimapDependencies'
p37985
sg15
(lp37986
sg17
(lp37987
sg19
(lp37988
sg21
I0
sba(iArchitecture
Entity
p37989
(dp37990
g11
(lp37991
sg13
S'com.google.common.collect.GwtTransient'
p37992
sg15
(lp37993
sg17
(lp37994
sg19
(lp37995
sg21
I0
sba(iArchitecture
Entity
p37996
(dp37997
g11
(lp37998
sg13
S'com.google.common.collect.HashBasedTable_CustomFieldSerializer'
p37999
sg15
(lp38000
sg17
(lp38001
sg19
(lp38002
sg21
I0
sba(iArchitecture
Entity
p38003
(dp38004
g11
(lp38005
sg13
S'com.google.common.collect.HashBiMap'
p38006
sg15
(lp38007
sg17
(lp38008
sg19
(lp38009
sg21
I0
sba(iArchitecture
Entity
p38010
(dp38011
g11
(lp38012
sg13
S'com.google.common.collect.HashBiMap$1'
p38013
sg15
(lp38014
sg17
(lp38015
sg19
(lp38016
sg21
I0
sba(iArchitecture
Entity
p38017
(dp38018
g11
(lp38019
sg13
S'com.google.common.collect.HashBiMap$1$MapEntry'
p38020
sg15
(lp38021
sg17
(lp38022
sg19
(lp38023
sg21
I0
sba(iArchitecture
Entity
p38024
(dp38025
g11
(lp38026
sg13
S'com.google.common.collect.HashBiMap$1.MapEntry'
p38027
sg15
(lp38028
sg17
(lp38029
sg19
(lp38030
sg21
I0
sba(iArchitecture
Entity
p38031
(dp38032
g11
(lp38033
sg13
S'com.google.common.collect.HashBiMap$BiEntry'
p38034
sg15
(lp38035
sg17
(lp38036
sg19
(lp38037
sg21
I0
sba(iArchitecture
Entity
p38038
(dp38039
g11
(lp38040
sg13
S'com.google.common.collect.HashBiMap$Inverse'
p38041
sg15
(lp38042
sg17
(lp38043
sg19
(lp38044
sg21
I0
sba(iArchitecture
Entity
p38045
(dp38046
g11
(lp38047
sg13
S'com.google.common.collect.HashBiMap$Inverse$1'
p38048
sg15
(lp38049
sg17
(lp38050
sg19
(lp38051
sg21
I0
sba(iArchitecture
Entity
p38052
(dp38053
g11
(lp38054
sg13
S'com.google.common.collect.HashBiMap$Inverse$1$1'
p38055
sg15
(lp38056
sg17
(lp38057
sg19
(lp38058
sg21
I0
sba(iArchitecture
Entity
p38059
(dp38060
g11
(lp38061
sg13
S'com.google.common.collect.HashBiMap$Inverse$1$1$InverseEntry'
p38062
sg15
(lp38063
sg17
(lp38064
sg19
(lp38065
sg21
I0
sba(iArchitecture
Entity
p38066
(dp38067
g11
(lp38068
sg13
S'com.google.common.collect.HashBiMap$Inverse$1$1.InverseEntry'
p38069
sg15
(lp38070
sg17
(lp38071
sg19
(lp38072
sg21
I0
sba(iArchitecture
Entity
p38073
(dp38074
g11
(lp38075
sg13
S'com.google.common.collect.HashBiMap$Inverse$InverseKeySet'
p38076
sg15
(lp38077
sg17
(lp38078
sg19
(lp38079
sg21
I0
sba(iArchitecture
Entity
p38080
(dp38081
g11
(lp38082
sg13
S'com.google.common.collect.HashBiMap$Inverse$InverseKeySet$1'
p38083
sg15
(lp38084
sg17
(lp38085
sg19
(lp38086
sg21
I0
sba(iArchitecture
Entity
p38087
(dp38088
g11
(lp38089
sg13
S'com.google.common.collect.HashBiMap$InverseSerializedForm'
p38090
sg15
(lp38091
sg17
(lp38092
sg19
(lp38093
sg21
I0
sba(iArchitecture
Entity
p38094
(dp38095
g11
(lp38096
sg13
S'com.google.common.collect.HashBiMap$Itr'
p38097
sg15
(lp38098
sg17
(lp38099
sg19
(lp38100
sg21
I0
sba(iArchitecture
Entity
p38101
(dp38102
g11
(lp38103
sg13
S'com.google.common.collect.HashBiMap$KeySet'
p38104
sg15
(lp38105
sg17
(lp38106
sg19
(lp38107
sg21
I0
sba(iArchitecture
Entity
p38108
(dp38109
g11
(lp38110
sg13
S'com.google.common.collect.HashBiMap$KeySet$1'
p38111
sg15
(lp38112
sg17
(lp38113
sg19
(lp38114
sg21
I0
sba(iArchitecture
Entity
p38115
(dp38116
g11
(lp38117
sg13
S'com.google.common.collect.HashMultimap_CustomFieldSerializer'
p38118
sg15
(lp38119
sg17
(lp38120
sg19
(lp38121
sg21
I0
sba(iArchitecture
Entity
p38122
(dp38123
g11
(lp38124
sg13
S'com.google.common.collect.HashMultiset_CustomFieldSerializer'
p38125
sg15
(lp38126
sg17
(lp38127
sg19
(lp38128
sg21
I0
sba(iArchitecture
Entity
p38129
(dp38130
g11
(lp38131
sg13
S'com.google.common.collect.Hashing'
p38132
sg15
(lp38133
sg17
(lp38134
sg19
(lp38135
sg21
I0
sba(iArchitecture
Entity
p38136
(dp38137
g11
(lp38138
sg13
S'com.google.common.collect.ImmutableAsList'
p38139
sg15
(lp38140
sg17
(lp38141
sg19
(lp38142
sg21
I0
sba(iArchitecture
Entity
p38143
(dp38144
g11
(lp38145
sg13
S'com.google.common.collect.ImmutableAsList$SerializedForm'
p38146
sg15
(lp38147
sg17
(lp38148
sg19
(lp38149
sg21
I0
sba(iArchitecture
Entity
p38150
(dp38151
g11
(lp38152
sg13
S'com.google.common.collect.ImmutableBiMap'
p38153
sg15
(lp38154
sg17
(lp38155
sg19
(lp38156
sg21
I0
sba(iArchitecture
Entity
p38157
(dp38158
g11
(lp38159
sg13
S'com.google.common.collect.ImmutableBiMap$Builder'
p38160
sg15
(lp38161
sg17
(lp38162
sg19
(lp38163
sg21
I0
sba(iArchitecture
Entity
p38164
(dp38165
g11
(lp38166
sg13
S'com.google.common.collect.ImmutableBiMap$SerializedForm'
p38167
sg15
(lp38168
sg17
(lp38169
sg19
(lp38170
sg21
I0
sba(iArchitecture
Entity
p38171
(dp38172
g11
(lp38173
sg13
S'com.google.common.collect.ImmutableEntry'
p38174
sg15
(lp38175
sg17
(lp38176
sg19
(lp38177
sg21
I0
sba(iArchitecture
Entity
p38178
(dp38179
g11
(lp38180
sg13
S'com.google.common.collect.ImmutableEntry_CustomFieldSerializer'
p38181
sg15
(lp38182
sg17
(lp38183
sg19
(lp38184
sg21
I0
sba(iArchitecture
Entity
p38185
(dp38186
g11
(lp38187
sg13
S'com.google.common.collect.ImmutableEnumMap'
p38188
sg15
(lp38189
sg17
(lp38190
sg19
(lp38191
sg21
I0
sba(iArchitecture
Entity
p38192
(dp38193
g11
(lp38194
sg13
S'com.google.common.collect.ImmutableEnumMap$1'
p38195
sg15
(lp38196
sg17
(lp38197
sg19
(lp38198
sg21
I0
sba(iArchitecture
Entity
p38199
(dp38200
g11
(lp38201
sg13
S'com.google.common.collect.ImmutableEnumMap$EnumSerializedForm'
p38202
sg15
(lp38203
sg17
(lp38204
sg19
(lp38205
sg21
I0
sba(iArchitecture
Entity
p38206
(dp38207
g11
(lp38208
sg13
S'com.google.common.collect.ImmutableEnumMap_CustomFieldSerializer'
p38209
sg15
(lp38210
sg17
(lp38211
sg19
(lp38212
sg21
I0
sba(iArchitecture
Entity
p38213
(dp38214
g11
(lp38215
sg13
S'com.google.common.collect.ImmutableEnumSet'
p38216
sg15
(lp38217
sg17
(lp38218
sg19
(lp38219
sg21
I0
sba(iArchitecture
Entity
p38220
(dp38221
g11
(lp38222
sg13
S'com.google.common.collect.ImmutableEnumSet$1'
p38223
sg15
(lp38224
sg17
(lp38225
sg19
(lp38226
sg21
I0
sba(iArchitecture
Entity
p38227
(dp38228
g11
(lp38229
sg13
S'com.google.common.collect.ImmutableEnumSet$EnumSerializedForm'
p38230
sg15
(lp38231
sg17
(lp38232
sg19
(lp38233
sg21
I0
sba(iArchitecture
Entity
p38234
(dp38235
g11
(lp38236
sg13
S'com.google.common.collect.ImmutableEnumSet_CustomFieldSerializer'
p38237
sg15
(lp38238
sg17
(lp38239
sg19
(lp38240
sg21
I0
sba(iArchitecture
Entity
p38241
(dp38242
g11
(lp38243
sg13
S'com.google.common.collect.ImmutableList'
p38244
sg15
(lp38245
sg17
(lp38246
sg19
(lp38247
sg21
I0
sba(iArchitecture
Entity
p38248
(dp38249
g11
(lp38250
sg13
S'com.google.common.collect.ImmutableList$1'
p38251
sg15
(lp38252
sg17
(lp38253
sg19
(lp38254
sg21
I0
sba(iArchitecture
Entity
p38255
(dp38256
g11
(lp38257
sg13
S'com.google.common.collect.ImmutableList$ReverseImmutableList'
p38258
sg15
(lp38259
sg17
(lp38260
sg19
(lp38261
sg21
I0
sba(iArchitecture
Entity
p38262
(dp38263
g11
(lp38264
sg13
S'com.google.common.collect.ImmutableList$SerializedForm'
p38265
sg15
(lp38266
sg17
(lp38267
sg19
(lp38268
sg21
I0
sba(iArchitecture
Entity
p38269
(dp38270
g11
(lp38271
sg13
S'com.google.common.collect.ImmutableList$SubList'
p38272
sg15
(lp38273
sg17
(lp38274
sg19
(lp38275
sg21
I0
sba(iArchitecture
Entity
p38276
(dp38277
g11
(lp38278
sg13
S'com.google.common.collect.ImmutableListMultimap_CustomFieldSerializer'
p38279
sg15
(lp38280
sg17
(lp38281
sg19
(lp38282
sg21
I0
sba(iArchitecture
Entity
p38283
(dp38284
g11
(lp38285
sg13
S'com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap'
p38286
sg15
(lp38287
sg17
(lp38288
sg19
(lp38289
sg21
I0
sba(iArchitecture
Entity
p38290
(dp38291
g11
(lp38292
sg13
S'com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap$1EntrySetImpl'
p38293
sg15
(lp38294
sg17
(lp38295
sg19
(lp38296
sg21
I0
sba(iArchitecture
Entity
p38297
(dp38298
g11
(lp38299
sg13
S'com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets'
p38300
sg15
(lp38301
sg17
(lp38302
sg19
(lp38303
sg21
I0
sba(iArchitecture
Entity
p38304
(dp38305
g11
(lp38306
sg13
S'com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1'
p38307
sg15
(lp38308
sg17
(lp38309
sg19
(lp38310
sg21
I0
sba(iArchitecture
Entity
p38311
(dp38312
g11
(lp38313
sg13
S'com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1'
p38314
sg15
(lp38315
sg17
(lp38316
sg19
(lp38317
sg21
I0
sba(iArchitecture
Entity
p38318
(dp38319
g11
(lp38320
sg13
S'com.google.common.collect.ImmutableMapEntry'
p38321
sg15
(lp38322
sg17
(lp38323
sg19
(lp38324
sg21
I0
sba(iArchitecture
Entity
p38325
(dp38326
g11
(lp38327
sg13
S'com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableBiMapEntry'
p38328
sg15
(lp38329
sg17
(lp38330
sg19
(lp38331
sg21
I0
sba(iArchitecture
Entity
p38332
(dp38333
g11
(lp38334
sg13
S'com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry'
p38335
sg15
(lp38336
sg17
(lp38337
sg19
(lp38338
sg21
I0
sba(iArchitecture
Entity
p38339
(dp38340
g11
(lp38341
sg13
S'com.google.common.collect.ImmutableMapEntrySet'
p38342
sg15
(lp38343
sg17
(lp38344
sg19
(lp38345
sg21
I0
sba(iArchitecture
Entity
p38346
(dp38347
g11
(lp38348
sg13
S'com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm'
p38349
sg15
(lp38350
sg17
(lp38351
sg19
(lp38352
sg21
I0
sba(iArchitecture
Entity
p38353
(dp38354
g11
(lp38355
sg13
S'com.google.common.collect.ImmutableMapKeySet'
p38356
sg15
(lp38357
sg17
(lp38358
sg19
(lp38359
sg21
I0
sba(iArchitecture
Entity
p38360
(dp38361
g11
(lp38362
sg13
S'com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm'
p38363
sg15
(lp38364
sg17
(lp38365
sg19
(lp38366
sg21
I0
sba(iArchitecture
Entity
p38367
(dp38368
g11
(lp38369
sg13
S'com.google.common.collect.ImmutableMapValues'
p38370
sg15
(lp38371
sg17
(lp38372
sg19
(lp38373
sg21
I0
sba(iArchitecture
Entity
p38374
(dp38375
g11
(lp38376
sg13
S'com.google.common.collect.ImmutableMapValues$1'
p38377
sg15
(lp38378
sg17
(lp38379
sg19
(lp38380
sg21
I0
sba(iArchitecture
Entity
p38381
(dp38382
g11
(lp38383
sg13
S'com.google.common.collect.ImmutableMapValues$2'
p38384
sg15
(lp38385
sg17
(lp38386
sg19
(lp38387
sg21
I0
sba(iArchitecture
Entity
p38388
(dp38389
g11
(lp38390
sg13
S'com.google.common.collect.ImmutableMapValues$SerializedForm'
p38391
sg15
(lp38392
sg17
(lp38393
sg19
(lp38394
sg21
I0
sba(iArchitecture
Entity
p38395
(dp38396
g11
(lp38397
sg13
S'com.google.common.collect.ImmutableMultimap'
p38398
sg15
(lp38399
sg17
(lp38400
sg19
(lp38401
sg21
I0
sba(iArchitecture
Entity
p38402
(dp38403
g11
(lp38404
sg13
S'com.google.common.collect.ImmutableMultimap$1'
p38405
sg15
(lp38406
sg17
(lp38407
sg19
(lp38408
sg21
I0
sba(iArchitecture
Entity
p38409
(dp38410
g11
(lp38411
sg13
S'com.google.common.collect.ImmutableMultimap$2'
p38412
sg15
(lp38413
sg17
(lp38414
sg19
(lp38415
sg21
I0
sba(iArchitecture
Entity
p38416
(dp38417
g11
(lp38418
sg13
S'com.google.common.collect.ImmutableMultimap$EntryCollection'
p38419
sg15
(lp38420
sg17
(lp38421
sg19
(lp38422
sg21
I0
sba(iArchitecture
Entity
p38423
(dp38424
g11
(lp38425
sg13
S'com.google.common.collect.ImmutableMultimap$FieldSettersHolder'
p38426
sg15
(lp38427
sg17
(lp38428
sg19
(lp38429
sg21
I0
sba(iArchitecture
Entity
p38430
(dp38431
g11
(lp38432
sg13
S'com.google.common.collect.ImmutableMultimap$Itr'
p38433
sg15
(lp38434
sg17
(lp38435
sg19
(lp38436
sg21
I0
sba(iArchitecture
Entity
p38437
(dp38438
g11
(lp38439
sg13
S'com.google.common.collect.ImmutableMultimap$Keys'
p38440
sg15
(lp38441
sg17
(lp38442
sg19
(lp38443
sg21
I0
sba(iArchitecture
Entity
p38444
(dp38445
g11
(lp38446
sg13
S'com.google.common.collect.ImmutableMultimap$Values'
p38447
sg15
(lp38448
sg17
(lp38449
sg19
(lp38450
sg21
I0
sba(iArchitecture
Entity
p38451
(dp38452
g11
(lp38453
sg13
S'com.google.common.collect.ImmutableMultiset'
p38454
sg15
(lp38455
sg17
(lp38456
sg19
(lp38457
sg21
I0
sba(iArchitecture
Entity
p38458
(dp38459
g11
(lp38460
sg13
S'com.google.common.collect.ImmutableMultiset$1'
p38461
sg15
(lp38462
sg17
(lp38463
sg19
(lp38464
sg21
I0
sba(iArchitecture
Entity
p38465
(dp38466
g11
(lp38467
sg13
S'com.google.common.collect.ImmutableMultiset$Builder'
p38468
sg15
(lp38469
sg17
(lp38470
sg19
(lp38471
sg21
I0
sba(iArchitecture
Entity
p38472
(dp38473
g11
(lp38474
sg13
S'com.google.common.collect.ImmutableMultiset$EntrySet'
p38475
sg15
(lp38476
sg17
(lp38477
sg19
(lp38478
sg21
I0
sba(iArchitecture
Entity
p38479
(dp38480
g11
(lp38481
sg13
S'com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm'
p38482
sg15
(lp38483
sg17
(lp38484
sg19
(lp38485
sg21
I0
sba(iArchitecture
Entity
p38486
(dp38487
g11
(lp38488
sg13
S'com.google.common.collect.ImmutableMultiset$SerializedForm'
p38489
sg15
(lp38490
sg17
(lp38491
sg19
(lp38492
sg21
I0
sba(iArchitecture
Entity
p38493
(dp38494
g11
(lp38495
sg13
S'com.google.common.collect.ImmutableRangeMap'
p38496
sg15
(lp38497
sg17
(lp38498
sg19
(lp38499
sg21
I0
sba(iArchitecture
Entity
p38500
(dp38501
g11
(lp38502
sg13
S'com.google.common.collect.ImmutableRangeMap$1'
p38503
sg15
(lp38504
sg17
(lp38505
sg19
(lp38506
sg21
I0
sba(iArchitecture
Entity
p38507
(dp38508
g11
(lp38509
sg13
S'com.google.common.collect.ImmutableRangeMap$2'
p38510
sg15
(lp38511
sg17
(lp38512
sg19
(lp38513
sg21
I0
sba(iArchitecture
Entity
p38514
(dp38515
g11
(lp38516
sg13
S'com.google.common.collect.ImmutableRangeMap$Builder'
p38517
sg15
(lp38518
sg17
(lp38519
sg19
(lp38520
sg21
I0
sba(iArchitecture
Entity
p38521
(dp38522
g11
(lp38523
sg13
S'com.google.common.collect.ImmutableRangeMap$SerializedForm'
p38524
sg15
(lp38525
sg17
(lp38526
sg19
(lp38527
sg21
I0
sba(iArchitecture
Entity
p38528
(dp38529
g11
(lp38530
sg13
S'com.google.common.collect.ImmutableRangeSet'
p38531
sg15
(lp38532
sg17
(lp38533
sg19
(lp38534
sg21
I0
sba(iArchitecture
Entity
p38535
(dp38536
g11
(lp38537
sg13
S'com.google.common.collect.ImmutableRangeSet$1'
p38538
sg15
(lp38539
sg17
(lp38540
sg19
(lp38541
sg21
I0
sba(iArchitecture
Entity
p38542
(dp38543
g11
(lp38544
sg13
S'com.google.common.collect.ImmutableRangeSet$AsSet'
p38545
sg15
(lp38546
sg17
(lp38547
sg19
(lp38548
sg21
I0
sba(iArchitecture
Entity
p38549
(dp38550
g11
(lp38551
sg13
S'com.google.common.collect.ImmutableRangeSet$AsSet$1'
p38552
sg15
(lp38553
sg17
(lp38554
sg19
(lp38555
sg21
I0
sba(iArchitecture
Entity
p38556
(dp38557
g11
(lp38558
sg13
S'com.google.common.collect.ImmutableRangeSet$AsSet$2'
p38559
sg15
(lp38560
sg17
(lp38561
sg19
(lp38562
sg21
I0
sba(iArchitecture
Entity
p38563
(dp38564
g11
(lp38565
sg13
S'com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm'
p38566
sg15
(lp38567
sg17
(lp38568
sg19
(lp38569
sg21
I0
sba(iArchitecture
Entity
p38570
(dp38571
g11
(lp38572
sg13
S'com.google.common.collect.ImmutableRangeSet$Builder'
p38573
sg15
(lp38574
sg17
(lp38575
sg19
(lp38576
sg21
I0
sba(iArchitecture
Entity
p38577
(dp38578
g11
(lp38579
sg13
S'com.google.common.collect.ImmutableRangeSet$ComplementRanges'
p38580
sg15
(lp38581
sg17
(lp38582
sg19
(lp38583
sg21
I0
sba(iArchitecture
Entity
p38584
(dp38585
g11
(lp38586
sg13
S'com.google.common.collect.ImmutableRangeSet$SerializedForm'
p38587
sg15
(lp38588
sg17
(lp38589
sg19
(lp38590
sg21
I0
sba(iArchitecture
Entity
p38591
(dp38592
g11
(lp38593
sg13
S'com.google.common.collect.ImmutableSet'
p38594
sg15
(lp38595
sg17
(lp38596
sg19
(lp38597
sg21
I0
sba(iArchitecture
Entity
p38598
(dp38599
g11
(lp38600
sg13
S'com.google.common.collect.ImmutableSet$Indexed'
p38601
sg15
(lp38602
sg17
(lp38603
sg19
(lp38604
sg21
I0
sba(iArchitecture
Entity
p38605
(dp38606
g11
(lp38607
sg13
S'com.google.common.collect.ImmutableSet$Indexed$1'
p38608
sg15
(lp38609
sg17
(lp38610
sg19
(lp38611
sg21
I0
sba(iArchitecture
Entity
p38612
(dp38613
g11
(lp38614
sg13
S'com.google.common.collect.ImmutableSet$SerializedForm'
p38615
sg15
(lp38616
sg17
(lp38617
sg19
(lp38618
sg21
I0
sba(iArchitecture
Entity
p38619
(dp38620
g11
(lp38621
sg13
S'com.google.common.collect.ImmutableSetMultimap'
p38622
sg15
(lp38623
sg17
(lp38624
sg19
(lp38625
sg21
I0
sba(iArchitecture
Entity
p38626
(dp38627
g11
(lp38628
sg13
S'com.google.common.collect.ImmutableSetMultimap$Builder'
p38629
sg15
(lp38630
sg17
(lp38631
sg19
(lp38632
sg21
I0
sba(iArchitecture
Entity
p38633
(dp38634
g11
(lp38635
sg13
S'com.google.common.collect.ImmutableSetMultimap$EntrySet'
p38636
sg15
(lp38637
sg17
(lp38638
sg19
(lp38639
sg21
I0
sba(iArchitecture
Entity
p38640
(dp38641
g11
(lp38642
sg13
S'com.google.common.collect.ImmutableSetMultimap_CustomFieldSerializer'
p38643
sg15
(lp38644
sg17
(lp38645
sg19
(lp38646
sg21
I0
sba(iArchitecture
Entity
p38647
(dp38648
g11
(lp38649
sg13
S'com.google.common.collect.ImmutableSortedAsList'
p38650
sg15
(lp38651
sg17
(lp38652
sg19
(lp38653
sg21
I0
sba(iArchitecture
Entity
p38654
(dp38655
g11
(lp38656
sg13
S'com.google.common.collect.ImmutableSortedMap'
p38657
sg15
(lp38658
sg17
(lp38659
sg19
(lp38660
sg21
I0
sba(iArchitecture
Entity
p38661
(dp38662
g11
(lp38663
sg13
S'com.google.common.collect.ImmutableSortedMap$1EntrySet'
p38664
sg15
(lp38665
sg17
(lp38666
sg19
(lp38667
sg21
I0
sba(iArchitecture
Entity
p38668
(dp38669
g11
(lp38670
sg13
S'com.google.common.collect.ImmutableSortedMap$1EntrySet$1'
p38671
sg15
(lp38672
sg17
(lp38673
sg19
(lp38674
sg21
I0
sba(iArchitecture
Entity
p38675
(dp38676
g11
(lp38677
sg13
S'com.google.common.collect.ImmutableSortedMap$Builder'
p38678
sg15
(lp38679
sg17
(lp38680
sg19
(lp38681
sg21
I0
sba(iArchitecture
Entity
p38682
(dp38683
g11
(lp38684
sg13
S'com.google.common.collect.ImmutableSortedMap$SerializedForm'
p38685
sg15
(lp38686
sg17
(lp38687
sg19
(lp38688
sg21
I0
sba(iArchitecture
Entity
p38689
(dp38690
g11
(lp38691
sg13
S'com.google.common.collect.ImmutableSortedMapFauxverideShim'
p38692
sg15
(lp38693
sg17
(lp38694
sg19
(lp38695
sg21
I0
sba(iArchitecture
Entity
p38696
(dp38697
g11
(lp38698
sg13
S'com.google.common.collect.ImmutableSortedMap_CustomFieldSerializer'
p38699
sg15
(lp38700
sg17
(lp38701
sg19
(lp38702
sg21
I0
sba(iArchitecture
Entity
p38703
(dp38704
g11
(lp38705
sg13
S'com.google.common.collect.ImmutableSortedMap_CustomFieldSerializerBase'
p38706
sg15
(lp38707
sg17
(lp38708
sg19
(lp38709
sg21
I0
sba(iArchitecture
Entity
p38710
(dp38711
g11
(lp38712
sg13
S'com.google.common.collect.ImmutableSortedMultiset'
p38713
sg15
(lp38714
sg17
(lp38715
sg19
(lp38716
sg21
I0
sba(iArchitecture
Entity
p38717
(dp38718
g11
(lp38719
sg13
S'com.google.common.collect.ImmutableSortedMultiset$Builder'
p38720
sg15
(lp38721
sg17
(lp38722
sg19
(lp38723
sg21
I0
sba(iArchitecture
Entity
p38724
(dp38725
g11
(lp38726
sg13
S'com.google.common.collect.ImmutableSortedMultiset$SerializedForm'
p38727
sg15
(lp38728
sg17
(lp38729
sg19
(lp38730
sg21
I0
sba(iArchitecture
Entity
p38731
(dp38732
g11
(lp38733
sg13
S'com.google.common.collect.ImmutableSortedMultisetFauxverideShim'
p38734
sg15
(lp38735
sg17
(lp38736
sg19
(lp38737
sg21
I0
sba(iArchitecture
Entity
p38738
(dp38739
g11
(lp38740
sg13
S'com.google.common.collect.ImmutableSortedSet'
p38741
sg15
(lp38742
sg17
(lp38743
sg19
(lp38744
sg21
I0
sba(iArchitecture
Entity
p38745
(dp38746
g11
(lp38747
sg13
S'com.google.common.collect.ImmutableSortedSet$SerializedForm'
p38748
sg15
(lp38749
sg17
(lp38750
sg19
(lp38751
sg21
I0
sba(iArchitecture
Entity
p38752
(dp38753
g11
(lp38754
sg13
S'com.google.common.collect.ImmutableSortedSetFauxverideShim'
p38755
sg15
(lp38756
sg17
(lp38757
sg19
(lp38758
sg21
I0
sba(iArchitecture
Entity
p38759
(dp38760
g11
(lp38761
sg13
S'com.google.common.collect.ImmutableTable'
p38762
sg15
(lp38763
sg17
(lp38764
sg19
(lp38765
sg21
I0
sba(iArchitecture
Entity
p38766
(dp38767
g11
(lp38768
sg13
S'com.google.common.collect.ImmutableTable$Builder'
p38769
sg15
(lp38770
sg17
(lp38771
sg19
(lp38772
sg21
I0
sba(iArchitecture
Entity
p38773
(dp38774
g11
(lp38775
sg13
S'com.google.common.collect.ImmutableTable$SerializedForm'
p38776
sg15
(lp38777
sg17
(lp38778
sg19
(lp38779
sg21
I0
sba(iArchitecture
Entity
p38780
(dp38781
g11
(lp38782
sg13
S'com.google.common.collect.ImmutableTable_CustomFieldSerializerBase'
p38783
sg15
(lp38784
sg17
(lp38785
sg19
(lp38786
sg21
I0
sba(iArchitecture
Entity
p38787
(dp38788
g11
(lp38789
sg13
S'com.google.common.collect.Interner'
p38790
sg15
(lp38791
sg17
(lp38792
sg19
(lp38793
sg21
I0
sba(iArchitecture
Entity
p38794
(dp38795
g11
(lp38796
sg13
S'com.google.common.collect.Interners'
p38797
sg15
(lp38798
sg17
(lp38799
sg19
(lp38800
sg21
I0
sba(iArchitecture
Entity
p38801
(dp38802
g11
(lp38803
sg13
S'com.google.common.collect.Interners$1'
p38804
sg15
(lp38805
sg17
(lp38806
sg19
(lp38807
sg21
I0
sba(iArchitecture
Entity
p38808
(dp38809
g11
(lp38810
sg13
S'com.google.common.collect.Interners$InternerFunction'
p38811
sg15
(lp38812
sg17
(lp38813
sg19
(lp38814
sg21
I0
sba(iArchitecture
Entity
p38815
(dp38816
g11
(lp38817
sg13
S'com.google.common.collect.Interners$WeakInterner'
p38818
sg15
(lp38819
sg17
(lp38820
sg19
(lp38821
sg21
I0
sba(iArchitecture
Entity
p38822
(dp38823
g11
(lp38824
sg13
S'com.google.common.collect.Interners$WeakInterner$Dummy'
p38825
sg15
(lp38826
sg17
(lp38827
sg19
(lp38828
sg21
I0
sba(iArchitecture
Entity
p38829
(dp38830
g11
(lp38831
sg13
S'com.google.common.collect.Iterables'
p38832
sg15
(lp38833
sg17
(lp38834
sg19
(lp38835
sg21
I0
sba(iArchitecture
Entity
p38836
(dp38837
g11
(lp38838
sg13
S'com.google.common.collect.Iterables$1'
p38839
sg15
(lp38840
sg17
(lp38841
sg19
(lp38842
sg21
I0
sba(iArchitecture
Entity
p38843
(dp38844
g11
(lp38845
sg13
S'com.google.common.collect.Iterables$10'
p38846
sg15
(lp38847
sg17
(lp38848
sg19
(lp38849
sg21
I0
sba(iArchitecture
Entity
p38850
(dp38851
g11
(lp38852
sg13
S'com.google.common.collect.Iterables$11'
p38853
sg15
(lp38854
sg17
(lp38855
sg19
(lp38856
sg21
I0
sba(iArchitecture
Entity
p38857
(dp38858
g11
(lp38859
sg13
S'com.google.common.collect.Iterables$12'
p38860
sg15
(lp38861
sg17
(lp38862
sg19
(lp38863
sg21
I0
sba(iArchitecture
Entity
p38864
(dp38865
g11
(lp38866
sg13
S'com.google.common.collect.Iterables$13'
p38867
sg15
(lp38868
sg17
(lp38869
sg19
(lp38870
sg21
I0
sba(iArchitecture
Entity
p38871
(dp38872
g11
(lp38873
sg13
S'com.google.common.collect.Iterables$2'
p38874
sg15
(lp38875
sg17
(lp38876
sg19
(lp38877
sg21
I0
sba(iArchitecture
Entity
p38878
(dp38879
g11
(lp38880
sg13
S'com.google.common.collect.Iterables$3'
p38881
sg15
(lp38882
sg17
(lp38883
sg19
(lp38884
sg21
I0
sba(iArchitecture
Entity
p38885
(dp38886
g11
(lp38887
sg13
S'com.google.common.collect.Iterables$4'
p38888
sg15
(lp38889
sg17
(lp38890
sg19
(lp38891
sg21
I0
sba(iArchitecture
Entity
p38892
(dp38893
g11
(lp38894
sg13
S'com.google.common.collect.Iterables$5'
p38895
sg15
(lp38896
sg17
(lp38897
sg19
(lp38898
sg21
I0
sba(iArchitecture
Entity
p38899
(dp38900
g11
(lp38901
sg13
S'com.google.common.collect.Iterables$6'
p38902
sg15
(lp38903
sg17
(lp38904
sg19
(lp38905
sg21
I0
sba(iArchitecture
Entity
p38906
(dp38907
g11
(lp38908
sg13
S'com.google.common.collect.Iterables$7'
p38909
sg15
(lp38910
sg17
(lp38911
sg19
(lp38912
sg21
I0
sba(iArchitecture
Entity
p38913
(dp38914
g11
(lp38915
sg13
S'com.google.common.collect.Iterables$8'
p38916
sg15
(lp38917
sg17
(lp38918
sg19
(lp38919
sg21
I0
sba(iArchitecture
Entity
p38920
(dp38921
g11
(lp38922
sg13
S'com.google.common.collect.Iterables$8$1'
p38923
sg15
(lp38924
sg17
(lp38925
sg19
(lp38926
sg21
I0
sba(iArchitecture
Entity
p38927
(dp38928
g11
(lp38929
sg13
S'com.google.common.collect.Iterables$9'
p38930
sg15
(lp38931
sg17
(lp38932
sg19
(lp38933
sg21
I0
sba(iArchitecture
Entity
p38934
(dp38935
g11
(lp38936
sg13
S'com.google.common.collect.Iterables$UnmodifiableIterable'
p38937
sg15
(lp38938
sg17
(lp38939
sg19
(lp38940
sg21
I0
sba(iArchitecture
Entity
p38941
(dp38942
g11
(lp38943
sg13
S'com.google.common.collect.Iterators'
p38944
sg15
(lp38945
sg17
(lp38946
sg19
(lp38947
sg21
I0
sba(iArchitecture
Entity
p38948
(dp38949
g11
(lp38950
sg13
S'com.google.common.collect.Iterators$1'
p38951
sg15
(lp38952
sg17
(lp38953
sg19
(lp38954
sg21
I0
sba(iArchitecture
Entity
p38955
(dp38956
g11
(lp38957
sg13
S'com.google.common.collect.Iterators$10'
p38958
sg15
(lp38959
sg17
(lp38960
sg19
(lp38961
sg21
I0
sba(iArchitecture
Entity
p38962
(dp38963
g11
(lp38964
sg13
S'com.google.common.collect.Iterators$11'
p38965
sg15
(lp38966
sg17
(lp38967
sg19
(lp38968
sg21
I0
sba(iArchitecture
Entity
p38969
(dp38970
g11
(lp38971
sg13
S'com.google.common.collect.Iterators$12'
p38972
sg15
(lp38973
sg17
(lp38974
sg19
(lp38975
sg21
I0
sba(iArchitecture
Entity
p38976
(dp38977
g11
(lp38978
sg13
S'com.google.common.collect.Iterators$13'
p38979
sg15
(lp38980
sg17
(lp38981
sg19
(lp38982
sg21
I0
sba(iArchitecture
Entity
p38983
(dp38984
g11
(lp38985
sg13
S'com.google.common.collect.Iterators$2'
p38986
sg15
(lp38987
sg17
(lp38988
sg19
(lp38989
sg21
I0
sba(iArchitecture
Entity
p38990
(dp38991
g11
(lp38992
sg13
S'com.google.common.collect.Iterators$3'
p38993
sg15
(lp38994
sg17
(lp38995
sg19
(lp38996
sg21
I0
sba(iArchitecture
Entity
p38997
(dp38998
g11
(lp38999
sg13
S'com.google.common.collect.Iterators$4'
p39000
sg15
(lp39001
sg17
(lp39002
sg19
(lp39003
sg21
I0
sba(iArchitecture
Entity
p39004
(dp39005
g11
(lp39006
sg13
S'com.google.common.collect.Iterators$5'
p39007
sg15
(lp39008
sg17
(lp39009
sg19
(lp39010
sg21
I0
sba(iArchitecture
Entity
p39011
(dp39012
g11
(lp39013
sg13
S'com.google.common.collect.Iterators$6'
p39014
sg15
(lp39015
sg17
(lp39016
sg19
(lp39017
sg21
I0
sba(iArchitecture
Entity
p39018
(dp39019
g11
(lp39020
sg13
S'com.google.common.collect.Iterators$7'
p39021
sg15
(lp39022
sg17
(lp39023
sg19
(lp39024
sg21
I0
sba(iArchitecture
Entity
p39025
(dp39026
g11
(lp39027
sg13
S'com.google.common.collect.Iterators$8'
p39028
sg15
(lp39029
sg17
(lp39030
sg19
(lp39031
sg21
I0
sba(iArchitecture
Entity
p39032
(dp39033
g11
(lp39034
sg13
S'com.google.common.collect.Iterators$9'
p39035
sg15
(lp39036
sg17
(lp39037
sg19
(lp39038
sg21
I0
sba(iArchitecture
Entity
p39039
(dp39040
g11
(lp39041
sg13
S'com.google.common.collect.Iterators$ConcatenatedIterator'
p39042
sg15
(lp39043
sg17
(lp39044
sg19
(lp39045
sg21
I0
sba(iArchitecture
Entity
p39046
(dp39047
g11
(lp39048
sg13
S'com.google.common.collect.Iterators$ConcatenatedIterator$1'
p39049
sg15
(lp39050
sg17
(lp39051
sg19
(lp39052
sg21
I0
sba(iArchitecture
Entity
p39053
(dp39054
g11
(lp39055
sg13
S'com.google.common.collect.Iterators$MergingIterator'
p39056
sg15
(lp39057
sg17
(lp39058
sg19
(lp39059
sg21
I0
sba(iArchitecture
Entity
p39060
(dp39061
g11
(lp39062
sg13
S'com.google.common.collect.Iterators$MergingIterator$1'
p39063
sg15
(lp39064
sg17
(lp39065
sg19
(lp39066
sg21
I0
sba(iArchitecture
Entity
p39067
(dp39068
g11
(lp39069
sg13
S'com.google.common.collect.Iterators$PeekingImpl'
p39070
sg15
(lp39071
sg17
(lp39072
sg19
(lp39073
sg21
I0
sba(iArchitecture
Entity
p39074
(dp39075
g11
(lp39076
sg13
S'com.google.common.collect.LexicographicalOrdering'
p39077
sg15
(lp39078
sg17
(lp39079
sg19
(lp39080
sg21
I0
sba(iArchitecture
Entity
p39081
(dp39082
g11
(lp39083
sg13
S'com.google.common.collect.LexicographicalOrdering_CustomFieldSerializer'
p39084
sg15
(lp39085
sg17
(lp39086
sg19
(lp39087
sg21
I0
sba(iArchitecture
Entity
p39088
(dp39089
g11
(lp39090
sg13
S'com.google.common.collect.LinkedHashMultimap'
p39091
sg15
(lp39092
sg17
(lp39093
sg19
(lp39094
sg21
I0
sba(iArchitecture
Entity
p39095
(dp39096
g11
(lp39097
sg13
S'com.google.common.collect.LinkedHashMultimap$1'
p39098
sg15
(lp39099
sg17
(lp39100
sg19
(lp39101
sg21
I0
sba(iArchitecture
Entity
p39102
(dp39103
g11
(lp39104
sg13
S'com.google.common.collect.LinkedHashMultimap$ValueEntry'
p39105
sg15
(lp39106
sg17
(lp39107
sg19
(lp39108
sg21
I0
sba(iArchitecture
Entity
p39109
(dp39110
g11
(lp39111
sg13
S'com.google.common.collect.LinkedHashMultimap$ValueSet'
p39112
sg15
(lp39113
sg17
(lp39114
sg19
(lp39115
sg21
I0
sba(iArchitecture
Entity
p39116
(dp39117
g11
(lp39118
sg13
S'com.google.common.collect.LinkedHashMultimap$ValueSet$1'
p39119
sg15
(lp39120
sg17
(lp39121
sg19
(lp39122
sg21
I0
sba(iArchitecture
Entity
p39123
(dp39124
g11
(lp39125
sg13
S'com.google.common.collect.LinkedHashMultimap$ValueSetLink'
p39126
sg15
(lp39127
sg17
(lp39128
sg19
(lp39129
sg21
I0
sba(iArchitecture
Entity
p39130
(dp39131
g11
(lp39132
sg13
S'com.google.common.collect.LinkedHashMultimap_CustomFieldSerializer'
p39133
sg15
(lp39134
sg17
(lp39135
sg19
(lp39136
sg21
I0
sba(iArchitecture
Entity
p39137
(dp39138
g11
(lp39139
sg13
S'com.google.common.collect.LinkedHashMultiset'
p39140
sg15
(lp39141
sg17
(lp39142
sg19
(lp39143
sg21
I0
sba(iArchitecture
Entity
p39144
(dp39145
g11
(lp39146
sg13
S'com.google.common.collect.LinkedHashMultiset_CustomFieldSerializer'
p39147
sg15
(lp39148
sg17
(lp39149
sg19
(lp39150
sg21
I0
sba(iArchitecture
Entity
p39151
(dp39152
g11
(lp39153
sg13
S'com.google.common.collect.LinkedListMultimap'
p39154
sg15
(lp39155
sg17
(lp39156
sg19
(lp39157
sg21
I0
sba(iArchitecture
Entity
p39158
(dp39159
g11
(lp39160
sg13
S'com.google.common.collect.LinkedListMultimap$1'
p39161
sg15
(lp39162
sg17
(lp39163
sg19
(lp39164
sg21
I0
sba(iArchitecture
Entity
p39165
(dp39166
g11
(lp39167
sg13
S'com.google.common.collect.LinkedListMultimap$1EntriesImpl'
p39168
sg15
(lp39169
sg17
(lp39170
sg19
(lp39171
sg21
I0
sba(iArchitecture
Entity
p39172
(dp39173
g11
(lp39174
sg13
S'com.google.common.collect.LinkedListMultimap$1KeySetImpl'
p39175
sg15
(lp39176
sg17
(lp39177
sg19
(lp39178
sg21
I0
sba(iArchitecture
Entity
p39179
(dp39180
g11
(lp39181
sg13
S'com.google.common.collect.LinkedListMultimap$1ValuesImpl'
p39182
sg15
(lp39183
sg17
(lp39184
sg19
(lp39185
sg21
I0
sba(iArchitecture
Entity
p39186
(dp39187
g11
(lp39188
sg13
S'com.google.common.collect.LinkedListMultimap$1ValuesImpl$1'
p39189
sg15
(lp39190
sg17
(lp39191
sg19
(lp39192
sg21
I0
sba(iArchitecture
Entity
p39193
(dp39194
g11
(lp39195
sg13
S'com.google.common.collect.LinkedListMultimap$DistinctKeyIterator'
p39196
sg15
(lp39197
sg17
(lp39198
sg19
(lp39199
sg21
I0
sba(iArchitecture
Entity
p39200
(dp39201
g11
(lp39202
sg13
S'com.google.common.collect.LinkedListMultimap$KeyList'
p39203
sg15
(lp39204
sg17
(lp39205
sg19
(lp39206
sg21
I0
sba(iArchitecture
Entity
p39207
(dp39208
g11
(lp39209
sg13
S'com.google.common.collect.LinkedListMultimap$Node'
p39210
sg15
(lp39211
sg17
(lp39212
sg19
(lp39213
sg21
I0
sba(iArchitecture
Entity
p39214
(dp39215
g11
(lp39216
sg13
S'com.google.common.collect.LinkedListMultimap$NodeIterator'
p39217
sg15
(lp39218
sg17
(lp39219
sg19
(lp39220
sg21
I0
sba(iArchitecture
Entity
p39221
(dp39222
g11
(lp39223
sg13
S'com.google.common.collect.LinkedListMultimap$ValueForKeyIterator'
p39224
sg15
(lp39225
sg17
(lp39226
sg19
(lp39227
sg21
I0
sba(iArchitecture
Entity
p39228
(dp39229
g11
(lp39230
sg13
S'com.google.common.collect.LinkedListMultimap_CustomFieldSerializer'
p39231
sg15
(lp39232
sg17
(lp39233
sg19
(lp39234
sg21
I0
sba(iArchitecture
Entity
p39235
(dp39236
g11
(lp39237
sg13
S'com.google.common.collect.Lists'
p39238
sg15
(lp39239
sg17
(lp39240
sg19
(lp39241
sg21
I0
sba(iArchitecture
Entity
p39242
(dp39243
g11
(lp39244
sg13
S'com.google.common.collect.Lists$1'
p39245
sg15
(lp39246
sg17
(lp39247
sg19
(lp39248
sg21
I0
sba(iArchitecture
Entity
p39249
(dp39250
g11
(lp39251
sg13
S'com.google.common.collect.Lists$2'
p39252
sg15
(lp39253
sg17
(lp39254
sg19
(lp39255
sg21
I0
sba(iArchitecture
Entity
p39256
(dp39257
g11
(lp39258
sg13
S'com.google.common.collect.Lists$AbstractListWrapper'
p39259
sg15
(lp39260
sg17
(lp39261
sg19
(lp39262
sg21
I0
sba(iArchitecture
Entity
p39263
(dp39264
g11
(lp39265
sg13
S'com.google.common.collect.Lists$CharSequenceAsList'
p39266
sg15
(lp39267
sg17
(lp39268
sg19
(lp39269
sg21
I0
sba(iArchitecture
Entity
p39270
(dp39271
g11
(lp39272
sg13
S'com.google.common.collect.Lists$OnePlusArrayList'
p39273
sg15
(lp39274
sg17
(lp39275
sg19
(lp39276
sg21
I0
sba(iArchitecture
Entity
p39277
(dp39278
g11
(lp39279
sg13
S'com.google.common.collect.Lists$Partition'
p39280
sg15
(lp39281
sg17
(lp39282
sg19
(lp39283
sg21
I0
sba(iArchitecture
Entity
p39284
(dp39285
g11
(lp39286
sg13
S'com.google.common.collect.Lists$RandomAccessListWrapper'
p39287
sg15
(lp39288
sg17
(lp39289
sg19
(lp39290
sg21
I0
sba(iArchitecture
Entity
p39291
(dp39292
g11
(lp39293
sg13
S'com.google.common.collect.Lists$RandomAccessPartition'
p39294
sg15
(lp39295
sg17
(lp39296
sg19
(lp39297
sg21
I0
sba(iArchitecture
Entity
p39298
(dp39299
g11
(lp39300
sg13
S'com.google.common.collect.Lists$RandomAccessReverseList'
p39301
sg15
(lp39302
sg17
(lp39303
sg19
(lp39304
sg21
I0
sba(iArchitecture
Entity
p39305
(dp39306
g11
(lp39307
sg13
S'com.google.common.collect.Lists$ReverseList'
p39308
sg15
(lp39309
sg17
(lp39310
sg19
(lp39311
sg21
I0
sba(iArchitecture
Entity
p39312
(dp39313
g11
(lp39314
sg13
S'com.google.common.collect.Lists$ReverseList$1'
p39315
sg15
(lp39316
sg17
(lp39317
sg19
(lp39318
sg21
I0
sba(iArchitecture
Entity
p39319
(dp39320
g11
(lp39321
sg13
S'com.google.common.collect.Lists$StringAsImmutableList'
p39322
sg15
(lp39323
sg17
(lp39324
sg19
(lp39325
sg21
I0
sba(iArchitecture
Entity
p39326
(dp39327
g11
(lp39328
sg13
S'com.google.common.collect.Lists$TransformingRandomAccessList'
p39329
sg15
(lp39330
sg17
(lp39331
sg19
(lp39332
sg21
I0
sba(iArchitecture
Entity
p39333
(dp39334
g11
(lp39335
sg13
S'com.google.common.collect.Lists$TransformingRandomAccessList$1'
p39336
sg15
(lp39337
sg17
(lp39338
sg19
(lp39339
sg21
I0
sba(iArchitecture
Entity
p39340
(dp39341
g11
(lp39342
sg13
S'com.google.common.collect.Lists$TransformingSequentialList'
p39343
sg15
(lp39344
sg17
(lp39345
sg19
(lp39346
sg21
I0
sba(iArchitecture
Entity
p39347
(dp39348
g11
(lp39349
sg13
S'com.google.common.collect.Lists$TransformingSequentialList$1'
p39350
sg15
(lp39351
sg17
(lp39352
sg19
(lp39353
sg21
I0
sba(iArchitecture
Entity
p39354
(dp39355
g11
(lp39356
sg13
S'com.google.common.collect.Lists$TwoPlusArrayList'
p39357
sg15
(lp39358
sg17
(lp39359
sg19
(lp39360
sg21
I0
sba(iArchitecture
Entity
p39361
(dp39362
g11
(lp39363
sg13
S'com.google.common.collect.MapConstraint'
p39364
sg15
(lp39365
sg17
(lp39366
sg19
(lp39367
sg21
I0
sba(iArchitecture
Entity
p39368
(dp39369
g11
(lp39370
sg13
S'com.google.common.collect.MapConstraints'
p39371
sg15
(lp39372
sg17
(lp39373
sg19
(lp39374
sg21
I0
sba(iArchitecture
Entity
p39375
(dp39376
g11
(lp39377
sg13
S'com.google.common.collect.MapConstraints$1'
p39378
sg15
(lp39379
sg17
(lp39380
sg19
(lp39381
sg21
I0
sba(iArchitecture
Entity
p39382
(dp39383
g11
(lp39384
sg13
S'com.google.common.collect.MapConstraints$2'
p39385
sg15
(lp39386
sg17
(lp39387
sg19
(lp39388
sg21
I0
sba(iArchitecture
Entity
p39389
(dp39390
g11
(lp39391
sg13
S'com.google.common.collect.MapConstraints$2$1'
p39392
sg15
(lp39393
sg17
(lp39394
sg19
(lp39395
sg21
I0
sba(iArchitecture
Entity
p39396
(dp39397
g11
(lp39398
sg13
S'com.google.common.collect.MapConstraints$ConstrainedAsMapEntries'
p39399
sg15
(lp39400
sg17
(lp39401
sg19
(lp39402
sg21
I0
sba(iArchitecture
Entity
p39403
(dp39404
g11
(lp39405
sg13
S'com.google.common.collect.MapConstraints$ConstrainedAsMapEntries$1'
p39406
sg15
(lp39407
sg17
(lp39408
sg19
(lp39409
sg21
I0
sba(iArchitecture
Entity
p39410
(dp39411
g11
(lp39412
sg13
S'com.google.common.collect.MapConstraints$ConstrainedAsMapValues'
p39413
sg15
(lp39414
sg17
(lp39415
sg19
(lp39416
sg21
I0
sba(iArchitecture
Entity
p39417
(dp39418
g11
(lp39419
sg13
S'com.google.common.collect.MapConstraints$ConstrainedAsMapValues$1'
p39420
sg15
(lp39421
sg17
(lp39422
sg19
(lp39423
sg21
I0
sba(iArchitecture
Entity
p39424
(dp39425
g11
(lp39426
sg13
S'com.google.common.collect.MapConstraints$ConstrainedEntries'
p39427
sg15
(lp39428
sg17
(lp39429
sg19
(lp39430
sg21
I0
sba(iArchitecture
Entity
p39431
(dp39432
g11
(lp39433
sg13
S'com.google.common.collect.MapConstraints$ConstrainedEntries$1'
p39434
sg15
(lp39435
sg17
(lp39436
sg19
(lp39437
sg21
I0
sba(iArchitecture
Entity
p39438
(dp39439
g11
(lp39440
sg13
S'com.google.common.collect.MapConstraints$ConstrainedEntrySet'
p39441
sg15
(lp39442
sg17
(lp39443
sg19
(lp39444
sg21
I0
sba(iArchitecture
Entity
p39445
(dp39446
g11
(lp39447
sg13
S'com.google.common.collect.MapConstraints$ConstrainedListMultimap'
p39448
sg15
(lp39449
sg17
(lp39450
sg19
(lp39451
sg21
I0
sba(iArchitecture
Entity
p39452
(dp39453
g11
(lp39454
sg13
S'com.google.common.collect.MapConstraints$ConstrainedMap'
p39455
sg15
(lp39456
sg17
(lp39457
sg19
(lp39458
sg21
I0
sba(iArchitecture
Entity
p39459
(dp39460
g11
(lp39461
sg13
S'com.google.common.collect.MapConstraints$ConstrainedMultimap'
p39462
sg15
(lp39463
sg17
(lp39464
sg19
(lp39465
sg21
I0
sba(iArchitecture
Entity
p39466
(dp39467
g11
(lp39468
sg13
S'com.google.common.collect.MapConstraints$ConstrainedMultimap$1'
p39469
sg15
(lp39470
sg17
(lp39471
sg19
(lp39472
sg21
I0
sba(iArchitecture
Entity
p39473
(dp39474
g11
(lp39475
sg13
S'com.google.common.collect.MapConstraints$ConstrainedMultimap$1AsMap'
p39476
sg15
(lp39477
sg17
(lp39478
sg19
(lp39479
sg21
I0
sba(iArchitecture
Entity
p39480
(dp39481
g11
(lp39482
sg13
S'com.google.common.collect.MapDifference'
p39483
sg15
(lp39484
sg17
(lp39485
sg19
(lp39486
sg21
I0
sba(iArchitecture
Entity
p39487
(dp39488
g11
(lp39489
sg13
S'com.google.common.collect.MapDifference$ValueDifference'
p39490
sg15
(lp39491
sg17
(lp39492
sg19
(lp39493
sg21
I0
sba(iArchitecture
Entity
p39494
(dp39495
g11
(lp39496
sg13
S'com.google.common.collect.MapMaker'
p39497
sg15
(lp39498
sg17
(lp39499
sg19
(lp39500
sg21
I0
sba(iArchitecture
Entity
p39501
(dp39502
g11
(lp39503
sg13
S'com.google.common.collect.MapMakerInternalMap'
p39504
sg15
(lp39505
sg17
(lp39506
sg19
(lp39507
sg21
I0
sba(iArchitecture
Entity
p39508
(dp39509
g11
(lp39510
sg13
S'com.google.common.collect.MapMakerInternalMap$1'
p39511
sg15
(lp39512
sg17
(lp39513
sg19
(lp39514
sg21
I0
sba(iArchitecture
Entity
p39515
(dp39516
g11
(lp39517
sg13
S'com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy'
p39518
sg15
(lp39519
sg17
(lp39520
sg19
(lp39521
sg21
I0
sba(iArchitecture
Entity
p39522
(dp39523
g11
(lp39524
sg13
S'com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry'
p39525
sg15
(lp39526
sg17
(lp39527
sg19
(lp39528
sg21
I0
sba(iArchitecture
Entity
p39529
(dp39530
g11
(lp39531
sg13
S'com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry'
p39532
sg15
(lp39533
sg17
(lp39534
sg19
(lp39535
sg21
I0
sba(iArchitecture
Entity
p39536
(dp39537
g11
(lp39538
sg13
S'com.google.common.collect.MapMakerInternalMap$CleanupMapTask'
p39539
sg15
(lp39540
sg17
(lp39541
sg19
(lp39542
sg21
I0
sba(iArchitecture
Entity
p39543
(dp39544
g11
(lp39545
sg13
S'com.google.common.collect.MapMakerInternalMap$DummyInternalEntry'
p39546
sg15
(lp39547
sg17
(lp39548
sg19
(lp39549
sg21
I0
sba(iArchitecture
Entity
p39550
(dp39551
g11
(lp39552
sg13
S'com.google.common.collect.MapMakerInternalMap$EntryIterator'
p39553
sg15
(lp39554
sg17
(lp39555
sg19
(lp39556
sg21
I0
sba(iArchitecture
Entity
p39557
(dp39558
g11
(lp39559
sg13
S'com.google.common.collect.MapMakerInternalMap$EntrySet'
p39560
sg15
(lp39561
sg17
(lp39562
sg19
(lp39563
sg21
I0
sba(iArchitecture
Entity
p39564
(dp39565
g11
(lp39566
sg13
S'com.google.common.collect.MapMakerInternalMap$HashIterator'
p39567
sg15
(lp39568
sg17
(lp39569
sg19
(lp39570
sg21
I0
sba(iArchitecture
Entity
p39571
(dp39572
g11
(lp39573
sg13
S'com.google.common.collect.MapMakerInternalMap$InternalEntry'
p39574
sg15
(lp39575
sg17
(lp39576
sg19
(lp39577
sg21
I0
sba(iArchitecture
Entity
p39578
(dp39579
g11
(lp39580
sg13
S'com.google.common.collect.MapMakerInternalMap$InternalEntryHelper'
p39581
sg15
(lp39582
sg17
(lp39583
sg19
(lp39584
sg21
I0
sba(iArchitecture
Entity
p39585
(dp39586
g11
(lp39587
sg13
S'com.google.common.collect.MapMakerInternalMap$KeyIterator'
p39588
sg15
(lp39589
sg17
(lp39590
sg19
(lp39591
sg21
I0
sba(iArchitecture
Entity
p39592
(dp39593
g11
(lp39594
sg13
S'com.google.common.collect.MapMakerInternalMap$KeySet'
p39595
sg15
(lp39596
sg17
(lp39597
sg19
(lp39598
sg21
I0
sba(iArchitecture
Entity
p39599
(dp39600
g11
(lp39601
sg13
S'com.google.common.collect.MapMakerInternalMap$SafeToArraySet'
p39602
sg15
(lp39603
sg17
(lp39604
sg19
(lp39605
sg21
I0
sba(iArchitecture
Entity
p39606
(dp39607
g11
(lp39608
sg13
S'com.google.common.collect.MapMakerInternalMap$Segment'
p39609
sg15
(lp39610
sg17
(lp39611
sg19
(lp39612
sg21
I0
sba(iArchitecture
Entity
p39613
(dp39614
g11
(lp39615
sg13
S'com.google.common.collect.MapMakerInternalMap$SerializationProxy'
p39616
sg15
(lp39617
sg17
(lp39618
sg19
(lp39619
sg21
I0
sba(iArchitecture
Entity
p39620
(dp39621
g11
(lp39622
sg13
S'com.google.common.collect.MapMakerInternalMap$Strength'
p39623
sg15
(lp39624
sg17
(lp39625
sg19
(lp39626
sg21
I0
sba(iArchitecture
Entity
p39627
(dp39628
g11
(lp39629
sg13
S'com.google.common.collect.MapMakerInternalMap$Strength$1'
p39630
sg15
(lp39631
sg17
(lp39632
sg19
(lp39633
sg21
I0
sba(iArchitecture
Entity
p39634
(dp39635
g11
(lp39636
sg13
S'com.google.common.collect.MapMakerInternalMap$Strength$2'
p39637
sg15
(lp39638
sg17
(lp39639
sg19
(lp39640
sg21
I0
sba(iArchitecture
Entity
p39641
(dp39642
g11
(lp39643
sg13
S'com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry'
p39644
sg15
(lp39645
sg17
(lp39646
sg19
(lp39647
sg21
I0
sba(iArchitecture
Entity
p39648
(dp39649
g11
(lp39650
sg13
S'com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper'
p39651
sg15
(lp39652
sg17
(lp39653
sg19
(lp39654
sg21
I0
sba(iArchitecture
Entity
p39655
(dp39656
g11
(lp39657
sg13
S'com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment'
p39658
sg15
(lp39659
sg17
(lp39660
sg19
(lp39661
sg21
I0
sba(iArchitecture
Entity
p39662
(dp39663
g11
(lp39664
sg13
S'com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry'
p39665
sg15
(lp39666
sg17
(lp39667
sg19
(lp39668
sg21
I0
sba(iArchitecture
Entity
p39669
(dp39670
g11
(lp39671
sg13
S'com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper'
p39672
sg15
(lp39673
sg17
(lp39674
sg19
(lp39675
sg21
I0
sba(iArchitecture
Entity
p39676
(dp39677
g11
(lp39678
sg13
S'com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment'
p39679
sg15
(lp39680
sg17
(lp39681
sg19
(lp39682
sg21
I0
sba(iArchitecture
Entity
p39683
(dp39684
g11
(lp39685
sg13
S'com.google.common.collect.MapMakerInternalMap$StrongValueEntry'
p39686
sg15
(lp39687
sg17
(lp39688
sg19
(lp39689
sg21
I0
sba(iArchitecture
Entity
p39690
(dp39691
g11
(lp39692
sg13
S'com.google.common.collect.MapMakerInternalMap$ValueIterator'
p39693
sg15
(lp39694
sg17
(lp39695
sg19
(lp39696
sg21
I0
sba(iArchitecture
Entity
p39697
(dp39698
g11
(lp39699
sg13
S'com.google.common.collect.MapMakerInternalMap$Values'
p39700
sg15
(lp39701
sg17
(lp39702
sg19
(lp39703
sg21
I0
sba(iArchitecture
Entity
p39704
(dp39705
g11
(lp39706
sg13
S'com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry'
p39707
sg15
(lp39708
sg17
(lp39709
sg19
(lp39710
sg21
I0
sba(iArchitecture
Entity
p39711
(dp39712
g11
(lp39713
sg13
S'com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper'
p39714
sg15
(lp39715
sg17
(lp39716
sg19
(lp39717
sg21
I0
sba(iArchitecture
Entity
p39718
(dp39719
g11
(lp39720
sg13
S'com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment'
p39721
sg15
(lp39722
sg17
(lp39723
sg19
(lp39724
sg21
I0
sba(iArchitecture
Entity
p39725
(dp39726
g11
(lp39727
sg13
S'com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry'
p39728
sg15
(lp39729
sg17
(lp39730
sg19
(lp39731
sg21
I0
sba(iArchitecture
Entity
p39732
(dp39733
g11
(lp39734
sg13
S'com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper'
p39735
sg15
(lp39736
sg17
(lp39737
sg19
(lp39738
sg21
I0
sba(iArchitecture
Entity
p39739
(dp39740
g11
(lp39741
sg13
S'com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment'
p39742
sg15
(lp39743
sg17
(lp39744
sg19
(lp39745
sg21
I0
sba(iArchitecture
Entity
p39746
(dp39747
g11
(lp39748
sg13
S'com.google.common.collect.MapMakerInternalMap$WeakValueEntry'
p39749
sg15
(lp39750
sg17
(lp39751
sg19
(lp39752
sg21
I0
sba(iArchitecture
Entity
p39753
(dp39754
g11
(lp39755
sg13
S'com.google.common.collect.MapMakerInternalMap$WeakValueReference'
p39756
sg15
(lp39757
sg17
(lp39758
sg19
(lp39759
sg21
I0
sba(iArchitecture
Entity
p39760
(dp39761
g11
(lp39762
sg13
S'com.google.common.collect.MapMakerInternalMap$WeakValueReferenceImpl'
p39763
sg15
(lp39764
sg17
(lp39765
sg19
(lp39766
sg21
I0
sba(iArchitecture
Entity
p39767
(dp39768
g11
(lp39769
sg13
S'com.google.common.collect.MapMakerInternalMap$WriteThroughEntry'
p39770
sg15
(lp39771
sg17
(lp39772
sg19
(lp39773
sg21
I0
sba(iArchitecture
Entity
p39774
(dp39775
g11
(lp39776
sg13
S'com.google.common.collect.Maps'
p39777
sg15
(lp39778
sg17
(lp39779
sg19
(lp39780
sg21
I0
sba(iArchitecture
Entity
p39781
(dp39782
g11
(lp39783
sg13
S'com.google.common.collect.Maps$1'
p39784
sg15
(lp39785
sg17
(lp39786
sg19
(lp39787
sg21
I0
sba(iArchitecture
Entity
p39788
(dp39789
g11
(lp39790
sg13
S'com.google.common.collect.Maps$10'
p39791
sg15
(lp39792
sg17
(lp39793
sg19
(lp39794
sg21
I0
sba(iArchitecture
Entity
p39795
(dp39796
g11
(lp39797
sg13
S'com.google.common.collect.Maps$11'
p39798
sg15
(lp39799
sg17
(lp39800
sg19
(lp39801
sg21
I0
sba(iArchitecture
Entity
p39802
(dp39803
g11
(lp39804
sg13
S'com.google.common.collect.Maps$2'
p39805
sg15
(lp39806
sg17
(lp39807
sg19
(lp39808
sg21
I0
sba(iArchitecture
Entity
p39809
(dp39810
g11
(lp39811
sg13
S'com.google.common.collect.Maps$3'
p39812
sg15
(lp39813
sg17
(lp39814
sg19
(lp39815
sg21
I0
sba(iArchitecture
Entity
p39816
(dp39817
g11
(lp39818
sg13
S'com.google.common.collect.Maps$4'
p39819
sg15
(lp39820
sg17
(lp39821
sg19
(lp39822
sg21
I0
sba(iArchitecture
Entity
p39823
(dp39824
g11
(lp39825
sg13
S'com.google.common.collect.Maps$5'
p39826
sg15
(lp39827
sg17
(lp39828
sg19
(lp39829
sg21
I0
sba(iArchitecture
Entity
p39830
(dp39831
g11
(lp39832
sg13
S'com.google.common.collect.Maps$6'
p39833
sg15
(lp39834
sg17
(lp39835
sg19
(lp39836
sg21
I0
sba(iArchitecture
Entity
p39837
(dp39838
g11
(lp39839
sg13
S'com.google.common.collect.Maps$7'
p39840
sg15
(lp39841
sg17
(lp39842
sg19
(lp39843
sg21
I0
sba(iArchitecture
Entity
p39844
(dp39845
g11
(lp39846
sg13
S'com.google.common.collect.Maps$8'
p39847
sg15
(lp39848
sg17
(lp39849
sg19
(lp39850
sg21
I0
sba(iArchitecture
Entity
p39851
(dp39852
g11
(lp39853
sg13
S'com.google.common.collect.Maps$9'
p39854
sg15
(lp39855
sg17
(lp39856
sg19
(lp39857
sg21
I0
sba(iArchitecture
Entity
p39858
(dp39859
g11
(lp39860
sg13
S'com.google.common.collect.Maps$AbstractFilteredMap'
p39861
sg15
(lp39862
sg17
(lp39863
sg19
(lp39864
sg21
I0
sba(iArchitecture
Entity
p39865
(dp39866
g11
(lp39867
sg13
S'com.google.common.collect.Maps$AsMapView'
p39868
sg15
(lp39869
sg17
(lp39870
sg19
(lp39871
sg21
I0
sba(iArchitecture
Entity
p39872
(dp39873
g11
(lp39874
sg13
S'com.google.common.collect.Maps$AsMapView$1EntrySetImpl'
p39875
sg15
(lp39876
sg17
(lp39877
sg19
(lp39878
sg21
I0
sba(iArchitecture
Entity
p39879
(dp39880
g11
(lp39881
sg13
S'com.google.common.collect.Maps$BiMapConverter'
p39882
sg15
(lp39883
sg17
(lp39884
sg19
(lp39885
sg21
I0
sba(iArchitecture
Entity
p39886
(dp39887
g11
(lp39888
sg13
S'com.google.common.collect.Maps$DescendingMap'
p39889
sg15
(lp39890
sg17
(lp39891
sg19
(lp39892
sg21
I0
sba(iArchitecture
Entity
p39893
(dp39894
g11
(lp39895
sg13
S'com.google.common.collect.Maps$DescendingMap$1EntrySetImpl'
p39896
sg15
(lp39897
sg17
(lp39898
sg19
(lp39899
sg21
I0
sba(iArchitecture
Entity
p39900
(dp39901
g11
(lp39902
sg13
S'com.google.common.collect.Maps$EntryFunction'
p39903
sg15
(lp39904
sg17
(lp39905
sg19
(lp39906
sg21
I0
sba(iArchitecture
Entity
p39907
(dp39908
g11
(lp39909
sg13
S'com.google.common.collect.Maps$EntryFunction$1'
p39910
sg15
(lp39911
sg17
(lp39912
sg19
(lp39913
sg21
I0
sba(iArchitecture
Entity
p39914
(dp39915
g11
(lp39916
sg13
S'com.google.common.collect.Maps$EntryFunction$2'
p39917
sg15
(lp39918
sg17
(lp39919
sg19
(lp39920
sg21
I0
sba(iArchitecture
Entity
p39921
(dp39922
g11
(lp39923
sg13
S'com.google.common.collect.Maps$EntrySet'
p39924
sg15
(lp39925
sg17
(lp39926
sg19
(lp39927
sg21
I0
sba(iArchitecture
Entity
p39928
(dp39929
g11
(lp39930
sg13
S'com.google.common.collect.Maps$EntryTransformer'
p39931
sg15
(lp39932
sg17
(lp39933
sg19
(lp39934
sg21
I0
sba(iArchitecture
Entity
p39935
(dp39936
g11
(lp39937
sg13
S'com.google.common.collect.Maps$FilteredEntryBiMap'
p39938
sg15
(lp39939
sg17
(lp39940
sg19
(lp39941
sg21
I0
sba(iArchitecture
Entity
p39942
(dp39943
g11
(lp39944
sg13
S'com.google.common.collect.Maps$FilteredEntryBiMap$1'
p39945
sg15
(lp39946
sg17
(lp39947
sg19
(lp39948
sg21
I0
sba(iArchitecture
Entity
p39949
(dp39950
g11
(lp39951
sg13
S'com.google.common.collect.Maps$FilteredEntryMap'
p39952
sg15
(lp39953
sg17
(lp39954
sg19
(lp39955
sg21
I0
sba(iArchitecture
Entity
p39956
(dp39957
g11
(lp39958
sg13
S'com.google.common.collect.Maps$FilteredEntryMap$EntrySet'
p39959
sg15
(lp39960
sg17
(lp39961
sg19
(lp39962
sg21
I0
sba(iArchitecture
Entity
p39963
(dp39964
g11
(lp39965
sg13
S'com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1'
p39966
sg15
(lp39967
sg17
(lp39968
sg19
(lp39969
sg21
I0
sba(iArchitecture
Entity
p39970
(dp39971
g11
(lp39972
sg13
S'com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1'
p39973
sg15
(lp39974
sg17
(lp39975
sg19
(lp39976
sg21
I0
sba(iArchitecture
Entity
p39977
(dp39978
g11
(lp39979
sg13
S'com.google.common.collect.Maps$FilteredEntryMap$KeySet'
p39980
sg15
(lp39981
sg17
(lp39982
sg19
(lp39983
sg21
I0
sba(iArchitecture
Entity
p39984
(dp39985
g11
(lp39986
sg13
S'com.google.common.collect.Maps$FilteredEntryNavigableMap'
p39987
sg15
(lp39988
sg17
(lp39989
sg19
(lp39990
sg21
I0
sba(iArchitecture
Entity
p39991
(dp39992
g11
(lp39993
sg13
S'com.google.common.collect.Maps$FilteredEntryNavigableMap$1'
p39994
sg15
(lp39995
sg17
(lp39996
sg19
(lp39997
sg21
I0
sba(iArchitecture
Entity
p39998
(dp39999
g11
(lp40000
sg13
S'com.google.common.collect.Maps$FilteredEntrySortedMap'
p40001
sg15
(lp40002
sg17
(lp40003
sg19
(lp40004
sg21
I0
sba(iArchitecture
Entity
p40005
(dp40006
g11
(lp40007
sg13
S'com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet'
p40008
sg15
(lp40009
sg17
(lp40010
sg19
(lp40011
sg21
I0
sba(iArchitecture
Entity
p40012
(dp40013
g11
(lp40014
sg13
S'com.google.common.collect.Maps$FilteredKeyMap'
p40015
sg15
(lp40016
sg17
(lp40017
sg19
(lp40018
sg21
I0
sba(iArchitecture
Entity
p40019
(dp40020
g11
(lp40021
sg13
S'com.google.common.collect.Maps$FilteredMapValues'
p40022
sg15
(lp40023
sg17
(lp40024
sg19
(lp40025
sg21
I0
sba(iArchitecture
Entity
p40026
(dp40027
g11
(lp40028
sg13
S'com.google.common.collect.Maps$IteratorBasedAbstractMap'
p40029
sg15
(lp40030
sg17
(lp40031
sg19
(lp40032
sg21
I0
sba(iArchitecture
Entity
p40033
(dp40034
g11
(lp40035
sg13
S'com.google.common.collect.Maps$IteratorBasedAbstractMap$1'
p40036
sg15
(lp40037
sg17
(lp40038
sg19
(lp40039
sg21
I0
sba(iArchitecture
Entity
p40040
(dp40041
g11
(lp40042
sg13
S'com.google.common.collect.Maps$KeySet'
p40043
sg15
(lp40044
sg17
(lp40045
sg19
(lp40046
sg21
I0
sba(iArchitecture
Entity
p40047
(dp40048
g11
(lp40049
sg13
S'com.google.common.collect.Maps$MapDifferenceImpl'
p40050
sg15
(lp40051
sg17
(lp40052
sg19
(lp40053
sg21
I0
sba(iArchitecture
Entity
p40054
(dp40055
g11
(lp40056
sg13
S'com.google.common.collect.Maps$NavigableAsMapView'
p40057
sg15
(lp40058
sg17
(lp40059
sg19
(lp40060
sg21
I0
sba(iArchitecture
Entity
p40061
(dp40062
g11
(lp40063
sg13
S'com.google.common.collect.Maps$NavigableKeySet'
p40064
sg15
(lp40065
sg17
(lp40066
sg19
(lp40067
sg21
I0
sba(iArchitecture
Entity
p40068
(dp40069
g11
(lp40070
sg13
S'com.google.common.collect.Maps$SortedAsMapView'
p40071
sg15
(lp40072
sg17
(lp40073
sg19
(lp40074
sg21
I0
sba(iArchitecture
Entity
p40075
(dp40076
g11
(lp40077
sg13
S'com.google.common.collect.Maps$SortedKeySet'
p40078
sg15
(lp40079
sg17
(lp40080
sg19
(lp40081
sg21
I0
sba(iArchitecture
Entity
p40082
(dp40083
g11
(lp40084
sg13
S'com.google.common.collect.Maps$SortedMapDifferenceImpl'
p40085
sg15
(lp40086
sg17
(lp40087
sg19
(lp40088
sg21
I0
sba(iArchitecture
Entity
p40089
(dp40090
g11
(lp40091
sg13
S'com.google.common.collect.Maps$TransformedEntriesMap'
p40092
sg15
(lp40093
sg17
(lp40094
sg19
(lp40095
sg21
I0
sba(iArchitecture
Entity
p40096
(dp40097
g11
(lp40098
sg13
S'com.google.common.collect.Maps$TransformedEntriesNavigableMap'
p40099
sg15
(lp40100
sg17
(lp40101
sg19
(lp40102
sg21
I0
sba(iArchitecture
Entity
p40103
(dp40104
g11
(lp40105
sg13
S'com.google.common.collect.Maps$TransformedEntriesSortedMap'
p40106
sg15
(lp40107
sg17
(lp40108
sg19
(lp40109
sg21
I0
sba(iArchitecture
Entity
p40110
(dp40111
g11
(lp40112
sg13
S'com.google.common.collect.Maps$UnmodifiableBiMap'
p40113
sg15
(lp40114
sg17
(lp40115
sg19
(lp40116
sg21
I0
sba(iArchitecture
Entity
p40117
(dp40118
g11
(lp40119
sg13
S'com.google.common.collect.Maps$UnmodifiableEntries'
p40120
sg15
(lp40121
sg17
(lp40122
sg19
(lp40123
sg21
I0
sba(iArchitecture
Entity
p40124
(dp40125
g11
(lp40126
sg13
S'com.google.common.collect.Maps$UnmodifiableEntrySet'
p40127
sg15
(lp40128
sg17
(lp40129
sg19
(lp40130
sg21
I0
sba(iArchitecture
Entity
p40131
(dp40132
g11
(lp40133
sg13
S'com.google.common.collect.Maps$UnmodifiableNavigableMap'
p40134
sg15
(lp40135
sg17
(lp40136
sg19
(lp40137
sg21
I0
sba(iArchitecture
Entity
p40138
(dp40139
g11
(lp40140
sg13
S'com.google.common.collect.Maps$ValueDifferenceImpl'
p40141
sg15
(lp40142
sg17
(lp40143
sg19
(lp40144
sg21
I0
sba(iArchitecture
Entity
p40145
(dp40146
g11
(lp40147
sg13
S'com.google.common.collect.Maps$Values'
p40148
sg15
(lp40149
sg17
(lp40150
sg19
(lp40151
sg21
I0
sba(iArchitecture
Entity
p40152
(dp40153
g11
(lp40154
sg13
S'com.google.common.collect.Maps$ViewCachingAbstractMap'
p40155
sg15
(lp40156
sg17
(lp40157
sg19
(lp40158
sg21
I0
sba(iArchitecture
Entity
p40159
(dp40160
g11
(lp40161
V2658
p40162
ag40162
ag40162
asg13
S'com.google.common.collect.MinMaxPriorityQueue'
p40163
sg15
(lp40164
VA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p40165
aVA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p40166
aVA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p40167
asg17
(lp40168
(lp40169
I1
aag40169
ag40169
asg19
(lp40170
Vremove() in MinMaxPriorityQueue<Double> not removing the correct object
p40171
ag40171
ag40171
asg21
I0
sba(iArchitecture
Entity
p40172
(dp40173
g11
(lp40174
g40162
ag40162
ag40162
asg13
S'com.google.common.collect.MinMaxPriorityQueue$1'
p40175
sg15
(lp40176
VA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p40177
aVA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p40178
aVA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p40179
asg17
(lp40180
g40169
ag40169
ag40169
asg19
(lp40181
g40171
ag40171
ag40171
asg21
I0
sba(iArchitecture
Entity
p40182
(dp40183
g11
(lp40184
g40162
ag40162
ag40162
asg13
S'com.google.common.collect.MinMaxPriorityQueue$Builder'
p40185
sg15
(lp40186
VA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p40187
aVA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p40188
aVA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p40189
asg17
(lp40190
g40169
ag40169
ag40169
asg19
(lp40191
g40171
ag40171
ag40171
asg21
I0
sba(iArchitecture
Entity
p40192
(dp40193
g11
(lp40194
g40162
ag40162
ag40162
asg13
S'com.google.common.collect.MinMaxPriorityQueue$Heap'
p40195
sg15
(lp40196
VA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p40197
aVA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p40198
aVA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p40199
asg17
(lp40200
g40169
ag40169
ag40169
asg19
(lp40201
g40171
ag40171
ag40171
asg21
I0
sba(iArchitecture
Entity
p40202
(dp40203
g11
(lp40204
g40162
ag40162
ag40162
asg13
S'com.google.common.collect.MinMaxPriorityQueue$MoveDesc'
p40205
sg15
(lp40206
VA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p40207
aVA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p40208
aVA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p40209
asg17
(lp40210
g40169
ag40169
ag40169
asg19
(lp40211
g40171
ag40171
ag40171
asg21
I0
sba(iArchitecture
Entity
p40212
(dp40213
g11
(lp40214
g40162
ag40162
ag40162
asg13
S'com.google.common.collect.MinMaxPriorityQueue$QueueIterator'
p40215
sg15
(lp40216
VA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p40217
aVA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p40218
aVA MinMaxPriorityQueue fails at removing the correct object after a series of operations. See output and code below.\u000a\u000a> [5.6, 6.0, 5.7, 5.9]\u000aTry to remove 5.7 :\u000a[5.6, 6.0, 5.7]\u000a\u000aObtained from :\u000a\u000a> MinMaxPriorityQueue<Double> values = MinMaxPriorityQueue.create();\u000a			values.add(6.2);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.1);\u000a			values.pollLast();\u000a			values.add(5.7);\u000a			values.pollFirst();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollFirst();\u000a			values.add(6.2);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.0);\u000a			values.remove(6.2);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.add(5.7);\u000a			values.pollLast();\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(6.4);\u000a			values.pollFirst();\u000a			values.remove(6.3);\u000a			values.add(5.8);\u000a			values.remove(5.8);\u000a			values.add(6.4);\u000a			values.remove(6.0);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(6.3);\u000a			values.pollLast();\u000a			values.add(6.3);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.5);\u000a			values.pollLast();\u000a			values.pollLast();\u000a			values.add(5.4);\u000a			values.remove(5.4);\u000a			values.add(5.7);\u000a			values.remove(6.1);\u000a			values.add(5.6);\u000a			values.add(5.4);\u000a			values.pollLast();\u000a			values.remove(5.5);\u000a			values.add(5.8);\u000a			values.pollLast();\u000a			values.add(5.6);\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(5.8);\u000a			values.pollFirst();\u000a			values.remove(5.8);\u000a			values.add(5.6);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.pollFirst();\u000a			values.add(5.7);\u000a			values.add(6.0);\u000a			values.pollFirst();\u000a			values.remove(5.7);\u000a			values.add(6.1);\u000a			values.pollLast();\u000a			values.add(5.9);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(6.1);\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.remove(6.1);\u000a			values.add(6.0);\u000a			values.add(6.0);\u000a			values.pollLast();\u000a			values.remove(6.0);\u000a			values.add(5.9);\u000a			values.remove(6.0);\u000a			values.add(5.7);\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			values.add(6.1);\u000a			values.pollFirst();\u000a			values.add(5.6);\u000a			values.pollLast();\u000a			System.out.println(values);\u000a			System.out.println("Try to remove 5.7 :");\u000a			values.remove(5.7);\u000a			System.out.println(values);
p40219
asg17
(lp40220
g40169
ag40169
ag40169
asg19
(lp40221
g40171
ag40171
ag40171
asg21
I0
sba(iArchitecture
Entity
p40222
(dp40223
g11
(lp40224
sg13
S'com.google.common.collect.MultimapBuilder'
p40225
sg15
(lp40226
sg17
(lp40227
sg19
(lp40228
sg21
I0
sba(iArchitecture
Entity
p40229
(dp40230
g11
(lp40231
sg13
S'com.google.common.collect.MultimapBuilder$1'
p40232
sg15
(lp40233
sg17
(lp40234
sg19
(lp40235
sg21
I0
sba(iArchitecture
Entity
p40236
(dp40237
g11
(lp40238
sg13
S'com.google.common.collect.MultimapBuilder$2'
p40239
sg15
(lp40240
sg17
(lp40241
sg19
(lp40242
sg21
I0
sba(iArchitecture
Entity
p40243
(dp40244
g11
(lp40245
sg13
S'com.google.common.collect.MultimapBuilder$3'
p40246
sg15
(lp40247
sg17
(lp40248
sg19
(lp40249
sg21
I0
sba(iArchitecture
Entity
p40250
(dp40251
g11
(lp40252
sg13
S'com.google.common.collect.MultimapBuilder$4'
p40253
sg15
(lp40254
sg17
(lp40255
sg19
(lp40256
sg21
I0
sba(iArchitecture
Entity
p40257
(dp40258
g11
(lp40259
sg13
S'com.google.common.collect.MultimapBuilder$ArrayListSupplier'
p40260
sg15
(lp40261
sg17
(lp40262
sg19
(lp40263
sg21
I0
sba(iArchitecture
Entity
p40264
(dp40265
g11
(lp40266
sg13
S'com.google.common.collect.MultimapBuilder$EnumSetSupplier'
p40267
sg15
(lp40268
sg17
(lp40269
sg19
(lp40270
sg21
I0
sba(iArchitecture
Entity
p40271
(dp40272
g11
(lp40273
sg13
S'com.google.common.collect.MultimapBuilder$HashSetSupplier'
p40274
sg15
(lp40275
sg17
(lp40276
sg19
(lp40277
sg21
I0
sba(iArchitecture
Entity
p40278
(dp40279
g11
(lp40280
sg13
S'com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier'
p40281
sg15
(lp40282
sg17
(lp40283
sg19
(lp40284
sg21
I0
sba(iArchitecture
Entity
p40285
(dp40286
g11
(lp40287
sg13
S'com.google.common.collect.MultimapBuilder$LinkedListSupplier'
p40288
sg15
(lp40289
sg17
(lp40290
sg19
(lp40291
sg21
I0
sba(iArchitecture
Entity
p40292
(dp40293
g11
(lp40294
sg13
S'com.google.common.collect.MultimapBuilder$ListMultimapBuilder'
p40295
sg15
(lp40296
sg17
(lp40297
sg19
(lp40298
sg21
I0
sba(iArchitecture
Entity
p40299
(dp40300
g11
(lp40301
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys'
p40302
sg15
(lp40303
sg17
(lp40304
sg19
(lp40305
sg21
I0
sba(iArchitecture
Entity
p40306
(dp40307
g11
(lp40308
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1'
p40309
sg15
(lp40310
sg17
(lp40311
sg19
(lp40312
sg21
I0
sba(iArchitecture
Entity
p40313
(dp40314
g11
(lp40315
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2'
p40316
sg15
(lp40317
sg17
(lp40318
sg19
(lp40319
sg21
I0
sba(iArchitecture
Entity
p40320
(dp40321
g11
(lp40322
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3'
p40323
sg15
(lp40324
sg17
(lp40325
sg19
(lp40326
sg21
I0
sba(iArchitecture
Entity
p40327
(dp40328
g11
(lp40329
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4'
p40330
sg15
(lp40331
sg17
(lp40332
sg19
(lp40333
sg21
I0
sba(iArchitecture
Entity
p40334
(dp40335
g11
(lp40336
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5'
p40337
sg15
(lp40338
sg17
(lp40339
sg19
(lp40340
sg21
I0
sba(iArchitecture
Entity
p40341
(dp40342
g11
(lp40343
sg13
S'com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6'
p40344
sg15
(lp40345
sg17
(lp40346
sg19
(lp40347
sg21
I0
sba(iArchitecture
Entity
p40348
(dp40349
g11
(lp40350
sg13
S'com.google.common.collect.MultimapBuilder$SetMultimapBuilder'
p40351
sg15
(lp40352
sg17
(lp40353
sg19
(lp40354
sg21
I0
sba(iArchitecture
Entity
p40355
(dp40356
g11
(lp40357
sg13
S'com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder'
p40358
sg15
(lp40359
sg17
(lp40360
sg19
(lp40361
sg21
I0
sba(iArchitecture
Entity
p40362
(dp40363
g11
(lp40364
sg13
S'com.google.common.collect.MultimapBuilder$TreeSetSupplier'
p40365
sg15
(lp40366
sg17
(lp40367
sg19
(lp40368
sg21
I0
sba(iArchitecture
Entity
p40369
(dp40370
g11
(lp40371
sg13
S'com.google.common.collect.Multimap_CustomFieldSerializerBase'
p40372
sg15
(lp40373
sg17
(lp40374
sg19
(lp40375
sg21
I0
sba(iArchitecture
Entity
p40376
(dp40377
g11
(lp40378
sg13
S'com.google.common.collect.Multimaps'
p40379
sg15
(lp40380
sg17
(lp40381
sg19
(lp40382
sg21
I0
sba(iArchitecture
Entity
p40383
(dp40384
g11
(lp40385
sg13
S'com.google.common.collect.Multimaps$AsMap'
p40386
sg15
(lp40387
sg17
(lp40388
sg19
(lp40389
sg21
I0
sba(iArchitecture
Entity
p40390
(dp40391
g11
(lp40392
sg13
S'com.google.common.collect.Multimaps$AsMap$EntrySet'
p40393
sg15
(lp40394
sg17
(lp40395
sg19
(lp40396
sg21
I0
sba(iArchitecture
Entity
p40397
(dp40398
g11
(lp40399
sg13
S'com.google.common.collect.Multimaps$AsMap$EntrySet$1'
p40400
sg15
(lp40401
sg17
(lp40402
sg19
(lp40403
sg21
I0
sba(iArchitecture
Entity
p40404
(dp40405
g11
(lp40406
sg13
S'com.google.common.collect.Multimaps$CustomListMultimap'
p40407
sg15
(lp40408
sg17
(lp40409
sg19
(lp40410
sg21
I0
sba(iArchitecture
Entity
p40411
(dp40412
g11
(lp40413
sg13
S'com.google.common.collect.Multimaps$CustomMultimap'
p40414
sg15
(lp40415
sg17
(lp40416
sg19
(lp40417
sg21
I0
sba(iArchitecture
Entity
p40418
(dp40419
g11
(lp40420
sg13
S'com.google.common.collect.Multimaps$CustomSetMultimap'
p40421
sg15
(lp40422
sg17
(lp40423
sg19
(lp40424
sg21
I0
sba(iArchitecture
Entity
p40425
(dp40426
g11
(lp40427
sg13
S'com.google.common.collect.Multimaps$CustomSortedSetMultimap'
p40428
sg15
(lp40429
sg17
(lp40430
sg19
(lp40431
sg21
I0
sba(iArchitecture
Entity
p40432
(dp40433
g11
(lp40434
sg13
S'com.google.common.collect.Multimaps$Entries'
p40435
sg15
(lp40436
sg17
(lp40437
sg19
(lp40438
sg21
I0
sba(iArchitecture
Entity
p40439
(dp40440
g11
(lp40441
sg13
S'com.google.common.collect.Multimaps$Keys'
p40442
sg15
(lp40443
sg17
(lp40444
sg19
(lp40445
sg21
I0
sba(iArchitecture
Entity
p40446
(dp40447
g11
(lp40448
sg13
S'com.google.common.collect.Multimaps$Keys$1'
p40449
sg15
(lp40450
sg17
(lp40451
sg19
(lp40452
sg21
I0
sba(iArchitecture
Entity
p40453
(dp40454
g11
(lp40455
sg13
S'com.google.common.collect.Multimaps$Keys$1$1'
p40456
sg15
(lp40457
sg17
(lp40458
sg19
(lp40459
sg21
I0
sba(iArchitecture
Entity
p40460
(dp40461
g11
(lp40462
sg13
S'com.google.common.collect.Multimaps$Keys$KeysEntrySet'
p40463
sg15
(lp40464
sg17
(lp40465
sg19
(lp40466
sg21
I0
sba(iArchitecture
Entity
p40467
(dp40468
g11
(lp40469
sg13
S'com.google.common.collect.Multimaps$MapMultimap'
p40470
sg15
(lp40471
sg17
(lp40472
sg19
(lp40473
sg21
I0
sba(iArchitecture
Entity
p40474
(dp40475
g11
(lp40476
sg13
S'com.google.common.collect.Multimaps$MapMultimap$1'
p40477
sg15
(lp40478
sg17
(lp40479
sg19
(lp40480
sg21
I0
sba(iArchitecture
Entity
p40481
(dp40482
g11
(lp40483
sg13
S'com.google.common.collect.Multimaps$MapMultimap$1$1'
p40484
sg15
(lp40485
sg17
(lp40486
sg19
(lp40487
sg21
I0
sba(iArchitecture
Entity
p40488
(dp40489
g11
(lp40490
sg13
S'com.google.common.collect.Multimaps$TransformedEntriesListMultimap'
p40491
sg15
(lp40492
sg17
(lp40493
sg19
(lp40494
sg21
I0
sba(iArchitecture
Entity
p40495
(dp40496
g11
(lp40497
sg13
S'com.google.common.collect.Multimaps$TransformedEntriesMultimap'
p40498
sg15
(lp40499
sg17
(lp40500
sg19
(lp40501
sg21
I0
sba(iArchitecture
Entity
p40502
(dp40503
g11
(lp40504
sg13
S'com.google.common.collect.Multimaps$TransformedEntriesMultimap$1'
p40505
sg15
(lp40506
sg17
(lp40507
sg19
(lp40508
sg21
I0
sba(iArchitecture
Entity
p40509
(dp40510
g11
(lp40511
sg13
S'com.google.common.collect.Multimaps$UnmodifiableListMultimap'
p40512
sg15
(lp40513
sg17
(lp40514
sg19
(lp40515
sg21
I0
sba(iArchitecture
Entity
p40516
(dp40517
g11
(lp40518
sg13
S'com.google.common.collect.Multimaps$UnmodifiableMultimap'
p40519
sg15
(lp40520
sg17
(lp40521
sg19
(lp40522
sg21
I0
sba(iArchitecture
Entity
p40523
(dp40524
g11
(lp40525
sg13
S'com.google.common.collect.Multimaps$UnmodifiableMultimap$1'
p40526
sg15
(lp40527
sg17
(lp40528
sg19
(lp40529
sg21
I0
sba(iArchitecture
Entity
p40530
(dp40531
g11
(lp40532
sg13
S'com.google.common.collect.Multimaps$UnmodifiableSetMultimap'
p40533
sg15
(lp40534
sg17
(lp40535
sg19
(lp40536
sg21
I0
sba(iArchitecture
Entity
p40537
(dp40538
g11
(lp40539
sg13
S'com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap'
p40540
sg15
(lp40541
sg17
(lp40542
sg19
(lp40543
sg21
I0
sba(iArchitecture
Entity
p40544
(dp40545
g11
(lp40546
sg13
S'com.google.common.collect.Multiset_CustomFieldSerializerBase'
p40547
sg15
(lp40548
sg17
(lp40549
sg19
(lp40550
sg21
I0
sba(iArchitecture
Entity
p40551
(dp40552
g11
(lp40553
sg13
S'com.google.common.collect.Multisets'
p40554
sg15
(lp40555
sg17
(lp40556
sg19
(lp40557
sg21
I0
sba(iArchitecture
Entity
p40558
(dp40559
g11
(lp40560
sg13
S'com.google.common.collect.Multisets$1'
p40561
sg15
(lp40562
sg17
(lp40563
sg19
(lp40564
sg21
I0
sba(iArchitecture
Entity
p40565
(dp40566
g11
(lp40567
sg13
S'com.google.common.collect.Multisets$1$1'
p40568
sg15
(lp40569
sg17
(lp40570
sg19
(lp40571
sg21
I0
sba(iArchitecture
Entity
p40572
(dp40573
g11
(lp40574
sg13
S'com.google.common.collect.Multisets$2'
p40575
sg15
(lp40576
sg17
(lp40577
sg19
(lp40578
sg21
I0
sba(iArchitecture
Entity
p40579
(dp40580
g11
(lp40581
sg13
S'com.google.common.collect.Multisets$2$1'
p40582
sg15
(lp40583
sg17
(lp40584
sg19
(lp40585
sg21
I0
sba(iArchitecture
Entity
p40586
(dp40587
g11
(lp40588
sg13
S'com.google.common.collect.Multisets$3'
p40589
sg15
(lp40590
sg17
(lp40591
sg19
(lp40592
sg21
I0
sba(iArchitecture
Entity
p40593
(dp40594
g11
(lp40595
sg13
S'com.google.common.collect.Multisets$3$1'
p40596
sg15
(lp40597
sg17
(lp40598
sg19
(lp40599
sg21
I0
sba(iArchitecture
Entity
p40600
(dp40601
g11
(lp40602
sg13
S'com.google.common.collect.Multisets$4'
p40603
sg15
(lp40604
sg17
(lp40605
sg19
(lp40606
sg21
I0
sba(iArchitecture
Entity
p40607
(dp40608
g11
(lp40609
sg13
S'com.google.common.collect.Multisets$4$1'
p40610
sg15
(lp40611
sg17
(lp40612
sg19
(lp40613
sg21
I0
sba(iArchitecture
Entity
p40614
(dp40615
g11
(lp40616
sg13
S'com.google.common.collect.Multisets$5'
p40617
sg15
(lp40618
sg17
(lp40619
sg19
(lp40620
sg21
I0
sba(iArchitecture
Entity
p40621
(dp40622
g11
(lp40623
sg13
S'com.google.common.collect.Multisets$AbstractEntry'
p40624
sg15
(lp40625
sg17
(lp40626
sg19
(lp40627
sg21
I0
sba(iArchitecture
Entity
p40628
(dp40629
g11
(lp40630
sg13
S'com.google.common.collect.Multisets$ElementSet'
p40631
sg15
(lp40632
sg17
(lp40633
sg19
(lp40634
sg21
I0
sba(iArchitecture
Entity
p40635
(dp40636
g11
(lp40637
sg13
S'com.google.common.collect.Multisets$ElementSet$1'
p40638
sg15
(lp40639
sg17
(lp40640
sg19
(lp40641
sg21
I0
sba(iArchitecture
Entity
p40642
(dp40643
g11
(lp40644
sg13
S'com.google.common.collect.Multisets$EntrySet'
p40645
sg15
(lp40646
sg17
(lp40647
sg19
(lp40648
sg21
I0
sba(iArchitecture
Entity
p40649
(dp40650
g11
(lp40651
sg13
S'com.google.common.collect.Multisets$FilteredMultiset'
p40652
sg15
(lp40653
sg17
(lp40654
sg19
(lp40655
sg21
I0
sba(iArchitecture
Entity
p40656
(dp40657
g11
(lp40658
sg13
S'com.google.common.collect.Multisets$FilteredMultiset$1'
p40659
sg15
(lp40660
sg17
(lp40661
sg19
(lp40662
sg21
I0
sba(iArchitecture
Entity
p40663
(dp40664
g11
(lp40665
sg13
S'com.google.common.collect.Multisets$ImmutableEntry'
p40666
sg15
(lp40667
sg17
(lp40668
sg19
(lp40669
sg21
I0
sba(iArchitecture
Entity
p40670
(dp40671
g11
(lp40672
sg13
S'com.google.common.collect.Multisets$MultisetIteratorImpl'
p40673
sg15
(lp40674
sg17
(lp40675
sg19
(lp40676
sg21
I0
sba(iArchitecture
Entity
p40677
(dp40678
g11
(lp40679
sg13
S'com.google.common.collect.Multisets$UnmodifiableMultiset'
p40680
sg15
(lp40681
sg17
(lp40682
sg19
(lp40683
sg21
I0
sba(iArchitecture
Entity
p40684
(dp40685
g11
(lp40686
sg13
S'com.google.common.collect.MultitransformedIterator'
p40687
sg15
(lp40688
sg17
(lp40689
sg19
(lp40690
sg21
I0
sba(iArchitecture
Entity
p40691
(dp40692
g11
(lp40693
sg13
S'com.google.common.collect.MutableClassToInstanceMap'
p40694
sg15
(lp40695
sg17
(lp40696
sg19
(lp40697
sg21
I0
sba(iArchitecture
Entity
p40698
(dp40699
g11
(lp40700
sg13
S'com.google.common.collect.MutableClassToInstanceMap$1'
p40701
sg15
(lp40702
sg17
(lp40703
sg19
(lp40704
sg21
I0
sba(iArchitecture
Entity
p40705
(dp40706
g11
(lp40707
sg13
S'com.google.common.collect.MutableClassToInstanceMap$SerializedForm'
p40708
sg15
(lp40709
sg17
(lp40710
sg19
(lp40711
sg21
I0
sba(iArchitecture
Entity
p40712
(dp40713
g11
(lp40714
sg13
S'com.google.common.collect.NaturalOrdering'
p40715
sg15
(lp40716
sg17
(lp40717
sg19
(lp40718
sg21
I0
sba(iArchitecture
Entity
p40719
(dp40720
g11
(lp40721
sg13
S'com.google.common.collect.NaturalOrdering_CustomFieldSerializer'
p40722
sg15
(lp40723
sg17
(lp40724
sg19
(lp40725
sg21
I0
sba(iArchitecture
Entity
p40726
(dp40727
g11
(lp40728
sg13
S'com.google.common.collect.NullsFirstOrdering'
p40729
sg15
(lp40730
sg17
(lp40731
sg19
(lp40732
sg21
I0
sba(iArchitecture
Entity
p40733
(dp40734
g11
(lp40735
sg13
S'com.google.common.collect.NullsFirstOrdering_CustomFieldSerializer'
p40736
sg15
(lp40737
sg17
(lp40738
sg19
(lp40739
sg21
I0
sba(iArchitecture
Entity
p40740
(dp40741
g11
(lp40742
sg13
S'com.google.common.collect.NullsLastOrdering'
p40743
sg15
(lp40744
sg17
(lp40745
sg19
(lp40746
sg21
I0
sba(iArchitecture
Entity
p40747
(dp40748
g11
(lp40749
sg13
S'com.google.common.collect.NullsLastOrdering_CustomFieldSerializer'
p40750
sg15
(lp40751
sg17
(lp40752
sg19
(lp40753
sg21
I0
sba(iArchitecture
Entity
p40754
(dp40755
g11
(lp40756
sg13
S'com.google.common.collect.Ordering'
p40757
sg15
(lp40758
sg17
(lp40759
sg19
(lp40760
sg21
I0
sba(iArchitecture
Entity
p40761
(dp40762
g11
(lp40763
sg13
S'com.google.common.collect.Ordering$ArbitraryOrdering'
p40764
sg15
(lp40765
sg17
(lp40766
sg19
(lp40767
sg21
I0
sba(iArchitecture
Entity
p40768
(dp40769
g11
(lp40770
sg13
S'com.google.common.collect.Ordering$ArbitraryOrderingHolder'
p40771
sg15
(lp40772
sg17
(lp40773
sg19
(lp40774
sg21
I0
sba(iArchitecture
Entity
p40775
(dp40776
g11
(lp40777
sg13
S'com.google.common.collect.Ordering$IncomparableValueException'
p40778
sg15
(lp40779
sg17
(lp40780
sg19
(lp40781
sg21
I0
sba(iArchitecture
Entity
p40782
(dp40783
g11
(lp40784
sg13
S'com.google.common.collect.PeekingIterator'
p40785
sg15
(lp40786
sg17
(lp40787
sg19
(lp40788
sg21
I0
sba(iArchitecture
Entity
p40789
(dp40790
g11
(lp40791
sg13
S'com.google.common.collect.Platform'
p40792
sg15
(lp40793
sg17
(lp40794
sg19
(lp40795
sg21
I0
sba(iArchitecture
Entity
p40796
(dp40797
g11
(lp40798
sg13
S'com.google.common.collect.Range'
p40799
sg15
(lp40800
sg17
(lp40801
sg19
(lp40802
sg21
I0
sba(iArchitecture
Entity
p40803
(dp40804
g11
(lp40805
sg13
S'com.google.common.collect.Range$1'
p40806
sg15
(lp40807
sg17
(lp40808
sg19
(lp40809
sg21
I0
sba(iArchitecture
Entity
p40810
(dp40811
g11
(lp40812
sg13
S'com.google.common.collect.Range$2'
p40813
sg15
(lp40814
sg17
(lp40815
sg19
(lp40816
sg21
I0
sba(iArchitecture
Entity
p40817
(dp40818
g11
(lp40819
sg13
S'com.google.common.collect.Range$3'
p40820
sg15
(lp40821
sg17
(lp40822
sg19
(lp40823
sg21
I0
sba(iArchitecture
Entity
p40824
(dp40825
g11
(lp40826
sg13
S'com.google.common.collect.Range$RangeLexOrdering'
p40827
sg15
(lp40828
sg17
(lp40829
sg19
(lp40830
sg21
I0
sba(iArchitecture
Entity
p40831
(dp40832
g11
(lp40833
sg13
S'com.google.common.collect.RangeMap'
p40834
sg15
(lp40835
sg17
(lp40836
sg19
(lp40837
sg21
I0
sba(iArchitecture
Entity
p40838
(dp40839
g11
(lp40840
sg13
S'com.google.common.collect.RangeSet'
p40841
sg15
(lp40842
sg17
(lp40843
sg19
(lp40844
sg21
I0
sba(iArchitecture
Entity
p40845
(dp40846
g11
(lp40847
sg13
S'com.google.common.collect.RegularContiguousSet'
p40848
sg15
(lp40849
sg17
(lp40850
sg19
(lp40851
sg21
I0
sba(iArchitecture
Entity
p40852
(dp40853
g11
(lp40854
sg13
S'com.google.common.collect.RegularContiguousSet$1'
p40855
sg15
(lp40856
sg17
(lp40857
sg19
(lp40858
sg21
I0
sba(iArchitecture
Entity
p40859
(dp40860
g11
(lp40861
sg13
S'com.google.common.collect.RegularContiguousSet$2'
p40862
sg15
(lp40863
sg17
(lp40864
sg19
(lp40865
sg21
I0
sba(iArchitecture
Entity
p40866
(dp40867
g11
(lp40868
sg13
S'com.google.common.collect.RegularContiguousSet$SerializedForm'
p40869
sg15
(lp40870
sg17
(lp40871
sg19
(lp40872
sg21
I0
sba(iArchitecture
Entity
p40873
(dp40874
g11
(lp40875
sg13
S'com.google.common.collect.RegularImmutableAsList_CustomFieldSerializer'
p40876
sg15
(lp40877
sg17
(lp40878
sg19
(lp40879
sg21
I0
sba(iArchitecture
Entity
p40880
(dp40881
g11
(lp40882
sg13
S'com.google.common.collect.RegularImmutableBiMap'
p40883
sg15
(lp40884
sg17
(lp40885
sg19
(lp40886
sg21
I0
sba(iArchitecture
Entity
p40887
(dp40888
g11
(lp40889
sg13
S'com.google.common.collect.RegularImmutableBiMap$1'
p40890
sg15
(lp40891
sg17
(lp40892
sg19
(lp40893
sg21
I0
sba(iArchitecture
Entity
p40894
(dp40895
g11
(lp40896
sg13
S'com.google.common.collect.RegularImmutableBiMap$Inverse'
p40897
sg15
(lp40898
sg17
(lp40899
sg19
(lp40900
sg21
I0
sba(iArchitecture
Entity
p40901
(dp40902
g11
(lp40903
sg13
S'com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet'
p40904
sg15
(lp40905
sg17
(lp40906
sg19
(lp40907
sg21
I0
sba(iArchitecture
Entity
p40908
(dp40909
g11
(lp40910
sg13
S'com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1'
p40911
sg15
(lp40912
sg17
(lp40913
sg19
(lp40914
sg21
I0
sba(iArchitecture
Entity
p40915
(dp40916
g11
(lp40917
sg13
S'com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm'
p40918
sg15
(lp40919
sg17
(lp40920
sg19
(lp40921
sg21
I0
sba(iArchitecture
Entity
p40922
(dp40923
g11
(lp40924
sg13
S'com.google.common.collect.RegularImmutableBiMap_CustomFieldSerializer'
p40925
sg15
(lp40926
sg17
(lp40927
sg19
(lp40928
sg21
I0
sba(iArchitecture
Entity
p40929
(dp40930
g11
(lp40931
sg13
S'com.google.common.collect.RegularImmutableList'
p40932
sg15
(lp40933
sg17
(lp40934
sg19
(lp40935
sg21
I0
sba(iArchitecture
Entity
p40936
(dp40937
g11
(lp40938
sg13
S'com.google.common.collect.RegularImmutableList_CustomFieldSerializer'
p40939
sg15
(lp40940
sg17
(lp40941
sg19
(lp40942
sg21
I0
sba(iArchitecture
Entity
p40943
(dp40944
g11
(lp40945
sg13
S'com.google.common.collect.RegularImmutableMap$KeySet'
p40946
sg15
(lp40947
sg17
(lp40948
sg19
(lp40949
sg21
I0
sba(iArchitecture
Entity
p40950
(dp40951
g11
(lp40952
sg13
S'com.google.common.collect.RegularImmutableMap$KeySet$SerializedForm'
p40953
sg15
(lp40954
sg17
(lp40955
sg19
(lp40956
sg21
I0
sba(iArchitecture
Entity
p40957
(dp40958
g11
(lp40959
sg13
S'com.google.common.collect.RegularImmutableMap$Values'
p40960
sg15
(lp40961
sg17
(lp40962
sg19
(lp40963
sg21
I0
sba(iArchitecture
Entity
p40964
(dp40965
g11
(lp40966
sg13
S'com.google.common.collect.RegularImmutableMap$Values$SerializedForm'
p40967
sg15
(lp40968
sg17
(lp40969
sg19
(lp40970
sg21
I0
sba(iArchitecture
Entity
p40971
(dp40972
g11
(lp40973
sg13
S'com.google.common.collect.RegularImmutableMap_CustomFieldSerializer'
p40974
sg15
(lp40975
sg17
(lp40976
sg19
(lp40977
sg21
I0
sba(iArchitecture
Entity
p40978
(dp40979
g11
(lp40980
sg13
S'com.google.common.collect.RegularImmutableMultiset'
p40981
sg15
(lp40982
sg17
(lp40983
sg19
(lp40984
sg21
I0
sba(iArchitecture
Entity
p40985
(dp40986
g11
(lp40987
sg13
S'com.google.common.collect.RegularImmutableMultiset$1'
p40988
sg15
(lp40989
sg17
(lp40990
sg19
(lp40991
sg21
I0
sba(iArchitecture
Entity
p40992
(dp40993
g11
(lp40994
sg13
S'com.google.common.collect.RegularImmutableMultiset$ElementSet'
p40995
sg15
(lp40996
sg17
(lp40997
sg19
(lp40998
sg21
I0
sba(iArchitecture
Entity
p40999
(dp41000
g11
(lp41001
sg13
S'com.google.common.collect.RegularImmutableMultiset$NonTerminalEntry'
p41002
sg15
(lp41003
sg17
(lp41004
sg19
(lp41005
sg21
I0
sba(iArchitecture
Entity
p41006
(dp41007
g11
(lp41008
sg13
S'com.google.common.collect.RegularImmutableMultiset_CustomFieldSerializer'
p41009
sg15
(lp41010
sg17
(lp41011
sg19
(lp41012
sg21
I0
sba(iArchitecture
Entity
p41013
(dp41014
g11
(lp41015
sg13
S'com.google.common.collect.RegularImmutableSet'
p41016
sg15
(lp41017
sg17
(lp41018
sg19
(lp41019
sg21
I0
sba(iArchitecture
Entity
p41020
(dp41021
g11
(lp41022
sg13
S'com.google.common.collect.RegularImmutableSet_CustomFieldSerializer'
p41023
sg15
(lp41024
sg17
(lp41025
sg19
(lp41026
sg21
I0
sba(iArchitecture
Entity
p41027
(dp41028
g11
(lp41029
sg13
S'com.google.common.collect.RegularImmutableSortedMultiset'
p41030
sg15
(lp41031
sg17
(lp41032
sg19
(lp41033
sg21
I0
sba(iArchitecture
Entity
p41034
(dp41035
g11
(lp41036
sg13
S'com.google.common.collect.RegularImmutableSortedSet'
p41037
sg15
(lp41038
sg17
(lp41039
sg19
(lp41040
sg21
I0
sba(iArchitecture
Entity
p41041
(dp41042
g11
(lp41043
sg13
S'com.google.common.collect.RegularImmutableSortedSet_CustomFieldSerializer'
p41044
sg15
(lp41045
sg17
(lp41046
sg19
(lp41047
sg21
I0
sba(iArchitecture
Entity
p41048
(dp41049
g11
(lp41050
sg13
S'com.google.common.collect.RegularImmutableTable'
p41051
sg15
(lp41052
sg17
(lp41053
sg19
(lp41054
sg21
I0
sba(iArchitecture
Entity
p41055
(dp41056
g11
(lp41057
sg13
S'com.google.common.collect.RegularImmutableTable$1'
p41058
sg15
(lp41059
sg17
(lp41060
sg19
(lp41061
sg21
I0
sba(iArchitecture
Entity
p41062
(dp41063
g11
(lp41064
sg13
S'com.google.common.collect.RegularImmutableTable$CellSet'
p41065
sg15
(lp41066
sg17
(lp41067
sg19
(lp41068
sg21
I0
sba(iArchitecture
Entity
p41069
(dp41070
g11
(lp41071
sg13
S'com.google.common.collect.RegularImmutableTable$Values'
p41072
sg15
(lp41073
sg17
(lp41074
sg19
(lp41075
sg21
I0
sba(iArchitecture
Entity
p41076
(dp41077
g11
(lp41078
sg13
S'com.google.common.collect.ReverseNaturalOrdering'
p41079
sg15
(lp41080
sg17
(lp41081
sg19
(lp41082
sg21
I0
sba(iArchitecture
Entity
p41083
(dp41084
g11
(lp41085
sg13
S'com.google.common.collect.ReverseNaturalOrdering_CustomFieldSerializer'
p41086
sg15
(lp41087
sg17
(lp41088
sg19
(lp41089
sg21
I0
sba(iArchitecture
Entity
p41090
(dp41091
g11
(lp41092
sg13
S'com.google.common.collect.ReverseOrdering'
p41093
sg15
(lp41094
sg17
(lp41095
sg19
(lp41096
sg21
I0
sba(iArchitecture
Entity
p41097
(dp41098
g11
(lp41099
sg13
S'com.google.common.collect.ReverseOrdering_CustomFieldSerializer'
p41100
sg15
(lp41101
sg17
(lp41102
sg19
(lp41103
sg21
I0
sba(iArchitecture
Entity
p41104
(dp41105
g11
(lp41106
sg13
S'com.google.common.collect.RowSortedTable'
p41107
sg15
(lp41108
sg17
(lp41109
sg19
(lp41110
sg21
I0
sba(iArchitecture
Entity
p41111
(dp41112
g11
(lp41113
sg13
S'com.google.common.collect.Serialization'
p41114
sg15
(lp41115
sg17
(lp41116
sg19
(lp41117
sg21
I0
sba(iArchitecture
Entity
p41118
(dp41119
g11
(lp41120
sg13
S'com.google.common.collect.Serialization$1'
p41121
sg15
(lp41122
sg17
(lp41123
sg19
(lp41124
sg21
I0
sba(iArchitecture
Entity
p41125
(dp41126
g11
(lp41127
sg13
S'com.google.common.collect.Serialization$FieldSetter'
p41128
sg15
(lp41129
sg17
(lp41130
sg19
(lp41131
sg21
I0
sba(iArchitecture
Entity
p41132
(dp41133
g11
(lp41134
sg13
S'com.google.common.collect.SetMultimap'
p41135
sg15
(lp41136
sg17
(lp41137
sg19
(lp41138
sg21
I0
sba(iArchitecture
Entity
p41139
(dp41140
g11
(lp41141
sg13
S'com.google.common.collect.Sets'
p41142
sg15
(lp41143
sg17
(lp41144
sg19
(lp41145
sg21
I0
sba(iArchitecture
Entity
p41146
(dp41147
g11
(lp41148
sg13
S'com.google.common.collect.Sets$1'
p41149
sg15
(lp41150
sg17
(lp41151
sg19
(lp41152
sg21
I0
sba(iArchitecture
Entity
p41153
(dp41154
g11
(lp41155
sg13
S'com.google.common.collect.Sets$2'
p41156
sg15
(lp41157
sg17
(lp41158
sg19
(lp41159
sg21
I0
sba(iArchitecture
Entity
p41160
(dp41161
g11
(lp41162
sg13
S'com.google.common.collect.Sets$3'
p41163
sg15
(lp41164
sg17
(lp41165
sg19
(lp41166
sg21
I0
sba(iArchitecture
Entity
p41167
(dp41168
g11
(lp41169
sg13
S'com.google.common.collect.Sets$4'
p41170
sg15
(lp41171
sg17
(lp41172
sg19
(lp41173
sg21
I0
sba(iArchitecture
Entity
p41174
(dp41175
g11
(lp41176
sg13
S'com.google.common.collect.Sets$4$1'
p41177
sg15
(lp41178
sg17
(lp41179
sg19
(lp41180
sg21
I0
sba(iArchitecture
Entity
p41181
(dp41182
g11
(lp41183
sg13
S'com.google.common.collect.Sets$CartesianSet'
p41184
sg15
(lp41185
sg17
(lp41186
sg19
(lp41187
sg21
I0
sba(iArchitecture
Entity
p41188
(dp41189
g11
(lp41190
sg13
S'com.google.common.collect.Sets$CartesianSet$1'
p41191
sg15
(lp41192
sg17
(lp41193
sg19
(lp41194
sg21
I0
sba(iArchitecture
Entity
p41195
(dp41196
g11
(lp41197
sg13
S'com.google.common.collect.Sets$DescendingSet'
p41198
sg15
(lp41199
sg17
(lp41200
sg19
(lp41201
sg21
I0
sba(iArchitecture
Entity
p41202
(dp41203
g11
(lp41204
sg13
S'com.google.common.collect.Sets$FilteredNavigableSet'
p41205
sg15
(lp41206
sg17
(lp41207
sg19
(lp41208
sg21
I0
sba(iArchitecture
Entity
p41209
(dp41210
g11
(lp41211
sg13
S'com.google.common.collect.Sets$FilteredSet'
p41212
sg15
(lp41213
sg17
(lp41214
sg19
(lp41215
sg21
I0
sba(iArchitecture
Entity
p41216
(dp41217
g11
(lp41218
sg13
S'com.google.common.collect.Sets$FilteredSortedSet'
p41219
sg15
(lp41220
sg17
(lp41221
sg19
(lp41222
sg21
I0
sba(iArchitecture
Entity
p41223
(dp41224
g11
(lp41225
sg13
S'com.google.common.collect.Sets$ImprovedAbstractSet'
p41226
sg15
(lp41227
sg17
(lp41228
sg19
(lp41229
sg21
I0
sba(iArchitecture
Entity
p41230
(dp41231
g11
(lp41232
sg13
S'com.google.common.collect.Sets$PowerSet'
p41233
sg15
(lp41234
sg17
(lp41235
sg19
(lp41236
sg21
I0
sba(iArchitecture
Entity
p41237
(dp41238
g11
(lp41239
sg13
S'com.google.common.collect.Sets$PowerSet$1'
p41240
sg15
(lp41241
sg17
(lp41242
sg19
(lp41243
sg21
I0
sba(iArchitecture
Entity
p41244
(dp41245
g11
(lp41246
sg13
S'com.google.common.collect.Sets$SetView'
p41247
sg15
(lp41248
sg17
(lp41249
sg19
(lp41250
sg21
I0
sba(iArchitecture
Entity
p41251
(dp41252
g11
(lp41253
sg13
S'com.google.common.collect.Sets$SubSet'
p41254
sg15
(lp41255
sg17
(lp41256
sg19
(lp41257
sg21
I0
sba(iArchitecture
Entity
p41258
(dp41259
g11
(lp41260
sg13
S'com.google.common.collect.Sets$SubSet$1'
p41261
sg15
(lp41262
sg17
(lp41263
sg19
(lp41264
sg21
I0
sba(iArchitecture
Entity
p41265
(dp41266
g11
(lp41267
sg13
S'com.google.common.collect.Sets$UnmodifiableNavigableSet'
p41268
sg15
(lp41269
sg17
(lp41270
sg19
(lp41271
sg21
I0
sba(iArchitecture
Entity
p41272
(dp41273
g11
(lp41274
sg13
S'com.google.common.collect.SingletonImmutableBiMap'
p41275
sg15
(lp41276
sg17
(lp41277
sg19
(lp41278
sg21
I0
sba(iArchitecture
Entity
p41279
(dp41280
g11
(lp41281
sg13
S'com.google.common.collect.SingletonImmutableBiMap_CustomFieldSerializer'
p41282
sg15
(lp41283
sg17
(lp41284
sg19
(lp41285
sg21
I0
sba(iArchitecture
Entity
p41286
(dp41287
g11
(lp41288
sg13
S'com.google.common.collect.SingletonImmutableList'
p41289
sg15
(lp41290
sg17
(lp41291
sg19
(lp41292
sg21
I0
sba(iArchitecture
Entity
p41293
(dp41294
g11
(lp41295
sg13
S'com.google.common.collect.SingletonImmutableList_CustomFieldSerializer'
p41296
sg15
(lp41297
sg17
(lp41298
sg19
(lp41299
sg21
I0
sba(iArchitecture
Entity
p41300
(dp41301
g11
(lp41302
sg13
S'com.google.common.collect.SingletonImmutableSet'
p41303
sg15
(lp41304
sg17
(lp41305
sg19
(lp41306
sg21
I0
sba(iArchitecture
Entity
p41307
(dp41308
g11
(lp41309
sg13
S'com.google.common.collect.SingletonImmutableSet_CustomFieldSerializer'
p41310
sg15
(lp41311
sg17
(lp41312
sg19
(lp41313
sg21
I0
sba(iArchitecture
Entity
p41314
(dp41315
g11
(lp41316
sg13
S'com.google.common.collect.SingletonImmutableTable'
p41317
sg15
(lp41318
sg17
(lp41319
sg19
(lp41320
sg21
I0
sba(iArchitecture
Entity
p41321
(dp41322
g11
(lp41323
sg13
S'com.google.common.collect.SingletonImmutableTable_CustomFieldSerializer'
p41324
sg15
(lp41325
sg17
(lp41326
sg19
(lp41327
sg21
I0
sba(iArchitecture
Entity
p41328
(dp41329
g11
(lp41330
sg13
S'com.google.common.collect.SortedIterable'
p41331
sg15
(lp41332
sg17
(lp41333
sg19
(lp41334
sg21
I0
sba(iArchitecture
Entity
p41335
(dp41336
g11
(lp41337
sg13
S'com.google.common.collect.SortedIterables'
p41338
sg15
(lp41339
sg17
(lp41340
sg19
(lp41341
sg21
I0
sba(iArchitecture
Entity
p41342
(dp41343
g11
(lp41344
sg13
S'com.google.common.collect.SortedLists'
p41345
sg15
(lp41346
sg17
(lp41347
sg19
(lp41348
sg21
I0
sba(iArchitecture
Entity
p41349
(dp41350
g11
(lp41351
sg13
S'com.google.common.collect.SortedLists$1'
p41352
sg15
(lp41353
sg17
(lp41354
sg19
(lp41355
sg21
I0
sba(iArchitecture
Entity
p41356
(dp41357
g11
(lp41358
sg13
S'com.google.common.collect.SortedLists$KeyAbsentBehavior'
p41359
sg15
(lp41360
sg17
(lp41361
sg19
(lp41362
sg21
I0
sba(iArchitecture
Entity
p41363
(dp41364
g11
(lp41365
sg13
S'com.google.common.collect.SortedLists$KeyAbsentBehavior$1'
p41366
sg15
(lp41367
sg17
(lp41368
sg19
(lp41369
sg21
I0
sba(iArchitecture
Entity
p41370
(dp41371
g11
(lp41372
sg13
S'com.google.common.collect.SortedLists$KeyAbsentBehavior$2'
p41373
sg15
(lp41374
sg17
(lp41375
sg19
(lp41376
sg21
I0
sba(iArchitecture
Entity
p41377
(dp41378
g11
(lp41379
sg13
S'com.google.common.collect.SortedLists$KeyAbsentBehavior$3'
p41380
sg15
(lp41381
sg17
(lp41382
sg19
(lp41383
sg21
I0
sba(iArchitecture
Entity
p41384
(dp41385
g11
(lp41386
sg13
S'com.google.common.collect.SortedLists$KeyPresentBehavior'
p41387
sg15
(lp41388
sg17
(lp41389
sg19
(lp41390
sg21
I0
sba(iArchitecture
Entity
p41391
(dp41392
g11
(lp41393
sg13
S'com.google.common.collect.SortedLists$KeyPresentBehavior$1'
p41394
sg15
(lp41395
sg17
(lp41396
sg19
(lp41397
sg21
I0
sba(iArchitecture
Entity
p41398
(dp41399
g11
(lp41400
sg13
S'com.google.common.collect.SortedLists$KeyPresentBehavior$2'
p41401
sg15
(lp41402
sg17
(lp41403
sg19
(lp41404
sg21
I0
sba(iArchitecture
Entity
p41405
(dp41406
g11
(lp41407
sg13
S'com.google.common.collect.SortedLists$KeyPresentBehavior$3'
p41408
sg15
(lp41409
sg17
(lp41410
sg19
(lp41411
sg21
I0
sba(iArchitecture
Entity
p41412
(dp41413
g11
(lp41414
sg13
S'com.google.common.collect.SortedLists$KeyPresentBehavior$4'
p41415
sg15
(lp41416
sg17
(lp41417
sg19
(lp41418
sg21
I0
sba(iArchitecture
Entity
p41419
(dp41420
g11
(lp41421
sg13
S'com.google.common.collect.SortedLists$KeyPresentBehavior$5'
p41422
sg15
(lp41423
sg17
(lp41424
sg19
(lp41425
sg21
I0
sba(iArchitecture
Entity
p41426
(dp41427
g11
(lp41428
sg13
S'com.google.common.collect.SortedMapDifference'
p41429
sg15
(lp41430
sg17
(lp41431
sg19
(lp41432
sg21
I0
sba(iArchitecture
Entity
p41433
(dp41434
g11
(lp41435
sg13
S'com.google.common.collect.SortedMultiset'
p41436
sg15
(lp41437
sg17
(lp41438
sg19
(lp41439
sg21
I0
sba(iArchitecture
Entity
p41440
(dp41441
g11
(lp41442
sg13
S'com.google.common.collect.SortedMultisetBridge'
p41443
sg15
(lp41444
sg17
(lp41445
sg19
(lp41446
sg21
I0
sba(iArchitecture
Entity
p41447
(dp41448
g11
(lp41449
sg13
S'com.google.common.collect.SortedMultisets'
p41450
sg15
(lp41451
sg17
(lp41452
sg19
(lp41453
sg21
I0
sba(iArchitecture
Entity
p41454
(dp41455
g11
(lp41456
sg13
S'com.google.common.collect.SortedMultisets$ElementSet'
p41457
sg15
(lp41458
sg17
(lp41459
sg19
(lp41460
sg21
I0
sba(iArchitecture
Entity
p41461
(dp41462
g11
(lp41463
sg13
S'com.google.common.collect.SortedMultisets$NavigableElementSet'
p41464
sg15
(lp41465
sg17
(lp41466
sg19
(lp41467
sg21
I0
sba(iArchitecture
Entity
p41468
(dp41469
g11
(lp41470
sg13
S'com.google.common.collect.SortedSetMultimap'
p41471
sg15
(lp41472
sg17
(lp41473
sg19
(lp41474
sg21
I0
sba(iArchitecture
Entity
p41475
(dp41476
g11
(lp41477
sg13
S'com.google.common.collect.SparseImmutableTable'
p41478
sg15
(lp41479
sg17
(lp41480
sg19
(lp41481
sg21
I0
sba(iArchitecture
Entity
p41482
(dp41483
g11
(lp41484
sg13
S'com.google.common.collect.SparseImmutableTable_CustomFieldSerializer'
p41485
sg15
(lp41486
sg17
(lp41487
sg19
(lp41488
sg21
I0
sba(iArchitecture
Entity
p41489
(dp41490
g11
(lp41491
sg13
S'com.google.common.collect.StandardRowSortedTable'
p41492
sg15
(lp41493
sg17
(lp41494
sg19
(lp41495
sg21
I0
sba(iArchitecture
Entity
p41496
(dp41497
g11
(lp41498
sg13
S'com.google.common.collect.StandardRowSortedTable$1'
p41499
sg15
(lp41500
sg17
(lp41501
sg19
(lp41502
sg21
I0
sba(iArchitecture
Entity
p41503
(dp41504
g11
(lp41505
sg13
S'com.google.common.collect.StandardRowSortedTable$RowSortedMap'
p41506
sg15
(lp41507
sg17
(lp41508
sg19
(lp41509
sg21
I0
sba(iArchitecture
Entity
p41510
(dp41511
g11
(lp41512
sg13
S'com.google.common.collect.StandardTable'
p41513
sg15
(lp41514
sg17
(lp41515
sg19
(lp41516
sg21
I0
sba(iArchitecture
Entity
p41517
(dp41518
g11
(lp41519
sg13
S'com.google.common.collect.StandardTable$1'
p41520
sg15
(lp41521
sg17
(lp41522
sg19
(lp41523
sg21
I0
sba(iArchitecture
Entity
p41524
(dp41525
g11
(lp41526
sg13
S'com.google.common.collect.StandardTable$CellIterator'
p41527
sg15
(lp41528
sg17
(lp41529
sg19
(lp41530
sg21
I0
sba(iArchitecture
Entity
p41531
(dp41532
g11
(lp41533
sg13
S'com.google.common.collect.StandardTable$Column'
p41534
sg15
(lp41535
sg17
(lp41536
sg19
(lp41537
sg21
I0
sba(iArchitecture
Entity
p41538
(dp41539
g11
(lp41540
sg13
S'com.google.common.collect.StandardTable$Column$EntrySet'
p41541
sg15
(lp41542
sg17
(lp41543
sg19
(lp41544
sg21
I0
sba(iArchitecture
Entity
p41545
(dp41546
g11
(lp41547
sg13
S'com.google.common.collect.StandardTable$Column$EntrySetIterator'
p41548
sg15
(lp41549
sg17
(lp41550
sg19
(lp41551
sg21
I0
sba(iArchitecture
Entity
p41552
(dp41553
g11
(lp41554
sg13
S'com.google.common.collect.StandardTable$Column$EntrySetIterator$1EntryImpl'
p41555
sg15
(lp41556
sg17
(lp41557
sg19
(lp41558
sg21
I0
sba(iArchitecture
Entity
p41559
(dp41560
g11
(lp41561
sg13
S'com.google.common.collect.StandardTable$Column$KeySet'
p41562
sg15
(lp41563
sg17
(lp41564
sg19
(lp41565
sg21
I0
sba(iArchitecture
Entity
p41566
(dp41567
g11
(lp41568
sg13
S'com.google.common.collect.StandardTable$Column$Values'
p41569
sg15
(lp41570
sg17
(lp41571
sg19
(lp41572
sg21
I0
sba(iArchitecture
Entity
p41573
(dp41574
g11
(lp41575
sg13
S'com.google.common.collect.StandardTable$ColumnKeyIterator'
p41576
sg15
(lp41577
sg17
(lp41578
sg19
(lp41579
sg21
I0
sba(iArchitecture
Entity
p41580
(dp41581
g11
(lp41582
sg13
S'com.google.common.collect.StandardTable$ColumnKeySet'
p41583
sg15
(lp41584
sg17
(lp41585
sg19
(lp41586
sg21
I0
sba(iArchitecture
Entity
p41587
(dp41588
g11
(lp41589
sg13
S'com.google.common.collect.StandardTable$ColumnMap'
p41590
sg15
(lp41591
sg17
(lp41592
sg19
(lp41593
sg21
I0
sba(iArchitecture
Entity
p41594
(dp41595
g11
(lp41596
sg13
S'com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet'
p41597
sg15
(lp41598
sg17
(lp41599
sg19
(lp41600
sg21
I0
sba(iArchitecture
Entity
p41601
(dp41602
g11
(lp41603
sg13
S'com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1'
p41604
sg15
(lp41605
sg17
(lp41606
sg19
(lp41607
sg21
I0
sba(iArchitecture
Entity
p41608
(dp41609
g11
(lp41610
sg13
S'com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues'
p41611
sg15
(lp41612
sg17
(lp41613
sg19
(lp41614
sg21
I0
sba(iArchitecture
Entity
p41615
(dp41616
g11
(lp41617
sg13
S'com.google.common.collect.StandardTable$Row'
p41618
sg15
(lp41619
sg17
(lp41620
sg19
(lp41621
sg21
I0
sba(iArchitecture
Entity
p41622
(dp41623
g11
(lp41624
sg13
S'com.google.common.collect.StandardTable$Row$1'
p41625
sg15
(lp41626
sg17
(lp41627
sg19
(lp41628
sg21
I0
sba(iArchitecture
Entity
p41629
(dp41630
g11
(lp41631
sg13
S'com.google.common.collect.StandardTable$Row$1$1'
p41632
sg15
(lp41633
sg17
(lp41634
sg19
(lp41635
sg21
I0
sba(iArchitecture
Entity
p41636
(dp41637
g11
(lp41638
sg13
S'com.google.common.collect.StandardTable$RowMap'
p41639
sg15
(lp41640
sg17
(lp41641
sg19
(lp41642
sg21
I0
sba(iArchitecture
Entity
p41643
(dp41644
g11
(lp41645
sg13
S'com.google.common.collect.StandardTable$RowMap$EntrySet'
p41646
sg15
(lp41647
sg17
(lp41648
sg19
(lp41649
sg21
I0
sba(iArchitecture
Entity
p41650
(dp41651
g11
(lp41652
sg13
S'com.google.common.collect.StandardTable$RowMap$EntrySet$1'
p41653
sg15
(lp41654
sg17
(lp41655
sg19
(lp41656
sg21
I0
sba(iArchitecture
Entity
p41657
(dp41658
g11
(lp41659
sg13
S'com.google.common.collect.StandardTable$TableSet'
p41660
sg15
(lp41661
sg17
(lp41662
sg19
(lp41663
sg21
I0
sba(iArchitecture
Entity
p41664
(dp41665
g11
(lp41666
sg13
S'com.google.common.collect.Synchronized'
p41667
sg15
(lp41668
sg17
(lp41669
sg19
(lp41670
sg21
I0
sba(iArchitecture
Entity
p41671
(dp41672
g11
(lp41673
sg13
S'com.google.common.collect.Synchronized$1'
p41674
sg15
(lp41675
sg17
(lp41676
sg19
(lp41677
sg21
I0
sba(iArchitecture
Entity
p41678
(dp41679
g11
(lp41680
sg13
S'com.google.common.collect.Synchronized$SynchronizedAsMap'
p41681
sg15
(lp41682
sg17
(lp41683
sg19
(lp41684
sg21
I0
sba(iArchitecture
Entity
p41685
(dp41686
g11
(lp41687
sg13
S'com.google.common.collect.Synchronized$SynchronizedAsMapEntries'
p41688
sg15
(lp41689
sg17
(lp41690
sg19
(lp41691
sg21
I0
sba(iArchitecture
Entity
p41692
(dp41693
g11
(lp41694
sg13
S'com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1'
p41695
sg15
(lp41696
sg17
(lp41697
sg19
(lp41698
sg21
I0
sba(iArchitecture
Entity
p41699
(dp41700
g11
(lp41701
sg13
S'com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1'
p41702
sg15
(lp41703
sg17
(lp41704
sg19
(lp41705
sg21
I0
sba(iArchitecture
Entity
p41706
(dp41707
g11
(lp41708
sg13
S'com.google.common.collect.Synchronized$SynchronizedAsMapValues'
p41709
sg15
(lp41710
sg17
(lp41711
sg19
(lp41712
sg21
I0
sba(iArchitecture
Entity
p41713
(dp41714
g11
(lp41715
sg13
S'com.google.common.collect.Synchronized$SynchronizedAsMapValues$1'
p41716
sg15
(lp41717
sg17
(lp41718
sg19
(lp41719
sg21
I0
sba(iArchitecture
Entity
p41720
(dp41721
g11
(lp41722
sg13
S'com.google.common.collect.Synchronized$SynchronizedBiMap'
p41723
sg15
(lp41724
sg17
(lp41725
sg19
(lp41726
sg21
I0
sba(iArchitecture
Entity
p41727
(dp41728
g11
(lp41729
sg13
S'com.google.common.collect.Synchronized$SynchronizedCollection'
p41730
sg15
(lp41731
sg17
(lp41732
sg19
(lp41733
sg21
I0
sba(iArchitecture
Entity
p41734
(dp41735
g11
(lp41736
sg13
S'com.google.common.collect.Synchronized$SynchronizedDeque'
p41737
sg15
(lp41738
sg17
(lp41739
sg19
(lp41740
sg21
I0
sba(iArchitecture
Entity
p41741
(dp41742
g11
(lp41743
sg13
S'com.google.common.collect.Synchronized$SynchronizedEntry'
p41744
sg15
(lp41745
sg17
(lp41746
sg19
(lp41747
sg21
I0
sba(iArchitecture
Entity
p41748
(dp41749
g11
(lp41750
sg13
S'com.google.common.collect.Synchronized$SynchronizedList'
p41751
sg15
(lp41752
sg17
(lp41753
sg19
(lp41754
sg21
I0
sba(iArchitecture
Entity
p41755
(dp41756
g11
(lp41757
sg13
S'com.google.common.collect.Synchronized$SynchronizedListMultimap'
p41758
sg15
(lp41759
sg17
(lp41760
sg19
(lp41761
sg21
I0
sba(iArchitecture
Entity
p41762
(dp41763
g11
(lp41764
sg13
S'com.google.common.collect.Synchronized$SynchronizedMap'
p41765
sg15
(lp41766
sg17
(lp41767
sg19
(lp41768
sg21
I0
sba(iArchitecture
Entity
p41769
(dp41770
g11
(lp41771
sg13
S'com.google.common.collect.Synchronized$SynchronizedMultimap'
p41772
sg15
(lp41773
sg17
(lp41774
sg19
(lp41775
sg21
I0
sba(iArchitecture
Entity
p41776
(dp41777
g11
(lp41778
sg13
S'com.google.common.collect.Synchronized$SynchronizedMultiset'
p41779
sg15
(lp41780
sg17
(lp41781
sg19
(lp41782
sg21
I0
sba(iArchitecture
Entity
p41783
(dp41784
g11
(lp41785
sg13
S'com.google.common.collect.Synchronized$SynchronizedNavigableMap'
p41786
sg15
(lp41787
sg17
(lp41788
sg19
(lp41789
sg21
I0
sba(iArchitecture
Entity
p41790
(dp41791
g11
(lp41792
sg13
S'com.google.common.collect.Synchronized$SynchronizedNavigableSet'
p41793
sg15
(lp41794
sg17
(lp41795
sg19
(lp41796
sg21
I0
sba(iArchitecture
Entity
p41797
(dp41798
g11
(lp41799
sg13
S'com.google.common.collect.Synchronized$SynchronizedObject'
p41800
sg15
(lp41801
sg17
(lp41802
sg19
(lp41803
sg21
I0
sba(iArchitecture
Entity
p41804
(dp41805
g11
(lp41806
sg13
S'com.google.common.collect.Synchronized$SynchronizedQueue'
p41807
sg15
(lp41808
sg17
(lp41809
sg19
(lp41810
sg21
I0
sba(iArchitecture
Entity
p41811
(dp41812
g11
(lp41813
sg13
S'com.google.common.collect.Synchronized$SynchronizedRandomAccessList'
p41814
sg15
(lp41815
sg17
(lp41816
sg19
(lp41817
sg21
I0
sba(iArchitecture
Entity
p41818
(dp41819
g11
(lp41820
sg13
S'com.google.common.collect.Synchronized$SynchronizedSet'
p41821
sg15
(lp41822
sg17
(lp41823
sg19
(lp41824
sg21
I0
sba(iArchitecture
Entity
p41825
(dp41826
g11
(lp41827
sg13
S'com.google.common.collect.Synchronized$SynchronizedSetMultimap'
p41828
sg15
(lp41829
sg17
(lp41830
sg19
(lp41831
sg21
I0
sba(iArchitecture
Entity
p41832
(dp41833
g11
(lp41834
sg13
S'com.google.common.collect.Synchronized$SynchronizedSortedMap'
p41835
sg15
(lp41836
sg17
(lp41837
sg19
(lp41838
sg21
I0
sba(iArchitecture
Entity
p41839
(dp41840
g11
(lp41841
sg13
S'com.google.common.collect.Synchronized$SynchronizedSortedSet'
p41842
sg15
(lp41843
sg17
(lp41844
sg19
(lp41845
sg21
I0
sba(iArchitecture
Entity
p41846
(dp41847
g11
(lp41848
sg13
S'com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap'
p41849
sg15
(lp41850
sg17
(lp41851
sg19
(lp41852
sg21
I0
sba(iArchitecture
Entity
p41853
(dp41854
g11
(lp41855
sg13
S'com.google.common.collect.Table'
p41856
sg15
(lp41857
sg17
(lp41858
sg19
(lp41859
sg21
I0
sba(iArchitecture
Entity
p41860
(dp41861
g11
(lp41862
sg13
S'com.google.common.collect.Table$Cell'
p41863
sg15
(lp41864
sg17
(lp41865
sg19
(lp41866
sg21
I0
sba(iArchitecture
Entity
p41867
(dp41868
g11
(lp41869
sg13
S'com.google.common.collect.Table_CustomFieldSerializerBase'
p41870
sg15
(lp41871
sg17
(lp41872
sg19
(lp41873
sg21
I0
sba(iArchitecture
Entity
p41874
(dp41875
g11
(lp41876
sg13
S'com.google.common.collect.Tables'
p41877
sg15
(lp41878
sg17
(lp41879
sg19
(lp41880
sg21
I0
sba(iArchitecture
Entity
p41881
(dp41882
g11
(lp41883
sg13
S'com.google.common.collect.Tables$1'
p41884
sg15
(lp41885
sg17
(lp41886
sg19
(lp41887
sg21
I0
sba(iArchitecture
Entity
p41888
(dp41889
g11
(lp41890
sg13
S'com.google.common.collect.Tables$AbstractCell'
p41891
sg15
(lp41892
sg17
(lp41893
sg19
(lp41894
sg21
I0
sba(iArchitecture
Entity
p41895
(dp41896
g11
(lp41897
sg13
S'com.google.common.collect.Tables$ImmutableCell'
p41898
sg15
(lp41899
sg17
(lp41900
sg19
(lp41901
sg21
I0
sba(iArchitecture
Entity
p41902
(dp41903
g11
(lp41904
sg13
S'com.google.common.collect.Tables$TransformedTable'
p41905
sg15
(lp41906
sg17
(lp41907
sg19
(lp41908
sg21
I0
sba(iArchitecture
Entity
p41909
(dp41910
g11
(lp41911
sg13
S'com.google.common.collect.Tables$TransformedTable$1'
p41912
sg15
(lp41913
sg17
(lp41914
sg19
(lp41915
sg21
I0
sba(iArchitecture
Entity
p41916
(dp41917
g11
(lp41918
sg13
S'com.google.common.collect.Tables$TransformedTable$2'
p41919
sg15
(lp41920
sg17
(lp41921
sg19
(lp41922
sg21
I0
sba(iArchitecture
Entity
p41923
(dp41924
g11
(lp41925
sg13
S'com.google.common.collect.Tables$TransformedTable$3'
p41926
sg15
(lp41927
sg17
(lp41928
sg19
(lp41929
sg21
I0
sba(iArchitecture
Entity
p41930
(dp41931
g11
(lp41932
sg13
S'com.google.common.collect.Tables$TransposeTable'
p41933
sg15
(lp41934
sg17
(lp41935
sg19
(lp41936
sg21
I0
sba(iArchitecture
Entity
p41937
(dp41938
g11
(lp41939
sg13
S'com.google.common.collect.Tables$TransposeTable$1'
p41940
sg15
(lp41941
sg17
(lp41942
sg19
(lp41943
sg21
I0
sba(iArchitecture
Entity
p41944
(dp41945
g11
(lp41946
sg13
S'com.google.common.collect.Tables$UnmodifiableRowSortedMap'
p41947
sg15
(lp41948
sg17
(lp41949
sg19
(lp41950
sg21
I0
sba(iArchitecture
Entity
p41951
(dp41952
g11
(lp41953
sg13
S'com.google.common.collect.Tables$UnmodifiableTable'
p41954
sg15
(lp41955
sg17
(lp41956
sg19
(lp41957
sg21
I0
sba(iArchitecture
Entity
p41958
(dp41959
g11
(lp41960
sg13
S'com.google.common.collect.TopKSelector'
p41961
sg15
(lp41962
sg17
(lp41963
sg19
(lp41964
sg21
I0
sba(iArchitecture
Entity
p41965
(dp41966
g11
(lp41967
sg13
S'com.google.common.collect.TransformedIterator'
p41968
sg15
(lp41969
sg17
(lp41970
sg19
(lp41971
sg21
I0
sba(iArchitecture
Entity
p41972
(dp41973
g11
(lp41974
sg13
S'com.google.common.collect.TransformedListIterator'
p41975
sg15
(lp41976
sg17
(lp41977
sg19
(lp41978
sg21
I0
sba(iArchitecture
Entity
p41979
(dp41980
g11
(lp41981
sg13
S'com.google.common.collect.TreeBasedTable'
p41982
sg15
(lp41983
sg17
(lp41984
sg19
(lp41985
sg21
I0
sba(iArchitecture
Entity
p41986
(dp41987
g11
(lp41988
sg13
S'com.google.common.collect.TreeBasedTable$1'
p41989
sg15
(lp41990
sg17
(lp41991
sg19
(lp41992
sg21
I0
sba(iArchitecture
Entity
p41993
(dp41994
g11
(lp41995
sg13
S'com.google.common.collect.TreeBasedTable$2'
p41996
sg15
(lp41997
sg17
(lp41998
sg19
(lp41999
sg21
I0
sba(iArchitecture
Entity
p42000
(dp42001
g11
(lp42002
sg13
S'com.google.common.collect.TreeBasedTable$Factory'
p42003
sg15
(lp42004
sg17
(lp42005
sg19
(lp42006
sg21
I0
sba(iArchitecture
Entity
p42007
(dp42008
g11
(lp42009
sg13
S'com.google.common.collect.TreeBasedTable$TreeRow'
p42010
sg15
(lp42011
sg17
(lp42012
sg19
(lp42013
sg21
I0
sba(iArchitecture
Entity
p42014
(dp42015
g11
(lp42016
sg13
S'com.google.common.collect.TreeBasedTable_CustomFieldSerializer'
p42017
sg15
(lp42018
sg17
(lp42019
sg19
(lp42020
sg21
I0
sba(iArchitecture
Entity
p42021
(dp42022
g11
(lp42023
sg13
S'com.google.common.collect.TreeMultimap'
p42024
sg15
(lp42025
sg17
(lp42026
sg19
(lp42027
sg21
I0
sba(iArchitecture
Entity
p42028
(dp42029
g11
(lp42030
sg13
S'com.google.common.collect.TreeMultimap_CustomFieldSerializer'
p42031
sg15
(lp42032
sg17
(lp42033
sg19
(lp42034
sg21
I0
sba(iArchitecture
Entity
p42035
(dp42036
g11
(lp42037
sg13
S'com.google.common.collect.TreeMultiset'
p42038
sg15
(lp42039
sg17
(lp42040
sg19
(lp42041
sg21
I0
sba(iArchitecture
Entity
p42042
(dp42043
g11
(lp42044
sg13
S'com.google.common.collect.TreeMultiset$1'
p42045
sg15
(lp42046
sg17
(lp42047
sg19
(lp42048
sg21
I0
sba(iArchitecture
Entity
p42049
(dp42050
g11
(lp42051
sg13
S'com.google.common.collect.TreeMultiset$2'
p42052
sg15
(lp42053
sg17
(lp42054
sg19
(lp42055
sg21
I0
sba(iArchitecture
Entity
p42056
(dp42057
g11
(lp42058
sg13
S'com.google.common.collect.TreeMultiset$3'
p42059
sg15
(lp42060
sg17
(lp42061
sg19
(lp42062
sg21
I0
sba(iArchitecture
Entity
p42063
(dp42064
g11
(lp42065
sg13
S'com.google.common.collect.TreeMultiset$4'
p42066
sg15
(lp42067
sg17
(lp42068
sg19
(lp42069
sg21
I0
sba(iArchitecture
Entity
p42070
(dp42071
g11
(lp42072
sg13
S'com.google.common.collect.TreeMultiset$Aggregate'
p42073
sg15
(lp42074
sg17
(lp42075
sg19
(lp42076
sg21
I0
sba(iArchitecture
Entity
p42077
(dp42078
g11
(lp42079
sg13
S'com.google.common.collect.TreeMultiset$Aggregate$1'
p42080
sg15
(lp42081
sg17
(lp42082
sg19
(lp42083
sg21
I0
sba(iArchitecture
Entity
p42084
(dp42085
g11
(lp42086
sg13
S'com.google.common.collect.TreeMultiset$Aggregate$2'
p42087
sg15
(lp42088
sg17
(lp42089
sg19
(lp42090
sg21
I0
sba(iArchitecture
Entity
p42091
(dp42092
g11
(lp42093
sg13
S'com.google.common.collect.TreeMultiset$AvlNode'
p42094
sg15
(lp42095
sg17
(lp42096
sg19
(lp42097
sg21
I0
sba(iArchitecture
Entity
p42098
(dp42099
g11
(lp42100
sg13
S'com.google.common.collect.TreeMultiset$Reference'
p42101
sg15
(lp42102
sg17
(lp42103
sg19
(lp42104
sg21
I0
sba(iArchitecture
Entity
p42105
(dp42106
g11
(lp42107
sg13
S'com.google.common.collect.TreeRangeMap'
p42108
sg15
(lp42109
sg17
(lp42110
sg19
(lp42111
sg21
I0
sba(iArchitecture
Entity
p42112
(dp42113
g11
(lp42114
sg13
S'com.google.common.collect.TreeRangeMap$1'
p42115
sg15
(lp42116
sg17
(lp42117
sg19
(lp42118
sg21
I0
sba(iArchitecture
Entity
p42119
(dp42120
g11
(lp42121
sg13
S'com.google.common.collect.TreeRangeMap$AsMapOfRanges'
p42122
sg15
(lp42123
sg17
(lp42124
sg19
(lp42125
sg21
I0
sba(iArchitecture
Entity
p42126
(dp42127
g11
(lp42128
sg13
S'com.google.common.collect.TreeRangeMap$RangeMapEntry'
p42129
sg15
(lp42130
sg17
(lp42131
sg19
(lp42132
sg21
I0
sba(iArchitecture
Entity
p42133
(dp42134
g11
(lp42135
sg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap'
p42136
sg15
(lp42137
sg17
(lp42138
sg19
(lp42139
sg21
I0
sba(iArchitecture
Entity
p42140
(dp42141
g11
(lp42142
sg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap$1'
p42143
sg15
(lp42144
sg17
(lp42145
sg19
(lp42146
sg21
I0
sba(iArchitecture
Entity
p42147
(dp42148
g11
(lp42149
sg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap$1$1'
p42150
sg15
(lp42151
sg17
(lp42152
sg19
(lp42153
sg21
I0
sba(iArchitecture
Entity
p42154
(dp42155
g11
(lp42156
sg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap'
p42157
sg15
(lp42158
sg17
(lp42159
sg19
(lp42160
sg21
I0
sba(iArchitecture
Entity
p42161
(dp42162
g11
(lp42163
sg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1'
p42164
sg15
(lp42165
sg17
(lp42166
sg19
(lp42167
sg21
I0
sba(iArchitecture
Entity
p42168
(dp42169
g11
(lp42170
sg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2'
p42171
sg15
(lp42172
sg17
(lp42173
sg19
(lp42174
sg21
I0
sba(iArchitecture
Entity
p42175
(dp42176
g11
(lp42177
sg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$3'
p42178
sg15
(lp42179
sg17
(lp42180
sg19
(lp42181
sg21
I0
sba(iArchitecture
Entity
p42182
(dp42183
g11
(lp42184
sg13
S'com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$4'
p42185
sg15
(lp42186
sg17
(lp42187
sg19
(lp42188
sg21
I0
sba(iArchitecture
Entity
p42189
(dp42190
g11
(lp42191
sg13
S'com.google.common.collect.TreeRangeSet'
p42192
sg15
(lp42193
sg17
(lp42194
sg19
(lp42195
sg21
I0
sba(iArchitecture
Entity
p42196
(dp42197
g11
(lp42198
sg13
S'com.google.common.collect.TreeRangeSet$1'
p42199
sg15
(lp42200
sg17
(lp42201
sg19
(lp42202
sg21
I0
sba(iArchitecture
Entity
p42203
(dp42204
g11
(lp42205
sg13
S'com.google.common.collect.TreeRangeSet$AsRanges'
p42206
sg15
(lp42207
sg17
(lp42208
sg19
(lp42209
sg21
I0
sba(iArchitecture
Entity
p42210
(dp42211
g11
(lp42212
sg13
S'com.google.common.collect.TreeRangeSet$Complement'
p42213
sg15
(lp42214
sg17
(lp42215
sg19
(lp42216
sg21
I0
sba(iArchitecture
Entity
p42217
(dp42218
g11
(lp42219
sg13
S'com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound'
p42220
sg15
(lp42221
sg17
(lp42222
sg19
(lp42223
sg21
I0
sba(iArchitecture
Entity
p42224
(dp42225
g11
(lp42226
sg13
S'com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$1'
p42227
sg15
(lp42228
sg17
(lp42229
sg19
(lp42230
sg21
I0
sba(iArchitecture
Entity
p42231
(dp42232
g11
(lp42233
sg13
S'com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$2'
p42234
sg15
(lp42235
sg17
(lp42236
sg19
(lp42237
sg21
I0
sba(iArchitecture
Entity
p42238
(dp42239
g11
(lp42240
sg13
S'com.google.common.collect.TreeRangeSet$RangesByUpperBound'
p42241
sg15
(lp42242
sg17
(lp42243
sg19
(lp42244
sg21
I0
sba(iArchitecture
Entity
p42245
(dp42246
g11
(lp42247
sg13
S'com.google.common.collect.TreeRangeSet$RangesByUpperBound$1'
p42248
sg15
(lp42249
sg17
(lp42250
sg19
(lp42251
sg21
I0
sba(iArchitecture
Entity
p42252
(dp42253
g11
(lp42254
sg13
S'com.google.common.collect.TreeRangeSet$RangesByUpperBound$2'
p42255
sg15
(lp42256
sg17
(lp42257
sg19
(lp42258
sg21
I0
sba(iArchitecture
Entity
p42259
(dp42260
g11
(lp42261
sg13
S'com.google.common.collect.TreeRangeSet$SubRangeSet'
p42262
sg15
(lp42263
sg17
(lp42264
sg19
(lp42265
sg21
I0
sba(iArchitecture
Entity
p42266
(dp42267
g11
(lp42268
sg13
S'com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound'
p42269
sg15
(lp42270
sg17
(lp42271
sg19
(lp42272
sg21
I0
sba(iArchitecture
Entity
p42273
(dp42274
g11
(lp42275
sg13
S'com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$1'
p42276
sg15
(lp42277
sg17
(lp42278
sg19
(lp42279
sg21
I0
sba(iArchitecture
Entity
p42280
(dp42281
g11
(lp42282
sg13
S'com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$2'
p42283
sg15
(lp42284
sg17
(lp42285
sg19
(lp42286
sg21
I0
sba(iArchitecture
Entity
p42287
(dp42288
g11
(lp42289
sg13
S'com.google.common.collect.TreeTraverser'
p42290
sg15
(lp42291
sg17
(lp42292
sg19
(lp42293
sg21
I0
sba(iArchitecture
Entity
p42294
(dp42295
g11
(lp42296
sg13
S'com.google.common.collect.TreeTraverser$1'
p42297
sg15
(lp42298
sg17
(lp42299
sg19
(lp42300
sg21
I0
sba(iArchitecture
Entity
p42301
(dp42302
g11
(lp42303
sg13
S'com.google.common.collect.TreeTraverser$2'
p42304
sg15
(lp42305
sg17
(lp42306
sg19
(lp42307
sg21
I0
sba(iArchitecture
Entity
p42308
(dp42309
g11
(lp42310
sg13
S'com.google.common.collect.TreeTraverser$3'
p42311
sg15
(lp42312
sg17
(lp42313
sg19
(lp42314
sg21
I0
sba(iArchitecture
Entity
p42315
(dp42316
g11
(lp42317
sg13
S'com.google.common.collect.TreeTraverser$4'
p42318
sg15
(lp42319
sg17
(lp42320
sg19
(lp42321
sg21
I0
sba(iArchitecture
Entity
p42322
(dp42323
g11
(lp42324
sg13
S'com.google.common.collect.TreeTraverser$BreadthFirstIterator'
p42325
sg15
(lp42326
sg17
(lp42327
sg19
(lp42328
sg21
I0
sba(iArchitecture
Entity
p42329
(dp42330
g11
(lp42331
sg13
S'com.google.common.collect.TreeTraverser$PostOrderIterator'
p42332
sg15
(lp42333
sg17
(lp42334
sg19
(lp42335
sg21
I0
sba(iArchitecture
Entity
p42336
(dp42337
g11
(lp42338
sg13
S'com.google.common.collect.TreeTraverser$PostOrderNode'
p42339
sg15
(lp42340
sg17
(lp42341
sg19
(lp42342
sg21
I0
sba(iArchitecture
Entity
p42343
(dp42344
g11
(lp42345
sg13
S'com.google.common.collect.TreeTraverser$PreOrderIterator'
p42346
sg15
(lp42347
sg17
(lp42348
sg19
(lp42349
sg21
I0
sba(iArchitecture
Entity
p42350
(dp42351
g11
(lp42352
sg13
S'com.google.common.collect.UnmodifiableIterator'
p42353
sg15
(lp42354
sg17
(lp42355
sg19
(lp42356
sg21
I0
sba(iArchitecture
Entity
p42357
(dp42358
g11
(lp42359
sg13
S'com.google.common.collect.UnmodifiableListIterator'
p42360
sg15
(lp42361
sg17
(lp42362
sg19
(lp42363
sg21
I0
sba(iArchitecture
Entity
p42364
(dp42365
g11
(lp42366
sg13
S'com.google.common.collect.UnmodifiableSortedMultiset'
p42367
sg15
(lp42368
sg17
(lp42369
sg19
(lp42370
sg21
I0
sba(iArchitecture
Entity
p42371
(dp42372
g11
(lp42373
sg13
S'com.google.common.collect.UsingToStringOrdering'
p42374
sg15
(lp42375
sg17
(lp42376
sg19
(lp42377
sg21
I0
sba(iArchitecture
Entity
p42378
(dp42379
g11
(lp42380
sg13
S'com.google.common.collect.UsingToStringOrdering_CustomFieldSerializer'
p42381
sg15
(lp42382
sg17
(lp42383
sg19
(lp42384
sg21
I0
sba(iArchitecture
Entity
p42385
(dp42386
g11
(lp42387
sg13
S'com.google.common.collect.WellBehavedMap'
p42388
sg15
(lp42389
sg17
(lp42390
sg19
(lp42391
sg21
I0
sba(iArchitecture
Entity
p42392
(dp42393
g11
(lp42394
sg13
S'com.google.common.collect.WellBehavedMap$1'
p42395
sg15
(lp42396
sg17
(lp42397
sg19
(lp42398
sg21
I0
sba(iArchitecture
Entity
p42399
(dp42400
g11
(lp42401
sg13
S'com.google.common.collect.WellBehavedMap$EntrySet'
p42402
sg15
(lp42403
sg17
(lp42404
sg19
(lp42405
sg21
I0
sba(iArchitecture
Entity
p42406
(dp42407
g11
(lp42408
sg13
S'com.google.common.collect.WellBehavedMap$EntrySet$1'
p42409
sg15
(lp42410
sg17
(lp42411
sg19
(lp42412
sg21
I0
sba(iArchitecture
Entity
p42413
(dp42414
g11
(lp42415
sg13
S'com.google.common.collect.WellBehavedMap$EntrySet$1$1'
p42416
sg15
(lp42417
sg17
(lp42418
sg19
(lp42419
sg21
I0
sba(iArchitecture
Entity
p42420
(dp42421
g11
(lp42422
sg13
S'com.google.common.primitives.UnsignedLong_CustomFieldSerializer'
p42423
sg15
(lp42424
sg17
(lp42425
sg19
(lp42426
sg21
I0
sba(iArchitecture
Entity
p42427
(dp42428
g11
(lp42429
sg13
S'com.google.errorprone.annotations.CanIgnoreReturnValue'
p42430
sg15
(lp42431
sg17
(lp42432
sg19
(lp42433
sg21
I0
sba(iArchitecture
Entity
p42434
(dp42435
g11
(lp42436
sg13
S'com.google.gwt.user.client.rpc.SerializationException'
p42437
sg15
(lp42438
sg17
(lp42439
sg19
(lp42440
sg21
I0
sba(iArchitecture
Entity
p42441
(dp42442
g11
(lp42443
sg13
S'com.google.gwt.user.client.rpc.SerializationStreamReader'
p42444
sg15
(lp42445
sg17
(lp42446
sg19
(lp42447
sg21
I0
sba(iArchitecture
Entity
p42448
(dp42449
g11
(lp42450
sg13
S'com.google.gwt.user.client.rpc.SerializationStreamWriter'
p42451
sg15
(lp42452
sg17
(lp42453
sg19
(lp42454
sg21
I0
sba(iArchitecture
Entity
p42455
(dp42456
g11
(lp42457
sg13
S'com.google.gwt.user.client.rpc.core.java.util.Collection_CustomFieldSerializerBase'
p42458
sg15
(lp42459
sg17
(lp42460
sg19
(lp42461
sg21
I0
sba(iArchitecture
Entity
p42462
(dp42463
g11
(lp42464
sg13
S'com.google.gwt.user.client.rpc.core.java.util.Map_CustomFieldSerializerBase'
p42465
sg15
(lp42466
sg17
(lp42467
sg19
(lp42468
sg21
I0
sba(iArchitecture
Entity
p42469
(dp42470
g11
(lp42471
sg13
S'com.google.j2objc.annotations.RetainedWith'
p42472
sg15
(lp42473
sg17
(lp42474
sg19
(lp42475
sg21
I0
sba(iArchitecture
Entity
p42476
(dp42477
g11
(lp42478
sg13
S'com.google.j2objc.annotations.Weak'
p42479
sg15
(lp42480
sg17
(lp42481
sg19
(lp42482
sg21
I0
sbasg1055
(lp42483
g36410
ag36417
ag36424
ag36431
ag36438
ag36445
ag36452
ag36459
ag36466
ag36473
ag36480
ag36487
ag36494
ag36501
ag36508
ag36515
ag36522
ag36529
ag36536
ag36543
ag36550
ag36557
ag36564
ag36571
ag36578
ag36585
ag36592
ag36599
ag36606
ag36613
ag36620
ag36627
ag36634
ag36641
ag36648
ag36655
ag36662
ag36669
ag36676
ag36683
ag36690
ag36697
ag36704
ag36711
ag36718
ag36725
ag36732
ag36739
ag36746
ag36753
ag36760
ag36767
ag36774
ag36781
ag36788
ag36795
ag36802
ag36809
ag36816
ag36823
ag36830
ag36837
ag36844
ag36851
ag36858
ag36865
ag36872
ag36879
ag36886
ag36893
ag36900
ag36907
ag36914
ag36921
ag36928
ag36935
ag36942
ag36949
ag36956
ag36963
ag36970
ag36977
ag36984
ag36991
ag36998
ag37005
ag37012
ag37019
ag37026
ag37033
ag37040
ag37047
ag37054
ag37061
ag37068
ag37075
ag37082
ag37089
ag37096
ag37103
ag37110
ag37117
ag37124
ag37131
ag37138
ag37145
ag37152
ag37159
ag37166
ag37173
ag37180
ag37187
ag37194
ag37201
ag37208
ag37215
ag37222
ag37229
ag37236
ag37243
ag37250
ag37257
ag37264
ag37271
ag37278
ag37285
ag37292
ag37299
ag37306
ag37313
ag37320
ag37327
ag37334
ag37341
ag37348
ag37355
ag37362
ag37369
ag37376
ag37383
ag37390
ag37397
ag37404
ag37411
ag37418
ag37425
ag37432
ag37439
ag37446
ag37453
ag37460
ag37467
ag37474
ag37481
ag37488
ag37495
ag37502
ag37509
ag37516
ag37523
ag37530
ag37537
ag37544
ag37551
ag37558
ag37565
ag37572
ag37579
ag37586
ag37593
ag37600
ag37607
ag37614
ag37621
ag37628
ag37635
ag37642
ag37649
ag37656
ag37663
ag37670
ag37677
ag37684
ag37691
ag37698
ag37705
ag37712
ag37719
ag37726
ag37733
ag37740
ag37747
ag37754
ag37761
ag37768
ag37775
ag37782
ag37789
ag37796
ag37803
ag37810
ag37817
ag37824
ag37831
ag37838
ag37845
ag37852
ag37859
ag37866
ag37873
ag37880
ag37887
ag37894
ag37901
ag37908
ag37915
ag37922
ag37929
ag37936
ag37943
ag37950
ag37957
ag37964
ag37971
ag37978
ag37985
ag37992
ag37999
ag38006
ag38013
ag38020
ag38027
ag38034
ag38041
ag38048
ag38055
ag38062
ag38069
ag38076
ag38083
ag38090
ag38097
ag38104
ag38111
ag38118
ag38125
ag38132
ag38139
ag38146
ag38153
ag38160
ag38167
ag38174
ag38181
ag38188
ag38195
ag38202
ag38209
ag38216
ag38223
ag38230
ag38237
ag38244
ag38251
ag38258
ag38265
ag38272
ag38279
ag38286
ag38293
ag38300
ag38307
ag38314
ag38321
ag38328
ag38335
ag38342
ag38349
ag38356
ag38363
ag38370
ag38377
ag38384
ag38391
ag38398
ag38405
ag38412
ag38419
ag38426
ag38433
ag38440
ag38447
ag38454
ag38461
ag38468
ag38475
ag38482
ag38489
ag38496
ag38503
ag38510
ag38517
ag38524
ag38531
ag38538
ag38545
ag38552
ag38559
ag38566
ag38573
ag38580
ag38587
ag38594
ag38601
ag38608
ag38615
ag38622
ag38629
ag38636
ag38643
ag38650
ag38657
ag38664
ag38671
ag38678
ag38685
ag38692
ag38699
ag38706
ag38713
ag38720
ag38727
ag38734
ag38741
ag38748
ag38755
ag38762
ag38769
ag38776
ag38783
ag38790
ag38797
ag38804
ag38811
ag38818
ag38825
ag38832
ag38839
ag38846
ag38853
ag38860
ag38867
ag38874
ag38881
ag38888
ag38895
ag38902
ag38909
ag38916
ag38923
ag38930
ag38937
ag38944
ag38951
ag38958
ag38965
ag38972
ag38979
ag38986
ag38993
ag39000
ag39007
ag39014
ag39021
ag39028
ag39035
ag39042
ag39049
ag39056
ag39063
ag39070
ag39077
ag39084
ag39091
ag39098
ag39105
ag39112
ag39119
ag39126
ag39133
ag39140
ag39147
ag39154
ag39161
ag39168
ag39175
ag39182
ag39189
ag39196
ag39203
ag39210
ag39217
ag39224
ag39231
ag39238
ag39245
ag39252
ag39259
ag39266
ag39273
ag39280
ag39287
ag39294
ag39301
ag39308
ag39315
ag39322
ag39329
ag39336
ag39343
ag39350
ag39357
ag39364
ag39371
ag39378
ag39385
ag39392
ag39399
ag39406
ag39413
ag39420
ag39427
ag39434
ag39441
ag39448
ag39455
ag39462
ag39469
ag39476
ag39483
ag39490
ag39497
ag39504
ag39511
ag39518
ag39525
ag39532
ag39539
ag39546
ag39553
ag39560
ag39567
ag39574
ag39581
ag39588
ag39595
ag39602
ag39609
ag39616
ag39623
ag39630
ag39637
ag39644
ag39651
ag39658
ag39665
ag39672
ag39679
ag39686
ag39693
ag39700
ag39707
ag39714
ag39721
ag39728
ag39735
ag39742
ag39749
ag39756
ag39763
ag39770
ag39777
ag39784
ag39791
ag39798
ag39805
ag39812
ag39819
ag39826
ag39833
ag39840
ag39847
ag39854
ag39861
ag39868
ag39875
ag39882
ag39889
ag39896
ag39903
ag39910
ag39917
ag39924
ag39931
ag39938
ag39945
ag39952
ag39959
ag39966
ag39973
ag39980
ag39987
ag39994
ag40001
ag40008
ag40015
ag40022
ag40029
ag40036
ag40043
ag40050
ag40057
ag40064
ag40071
ag40078
ag40085
ag40092
ag40099
ag40106
ag40113
ag40120
ag40127
ag40134
ag40141
ag40148
ag40155
ag40163
ag40175
ag40185
ag40195
ag40205
ag40215
ag40225
ag40232
ag40239
ag40246
ag40253
ag40260
ag40267
ag40274
ag40281
ag40288
ag40295
ag40302
ag40309
ag40316
ag40323
ag40330
ag40337
ag40344
ag40351
ag40358
ag40365
ag40372
ag40379
ag40386
ag40393
ag40400
ag40407
ag40414
ag40421
ag40428
ag40435
ag40442
ag40449
ag40456
ag40463
ag40470
ag40477
ag40484
ag40491
ag40498
ag40505
ag40512
ag40519
ag40526
ag40533
ag40540
ag40547
ag40554
ag40561
ag40568
ag40575
ag40582
ag40589
ag40596
ag40603
ag40610
ag40617
ag40624
ag40631
ag40638
ag40645
ag40652
ag40659
ag40666
ag40673
ag40680
ag40687
ag40694
ag40701
ag40708
ag40715
ag40722
ag40729
ag40736
ag40743
ag40750
ag40757
ag40764
ag40771
ag40778
ag40785
ag40792
ag40799
ag40806
ag40813
ag40820
ag40827
ag40834
ag40841
ag40848
ag40855
ag40862
ag40869
ag40876
ag40883
ag40890
ag40897
ag40904
ag40911
ag40918
ag40925
ag40932
ag40939
ag40946
ag40953
ag40960
ag40967
ag40974
ag40981
ag40988
ag40995
ag41002
ag41009
ag41016
ag41023
ag41030
ag41037
ag41044
ag41051
ag41058
ag41065
ag41072
ag41079
ag41086
ag41093
ag41100
ag41107
ag41114
ag41121
ag41128
ag41135
ag41142
ag41149
ag41156
ag41163
ag41170
ag41177
ag41184
ag41191
ag41198
ag41205
ag41212
ag41219
ag41226
ag41233
ag41240
ag41247
ag41254
ag41261
ag41268
ag41275
ag41282
ag41289
ag41296
ag41303
ag41310
ag41317
ag41324
ag41331
ag41338
ag41345
ag41352
ag41359
ag41366
ag41373
ag41380
ag41387
ag41394
ag41401
ag41408
ag41415
ag41422
ag41429
ag41436
ag41443
ag41450
ag41457
ag41464
ag41471
ag41478
ag41485
ag41492
ag41499
ag41506
ag41513
ag41520
ag41527
ag41534
ag41541
ag41548
ag41555
ag41562
ag41569
ag41576
ag41583
ag41590
ag41597
ag41604
ag41611
ag41618
ag41625
ag41632
ag41639
ag41646
ag41653
ag41660
ag41667
ag41674
ag41681
ag41688
ag41695
ag41702
ag41709
ag41716
ag41723
ag41730
ag41737
ag41744
ag41751
ag41758
ag41765
ag41772
ag41779
ag41786
ag41793
ag41800
ag41807
ag41814
ag41821
ag41828
ag41835
ag41842
ag41849
ag41856
ag41863
ag41870
ag41877
ag41884
ag41891
ag41898
ag41905
ag41912
ag41919
ag41926
ag41933
ag41940
ag41947
ag41954
ag41961
ag41968
ag41975
ag41982
ag41989
ag41996
ag42003
ag42010
ag42017
ag42024
ag42031
ag42038
ag42045
ag42052
ag42059
ag42066
ag42073
ag42080
ag42087
ag42094
ag42101
ag42108
ag42115
ag42122
ag42129
ag42136
ag42143
ag42150
ag42157
ag42164
ag42171
ag42178
ag42185
ag42192
ag42199
ag42206
ag42213
ag42220
ag42227
ag42234
ag42241
ag42248
ag42255
ag42262
ag42269
ag42276
ag42283
ag42290
ag42297
ag42304
ag42311
ag42318
ag42325
ag42332
ag42339
ag42346
ag42353
ag42360
ag42367
ag42374
ag42381
ag42388
ag42395
ag42402
ag42409
ag42416
ag42423
ag42430
ag42437
ag42444
ag42451
ag42458
ag42465
ag42472
ag42479
asg21
I0
sg1057
S'com.google.common.collect.ss'
p42484
sba(iArchitecture
Cluster
p42485
(dp42486
g7
(lp42487
(iArchitecture
Entity
p42488
(dp42489
g11
(lp42490
sg13
S'com.google.common.collect.testing.features.SetFeature'
p42491
sg15
(lp42492
sg17
(lp42493
sg19
(lp42494
sg21
I0
sba(iArchitecture
Entity
p42495
(dp42496
g11
(lp42497
sg13
S'com.google.common.collect.testing.features.SetFeature$Require'
p42498
sg15
(lp42499
sg17
(lp42500
sg19
(lp42501
sg21
I0
sbasg1055
(lp42502
g42491
ag42498
asg21
I0
sg1057
S'com.google.common.collect.testing.features.ss'
p42503
sba(iArchitecture
Cluster
p42504
(dp42505
g7
(lp42506
(iArchitecture
Entity
p42507
(dp42508
g11
(lp42509
sg13
S'com.google.common.annotations.GwtCompatible'
p42510
sg15
(lp42511
sg17
(lp42512
sg19
(lp42513
sg21
I0
sba(iArchitecture
Entity
p42514
(dp42515
g11
(lp42516
sg13
S'com.google.common.collect.BiMap'
p42517
sg15
(lp42518
sg17
(lp42519
sg19
(lp42520
sg21
I0
sba(iArchitecture
Entity
p42521
(dp42522
g11
(lp42523
sg13
S'com.google.common.collect.ComputationException'
p42524
sg15
(lp42525
sg17
(lp42526
sg19
(lp42527
sg21
I0
sba(iArchitecture
Entity
p42528
(dp42529
g11
(lp42530
sg13
S'com.google.common.collect.ContiguousSet'
p42531
sg15
(lp42532
sg17
(lp42533
sg19
(lp42534
sg21
I0
sba(iArchitecture
Entity
p42535
(dp42536
g11
(lp42537
sg13
S'com.google.common.collect.EnumMultiset'
p42538
sg15
(lp42539
sg17
(lp42540
sg19
(lp42541
sg21
I0
sba(iArchitecture
Entity
p42542
(dp42543
g11
(lp42544
sg13
S'com.google.common.collect.ForwardingImmutableCollection'
p42545
sg15
(lp42546
sg17
(lp42547
sg19
(lp42548
sg21
I0
sba(iArchitecture
Entity
p42549
(dp42550
g11
(lp42551
sg13
S'com.google.common.collect.ForwardingImmutableList'
p42552
sg15
(lp42553
sg17
(lp42554
sg19
(lp42555
sg21
I0
sba(iArchitecture
Entity
p42556
(dp42557
g11
(lp42558
sg13
S'com.google.common.collect.ForwardingImmutableMap'
p42559
sg15
(lp42560
sg17
(lp42561
sg19
(lp42562
sg21
I0
sba(iArchitecture
Entity
p42563
(dp42564
g11
(lp42565
sg13
S'com.google.common.collect.ForwardingImmutableSet'
p42566
sg15
(lp42567
sg17
(lp42568
sg19
(lp42569
sg21
I0
sba(iArchitecture
Entity
p42570
(dp42571
g11
(lp42572
sg13
S'com.google.common.collect.ForwardingListMultimap'
p42573
sg15
(lp42574
sg17
(lp42575
sg19
(lp42576
sg21
I0
sba(iArchitecture
Entity
p42577
(dp42578
g11
(lp42579
sg13
S'com.google.common.collect.HashMultiset'
p42580
sg15
(lp42581
sg17
(lp42582
sg19
(lp42583
sg21
I0
sba(iArchitecture
Entity
p42584
(dp42585
g11
(lp42586
sg13
S'com.google.common.collect.ImmutableCollection'
p42587
sg15
(lp42588
sg17
(lp42589
sg19
(lp42590
sg21
I0
sba(iArchitecture
Entity
p42591
(dp42592
g11
(lp42593
sg13
S'com.google.common.collect.ImmutableCollection$ArrayBasedBuilder'
p42594
sg15
(lp42595
sg17
(lp42596
sg19
(lp42597
sg21
I0
sba(iArchitecture
Entity
p42598
(dp42599
g11
(lp42600
sg13
S'com.google.common.collect.ImmutableCollection$Builder'
p42601
sg15
(lp42602
sg17
(lp42603
sg19
(lp42604
sg21
I0
sba(iArchitecture
Entity
p42605
(dp42606
g11
(lp42607
sg13
S'com.google.common.collect.ImmutableMap'
p42608
sg15
(lp42609
sg17
(lp42610
sg19
(lp42611
sg21
I0
sba(iArchitecture
Entity
p42612
(dp42613
g11
(lp42614
sg13
S'com.google.common.collect.ImmutableMap$1'
p42615
sg15
(lp42616
sg17
(lp42617
sg19
(lp42618
sg21
I0
sba(iArchitecture
Entity
p42619
(dp42620
g11
(lp42621
sg13
S'com.google.common.collect.ImmutableMap$Builder'
p42622
sg15
(lp42623
sg17
(lp42624
sg19
(lp42625
sg21
I0
sba(iArchitecture
Entity
p42626
(dp42627
g11
(lp42628
sg13
S'com.google.common.collect.ImmutableMap$SerializedForm'
p42629
sg15
(lp42630
sg17
(lp42631
sg19
(lp42632
sg21
I0
sba(iArchitecture
Entity
p42633
(dp42634
g11
(lp42635
sg13
S'com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet'
p42636
sg15
(lp42637
sg17
(lp42638
sg19
(lp42639
sg21
I0
sba(iArchitecture
Entity
p42640
(dp42641
g11
(lp42642
sg13
S'com.google.common.collect.ImmutableMultimap$Builder'
p42643
sg15
(lp42644
sg17
(lp42645
sg19
(lp42646
sg21
I0
sba(iArchitecture
Entity
p42647
(dp42648
g11
(lp42649
sg13
S'com.google.common.collect.ImmutableSortedSet$Builder'
p42650
sg15
(lp42651
sg17
(lp42652
sg19
(lp42653
sg21
I0
sba(iArchitecture
Entity
p42654
(dp42655
g11
(lp42656
sg13
S'com.google.common.collect.ListMultimap'
p42657
sg15
(lp42658
sg17
(lp42659
sg19
(lp42660
sg21
I0
sba(iArchitecture
Entity
p42661
(dp42662
g11
(lp42663
sg13
S'com.google.common.collect.Multimap'
p42664
sg15
(lp42665
sg17
(lp42666
sg19
(lp42667
sg21
I0
sba(iArchitecture
Entity
p42668
(dp42669
g11
(lp42670
sg13
S'com.google.common.collect.Multiset'
p42671
sg15
(lp42672
sg17
(lp42673
sg19
(lp42674
sg21
I0
sba(iArchitecture
Entity
p42675
(dp42676
g11
(lp42677
sg13
S'com.google.common.collect.Multiset$Entry'
p42678
sg15
(lp42679
sg17
(lp42680
sg19
(lp42681
sg21
I0
sba(iArchitecture
Entity
p42682
(dp42683
g11
(lp42684
sg13
S'com.google.common.collect.RegularImmutableAsList'
p42685
sg15
(lp42686
sg17
(lp42687
sg19
(lp42688
sg21
I0
sba(iArchitecture
Entity
p42689
(dp42690
g11
(lp42691
sg13
S'com.google.common.collect.RegularImmutableMap'
p42692
sg15
(lp42693
sg17
(lp42694
sg19
(lp42695
sg21
I0
sba(iArchitecture
Entity
p42696
(dp42697
g11
(lp42698
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$KnownOrder'
p42699
sg15
(lp42700
sg17
(lp42701
sg19
(lp42702
sg21
I0
sba(iArchitecture
Entity
p42703
(dp42704
g11
(lp42705
sg13
S'com.google.common.collect.testing.AnEnum'
p42706
sg15
(lp42707
sg17
(lp42708
sg19
(lp42709
sg21
I0
sba(iArchitecture
Entity
p42710
(dp42711
g11
(lp42712
sg13
S'com.google.common.collect.testing.DerivedGenerator'
p42713
sg15
(lp42714
sg17
(lp42715
sg19
(lp42716
sg21
I0
sba(iArchitecture
Entity
p42717
(dp42718
g11
(lp42719
sg13
S'com.google.common.collect.testing.IteratorFeature'
p42720
sg15
(lp42721
sg17
(lp42722
sg19
(lp42723
sg21
I0
sba(iArchitecture
Entity
p42724
(dp42725
g11
(lp42726
sg13
S'com.google.common.collect.testing.IteratorTester'
p42727
sg15
(lp42728
sg17
(lp42729
sg19
(lp42730
sg21
I0
sba(iArchitecture
Entity
p42731
(dp42732
g11
(lp42733
sg13
S'com.google.common.collect.testing.MinimalIterable'
p42734
sg15
(lp42735
sg17
(lp42736
sg19
(lp42737
sg21
I0
sba(iArchitecture
Entity
p42738
(dp42739
g11
(lp42740
sg13
S'com.google.common.collect.testing.SampleElements'
p42741
sg15
(lp42742
sg17
(lp42743
sg19
(lp42744
sg21
I0
sba(iArchitecture
Entity
p42745
(dp42746
g11
(lp42747
sg13
S'com.google.common.collect.testing.SampleElements$Chars'
p42748
sg15
(lp42749
sg17
(lp42750
sg19
(lp42751
sg21
I0
sba(iArchitecture
Entity
p42752
(dp42753
g11
(lp42754
sg13
S'com.google.common.collect.testing.SampleElements$Collider'
p42755
sg15
(lp42756
sg17
(lp42757
sg19
(lp42758
sg21
I0
sba(iArchitecture
Entity
p42759
(dp42760
g11
(lp42761
sg13
S'com.google.common.collect.testing.SampleElements$Colliders'
p42762
sg15
(lp42763
sg17
(lp42764
sg19
(lp42765
sg21
I0
sba(iArchitecture
Entity
p42766
(dp42767
g11
(lp42768
sg13
S'com.google.common.collect.testing.SampleElements$Enums'
p42769
sg15
(lp42770
sg17
(lp42771
sg19
(lp42772
sg21
I0
sba(iArchitecture
Entity
p42773
(dp42774
g11
(lp42775
sg13
S'com.google.common.collect.testing.SampleElements$Ints'
p42776
sg15
(lp42777
sg17
(lp42778
sg19
(lp42779
sg21
I0
sba(iArchitecture
Entity
p42780
(dp42781
g11
(lp42782
sg13
S'com.google.common.collect.testing.SampleElements$Strings'
p42783
sg15
(lp42784
sg17
(lp42785
sg19
(lp42786
sg21
I0
sba(iArchitecture
Entity
p42787
(dp42788
g11
(lp42789
sg13
S'com.google.common.collect.testing.SampleElements$Unhashables'
p42790
sg15
(lp42791
sg17
(lp42792
sg19
(lp42793
sg21
I0
sba(iArchitecture
Entity
p42794
(dp42795
g11
(lp42796
sg13
S'com.google.common.collect.testing.SortedMapInterfaceTest'
p42797
sg15
(lp42798
sg17
(lp42799
sg19
(lp42800
sg21
I0
sba(iArchitecture
Entity
p42801
(dp42802
g11
(lp42803
sg13
S'com.google.common.collect.testing.TestCharacterListGenerator'
p42804
sg15
(lp42805
sg17
(lp42806
sg19
(lp42807
sg21
I0
sba(iArchitecture
Entity
p42808
(dp42809
g11
(lp42810
sg13
S'com.google.common.collect.testing.TestCollectionGenerator'
p42811
sg15
(lp42812
sg17
(lp42813
sg19
(lp42814
sg21
I0
sba(iArchitecture
Entity
p42815
(dp42816
g11
(lp42817
sg13
S'com.google.common.collect.testing.TestCollidingSetGenerator'
p42818
sg15
(lp42819
sg17
(lp42820
sg19
(lp42821
sg21
I0
sba(iArchitecture
Entity
p42822
(dp42823
g11
(lp42824
sg13
S'com.google.common.collect.testing.TestContainerGenerator'
p42825
sg15
(lp42826
sg17
(lp42827
sg19
(lp42828
sg21
I0
sba(iArchitecture
Entity
p42829
(dp42830
g11
(lp42831
sg13
S'com.google.common.collect.testing.TestEnumMapGenerator'
p42832
sg15
(lp42833
sg17
(lp42834
sg19
(lp42835
sg21
I0
sba(iArchitecture
Entity
p42836
(dp42837
g11
(lp42838
sg13
S'com.google.common.collect.testing.TestListGenerator'
p42839
sg15
(lp42840
sg17
(lp42841
sg19
(lp42842
sg21
I0
sba(iArchitecture
Entity
p42843
(dp42844
g11
(lp42845
sg13
S'com.google.common.collect.testing.TestMapEntrySetGenerator'
p42846
sg15
(lp42847
sg17
(lp42848
sg19
(lp42849
sg21
I0
sba(iArchitecture
Entity
p42850
(dp42851
g11
(lp42852
sg13
S'com.google.common.collect.testing.TestMapGenerator'
p42853
sg15
(lp42854
sg17
(lp42855
sg19
(lp42856
sg21
I0
sba(iArchitecture
Entity
p42857
(dp42858
g11
(lp42859
sg13
S'com.google.common.collect.testing.TestStringCollectionGenerator'
p42860
sg15
(lp42861
sg17
(lp42862
sg19
(lp42863
sg21
I0
sba(iArchitecture
Entity
p42864
(dp42865
g11
(lp42866
sg13
S'com.google.common.collect.testing.TestSubjectGenerator'
p42867
sg15
(lp42868
sg17
(lp42869
sg19
(lp42870
sg21
I0
sba(iArchitecture
Entity
p42871
(dp42872
g11
(lp42873
sg13
S'com.google.common.collect.testing.TestUnhashableCollectionGenerator'
p42874
sg15
(lp42875
sg17
(lp42876
sg19
(lp42877
sg21
I0
sba(iArchitecture
Entity
p42878
(dp42879
g11
(lp42880
sg13
S'com.google.common.collect.testing.UnhashableObject'
p42881
sg15
(lp42882
sg17
(lp42883
sg19
(lp42884
sg21
I0
sba(iArchitecture
Entity
p42885
(dp42886
g11
(lp42887
sg13
S'com.google.common.collect.testing.features.CollectionSize'
p42888
sg15
(lp42889
sg17
(lp42890
sg19
(lp42891
sg21
I0
sba(iArchitecture
Entity
p42892
(dp42893
g11
(lp42894
sg13
S'com.google.common.collect.testing.features.CollectionSize$Require'
p42895
sg15
(lp42896
sg17
(lp42897
sg19
(lp42898
sg21
I0
sba(iArchitecture
Entity
p42899
(dp42900
g11
(lp42901
sg13
S'com.google.common.collect.testing.features.Feature'
p42902
sg15
(lp42903
sg17
(lp42904
sg19
(lp42905
sg21
I0
sba(iArchitecture
Entity
p42906
(dp42907
g11
(lp42908
sg13
S'com.google.common.collect.testing.features.MapFeature'
p42909
sg15
(lp42910
sg17
(lp42911
sg19
(lp42912
sg21
I0
sba(iArchitecture
Entity
p42913
(dp42914
g11
(lp42915
sg13
S'com.google.common.collect.testing.features.MapFeature$Require'
p42916
sg15
(lp42917
sg17
(lp42918
sg19
(lp42919
sg21
I0
sba(iArchitecture
Entity
p42920
(dp42921
g11
(lp42922
sg13
S'com.google.common.collect.testing.features.TesterAnnotation'
p42923
sg15
(lp42924
sg17
(lp42925
sg19
(lp42926
sg21
I0
sba(iArchitecture
Entity
p42927
(dp42928
g11
(lp42929
sg13
S'com.google.common.collect.testing.google.AbstractBiMapTester'
p42930
sg15
(lp42931
sg17
(lp42932
sg19
(lp42933
sg21
I0
sba(iArchitecture
Entity
p42934
(dp42935
g11
(lp42936
sg13
S'com.google.common.collect.testing.google.AbstractListMultimapTester'
p42937
sg15
(lp42938
sg17
(lp42939
sg19
(lp42940
sg21
I0
sba(iArchitecture
Entity
p42941
(dp42942
g11
(lp42943
sg13
S'com.google.common.collect.testing.google.AbstractMultimapTester'
p42944
sg15
(lp42945
sg17
(lp42946
sg19
(lp42947
sg21
I0
sba(iArchitecture
Entity
p42948
(dp42949
g11
(lp42950
sg13
S'com.google.common.collect.testing.google.AbstractMultisetSetCountTester'
p42951
sg15
(lp42952
sg17
(lp42953
sg19
(lp42954
sg21
I0
sba(iArchitecture
Entity
p42955
(dp42956
g11
(lp42957
sg13
S'com.google.common.collect.testing.google.AbstractMultisetTester'
p42958
sg15
(lp42959
sg17
(lp42960
sg19
(lp42961
sg21
I0
sba(iArchitecture
Entity
p42962
(dp42963
g11
(lp42964
sg13
S'com.google.common.collect.testing.google.BiMapClearTester'
p42965
sg15
(lp42966
sg17
(lp42967
sg19
(lp42968
sg21
I0
sba(iArchitecture
Entity
p42969
(dp42970
g11
(lp42971
sg13
S'com.google.common.collect.testing.google.BiMapGenerators'
p42972
sg15
(lp42973
sg17
(lp42974
sg19
(lp42975
sg21
I0
sba(iArchitecture
Entity
p42976
(dp42977
g11
(lp42978
sg13
S'com.google.common.collect.testing.google.BiMapGenerators$ImmutableBiMapCopyOfEntriesGenerator'
p42979
sg15
(lp42980
sg17
(lp42981
sg19
(lp42982
sg21
I0
sba(iArchitecture
Entity
p42983
(dp42984
g11
(lp42985
sg13
S'com.google.common.collect.testing.google.BiMapGenerators$ImmutableBiMapCopyOfGenerator'
p42986
sg15
(lp42987
sg17
(lp42988
sg19
(lp42989
sg21
I0
sba(iArchitecture
Entity
p42990
(dp42991
g11
(lp42992
sg13
S'com.google.common.collect.testing.google.BiMapGenerators$ImmutableBiMapGenerator'
p42993
sg15
(lp42994
sg17
(lp42995
sg19
(lp42996
sg21
I0
sba(iArchitecture
Entity
p42997
(dp42998
g11
(lp42999
sg13
S'com.google.common.collect.testing.google.BiMapInverseTester'
p43000
sg15
(lp43001
sg17
(lp43002
sg19
(lp43003
sg21
I0
sba(iArchitecture
Entity
p43004
(dp43005
g11
(lp43006
sg13
S'com.google.common.collect.testing.google.BiMapInverseTester$BiMapPair'
p43007
sg15
(lp43008
sg17
(lp43009
sg19
(lp43010
sg21
I0
sba(iArchitecture
Entity
p43011
(dp43012
g11
(lp43013
sg13
S'com.google.common.collect.testing.google.BiMapPutTester'
p43014
sg15
(lp43015
sg17
(lp43016
sg19
(lp43017
sg21
I0
sba(iArchitecture
Entity
p43018
(dp43019
g11
(lp43020
sg13
S'com.google.common.collect.testing.google.BiMapRemoveTester'
p43021
sg15
(lp43022
sg17
(lp43023
sg19
(lp43024
sg21
I0
sba(iArchitecture
Entity
p43025
(dp43026
g11
(lp43027
sg13
S'com.google.common.collect.testing.google.BiMapTestSuiteBuilder'
p43028
sg15
(lp43029
sg17
(lp43030
sg19
(lp43031
sg21
I0
sba(iArchitecture
Entity
p43032
(dp43033
g11
(lp43034
sg13
S'com.google.common.collect.testing.google.BiMapTestSuiteBuilder$NoRecurse'
p43035
sg15
(lp43036
sg17
(lp43037
sg19
(lp43038
sg21
I0
sba(iArchitecture
Entity
p43039
(dp43040
g11
(lp43041
sg13
S'com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators'
p43042
sg15
(lp43043
sg17
(lp43044
sg19
(lp43045
sg21
I0
sba(iArchitecture
Entity
p43046
(dp43047
g11
(lp43048
sg13
S'com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators$BiMapValueSetGenerator'
p43049
sg15
(lp43050
sg17
(lp43051
sg19
(lp43052
sg21
I0
sba(iArchitecture
Entity
p43053
(dp43054
g11
(lp43055
sg13
S'com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators$InverseBiMapGenerator'
p43056
sg15
(lp43057
sg17
(lp43058
sg19
(lp43059
sg21
I0
sba(iArchitecture
Entity
p43060
(dp43061
g11
(lp43062
sg13
S'com.google.common.collect.testing.google.DerivedGoogleCollectionGenerators$MapGenerator'
p43063
sg15
(lp43064
sg17
(lp43065
sg19
(lp43066
sg21
I0
sba(iArchitecture
Entity
p43067
(dp43068
g11
(lp43069
sg13
S'com.google.common.collect.testing.google.GoogleHelpers'
p43070
sg15
(lp43071
sg17
(lp43072
sg19
(lp43073
sg21
I0
sba(iArchitecture
Entity
p43074
(dp43075
g11
(lp43076
sg13
S'com.google.common.collect.testing.google.ListGenerators'
p43077
sg15
(lp43078
sg17
(lp43079
sg19
(lp43080
sg21
I0
sba(iArchitecture
Entity
p43081
(dp43082
g11
(lp43083
sg13
S'com.google.common.collect.testing.google.ListGenerators$1'
p43084
sg15
(lp43085
sg17
(lp43086
sg19
(lp43087
sg21
I0
sba(iArchitecture
Entity
p43088
(dp43089
g11
(lp43090
sg13
S'com.google.common.collect.testing.google.ListGenerators$BuilderAddAllListGenerator'
p43091
sg15
(lp43092
sg17
(lp43093
sg19
(lp43094
sg21
I0
sba(iArchitecture
Entity
p43095
(dp43096
g11
(lp43097
sg13
S'com.google.common.collect.testing.google.ListGenerators$BuilderAddListGenerator'
p43098
sg15
(lp43099
sg17
(lp43100
sg19
(lp43101
sg21
I0
sba(iArchitecture
Entity
p43102
(dp43103
g11
(lp43104
sg13
S'com.google.common.collect.testing.google.ListGenerators$BuilderReversedListGenerator'
p43105
sg15
(lp43106
sg17
(lp43107
sg19
(lp43108
sg21
I0
sba(iArchitecture
Entity
p43109
(dp43110
g11
(lp43111
sg13
S'com.google.common.collect.testing.google.ListGenerators$CharactersOfCharSequenceGenerator'
p43112
sg15
(lp43113
sg17
(lp43114
sg19
(lp43115
sg21
I0
sba(iArchitecture
Entity
p43116
(dp43117
g11
(lp43118
sg13
S'com.google.common.collect.testing.google.ListGenerators$CharactersOfStringGenerator'
p43119
sg15
(lp43120
sg17
(lp43121
sg19
(lp43122
sg21
I0
sba(iArchitecture
Entity
p43123
(dp43124
g11
(lp43125
sg13
S'com.google.common.collect.testing.google.ListGenerators$ImmutableListHeadSubListGenerator'
p43126
sg15
(lp43127
sg17
(lp43128
sg19
(lp43129
sg21
I0
sba(iArchitecture
Entity
p43130
(dp43131
g11
(lp43132
sg13
S'com.google.common.collect.testing.google.ListGenerators$ImmutableListMiddleSubListGenerator'
p43133
sg15
(lp43134
sg17
(lp43135
sg19
(lp43136
sg21
I0
sba(iArchitecture
Entity
p43137
(dp43138
g11
(lp43139
sg13
S'com.google.common.collect.testing.google.ListGenerators$ImmutableListOfGenerator'
p43140
sg15
(lp43141
sg17
(lp43142
sg19
(lp43143
sg21
I0
sba(iArchitecture
Entity
p43144
(dp43145
g11
(lp43146
sg13
S'com.google.common.collect.testing.google.ListGenerators$ImmutableListTailSubListGenerator'
p43147
sg15
(lp43148
sg17
(lp43149
sg19
(lp43150
sg21
I0
sba(iArchitecture
Entity
p43151
(dp43152
g11
(lp43153
sg13
S'com.google.common.collect.testing.google.ListGenerators$TestUnhashableListGenerator'
p43154
sg15
(lp43155
sg17
(lp43156
sg19
(lp43157
sg21
I0
sba(iArchitecture
Entity
p43158
(dp43159
g11
(lp43160
sg13
S'com.google.common.collect.testing.google.ListGenerators$UnhashableElementsImmutableListGenerator'
p43161
sg15
(lp43162
sg17
(lp43163
sg19
(lp43164
sg21
I0
sba(iArchitecture
Entity
p43165
(dp43166
g11
(lp43167
sg13
S'com.google.common.collect.testing.google.ListMultimapAsMapTester'
p43168
sg15
(lp43169
sg17
(lp43170
sg19
(lp43171
sg21
I0
sba(iArchitecture
Entity
p43172
(dp43173
g11
(lp43174
sg13
S'com.google.common.collect.testing.google.ListMultimapEqualsTester'
p43175
sg15
(lp43176
sg17
(lp43177
sg19
(lp43178
sg21
I0
sba(iArchitecture
Entity
p43179
(dp43180
g11
(lp43181
sg13
S'com.google.common.collect.testing.google.ListMultimapPutAllTester'
p43182
sg15
(lp43183
sg17
(lp43184
sg19
(lp43185
sg21
I0
sba(iArchitecture
Entity
p43186
(dp43187
g11
(lp43188
sg13
S'com.google.common.collect.testing.google.ListMultimapPutTester'
p43189
sg15
(lp43190
sg17
(lp43191
sg19
(lp43192
sg21
I0
sba(iArchitecture
Entity
p43193
(dp43194
g11
(lp43195
sg13
S'com.google.common.collect.testing.google.ListMultimapRemoveTester'
p43196
sg15
(lp43197
sg17
(lp43198
sg19
(lp43199
sg21
I0
sba(iArchitecture
Entity
p43200
(dp43201
g11
(lp43202
sg13
S'com.google.common.collect.testing.google.ListMultimapReplaceValuesTester'
p43203
sg15
(lp43204
sg17
(lp43205
sg19
(lp43206
sg21
I0
sba(iArchitecture
Entity
p43207
(dp43208
g11
(lp43209
sg13
S'com.google.common.collect.testing.google.ListMultimapTestSuiteBuilder'
p43210
sg15
(lp43211
sg17
(lp43212
sg19
(lp43213
sg21
I0
sba(iArchitecture
Entity
p43214
(dp43215
g11
(lp43216
sg13
S'com.google.common.collect.testing.google.ListMultimapTestSuiteBuilder$MultimapAsMapGetGenerator'
p43217
sg15
(lp43218
sg17
(lp43219
sg19
(lp43220
sg21
I0
sba(iArchitecture
Entity
p43221
(dp43222
g11
(lp43223
sg13
S'com.google.common.collect.testing.google.ListMultimapTestSuiteBuilder$MultimapGetGenerator'
p43224
sg15
(lp43225
sg17
(lp43226
sg19
(lp43227
sg21
I0
sba(iArchitecture
Entity
p43228
(dp43229
g11
(lp43230
sg13
S'com.google.common.collect.testing.google.MapGenerators'
p43231
sg15
(lp43232
sg17
(lp43233
sg19
(lp43234
sg21
I0
sba(iArchitecture
Entity
p43235
(dp43236
g11
(lp43237
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableEnumMapGenerator'
p43238
sg15
(lp43239
sg17
(lp43240
sg19
(lp43241
sg21
I0
sba(iArchitecture
Entity
p43242
(dp43243
g11
(lp43244
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfEntriesGenerator'
p43245
sg15
(lp43246
sg17
(lp43247
sg19
(lp43248
sg21
I0
sba(iArchitecture
Entity
p43249
(dp43250
g11
(lp43251
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfEnumMapGenerator'
p43252
sg15
(lp43253
sg17
(lp43254
sg19
(lp43255
sg21
I0
sba(iArchitecture
Entity
p43256
(dp43257
g11
(lp43258
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfEnumMapGenerator$1'
p43259
sg15
(lp43260
sg17
(lp43261
sg19
(lp43262
sg21
I0
sba(iArchitecture
Entity
p43263
(dp43264
g11
(lp43265
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapCopyOfGenerator'
p43266
sg15
(lp43267
sg17
(lp43268
sg19
(lp43269
sg21
I0
sba(iArchitecture
Entity
p43270
(dp43271
g11
(lp43272
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapEntryListGenerator'
p43273
sg15
(lp43274
sg17
(lp43275
sg19
(lp43276
sg21
I0
sba(iArchitecture
Entity
p43277
(dp43278
g11
(lp43279
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapGenerator'
p43280
sg15
(lp43281
sg17
(lp43282
sg19
(lp43283
sg21
I0
sba(iArchitecture
Entity
p43284
(dp43285
g11
(lp43286
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapKeyListGenerator'
p43287
sg15
(lp43288
sg17
(lp43289
sg19
(lp43290
sg21
I0
sba(iArchitecture
Entity
p43291
(dp43292
g11
(lp43293
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapUnhashableValuesGenerator'
p43294
sg15
(lp43295
sg17
(lp43296
sg19
(lp43297
sg21
I0
sba(iArchitecture
Entity
p43298
(dp43299
g11
(lp43300
sg13
S'com.google.common.collect.testing.google.MapGenerators$ImmutableMapValueListGenerator'
p43301
sg15
(lp43302
sg17
(lp43303
sg19
(lp43304
sg21
I0
sba(iArchitecture
Entity
p43305
(dp43306
g11
(lp43307
sg13
S'com.google.common.collect.testing.google.MultimapAsMapGetTester'
p43308
sg15
(lp43309
sg17
(lp43310
sg19
(lp43311
sg21
I0
sba(iArchitecture
Entity
p43312
(dp43313
g11
(lp43314
sg13
S'com.google.common.collect.testing.google.MultimapAsMapTester'
p43315
sg15
(lp43316
sg17
(lp43317
sg19
(lp43318
sg21
I0
sba(iArchitecture
Entity
p43319
(dp43320
g11
(lp43321
sg13
S'com.google.common.collect.testing.google.MultimapClearTester'
p43322
sg15
(lp43323
sg17
(lp43324
sg19
(lp43325
sg21
I0
sba(iArchitecture
Entity
p43326
(dp43327
g11
(lp43328
sg13
S'com.google.common.collect.testing.google.MultimapContainsEntryTester'
p43329
sg15
(lp43330
sg17
(lp43331
sg19
(lp43332
sg21
I0
sba(iArchitecture
Entity
p43333
(dp43334
g11
(lp43335
sg13
S'com.google.common.collect.testing.google.MultimapContainsKeyTester'
p43336
sg15
(lp43337
sg17
(lp43338
sg19
(lp43339
sg21
I0
sba(iArchitecture
Entity
p43340
(dp43341
g11
(lp43342
sg13
S'com.google.common.collect.testing.google.MultimapContainsValueTester'
p43343
sg15
(lp43344
sg17
(lp43345
sg19
(lp43346
sg21
I0
sba(iArchitecture
Entity
p43347
(dp43348
g11
(lp43349
sg13
S'com.google.common.collect.testing.google.MultimapEntriesTester'
p43350
sg15
(lp43351
sg17
(lp43352
sg19
(lp43353
sg21
I0
sba(iArchitecture
Entity
p43354
(dp43355
g11
(lp43356
sg13
S'com.google.common.collect.testing.google.MultimapEqualsTester'
p43357
sg15
(lp43358
sg17
(lp43359
sg19
(lp43360
sg21
I0
sba(iArchitecture
Entity
p43361
(dp43362
g11
(lp43363
sg13
S'com.google.common.collect.testing.google.MultimapFeature'
p43364
sg15
(lp43365
sg17
(lp43366
sg19
(lp43367
sg21
I0
sba(iArchitecture
Entity
p43368
(dp43369
g11
(lp43370
sg13
S'com.google.common.collect.testing.google.MultimapFeature$Require'
p43371
sg15
(lp43372
sg17
(lp43373
sg19
(lp43374
sg21
I0
sba(iArchitecture
Entity
p43375
(dp43376
g11
(lp43377
sg13
S'com.google.common.collect.testing.google.MultimapGetTester'
p43378
sg15
(lp43379
sg17
(lp43380
sg19
(lp43381
sg21
I0
sba(iArchitecture
Entity
p43382
(dp43383
g11
(lp43384
sg13
S'com.google.common.collect.testing.google.MultimapKeySetTester'
p43385
sg15
(lp43386
sg17
(lp43387
sg19
(lp43388
sg21
I0
sba(iArchitecture
Entity
p43389
(dp43390
g11
(lp43391
sg13
S'com.google.common.collect.testing.google.MultimapKeysTester'
p43392
sg15
(lp43393
sg17
(lp43394
sg19
(lp43395
sg21
I0
sba(iArchitecture
Entity
p43396
(dp43397
g11
(lp43398
sg13
S'com.google.common.collect.testing.google.MultimapPutAllMultimapTester'
p43399
sg15
(lp43400
sg17
(lp43401
sg19
(lp43402
sg21
I0
sba(iArchitecture
Entity
p43403
(dp43404
g11
(lp43405
sg13
S'com.google.common.collect.testing.google.MultimapPutIterableTester'
p43406
sg15
(lp43407
sg17
(lp43408
sg19
(lp43409
sg21
I0
sba(iArchitecture
Entity
p43410
(dp43411
g11
(lp43412
sg13
S'com.google.common.collect.testing.google.MultimapPutIterableTester$1'
p43413
sg15
(lp43414
sg17
(lp43415
sg19
(lp43416
sg21
I0
sba(iArchitecture
Entity
p43417
(dp43418
g11
(lp43419
sg13
S'com.google.common.collect.testing.google.MultimapPutIterableTester$2'
p43420
sg15
(lp43421
sg17
(lp43422
sg19
(lp43423
sg21
I0
sba(iArchitecture
Entity
p43424
(dp43425
g11
(lp43426
sg13
S'com.google.common.collect.testing.google.MultimapPutIterableTester$3'
p43427
sg15
(lp43428
sg17
(lp43429
sg19
(lp43430
sg21
I0
sba(iArchitecture
Entity
p43431
(dp43432
g11
(lp43433
sg13
S'com.google.common.collect.testing.google.MultimapPutIterableTester$4'
p43434
sg15
(lp43435
sg17
(lp43436
sg19
(lp43437
sg21
I0
sba(iArchitecture
Entity
p43438
(dp43439
g11
(lp43440
sg13
S'com.google.common.collect.testing.google.MultimapPutTester'
p43441
sg15
(lp43442
sg17
(lp43443
sg19
(lp43444
sg21
I0
sba(iArchitecture
Entity
p43445
(dp43446
g11
(lp43447
sg13
S'com.google.common.collect.testing.google.MultimapRemoveAllTester'
p43448
sg15
(lp43449
sg17
(lp43450
sg19
(lp43451
sg21
I0
sba(iArchitecture
Entity
p43452
(dp43453
g11
(lp43454
sg13
S'com.google.common.collect.testing.google.MultimapRemoveEntryTester'
p43455
sg15
(lp43456
sg17
(lp43457
sg19
(lp43458
sg21
I0
sba(iArchitecture
Entity
p43459
(dp43460
g11
(lp43461
sg13
S'com.google.common.collect.testing.google.MultimapReplaceValuesTester'
p43462
sg15
(lp43463
sg17
(lp43464
sg19
(lp43465
sg21
I0
sba(iArchitecture
Entity
p43466
(dp43467
g11
(lp43468
sg13
S'com.google.common.collect.testing.google.MultimapSizeTester'
p43469
sg15
(lp43470
sg17
(lp43471
sg19
(lp43472
sg21
I0
sba(iArchitecture
Entity
p43473
(dp43474
g11
(lp43475
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder'
p43476
sg15
(lp43477
sg17
(lp43478
sg19
(lp43479
sg21
I0
sba(iArchitecture
Entity
p43480
(dp43481
g11
(lp43482
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$AsMapGenerator'
p43483
sg15
(lp43484
sg17
(lp43485
sg19
(lp43486
sg21
I0
sba(iArchitecture
Entity
p43487
(dp43488
g11
(lp43489
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$EntriesGenerator'
p43490
sg15
(lp43491
sg17
(lp43492
sg19
(lp43493
sg21
I0
sba(iArchitecture
Entity
p43494
(dp43495
g11
(lp43496
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator'
p43497
sg15
(lp43498
sg17
(lp43499
sg19
(lp43500
sg21
I0
sba(iArchitecture
Entity
p43501
(dp43502
g11
(lp43503
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$MultimapAsMapGetGenerator'
p43504
sg15
(lp43505
sg17
(lp43506
sg19
(lp43507
sg21
I0
sba(iArchitecture
Entity
p43508
(dp43509
g11
(lp43510
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$MultimapGetGenerator'
p43511
sg15
(lp43512
sg17
(lp43513
sg19
(lp43514
sg21
I0
sba(iArchitecture
Entity
p43515
(dp43516
g11
(lp43517
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$ReserializedMultimapGenerator'
p43518
sg15
(lp43519
sg17
(lp43520
sg19
(lp43521
sg21
I0
sba(iArchitecture
Entity
p43522
(dp43523
g11
(lp43524
sg13
S'com.google.common.collect.testing.google.MultimapTestSuiteBuilder$ValuesGenerator'
p43525
sg15
(lp43526
sg17
(lp43527
sg19
(lp43528
sg21
I0
sba(iArchitecture
Entity
p43529
(dp43530
g11
(lp43531
sg13
S'com.google.common.collect.testing.google.MultimapToStringTester'
p43532
sg15
(lp43533
sg17
(lp43534
sg19
(lp43535
sg21
I0
sba(iArchitecture
Entity
p43536
(dp43537
g11
(lp43538
sg13
S'com.google.common.collect.testing.google.MultimapValuesTester'
p43539
sg15
(lp43540
sg17
(lp43541
sg19
(lp43542
sg21
I0
sba(iArchitecture
Entity
p43543
(dp43544
g11
(lp43545
sg13
S'com.google.common.collect.testing.google.MultisetAddTester'
p43546
sg15
(lp43547
sg17
(lp43548
sg19
(lp43549
sg21
I0
sba(iArchitecture
Entity
p43550
(dp43551
g11
(lp43552
sg13
S'com.google.common.collect.testing.google.MultisetContainsTester'
p43553
sg15
(lp43554
sg17
(lp43555
sg19
(lp43556
sg21
I0
sba(iArchitecture
Entity
p43557
(dp43558
g11
(lp43559
sg13
S'com.google.common.collect.testing.google.MultisetCountTester'
p43560
sg15
(lp43561
sg17
(lp43562
sg19
(lp43563
sg21
I0
sba(iArchitecture
Entity
p43564
(dp43565
g11
(lp43566
sg13
S'com.google.common.collect.testing.google.MultisetElementSetTester'
p43567
sg15
(lp43568
sg17
(lp43569
sg19
(lp43570
sg21
I0
sba(iArchitecture
Entity
p43571
(dp43572
g11
(lp43573
sg13
S'com.google.common.collect.testing.google.MultisetEntrySetTester'
p43574
sg15
(lp43575
sg17
(lp43576
sg19
(lp43577
sg21
I0
sba(iArchitecture
Entity
p43578
(dp43579
g11
(lp43580
sg13
S'com.google.common.collect.testing.google.MultisetEqualsTester'
p43581
sg15
(lp43582
sg17
(lp43583
sg19
(lp43584
sg21
I0
sba(iArchitecture
Entity
p43585
(dp43586
g11
(lp43587
sg13
S'com.google.common.collect.testing.google.MultisetFeature'
p43588
sg15
(lp43589
sg17
(lp43590
sg19
(lp43591
sg21
I0
sba(iArchitecture
Entity
p43592
(dp43593
g11
(lp43594
sg13
S'com.google.common.collect.testing.google.MultisetFeature$Require'
p43595
sg15
(lp43596
sg17
(lp43597
sg19
(lp43598
sg21
I0
sba(iArchitecture
Entity
p43599
(dp43600
g11
(lp43601
sg13
S'com.google.common.collect.testing.google.MultisetIteratorTester'
p43602
sg15
(lp43603
sg17
(lp43604
sg19
(lp43605
sg21
I0
sba(iArchitecture
Entity
p43606
(dp43607
g11
(lp43608
sg13
S'com.google.common.collect.testing.google.MultisetIteratorTester$1'
p43609
sg15
(lp43610
sg17
(lp43611
sg19
(lp43612
sg21
I0
sba(iArchitecture
Entity
p43613
(dp43614
g11
(lp43615
sg13
S'com.google.common.collect.testing.google.MultisetIteratorTester$2'
p43616
sg15
(lp43617
sg17
(lp43618
sg19
(lp43619
sg21
I0
sba(iArchitecture
Entity
p43620
(dp43621
g11
(lp43622
sg13
S'com.google.common.collect.testing.google.MultisetIteratorTester$3'
p43623
sg15
(lp43624
sg17
(lp43625
sg19
(lp43626
sg21
I0
sba(iArchitecture
Entity
p43627
(dp43628
g11
(lp43629
sg13
S'com.google.common.collect.testing.google.MultisetIteratorTester$4'
p43630
sg15
(lp43631
sg17
(lp43632
sg19
(lp43633
sg21
I0
sba(iArchitecture
Entity
p43634
(dp43635
g11
(lp43636
sg13
S'com.google.common.collect.testing.google.MultisetNavigationTester'
p43637
sg15
(lp43638
sg17
(lp43639
sg19
(lp43640
sg21
I0
sba(iArchitecture
Entity
p43641
(dp43642
g11
(lp43643
sg13
S'com.google.common.collect.testing.google.MultisetNavigationTester$1'
p43644
sg15
(lp43645
sg17
(lp43646
sg19
(lp43647
sg21
I0
sba(iArchitecture
Entity
p43648
(dp43649
g11
(lp43650
sg13
S'com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec'
p43651
sg15
(lp43652
sg17
(lp43653
sg19
(lp43654
sg21
I0
sba(iArchitecture
Entity
p43655
(dp43656
g11
(lp43657
sg13
S'com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$1'
p43658
sg15
(lp43659
sg17
(lp43660
sg19
(lp43661
sg21
I0
sba(iArchitecture
Entity
p43662
(dp43663
g11
(lp43664
sg13
S'com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$2'
p43665
sg15
(lp43666
sg17
(lp43667
sg19
(lp43668
sg21
I0
sba(iArchitecture
Entity
p43669
(dp43670
g11
(lp43671
sg13
S'com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$3'
p43672
sg15
(lp43673
sg17
(lp43674
sg19
(lp43675
sg21
I0
sba(iArchitecture
Entity
p43676
(dp43677
g11
(lp43678
sg13
S'com.google.common.collect.testing.google.MultisetNavigationTester$SubMultisetSpec$4'
p43679
sg15
(lp43680
sg17
(lp43681
sg19
(lp43682
sg21
I0
sba(iArchitecture
Entity
p43683
(dp43684
g11
(lp43685
sg13
S'com.google.common.collect.testing.google.MultisetReadsTester'
p43686
sg15
(lp43687
sg17
(lp43688
sg19
(lp43689
sg21
I0
sba(iArchitecture
Entity
p43690
(dp43691
g11
(lp43692
sg13
S'com.google.common.collect.testing.google.MultisetRemoveTester'
p43693
sg15
(lp43694
sg17
(lp43695
sg19
(lp43696
sg21
I0
sba(iArchitecture
Entity
p43697
(dp43698
g11
(lp43699
sg13
S'com.google.common.collect.testing.google.MultisetSerializationTester'
p43700
sg15
(lp43701
sg17
(lp43702
sg19
(lp43703
sg21
I0
sba(iArchitecture
Entity
p43704
(dp43705
g11
(lp43706
sg13
S'com.google.common.collect.testing.google.MultisetSetCountConditionallyTester'
p43707
sg15
(lp43708
sg17
(lp43709
sg19
(lp43710
sg21
I0
sba(iArchitecture
Entity
p43711
(dp43712
g11
(lp43713
sg13
S'com.google.common.collect.testing.google.MultisetSetCountUnconditionallyTester'
p43714
sg15
(lp43715
sg17
(lp43716
sg19
(lp43717
sg21
I0
sba(iArchitecture
Entity
p43718
(dp43719
g11
(lp43720
sg13
S'com.google.common.collect.testing.google.MultisetTestSuiteBuilder'
p43721
sg15
(lp43722
sg17
(lp43723
sg19
(lp43724
sg21
I0
sba(iArchitecture
Entity
p43725
(dp43726
g11
(lp43727
sg13
S'com.google.common.collect.testing.google.MultisetTestSuiteBuilder$1'
p43728
sg15
(lp43729
sg17
(lp43730
sg19
(lp43731
sg21
I0
sba(iArchitecture
Entity
p43732
(dp43733
g11
(lp43734
sg13
S'com.google.common.collect.testing.google.MultisetTestSuiteBuilder$ElementSetGenerator'
p43735
sg15
(lp43736
sg17
(lp43737
sg19
(lp43738
sg21
I0
sba(iArchitecture
Entity
p43739
(dp43740
g11
(lp43741
sg13
S'com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator'
p43742
sg15
(lp43743
sg17
(lp43744
sg19
(lp43745
sg21
I0
sba(iArchitecture
Entity
p43746
(dp43747
g11
(lp43748
sg13
S'com.google.common.collect.testing.google.MultisetTestSuiteBuilder$NoRecurse'
p43749
sg15
(lp43750
sg17
(lp43751
sg19
(lp43752
sg21
I0
sba(iArchitecture
Entity
p43753
(dp43754
g11
(lp43755
sg13
S'com.google.common.collect.testing.google.MultisetTestSuiteBuilder$ReserializedMultisetGenerator'
p43756
sg15
(lp43757
sg17
(lp43758
sg19
(lp43759
sg21
I0
sba(iArchitecture
Entity
p43760
(dp43761
g11
(lp43762
sg13
S'com.google.common.collect.testing.google.SetGenerators'
p43763
sg15
(lp43764
sg17
(lp43765
sg19
(lp43766
sg21
I0
sba(iArchitecture
Entity
p43767
(dp43768
g11
(lp43769
sg13
S'com.google.common.collect.testing.google.SetGenerators$1'
p43770
sg15
(lp43771
sg17
(lp43772
sg19
(lp43773
sg21
I0
sba(iArchitecture
Entity
p43774
(dp43775
g11
(lp43776
sg13
S'com.google.common.collect.testing.google.SetGenerators$AbstractContiguousSetGenerator'
p43777
sg15
(lp43778
sg17
(lp43779
sg19
(lp43780
sg21
I0
sba(iArchitecture
Entity
p43781
(dp43782
g11
(lp43783
sg13
S'com.google.common.collect.testing.google.SetGenerators$ContiguousSetDescendingGenerator'
p43784
sg15
(lp43785
sg17
(lp43786
sg19
(lp43787
sg21
I0
sba(iArchitecture
Entity
p43788
(dp43789
g11
(lp43790
sg13
S'com.google.common.collect.testing.google.SetGenerators$ContiguousSetGenerator'
p43791
sg15
(lp43792
sg17
(lp43793
sg19
(lp43794
sg21
I0
sba(iArchitecture
Entity
p43795
(dp43796
g11
(lp43797
sg13
S'com.google.common.collect.testing.google.SetGenerators$ContiguousSetHeadsetGenerator'
p43798
sg15
(lp43799
sg17
(lp43800
sg19
(lp43801
sg21
I0
sba(iArchitecture
Entity
p43802
(dp43803
g11
(lp43804
sg13
S'com.google.common.collect.testing.google.SetGenerators$ContiguousSetSubsetGenerator'
p43805
sg15
(lp43806
sg17
(lp43807
sg19
(lp43808
sg21
I0
sba(iArchitecture
Entity
p43809
(dp43810
g11
(lp43811
sg13
S'com.google.common.collect.testing.google.SetGenerators$ContiguousSetTailsetGenerator'
p43812
sg15
(lp43813
sg17
(lp43814
sg19
(lp43815
sg21
I0
sba(iArchitecture
Entity
p43816
(dp43817
g11
(lp43818
sg13
S'com.google.common.collect.testing.google.SetGenerators$DegeneratedImmutableSetGenerator'
p43819
sg15
(lp43820
sg17
(lp43821
sg19
(lp43822
sg21
I0
sba(iArchitecture
Entity
p43823
(dp43824
g11
(lp43825
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSetAsListGenerator'
p43826
sg15
(lp43827
sg17
(lp43828
sg19
(lp43829
sg21
I0
sba(iArchitecture
Entity
p43830
(dp43831
g11
(lp43832
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSetCopyOfGenerator'
p43833
sg15
(lp43834
sg17
(lp43835
sg19
(lp43836
sg21
I0
sba(iArchitecture
Entity
p43837
(dp43838
g11
(lp43839
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSetWithBadHashesGenerator'
p43840
sg15
(lp43841
sg17
(lp43842
sg19
(lp43843
sg21
I0
sba(iArchitecture
Entity
p43844
(dp43845
g11
(lp43846
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetAsListGenerator'
p43847
sg15
(lp43848
sg17
(lp43849
sg19
(lp43850
sg21
I0
sba(iArchitecture
Entity
p43851
(dp43852
g11
(lp43853
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetAsListSubListGenerator'
p43854
sg15
(lp43855
sg17
(lp43856
sg19
(lp43857
sg21
I0
sba(iArchitecture
Entity
p43858
(dp43859
g11
(lp43860
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetCopyOfGenerator'
p43861
sg15
(lp43862
sg17
(lp43863
sg19
(lp43864
sg21
I0
sba(iArchitecture
Entity
p43865
(dp43866
g11
(lp43867
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetDescendingAsListGenerator'
p43868
sg15
(lp43869
sg17
(lp43870
sg19
(lp43871
sg21
I0
sba(iArchitecture
Entity
p43872
(dp43873
g11
(lp43874
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetDescendingGenerator'
p43875
sg15
(lp43876
sg17
(lp43877
sg19
(lp43878
sg21
I0
sba(iArchitecture
Entity
p43879
(dp43880
g11
(lp43881
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetExplicitComparator'
p43882
sg15
(lp43883
sg17
(lp43884
sg19
(lp43885
sg21
I0
sba(iArchitecture
Entity
p43886
(dp43887
g11
(lp43888
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetExplicitSuperclassComparatorGenerator'
p43889
sg15
(lp43890
sg17
(lp43891
sg19
(lp43892
sg21
I0
sba(iArchitecture
Entity
p43893
(dp43894
g11
(lp43895
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetHeadsetGenerator'
p43896
sg15
(lp43897
sg17
(lp43898
sg19
(lp43899
sg21
I0
sba(iArchitecture
Entity
p43900
(dp43901
g11
(lp43902
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetReversedOrderGenerator'
p43903
sg15
(lp43904
sg17
(lp43905
sg19
(lp43906
sg21
I0
sba(iArchitecture
Entity
p43907
(dp43908
g11
(lp43909
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetSubsetAsListGenerator'
p43910
sg15
(lp43911
sg17
(lp43912
sg19
(lp43913
sg21
I0
sba(iArchitecture
Entity
p43914
(dp43915
g11
(lp43916
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetSubsetAsListSubListGenerator'
p43917
sg15
(lp43918
sg17
(lp43919
sg19
(lp43920
sg21
I0
sba(iArchitecture
Entity
p43921
(dp43922
g11
(lp43923
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetSubsetGenerator'
p43924
sg15
(lp43925
sg17
(lp43926
sg19
(lp43927
sg21
I0
sba(iArchitecture
Entity
p43928
(dp43929
g11
(lp43930
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetTailsetGenerator'
p43931
sg15
(lp43932
sg17
(lp43933
sg19
(lp43934
sg21
I0
sba(iArchitecture
Entity
p43935
(dp43936
g11
(lp43937
sg13
S'com.google.common.collect.testing.google.SetGenerators$ImmutableSortedSetUnhashableGenerator'
p43938
sg15
(lp43939
sg17
(lp43940
sg19
(lp43941
sg21
I0
sba(iArchitecture
Entity
p43942
(dp43943
g11
(lp43944
sg13
S'com.google.common.collect.testing.google.SetGenerators$TestUnhashableSetGenerator'
p43945
sg15
(lp43946
sg17
(lp43947
sg19
(lp43948
sg21
I0
sba(iArchitecture
Entity
p43949
(dp43950
g11
(lp43951
sg13
S'com.google.common.collect.testing.google.SetMultimapAsMapTester'
p43952
sg15
(lp43953
sg17
(lp43954
sg19
(lp43955
sg21
I0
sba(iArchitecture
Entity
p43956
(dp43957
g11
(lp43958
sg13
S'com.google.common.collect.testing.google.SetMultimapEqualsTester'
p43959
sg15
(lp43960
sg17
(lp43961
sg19
(lp43962
sg21
I0
sba(iArchitecture
Entity
p43963
(dp43964
g11
(lp43965
sg13
S'com.google.common.collect.testing.google.SetMultimapPutAllTester'
p43966
sg15
(lp43967
sg17
(lp43968
sg19
(lp43969
sg21
I0
sba(iArchitecture
Entity
p43970
(dp43971
g11
(lp43972
sg13
S'com.google.common.collect.testing.google.SetMultimapPutTester'
p43973
sg15
(lp43974
sg17
(lp43975
sg19
(lp43976
sg21
I0
sba(iArchitecture
Entity
p43977
(dp43978
g11
(lp43979
sg13
S'com.google.common.collect.testing.google.SetMultimapReplaceValuesTester'
p43980
sg15
(lp43981
sg17
(lp43982
sg19
(lp43983
sg21
I0
sba(iArchitecture
Entity
p43984
(dp43985
g11
(lp43986
sg13
S'com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder'
p43987
sg15
(lp43988
sg17
(lp43989
sg19
(lp43990
sg21
I0
sba(iArchitecture
Entity
p43991
(dp43992
g11
(lp43993
sg13
S'com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder$EntriesGenerator'
p43994
sg15
(lp43995
sg17
(lp43996
sg19
(lp43997
sg21
I0
sba(iArchitecture
Entity
p43998
(dp43999
g11
(lp44000
sg13
S'com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder$MultimapAsMapGetGenerator'
p44001
sg15
(lp44002
sg17
(lp44003
sg19
(lp44004
sg21
I0
sba(iArchitecture
Entity
p44005
(dp44006
g11
(lp44007
sg13
S'com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder$MultimapGetGenerator'
p44008
sg15
(lp44009
sg17
(lp44010
sg19
(lp44011
sg21
I0
sba(iArchitecture
Entity
p44012
(dp44013
g11
(lp44014
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators'
p44015
sg15
(lp44016
sg17
(lp44017
sg19
(lp44018
sg21
I0
sba(iArchitecture
Entity
p44019
(dp44020
g11
(lp44021
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapCopyOfEntriesGenerator'
p44022
sg15
(lp44023
sg17
(lp44024
sg19
(lp44025
sg21
I0
sba(iArchitecture
Entity
p44026
(dp44027
g11
(lp44028
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapEntryListGenerator'
p44029
sg15
(lp44030
sg17
(lp44031
sg19
(lp44032
sg21
I0
sba(iArchitecture
Entity
p44033
(dp44034
g11
(lp44035
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapEntryListGenerator$1'
p44036
sg15
(lp44037
sg17
(lp44038
sg19
(lp44039
sg21
I0
sba(iArchitecture
Entity
p44040
(dp44041
g11
(lp44042
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapGenerator'
p44043
sg15
(lp44044
sg17
(lp44045
sg19
(lp44046
sg21
I0
sba(iArchitecture
Entity
p44047
(dp44048
g11
(lp44049
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapKeyListGenerator'
p44050
sg15
(lp44051
sg17
(lp44052
sg19
(lp44053
sg21
I0
sba(iArchitecture
Entity
p44054
(dp44055
g11
(lp44056
sg13
S'com.google.common.collect.testing.google.SortedMapGenerators$ImmutableSortedMapValueListGenerator'
p44057
sg15
(lp44058
sg17
(lp44059
sg19
(lp44060
sg21
I0
sba(iArchitecture
Entity
p44061
(dp44062
g11
(lp44063
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder'
p44064
sg15
(lp44065
sg17
(lp44066
sg19
(lp44067
sg21
I0
sba(iArchitecture
Entity
p44068
(dp44069
g11
(lp44070
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$1'
p44071
sg15
(lp44072
sg17
(lp44073
sg19
(lp44074
sg21
I0
sba(iArchitecture
Entity
p44075
(dp44076
g11
(lp44077
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$2'
p44078
sg15
(lp44079
sg17
(lp44080
sg19
(lp44081
sg21
I0
sba(iArchitecture
Entity
p44082
(dp44083
g11
(lp44084
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$3'
p44085
sg15
(lp44086
sg17
(lp44087
sg19
(lp44088
sg21
I0
sba(iArchitecture
Entity
p44089
(dp44090
g11
(lp44091
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$Bound'
p44092
sg15
(lp44093
sg17
(lp44094
sg19
(lp44095
sg21
I0
sba(iArchitecture
Entity
p44096
(dp44097
g11
(lp44098
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$ForwardingTestMultisetGenerator'
p44099
sg15
(lp44100
sg17
(lp44101
sg19
(lp44102
sg21
I0
sba(iArchitecture
Entity
p44103
(dp44104
g11
(lp44105
sg13
S'com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder$NoRecurse'
p44106
sg15
(lp44107
sg17
(lp44108
sg19
(lp44109
sg21
I0
sba(iArchitecture
Entity
p44110
(dp44111
g11
(lp44112
sg13
S'com.google.common.collect.testing.google.SortedSetMultimapAsMapTester'
p44113
sg15
(lp44114
sg17
(lp44115
sg19
(lp44116
sg21
I0
sba(iArchitecture
Entity
p44117
(dp44118
g11
(lp44119
sg13
S'com.google.common.collect.testing.google.SortedSetMultimapGetTester'
p44120
sg15
(lp44121
sg17
(lp44122
sg19
(lp44123
sg21
I0
sba(iArchitecture
Entity
p44124
(dp44125
g11
(lp44126
sg13
S'com.google.common.collect.testing.google.SortedSetMultimapTestSuiteBuilder'
p44127
sg15
(lp44128
sg17
(lp44129
sg19
(lp44130
sg21
I0
sba(iArchitecture
Entity
p44131
(dp44132
g11
(lp44133
sg13
S'com.google.common.collect.testing.google.TestBiMapGenerator'
p44134
sg15
(lp44135
sg17
(lp44136
sg19
(lp44137
sg21
I0
sba(iArchitecture
Entity
p44138
(dp44139
g11
(lp44140
sg13
S'com.google.common.collect.testing.google.TestEnumMultisetGenerator'
p44141
sg15
(lp44142
sg17
(lp44143
sg19
(lp44144
sg21
I0
sba(iArchitecture
Entity
p44145
(dp44146
g11
(lp44147
sg13
S'com.google.common.collect.testing.google.TestListMultimapGenerator'
p44148
sg15
(lp44149
sg17
(lp44150
sg19
(lp44151
sg21
I0
sba(iArchitecture
Entity
p44152
(dp44153
g11
(lp44154
sg13
S'com.google.common.collect.testing.google.TestMultimapGenerator'
p44155
sg15
(lp44156
sg17
(lp44157
sg19
(lp44158
sg21
I0
sba(iArchitecture
Entity
p44159
(dp44160
g11
(lp44161
sg13
S'com.google.common.collect.testing.google.TestMultisetGenerator'
p44162
sg15
(lp44163
sg17
(lp44164
sg19
(lp44165
sg21
I0
sba(iArchitecture
Entity
p44166
(dp44167
g11
(lp44168
sg13
S'com.google.common.collect.testing.google.TestSetMultimapGenerator'
p44169
sg15
(lp44170
sg17
(lp44171
sg19
(lp44172
sg21
I0
sba(iArchitecture
Entity
p44173
(dp44174
g11
(lp44175
sg13
S'com.google.common.collect.testing.google.TestStringBiMapGenerator'
p44176
sg15
(lp44177
sg17
(lp44178
sg19
(lp44179
sg21
I0
sba(iArchitecture
Entity
p44180
(dp44181
g11
(lp44182
sg13
S'com.google.common.collect.testing.google.TestStringListMultimapGenerator'
p44183
sg15
(lp44184
sg17
(lp44185
sg19
(lp44186
sg21
I0
sba(iArchitecture
Entity
p44187
(dp44188
g11
(lp44189
sg13
S'com.google.common.collect.testing.google.TestStringMultisetGenerator'
p44190
sg15
(lp44191
sg17
(lp44192
sg19
(lp44193
sg21
I0
sba(iArchitecture
Entity
p44194
(dp44195
g11
(lp44196
sg13
S'com.google.common.collect.testing.google.TestStringSetMultimapGenerator'
p44197
sg15
(lp44198
sg17
(lp44199
sg19
(lp44200
sg21
I0
sba(iArchitecture
Entity
p44201
(dp44202
g11
(lp44203
sg13
S'com.google.common.collect.testing.google.UnmodifiableCollectionTests'
p44204
sg15
(lp44205
sg17
(lp44206
sg19
(lp44207
sg21
I0
sba(iArchitecture
Entity
p44208
(dp44209
g11
(lp44210
sg13
S'com.google.common.collect.testing.google.UnmodifiableCollectionTests$1'
p44211
sg15
(lp44212
sg17
(lp44213
sg19
(lp44214
sg21
I0
sba(iArchitecture
Entity
p44215
(dp44216
g11
(lp44217
sg13
S'com.google.common.collect.testing.testers.SetCreationTester'
p44218
sg15
(lp44219
sg17
(lp44220
sg19
(lp44221
sg21
I0
sba(iArchitecture
Entity
p44222
(dp44223
g11
(lp44224
sg13
S'com.google.common.net.HttpHeaders'
p44225
sg15
(lp44226
sg17
(lp44227
sg19
(lp44228
sg21
I0
sba(iArchitecture
Entity
p44229
(dp44230
g11
(lp44231
sg13
S'com.google.common.testing.SloppyTearDown'
p44232
sg15
(lp44233
sg17
(lp44234
sg19
(lp44235
sg21
I0
sba(iArchitecture
Entity
p44236
(dp44237
g11
(lp44238
sg13
S'com.google.common.testing.TestLogHandler'
p44239
sg15
(lp44240
sg17
(lp44241
sg19
(lp44242
sg21
I0
sba(iArchitecture
Entity
p44243
(dp44244
g11
(lp44245
sg13
S'junit.framework.TestSuite'
p44246
sg15
(lp44247
sg17
(lp44248
sg19
(lp44249
sg21
I0
sbasg1055
(lp44250
g42510
ag42517
ag42524
ag42531
ag42538
ag42545
ag42552
ag42559
ag42566
ag42573
ag42580
ag42587
ag42594
ag42601
ag42608
ag42615
ag42622
ag42629
ag42636
ag42643
ag42650
ag42657
ag42664
ag42671
ag42678
ag42685
ag42692
ag42699
ag42706
ag42713
ag42720
ag42727
ag42734
ag42741
ag42748
ag42755
ag42762
ag42769
ag42776
ag42783
ag42790
ag42797
ag42804
ag42811
ag42818
ag42825
ag42832
ag42839
ag42846
ag42853
ag42860
ag42867
ag42874
ag42881
ag42888
ag42895
ag42902
ag42909
ag42916
ag42923
ag42930
ag42937
ag42944
ag42951
ag42958
ag42965
ag42972
ag42979
ag42986
ag42993
ag43000
ag43007
ag43014
ag43021
ag43028
ag43035
ag43042
ag43049
ag43056
ag43063
ag43070
ag43077
ag43084
ag43091
ag43098
ag43105
ag43112
ag43119
ag43126
ag43133
ag43140
ag43147
ag43154
ag43161
ag43168
ag43175
ag43182
ag43189
ag43196
ag43203
ag43210
ag43217
ag43224
ag43231
ag43238
ag43245
ag43252
ag43259
ag43266
ag43273
ag43280
ag43287
ag43294
ag43301
ag43308
ag43315
ag43322
ag43329
ag43336
ag43343
ag43350
ag43357
ag43364
ag43371
ag43378
ag43385
ag43392
ag43399
ag43406
ag43413
ag43420
ag43427
ag43434
ag43441
ag43448
ag43455
ag43462
ag43469
ag43476
ag43483
ag43490
ag43497
ag43504
ag43511
ag43518
ag43525
ag43532
ag43539
ag43546
ag43553
ag43560
ag43567
ag43574
ag43581
ag43588
ag43595
ag43602
ag43609
ag43616
ag43623
ag43630
ag43637
ag43644
ag43651
ag43658
ag43665
ag43672
ag43679
ag43686
ag43693
ag43700
ag43707
ag43714
ag43721
ag43728
ag43735
ag43742
ag43749
ag43756
ag43763
ag43770
ag43777
ag43784
ag43791
ag43798
ag43805
ag43812
ag43819
ag43826
ag43833
ag43840
ag43847
ag43854
ag43861
ag43868
ag43875
ag43882
ag43889
ag43896
ag43903
ag43910
ag43917
ag43924
ag43931
ag43938
ag43945
ag43952
ag43959
ag43966
ag43973
ag43980
ag43987
ag43994
ag44001
ag44008
ag44015
ag44022
ag44029
ag44036
ag44043
ag44050
ag44057
ag44064
ag44071
ag44078
ag44085
ag44092
ag44099
ag44106
ag44113
ag44120
ag44127
ag44134
ag44141
ag44148
ag44155
ag44162
ag44169
ag44176
ag44183
ag44190
ag44197
ag44204
ag44211
ag44218
ag44225
ag44232
ag44239
ag44246
asg21
I0
sg1057
S'com.google.common.collect.testing.google.ss'
p44251
sba(iArchitecture
Cluster
p44252
(dp44253
g7
(lp44254
(iArchitecture
Entity
p44255
(dp44256
g11
(lp44257
sg13
S'com.google.common.collect.testing.AbstractCollectionTestSuiteBuilder'
p44258
sg15
(lp44259
sg17
(lp44260
sg19
(lp44261
sg21
I0
sba(iArchitecture
Entity
p44262
(dp44263
g11
(lp44264
sg13
S'com.google.common.collect.testing.AbstractCollectionTester'
p44265
sg15
(lp44266
sg17
(lp44267
sg19
(lp44268
sg21
I0
sba(iArchitecture
Entity
p44269
(dp44270
g11
(lp44271
sg13
S'com.google.common.collect.testing.AbstractContainerTester'
p44272
sg15
(lp44273
sg17
(lp44274
sg19
(lp44275
sg21
I0
sba(iArchitecture
Entity
p44276
(dp44277
g11
(lp44278
sg13
S'com.google.common.collect.testing.AbstractContainerTester$1'
p44279
sg15
(lp44280
sg17
(lp44281
sg19
(lp44282
sg21
I0
sba(iArchitecture
Entity
p44283
(dp44284
g11
(lp44285
sg13
S'com.google.common.collect.testing.AbstractContainerTester$ArrayWithDuplicate'
p44286
sg15
(lp44287
sg17
(lp44288
sg19
(lp44289
sg21
I0
sba(iArchitecture
Entity
p44290
(dp44291
g11
(lp44292
sg13
S'com.google.common.collect.testing.AbstractIteratorTester'
p44293
sg15
(lp44294
sg17
(lp44295
sg19
(lp44296
sg21
I0
sba(iArchitecture
Entity
p44297
(dp44298
g11
(lp44299
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$1'
p44300
sg15
(lp44301
sg17
(lp44302
sg19
(lp44303
sg21
I0
sba(iArchitecture
Entity
p44304
(dp44305
g11
(lp44306
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$10'
p44307
sg15
(lp44308
sg17
(lp44309
sg19
(lp44310
sg21
I0
sba(iArchitecture
Entity
p44311
(dp44312
g11
(lp44313
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$11'
p44314
sg15
(lp44315
sg17
(lp44316
sg19
(lp44317
sg21
I0
sba(iArchitecture
Entity
p44318
(dp44319
g11
(lp44320
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$12'
p44321
sg15
(lp44322
sg17
(lp44323
sg19
(lp44324
sg21
I0
sba(iArchitecture
Entity
p44325
(dp44326
g11
(lp44327
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$13'
p44328
sg15
(lp44329
sg17
(lp44330
sg19
(lp44331
sg21
I0
sba(iArchitecture
Entity
p44332
(dp44333
g11
(lp44334
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$14'
p44335
sg15
(lp44336
sg17
(lp44337
sg19
(lp44338
sg21
I0
sba(iArchitecture
Entity
p44339
(dp44340
g11
(lp44341
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$2'
p44342
sg15
(lp44343
sg17
(lp44344
sg19
(lp44345
sg21
I0
sba(iArchitecture
Entity
p44346
(dp44347
g11
(lp44348
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$3'
p44349
sg15
(lp44350
sg17
(lp44351
sg19
(lp44352
sg21
I0
sba(iArchitecture
Entity
p44353
(dp44354
g11
(lp44355
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$4'
p44356
sg15
(lp44357
sg17
(lp44358
sg19
(lp44359
sg21
I0
sba(iArchitecture
Entity
p44360
(dp44361
g11
(lp44362
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$5'
p44363
sg15
(lp44364
sg17
(lp44365
sg19
(lp44366
sg21
I0
sba(iArchitecture
Entity
p44367
(dp44368
g11
(lp44369
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$6'
p44370
sg15
(lp44371
sg17
(lp44372
sg19
(lp44373
sg21
I0
sba(iArchitecture
Entity
p44374
(dp44375
g11
(lp44376
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$7'
p44377
sg15
(lp44378
sg17
(lp44379
sg19
(lp44380
sg21
I0
sba(iArchitecture
Entity
p44381
(dp44382
g11
(lp44383
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$8'
p44384
sg15
(lp44385
sg17
(lp44386
sg19
(lp44387
sg21
I0
sba(iArchitecture
Entity
p44388
(dp44389
g11
(lp44390
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$9'
p44391
sg15
(lp44392
sg17
(lp44393
sg19
(lp44394
sg21
I0
sba(iArchitecture
Entity
p44395
(dp44396
g11
(lp44397
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation'
p44398
sg15
(lp44399
sg17
(lp44400
sg19
(lp44401
sg21
I0
sba(iArchitecture
Entity
p44402
(dp44403
g11
(lp44404
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator'
p44405
sg15
(lp44406
sg17
(lp44407
sg19
(lp44408
sg21
I0
sba(iArchitecture
Entity
p44409
(dp44410
g11
(lp44411
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException'
p44412
sg15
(lp44413
sg17
(lp44414
sg19
(lp44415
sg21
I0
sba(iArchitecture
Entity
p44416
(dp44417
g11
(lp44418
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException$1'
p44419
sg15
(lp44420
sg17
(lp44421
sg19
(lp44422
sg21
I0
sba(iArchitecture
Entity
p44423
(dp44424
g11
(lp44425
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException$2'
p44426
sg15
(lp44427
sg17
(lp44428
sg19
(lp44429
sg21
I0
sba(iArchitecture
Entity
p44430
(dp44431
g11
(lp44432
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException$3'
p44433
sg15
(lp44434
sg17
(lp44435
sg19
(lp44436
sg21
I0
sba(iArchitecture
Entity
p44437
(dp44438
g11
(lp44439
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException$4'
p44440
sg15
(lp44441
sg17
(lp44442
sg19
(lp44443
sg21
I0
sba(iArchitecture
Entity
p44444
(dp44445
g11
(lp44446
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$Stimulus'
p44447
sg15
(lp44448
sg17
(lp44449
sg19
(lp44450
sg21
I0
sba(iArchitecture
Entity
p44451
(dp44452
g11
(lp44453
sg13
S'com.google.common.collect.testing.AbstractIteratorTester$UnknownElementException'
p44454
sg15
(lp44455
sg17
(lp44456
sg19
(lp44457
sg21
I0
sba(iArchitecture
Entity
p44458
(dp44459
g11
(lp44460
sg13
S'com.google.common.collect.testing.AbstractMapTester'
p44461
sg15
(lp44462
sg17
(lp44463
sg19
(lp44464
sg21
I0
sba(iArchitecture
Entity
p44465
(dp44466
g11
(lp44467
sg13
S'com.google.common.collect.testing.AbstractTester'
p44468
sg15
(lp44469
sg17
(lp44470
sg19
(lp44471
sg21
I0
sba(iArchitecture
Entity
p44472
(dp44473
g11
(lp44474
sg13
S'com.google.common.collect.testing.BaseComparable'
p44475
sg15
(lp44476
sg17
(lp44477
sg19
(lp44478
sg21
I0
sba(iArchitecture
Entity
p44479
(dp44480
g11
(lp44481
sg13
S'com.google.common.collect.testing.CollectionTestSuiteBuilder'
p44482
sg15
(lp44483
sg17
(lp44484
sg19
(lp44485
sg21
I0
sba(iArchitecture
Entity
p44486
(dp44487
g11
(lp44488
sg13
S'com.google.common.collect.testing.CollectionTestSuiteBuilder$1'
p44489
sg15
(lp44490
sg17
(lp44491
sg19
(lp44492
sg21
I0
sba(iArchitecture
Entity
p44493
(dp44494
g11
(lp44495
sg13
S'com.google.common.collect.testing.CollectionTestSuiteBuilder$ReserializedCollectionGenerator'
p44496
sg15
(lp44497
sg17
(lp44498
sg19
(lp44499
sg21
I0
sba(iArchitecture
Entity
p44500
(dp44501
g11
(lp44502
sg13
S'com.google.common.collect.testing.ConcurrentMapTestSuiteBuilder'
p44503
sg15
(lp44504
sg17
(lp44505
sg19
(lp44506
sg21
I0
sba(iArchitecture
Entity
p44507
(dp44508
g11
(lp44509
sg13
S'com.google.common.collect.testing.ConcurrentNavigableMapTestSuiteBuilder'
p44510
sg15
(lp44511
sg17
(lp44512
sg19
(lp44513
sg21
I0
sba(iArchitecture
Entity
p44514
(dp44515
g11
(lp44516
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators'
p44517
sg15
(lp44518
sg17
(lp44519
sg19
(lp44520
sg21
I0
sba(iArchitecture
Entity
p44521
(dp44522
g11
(lp44523
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$Bound'
p44524
sg15
(lp44525
sg17
(lp44526
sg19
(lp44527
sg21
I0
sba(iArchitecture
Entity
p44528
(dp44529
g11
(lp44530
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$ForwardingTestMapGenerator'
p44531
sg15
(lp44532
sg17
(lp44533
sg19
(lp44534
sg21
I0
sba(iArchitecture
Entity
p44535
(dp44536
g11
(lp44537
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$MapEntrySetGenerator'
p44538
sg15
(lp44539
sg17
(lp44540
sg19
(lp44541
sg21
I0
sba(iArchitecture
Entity
p44542
(dp44543
g11
(lp44544
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$MapKeySetGenerator'
p44545
sg15
(lp44546
sg17
(lp44547
sg19
(lp44548
sg21
I0
sba(iArchitecture
Entity
p44549
(dp44550
g11
(lp44551
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$MapSortedKeySetGenerator'
p44552
sg15
(lp44553
sg17
(lp44554
sg19
(lp44555
sg21
I0
sba(iArchitecture
Entity
p44556
(dp44557
g11
(lp44558
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator'
p44559
sg15
(lp44560
sg17
(lp44561
sg19
(lp44562
sg21
I0
sba(iArchitecture
Entity
p44563
(dp44564
g11
(lp44565
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator$1'
p44566
sg15
(lp44567
sg17
(lp44568
sg19
(lp44569
sg21
I0
sba(iArchitecture
Entity
p44570
(dp44571
g11
(lp44572
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$SortedMapSubmapTestMapGenerator'
p44573
sg15
(lp44574
sg17
(lp44575
sg19
(lp44576
sg21
I0
sba(iArchitecture
Entity
p44577
(dp44578
g11
(lp44579
sg13
S'com.google.common.collect.testing.DerivedCollectionGenerators$SortedSetSubsetTestSetGenerator'
p44580
sg15
(lp44581
sg17
(lp44582
sg19
(lp44583
sg21
I0
sba(iArchitecture
Entity
p44584
(dp44585
g11
(lp44586
sg13
S'com.google.common.collect.testing.DerivedComparable'
p44587
sg15
(lp44588
sg17
(lp44589
sg19
(lp44590
sg21
I0
sba(iArchitecture
Entity
p44591
(dp44592
g11
(lp44593
sg13
S'com.google.common.collect.testing.DerivedIteratorTestSuiteBuilder'
p44594
sg15
(lp44595
sg17
(lp44596
sg19
(lp44597
sg21
I0
sba(iArchitecture
Entity
p44598
(dp44599
g11
(lp44600
sg13
S'com.google.common.collect.testing.DerivedTestIteratorGenerator'
p44601
sg15
(lp44602
sg17
(lp44603
sg19
(lp44604
sg21
I0
sba(iArchitecture
Entity
p44605
(dp44606
g11
(lp44607
sg13
S'com.google.common.collect.testing.ExampleIteratorTester'
p44608
sg15
(lp44609
sg17
(lp44610
sg19
(lp44611
sg21
I0
sba(iArchitecture
Entity
p44612
(dp44613
g11
(lp44614
sg13
S'com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder'
p44615
sg15
(lp44616
sg17
(lp44617
sg19
(lp44618
sg21
I0
sba(iArchitecture
Entity
p44619
(dp44620
g11
(lp44621
sg13
S'com.google.common.collect.testing.Helpers'
p44622
sg15
(lp44623
sg17
(lp44624
sg19
(lp44625
sg21
I0
sba(iArchitecture
Entity
p44626
(dp44627
g11
(lp44628
sg13
S'com.google.common.collect.testing.Helpers$1'
p44629
sg15
(lp44630
sg17
(lp44631
sg19
(lp44632
sg21
I0
sba(iArchitecture
Entity
p44633
(dp44634
g11
(lp44635
sg13
S'com.google.common.collect.testing.Helpers$1$1'
p44636
sg15
(lp44637
sg17
(lp44638
sg19
(lp44639
sg21
I0
sba(iArchitecture
Entity
p44640
(dp44641
g11
(lp44642
sg13
S'com.google.common.collect.testing.Helpers$2'
p44643
sg15
(lp44644
sg17
(lp44645
sg19
(lp44646
sg21
I0
sba(iArchitecture
Entity
p44647
(dp44648
g11
(lp44649
sg13
S'com.google.common.collect.testing.Helpers$3'
p44650
sg15
(lp44651
sg17
(lp44652
sg19
(lp44653
sg21
I0
sba(iArchitecture
Entity
p44654
(dp44655
g11
(lp44656
sg13
S'com.google.common.collect.testing.Helpers$4'
p44657
sg15
(lp44658
sg17
(lp44659
sg19
(lp44660
sg21
I0
sba(iArchitecture
Entity
p44661
(dp44662
g11
(lp44663
sg13
S'com.google.common.collect.testing.Helpers$5'
p44664
sg15
(lp44665
sg17
(lp44666
sg19
(lp44667
sg21
I0
sba(iArchitecture
Entity
p44668
(dp44669
g11
(lp44670
sg13
S'com.google.common.collect.testing.Helpers$6'
p44671
sg15
(lp44672
sg17
(lp44673
sg19
(lp44674
sg21
I0
sba(iArchitecture
Entity
p44675
(dp44676
g11
(lp44677
sg13
S'com.google.common.collect.testing.Helpers$GwtTransient'
p44678
sg15
(lp44679
sg17
(lp44680
sg19
(lp44681
sg21
I0
sba(iArchitecture
Entity
p44682
(dp44683
g11
(lp44684
sg13
S'com.google.common.collect.testing.Helpers$NullsBefore'
p44685
sg15
(lp44686
sg17
(lp44687
sg19
(lp44688
sg21
I0
sba(iArchitecture
Entity
p44689
(dp44690
g11
(lp44691
sg13
S'com.google.common.collect.testing.Helpers$NullsBeforeB'
p44692
sg15
(lp44693
sg17
(lp44694
sg19
(lp44695
sg21
I0
sba(iArchitecture
Entity
p44696
(dp44697
g11
(lp44698
sg13
S'com.google.common.collect.testing.Helpers$NullsBeforeTwo'
p44699
sg15
(lp44700
sg17
(lp44701
sg19
(lp44702
sg21
I0
sba(iArchitecture
Entity
p44703
(dp44704
g11
(lp44705
sg13
S'com.google.common.collect.testing.IteratorTestSuiteBuilder'
p44706
sg15
(lp44707
sg17
(lp44708
sg19
(lp44709
sg21
I0
sba(iArchitecture
Entity
p44710
(dp44711
g11
(lp44712
sg13
S'com.google.common.collect.testing.ListTestSuiteBuilder'
p44713
sg15
(lp44714
sg17
(lp44715
sg19
(lp44716
sg21
I0
sba(iArchitecture
Entity
p44717
(dp44718
g11
(lp44719
sg13
S'com.google.common.collect.testing.ListTestSuiteBuilder$1'
p44720
sg15
(lp44721
sg17
(lp44722
sg19
(lp44723
sg21
I0
sba(iArchitecture
Entity
p44724
(dp44725
g11
(lp44726
sg13
S'com.google.common.collect.testing.ListTestSuiteBuilder$ReserializedListGenerator'
p44727
sg15
(lp44728
sg17
(lp44729
sg19
(lp44730
sg21
I0
sba(iArchitecture
Entity
p44731
(dp44732
g11
(lp44733
sg13
S'com.google.common.collect.testing.MapInterfaceTest'
p44734
sg15
(lp44735
sg17
(lp44736
sg19
(lp44737
sg21
I0
sba(iArchitecture
Entity
p44738
(dp44739
g11
(lp44740
sg13
S'com.google.common.collect.testing.MapInterfaceTest$1'
p44741
sg15
(lp44742
sg17
(lp44743
sg19
(lp44744
sg21
I0
sba(iArchitecture
Entity
p44745
(dp44746
g11
(lp44747
sg13
S'com.google.common.collect.testing.MapInterfaceTest$IncompatibleKeyType'
p44748
sg15
(lp44749
sg17
(lp44750
sg19
(lp44751
sg21
I0
sba(iArchitecture
Entity
p44752
(dp44753
g11
(lp44754
sg13
S'com.google.common.collect.testing.MapTestSuiteBuilder'
p44755
sg15
(lp44756
sg17
(lp44757
sg19
(lp44758
sg21
I0
sba(iArchitecture
Entity
p44759
(dp44760
g11
(lp44761
sg13
S'com.google.common.collect.testing.MapTestSuiteBuilder$ReserializedMapGenerator'
p44762
sg15
(lp44763
sg17
(lp44764
sg19
(lp44765
sg21
I0
sba(iArchitecture
Entity
p44766
(dp44767
g11
(lp44768
sg13
S'com.google.common.collect.testing.MinimalCollection'
p44769
sg15
(lp44770
sg17
(lp44771
sg19
(lp44772
sg21
I0
sba(iArchitecture
Entity
p44773
(dp44774
g11
(lp44775
sg13
S'com.google.common.collect.testing.MinimalSet'
p44776
sg15
(lp44777
sg17
(lp44778
sg19
(lp44779
sg21
I0
sba(iArchitecture
Entity
p44780
(dp44781
g11
(lp44782
sg13
S'com.google.common.collect.testing.NavigableMapTestSuiteBuilder'
p44783
sg15
(lp44784
sg17
(lp44785
sg19
(lp44786
sg21
I0
sba(iArchitecture
Entity
p44787
(dp44788
g11
(lp44789
sg13
S'com.google.common.collect.testing.NavigableMapTestSuiteBuilder$DescendingTestMapGenerator'
p44790
sg15
(lp44791
sg17
(lp44792
sg19
(lp44793
sg21
I0
sba(iArchitecture
Entity
p44794
(dp44795
g11
(lp44796
sg13
S'com.google.common.collect.testing.NavigableMapTestSuiteBuilder$NavigableMapSubmapTestMapGenerator'
p44797
sg15
(lp44798
sg17
(lp44799
sg19
(lp44800
sg21
I0
sba(iArchitecture
Entity
p44801
(dp44802
g11
(lp44803
sg13
S'com.google.common.collect.testing.NavigableSetTestSuiteBuilder'
p44804
sg15
(lp44805
sg17
(lp44806
sg19
(lp44807
sg21
I0
sba(iArchitecture
Entity
p44808
(dp44809
g11
(lp44810
sg13
S'com.google.common.collect.testing.NavigableSetTestSuiteBuilder$1'
p44811
sg15
(lp44812
sg17
(lp44813
sg19
(lp44814
sg21
I0
sba(iArchitecture
Entity
p44815
(dp44816
g11
(lp44817
sg13
S'com.google.common.collect.testing.NavigableSetTestSuiteBuilder$NavigableSetSubsetTestSetGenerator'
p44818
sg15
(lp44819
sg17
(lp44820
sg19
(lp44821
sg21
I0
sba(iArchitecture
Entity
p44822
(dp44823
g11
(lp44824
sg13
S'com.google.common.collect.testing.OneSizeGenerator'
p44825
sg15
(lp44826
sg17
(lp44827
sg19
(lp44828
sg21
I0
sba(iArchitecture
Entity
p44829
(dp44830
g11
(lp44831
sg13
S'com.google.common.collect.testing.OneSizeTestContainerGenerator'
p44832
sg15
(lp44833
sg17
(lp44834
sg19
(lp44835
sg21
I0
sba(iArchitecture
Entity
p44836
(dp44837
g11
(lp44838
sg13
S'com.google.common.collect.testing.PerCollectionSizeTestSuiteBuilder'
p44839
sg15
(lp44840
sg17
(lp44841
sg19
(lp44842
sg21
I0
sba(iArchitecture
Entity
p44843
(dp44844
g11
(lp44845
sg13
S'com.google.common.collect.testing.PerCollectionSizeTestSuiteBuilder$OneSizeTestSuiteBuilder'
p44846
sg15
(lp44847
sg17
(lp44848
sg19
(lp44849
sg21
I0
sba(iArchitecture
Entity
p44850
(dp44851
g11
(lp44852
sg13
S'com.google.common.collect.testing.Platform'
p44853
sg15
(lp44854
sg17
(lp44855
sg19
(lp44856
sg21
I0
sba(iArchitecture
Entity
p44857
(dp44858
g11
(lp44859
sg13
S'com.google.common.collect.testing.QueueTestSuiteBuilder'
p44860
sg15
(lp44861
sg17
(lp44862
sg19
(lp44863
sg21
I0
sba(iArchitecture
Entity
p44864
(dp44865
g11
(lp44866
sg13
S'com.google.common.collect.testing.ReserializingTestCollectionGenerator'
p44867
sg15
(lp44868
sg17
(lp44869
sg19
(lp44870
sg21
I0
sba(iArchitecture
Entity
p44871
(dp44872
g11
(lp44873
sg13
S'com.google.common.collect.testing.ReserializingTestSetGenerator'
p44874
sg15
(lp44875
sg17
(lp44876
sg19
(lp44877
sg21
I0
sba(iArchitecture
Entity
p44878
(dp44879
g11
(lp44880
sg13
S'com.google.common.collect.testing.SafeTreeMap'
p44881
sg15
(lp44882
sg17
(lp44883
sg19
(lp44884
sg21
I0
sba(iArchitecture
Entity
p44885
(dp44886
g11
(lp44887
sg13
S'com.google.common.collect.testing.SafeTreeMap$1'
p44888
sg15
(lp44889
sg17
(lp44890
sg19
(lp44891
sg21
I0
sba(iArchitecture
Entity
p44892
(dp44893
g11
(lp44894
sg13
S'com.google.common.collect.testing.SafeTreeMap$2'
p44895
sg15
(lp44896
sg17
(lp44897
sg19
(lp44898
sg21
I0
sba(iArchitecture
Entity
p44899
(dp44900
g11
(lp44901
sg13
S'com.google.common.collect.testing.SafeTreeSet'
p44902
sg15
(lp44903
sg17
(lp44904
sg19
(lp44905
sg21
I0
sba(iArchitecture
Entity
p44906
(dp44907
g11
(lp44908
sg13
S'com.google.common.collect.testing.SafeTreeSet$1'
p44909
sg15
(lp44910
sg17
(lp44911
sg19
(lp44912
sg21
I0
sba(iArchitecture
Entity
p44913
(dp44914
g11
(lp44915
sg13
S'com.google.common.collect.testing.SetTestSuiteBuilder'
p44916
sg15
(lp44917
sg17
(lp44918
sg19
(lp44919
sg21
I0
sba(iArchitecture
Entity
p44920
(dp44921
g11
(lp44922
sg13
S'com.google.common.collect.testing.SetTestSuiteBuilder$1'
p44923
sg15
(lp44924
sg17
(lp44925
sg19
(lp44926
sg21
I0
sba(iArchitecture
Entity
p44927
(dp44928
g11
(lp44929
sg13
S'com.google.common.collect.testing.SetTestSuiteBuilder$ReserializedSetGenerator'
p44930
sg15
(lp44931
sg17
(lp44932
sg19
(lp44933
sg21
I0
sba(iArchitecture
Entity
p44934
(dp44935
g11
(lp44936
sg13
S'com.google.common.collect.testing.SortedMapTestSuiteBuilder'
p44937
sg15
(lp44938
sg17
(lp44939
sg19
(lp44940
sg21
I0
sba(iArchitecture
Entity
p44941
(dp44942
g11
(lp44943
sg13
S'com.google.common.collect.testing.SortedMapTestSuiteBuilder$NoRecurse'
p44944
sg15
(lp44945
sg17
(lp44946
sg19
(lp44947
sg21
I0
sba(iArchitecture
Entity
p44948
(dp44949
g11
(lp44950
sg13
S'com.google.common.collect.testing.SortedSetTestSuiteBuilder'
p44951
sg15
(lp44952
sg17
(lp44953
sg19
(lp44954
sg21
I0
sba(iArchitecture
Entity
p44955
(dp44956
g11
(lp44957
sg13
S'com.google.common.collect.testing.TestEnumSetGenerator'
p44958
sg15
(lp44959
sg17
(lp44960
sg19
(lp44961
sg21
I0
sba(iArchitecture
Entity
p44962
(dp44963
g11
(lp44964
sg13
S'com.google.common.collect.testing.TestIntegerSetGenerator'
p44965
sg15
(lp44966
sg17
(lp44967
sg19
(lp44968
sg21
I0
sba(iArchitecture
Entity
p44969
(dp44970
g11
(lp44971
sg13
S'com.google.common.collect.testing.TestIntegerSortedSetGenerator'
p44972
sg15
(lp44973
sg17
(lp44974
sg19
(lp44975
sg21
I0
sba(iArchitecture
Entity
p44976
(dp44977
g11
(lp44978
sg13
S'com.google.common.collect.testing.TestIteratorGenerator'
p44979
sg15
(lp44980
sg17
(lp44981
sg19
(lp44982
sg21
I0
sba(iArchitecture
Entity
p44983
(dp44984
g11
(lp44985
sg13
S'com.google.common.collect.testing.TestQueueGenerator'
p44986
sg15
(lp44987
sg17
(lp44988
sg19
(lp44989
sg21
I0
sba(iArchitecture
Entity
p44990
(dp44991
g11
(lp44992
sg13
S'com.google.common.collect.testing.TestSetGenerator'
p44993
sg15
(lp44994
sg17
(lp44995
sg19
(lp44996
sg21
I0
sba(iArchitecture
Entity
p44997
(dp44998
g11
(lp44999
sg13
S'com.google.common.collect.testing.TestSortedMapGenerator'
p45000
sg15
(lp45001
sg17
(lp45002
sg19
(lp45003
sg21
I0
sba(iArchitecture
Entity
p45004
(dp45005
g11
(lp45006
sg13
S'com.google.common.collect.testing.TestSortedSetGenerator'
p45007
sg15
(lp45008
sg17
(lp45009
sg19
(lp45010
sg21
I0
sba(iArchitecture
Entity
p45011
(dp45012
g11
(lp45013
sg13
S'com.google.common.collect.testing.TestStringListGenerator'
p45014
sg15
(lp45015
sg17
(lp45016
sg19
(lp45017
sg21
I0
sba(iArchitecture
Entity
p45018
(dp45019
g11
(lp45020
sg13
S'com.google.common.collect.testing.TestStringMapGenerator'
p45021
sg15
(lp45022
sg17
(lp45023
sg19
(lp45024
sg21
I0
sba(iArchitecture
Entity
p45025
(dp45026
g11
(lp45027
sg13
S'com.google.common.collect.testing.TestStringQueueGenerator'
p45028
sg15
(lp45029
sg17
(lp45030
sg19
(lp45031
sg21
I0
sba(iArchitecture
Entity
p45032
(dp45033
g11
(lp45034
sg13
S'com.google.common.collect.testing.TestStringSetGenerator'
p45035
sg15
(lp45036
sg17
(lp45037
sg19
(lp45038
sg21
I0
sba(iArchitecture
Entity
p45039
(dp45040
g11
(lp45041
sg13
S'com.google.common.collect.testing.TestStringSortedMapGenerator'
p45042
sg15
(lp45043
sg17
(lp45044
sg19
(lp45045
sg21
I0
sba(iArchitecture
Entity
p45046
(dp45047
g11
(lp45048
sg13
S'com.google.common.collect.testing.TestStringSortedSetGenerator'
p45049
sg15
(lp45050
sg17
(lp45051
sg19
(lp45052
sg21
I0
sba(iArchitecture
Entity
p45053
(dp45054
g11
(lp45055
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil'
p45056
sg15
(lp45057
sg17
(lp45058
sg19
(lp45059
sg21
I0
sba(iArchitecture
Entity
p45060
(dp45061
g11
(lp45062
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$1'
p45063
sg15
(lp45064
sg17
(lp45065
sg19
(lp45066
sg21
I0
sba(iArchitecture
Entity
p45067
(dp45068
g11
(lp45069
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$10'
p45070
sg15
(lp45071
sg17
(lp45072
sg19
(lp45073
sg21
I0
sba(iArchitecture
Entity
p45074
(dp45075
g11
(lp45076
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$10$1'
p45077
sg15
(lp45078
sg17
(lp45079
sg19
(lp45080
sg21
I0
sba(iArchitecture
Entity
p45081
(dp45082
g11
(lp45083
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$11'
p45084
sg15
(lp45085
sg17
(lp45086
sg19
(lp45087
sg21
I0
sba(iArchitecture
Entity
p45088
(dp45089
g11
(lp45090
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$2'
p45091
sg15
(lp45092
sg17
(lp45093
sg19
(lp45094
sg21
I0
sba(iArchitecture
Entity
p45095
(dp45096
g11
(lp45097
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$3'
p45098
sg15
(lp45099
sg17
(lp45100
sg19
(lp45101
sg21
I0
sba(iArchitecture
Entity
p45102
(dp45103
g11
(lp45104
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$4'
p45105
sg15
(lp45106
sg17
(lp45107
sg19
(lp45108
sg21
I0
sba(iArchitecture
Entity
p45109
(dp45110
g11
(lp45111
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$5'
p45112
sg15
(lp45113
sg17
(lp45114
sg19
(lp45115
sg21
I0
sba(iArchitecture
Entity
p45116
(dp45117
g11
(lp45118
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$6'
p45119
sg15
(lp45120
sg17
(lp45121
sg19
(lp45122
sg21
I0
sba(iArchitecture
Entity
p45123
(dp45124
g11
(lp45125
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$7'
p45126
sg15
(lp45127
sg17
(lp45128
sg19
(lp45129
sg21
I0
sba(iArchitecture
Entity
p45130
(dp45131
g11
(lp45132
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$8'
p45133
sg15
(lp45134
sg17
(lp45135
sg19
(lp45136
sg21
I0
sba(iArchitecture
Entity
p45137
(dp45138
g11
(lp45139
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$9'
p45140
sg15
(lp45141
sg17
(lp45142
sg19
(lp45143
sg21
I0
sba(iArchitecture
Entity
p45144
(dp45145
g11
(lp45146
sg13
S'com.google.common.collect.testing.TestsForListsInJavaUtil$9$1'
p45147
sg15
(lp45148
sg17
(lp45149
sg19
(lp45150
sg21
I0
sba(iArchitecture
Entity
p45151
(dp45152
g11
(lp45153
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil'
p45154
sg15
(lp45155
sg17
(lp45156
sg19
(lp45157
sg21
I0
sba(iArchitecture
Entity
p45158
(dp45159
g11
(lp45160
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$1'
p45161
sg15
(lp45162
sg17
(lp45163
sg19
(lp45164
sg21
I0
sba(iArchitecture
Entity
p45165
(dp45166
g11
(lp45167
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$10'
p45168
sg15
(lp45169
sg17
(lp45170
sg19
(lp45171
sg21
I0
sba(iArchitecture
Entity
p45172
(dp45173
g11
(lp45174
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$11'
p45175
sg15
(lp45176
sg17
(lp45177
sg19
(lp45178
sg21
I0
sba(iArchitecture
Entity
p45179
(dp45180
g11
(lp45181
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$12'
p45182
sg15
(lp45183
sg17
(lp45184
sg19
(lp45185
sg21
I0
sba(iArchitecture
Entity
p45186
(dp45187
g11
(lp45188
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$13'
p45189
sg15
(lp45190
sg17
(lp45191
sg19
(lp45192
sg21
I0
sba(iArchitecture
Entity
p45193
(dp45194
g11
(lp45195
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$14'
p45196
sg15
(lp45197
sg17
(lp45198
sg19
(lp45199
sg21
I0
sba(iArchitecture
Entity
p45200
(dp45201
g11
(lp45202
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$15'
p45203
sg15
(lp45204
sg17
(lp45205
sg19
(lp45206
sg21
I0
sba(iArchitecture
Entity
p45207
(dp45208
g11
(lp45209
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$2'
p45210
sg15
(lp45211
sg17
(lp45212
sg19
(lp45213
sg21
I0
sba(iArchitecture
Entity
p45214
(dp45215
g11
(lp45216
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$3'
p45217
sg15
(lp45218
sg17
(lp45219
sg19
(lp45220
sg21
I0
sba(iArchitecture
Entity
p45221
(dp45222
g11
(lp45223
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$4'
p45224
sg15
(lp45225
sg17
(lp45226
sg19
(lp45227
sg21
I0
sba(iArchitecture
Entity
p45228
(dp45229
g11
(lp45230
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$5'
p45231
sg15
(lp45232
sg17
(lp45233
sg19
(lp45234
sg21
I0
sba(iArchitecture
Entity
p45235
(dp45236
g11
(lp45237
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$6'
p45238
sg15
(lp45239
sg17
(lp45240
sg19
(lp45241
sg21
I0
sba(iArchitecture
Entity
p45242
(dp45243
g11
(lp45244
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$7'
p45245
sg15
(lp45246
sg17
(lp45247
sg19
(lp45248
sg21
I0
sba(iArchitecture
Entity
p45249
(dp45250
g11
(lp45251
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$8'
p45252
sg15
(lp45253
sg17
(lp45254
sg19
(lp45255
sg21
I0
sba(iArchitecture
Entity
p45256
(dp45257
g11
(lp45258
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$9'
p45259
sg15
(lp45260
sg17
(lp45261
sg19
(lp45262
sg21
I0
sba(iArchitecture
Entity
p45263
(dp45264
g11
(lp45265
sg13
S'com.google.common.collect.testing.TestsForMapsInJavaUtil$NullFriendlyComparator'
p45266
sg15
(lp45267
sg17
(lp45268
sg19
(lp45269
sg21
I0
sba(iArchitecture
Entity
p45270
(dp45271
g11
(lp45272
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil'
p45273
sg15
(lp45274
sg17
(lp45275
sg19
(lp45276
sg21
I0
sba(iArchitecture
Entity
p45277
(dp45278
g11
(lp45279
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil$1'
p45280
sg15
(lp45281
sg17
(lp45282
sg19
(lp45283
sg21
I0
sba(iArchitecture
Entity
p45284
(dp45285
g11
(lp45286
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil$2'
p45287
sg15
(lp45288
sg17
(lp45289
sg19
(lp45290
sg21
I0
sba(iArchitecture
Entity
p45291
(dp45292
g11
(lp45293
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil$3'
p45294
sg15
(lp45295
sg17
(lp45296
sg19
(lp45297
sg21
I0
sba(iArchitecture
Entity
p45298
(dp45299
g11
(lp45300
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil$4'
p45301
sg15
(lp45302
sg17
(lp45303
sg19
(lp45304
sg21
I0
sba(iArchitecture
Entity
p45305
(dp45306
g11
(lp45307
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil$5'
p45308
sg15
(lp45309
sg17
(lp45310
sg19
(lp45311
sg21
I0
sba(iArchitecture
Entity
p45312
(dp45313
g11
(lp45314
sg13
S'com.google.common.collect.testing.TestsForQueuesInJavaUtil$6'
p45315
sg15
(lp45316
sg17
(lp45317
sg19
(lp45318
sg21
I0
sba(iArchitecture
Entity
p45319
(dp45320
g11
(lp45321
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil'
p45322
sg15
(lp45323
sg17
(lp45324
sg19
(lp45325
sg21
I0
sba(iArchitecture
Entity
p45326
(dp45327
g11
(lp45328
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$1'
p45329
sg15
(lp45330
sg17
(lp45331
sg19
(lp45332
sg21
I0
sba(iArchitecture
Entity
p45333
(dp45334
g11
(lp45335
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$10'
p45336
sg15
(lp45337
sg17
(lp45338
sg19
(lp45339
sg21
I0
sba(iArchitecture
Entity
p45340
(dp45341
g11
(lp45342
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$11'
p45343
sg15
(lp45344
sg17
(lp45345
sg19
(lp45346
sg21
I0
sba(iArchitecture
Entity
p45347
(dp45348
g11
(lp45349
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$12'
p45350
sg15
(lp45351
sg17
(lp45352
sg19
(lp45353
sg21
I0
sba(iArchitecture
Entity
p45354
(dp45355
g11
(lp45356
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$12$1'
p45357
sg15
(lp45358
sg17
(lp45359
sg19
(lp45360
sg21
I0
sba(iArchitecture
Entity
p45361
(dp45362
g11
(lp45363
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$13'
p45364
sg15
(lp45365
sg17
(lp45366
sg19
(lp45367
sg21
I0
sba(iArchitecture
Entity
p45368
(dp45369
g11
(lp45370
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$14'
p45371
sg15
(lp45372
sg17
(lp45373
sg19
(lp45374
sg21
I0
sba(iArchitecture
Entity
p45375
(dp45376
g11
(lp45377
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$15'
p45378
sg15
(lp45379
sg17
(lp45380
sg19
(lp45381
sg21
I0
sba(iArchitecture
Entity
p45382
(dp45383
g11
(lp45384
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$2'
p45385
sg15
(lp45386
sg17
(lp45387
sg19
(lp45388
sg21
I0
sba(iArchitecture
Entity
p45389
(dp45390
g11
(lp45391
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$3'
p45392
sg15
(lp45393
sg17
(lp45394
sg19
(lp45395
sg21
I0
sba(iArchitecture
Entity
p45396
(dp45397
g11
(lp45398
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$4'
p45399
sg15
(lp45400
sg17
(lp45401
sg19
(lp45402
sg21
I0
sba(iArchitecture
Entity
p45403
(dp45404
g11
(lp45405
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$5'
p45406
sg15
(lp45407
sg17
(lp45408
sg19
(lp45409
sg21
I0
sba(iArchitecture
Entity
p45410
(dp45411
g11
(lp45412
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$6'
p45413
sg15
(lp45414
sg17
(lp45415
sg19
(lp45416
sg21
I0
sba(iArchitecture
Entity
p45417
(dp45418
g11
(lp45419
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$7'
p45420
sg15
(lp45421
sg17
(lp45422
sg19
(lp45423
sg21
I0
sba(iArchitecture
Entity
p45424
(dp45425
g11
(lp45426
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$8'
p45427
sg15
(lp45428
sg17
(lp45429
sg19
(lp45430
sg21
I0
sba(iArchitecture
Entity
p45431
(dp45432
g11
(lp45433
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$9'
p45434
sg15
(lp45435
sg17
(lp45436
sg19
(lp45437
sg21
I0
sba(iArchitecture
Entity
p45438
(dp45439
g11
(lp45440
sg13
S'com.google.common.collect.testing.TestsForSetsInJavaUtil$NullFriendlyComparator'
p45441
sg15
(lp45442
sg17
(lp45443
sg19
(lp45444
sg21
I0
sba(iArchitecture
Entity
p45445
(dp45446
g11
(lp45447
sg13
S'com.google.common.collect.testing.WrongType'
p45448
sg15
(lp45449
sg17
(lp45450
sg19
(lp45451
sg21
I0
sba(iArchitecture
Entity
p45452
(dp45453
g11
(lp45454
sg13
S'com.google.common.collect.testing.features.CollectionFeature'
p45455
sg15
(lp45456
sg17
(lp45457
sg19
(lp45458
sg21
I0
sba(iArchitecture
Entity
p45459
(dp45460
g11
(lp45461
sg13
S'com.google.common.collect.testing.features.CollectionFeature$Require'
p45462
sg15
(lp45463
sg17
(lp45464
sg19
(lp45465
sg21
I0
sba(iArchitecture
Entity
p45466
(dp45467
g11
(lp45468
sg13
S'com.google.common.collect.testing.features.ConflictingRequirementsException'
p45469
sg15
(lp45470
sg17
(lp45471
sg19
(lp45472
sg21
I0
sba(iArchitecture
Entity
p45473
(dp45474
g11
(lp45475
sg13
S'com.google.common.collect.testing.features.FeatureUtil'
p45476
sg15
(lp45477
sg17
(lp45478
sg19
(lp45479
sg21
I0
sba(iArchitecture
Entity
p45480
(dp45481
g11
(lp45482
sg13
S'com.google.common.collect.testing.features.ListFeature'
p45483
sg15
(lp45484
sg17
(lp45485
sg19
(lp45486
sg21
I0
sba(iArchitecture
Entity
p45487
(dp45488
g11
(lp45489
sg13
S'com.google.common.collect.testing.features.ListFeature$Require'
p45490
sg15
(lp45491
sg17
(lp45492
sg19
(lp45493
sg21
I0
sba(iArchitecture
Entity
p45494
(dp45495
g11
(lp45496
sg13
S'com.google.common.collect.testing.features.TesterRequirements'
p45497
sg15
(lp45498
sg17
(lp45499
sg19
(lp45500
sg21
I0
sba(iArchitecture
Entity
p45501
(dp45502
g11
(lp45503
sg13
S'com.google.common.collect.testing.testers.AbstractListIndexOfTester'
p45504
sg15
(lp45505
sg17
(lp45506
sg19
(lp45507
sg21
I0
sba(iArchitecture
Entity
p45508
(dp45509
g11
(lp45510
sg13
S'com.google.common.collect.testing.testers.AbstractListTester'
p45511
sg15
(lp45512
sg17
(lp45513
sg19
(lp45514
sg21
I0
sba(iArchitecture
Entity
p45515
(dp45516
g11
(lp45517
sg13
S'com.google.common.collect.testing.testers.AbstractQueueTester'
p45518
sg15
(lp45519
sg17
(lp45520
sg19
(lp45521
sg21
I0
sba(iArchitecture
Entity
p45522
(dp45523
g11
(lp45524
sg13
S'com.google.common.collect.testing.testers.AbstractSetTester'
p45525
sg15
(lp45526
sg17
(lp45527
sg19
(lp45528
sg21
I0
sba(iArchitecture
Entity
p45529
(dp45530
g11
(lp45531
sg13
S'com.google.common.collect.testing.testers.CollectionAddAllTester'
p45532
sg15
(lp45533
sg17
(lp45534
sg19
(lp45535
sg21
I0
sba(iArchitecture
Entity
p45536
(dp45537
g11
(lp45538
sg13
S'com.google.common.collect.testing.testers.CollectionAddTester'
p45539
sg15
(lp45540
sg17
(lp45541
sg19
(lp45542
sg21
I0
sba(iArchitecture
Entity
p45543
(dp45544
g11
(lp45545
sg13
S'com.google.common.collect.testing.testers.CollectionClearTester'
p45546
sg15
(lp45547
sg17
(lp45548
sg19
(lp45549
sg21
I0
sba(iArchitecture
Entity
p45550
(dp45551
g11
(lp45552
sg13
S'com.google.common.collect.testing.testers.CollectionContainsAllTester'
p45553
sg15
(lp45554
sg17
(lp45555
sg19
(lp45556
sg21
I0
sba(iArchitecture
Entity
p45557
(dp45558
g11
(lp45559
sg13
S'com.google.common.collect.testing.testers.CollectionContainsTester'
p45560
sg15
(lp45561
sg17
(lp45562
sg19
(lp45563
sg21
I0
sba(iArchitecture
Entity
p45564
(dp45565
g11
(lp45566
sg13
S'com.google.common.collect.testing.testers.CollectionCreationTester'
p45567
sg15
(lp45568
sg17
(lp45569
sg19
(lp45570
sg21
I0
sba(iArchitecture
Entity
p45571
(dp45572
g11
(lp45573
sg13
S'com.google.common.collect.testing.testers.CollectionEqualsTester'
p45574
sg15
(lp45575
sg17
(lp45576
sg19
(lp45577
sg21
I0
sba(iArchitecture
Entity
p45578
(dp45579
g11
(lp45580
sg13
S'com.google.common.collect.testing.testers.CollectionIsEmptyTester'
p45581
sg15
(lp45582
sg17
(lp45583
sg19
(lp45584
sg21
I0
sba(iArchitecture
Entity
p45585
(dp45586
g11
(lp45587
sg13
S'com.google.common.collect.testing.testers.CollectionRemoveAllTester'
p45588
sg15
(lp45589
sg17
(lp45590
sg19
(lp45591
sg21
I0
sba(iArchitecture
Entity
p45592
(dp45593
g11
(lp45594
sg13
S'com.google.common.collect.testing.testers.CollectionRemoveTester'
p45595
sg15
(lp45596
sg17
(lp45597
sg19
(lp45598
sg21
I0
sba(iArchitecture
Entity
p45599
(dp45600
g11
(lp45601
sg13
S'com.google.common.collect.testing.testers.CollectionSerializationEqualTester'
p45602
sg15
(lp45603
sg17
(lp45604
sg19
(lp45605
sg21
I0
sba(iArchitecture
Entity
p45606
(dp45607
g11
(lp45608
sg13
S'com.google.common.collect.testing.testers.CollectionSerializationTester'
p45609
sg15
(lp45610
sg17
(lp45611
sg19
(lp45612
sg21
I0
sba(iArchitecture
Entity
p45613
(dp45614
g11
(lp45615
sg13
S'com.google.common.collect.testing.testers.CollectionSizeTester'
p45616
sg15
(lp45617
sg17
(lp45618
sg19
(lp45619
sg21
I0
sba(iArchitecture
Entity
p45620
(dp45621
g11
(lp45622
sg13
S'com.google.common.collect.testing.testers.CollectionToArrayTester'
p45623
sg15
(lp45624
sg17
(lp45625
sg19
(lp45626
sg21
I0
sba(iArchitecture
Entity
p45627
(dp45628
g11
(lp45629
sg13
S'com.google.common.collect.testing.testers.CollectionToStringTester'
p45630
sg15
(lp45631
sg17
(lp45632
sg19
(lp45633
sg21
I0
sba(iArchitecture
Entity
p45634
(dp45635
g11
(lp45636
sg13
S'com.google.common.collect.testing.testers.ConcurrentMapPutIfAbsentTester'
p45637
sg15
(lp45638
sg17
(lp45639
sg19
(lp45640
sg21
I0
sba(iArchitecture
Entity
p45641
(dp45642
g11
(lp45643
sg13
S'com.google.common.collect.testing.testers.ConcurrentMapRemoveTester'
p45644
sg15
(lp45645
sg17
(lp45646
sg19
(lp45647
sg21
I0
sba(iArchitecture
Entity
p45648
(dp45649
g11
(lp45650
sg13
S'com.google.common.collect.testing.testers.ConcurrentMapReplaceEntryTester'
p45651
sg15
(lp45652
sg17
(lp45653
sg19
(lp45654
sg21
I0
sba(iArchitecture
Entity
p45655
(dp45656
g11
(lp45657
sg13
S'com.google.common.collect.testing.testers.ConcurrentMapReplaceTester'
p45658
sg15
(lp45659
sg17
(lp45660
sg19
(lp45661
sg21
I0
sba(iArchitecture
Entity
p45662
(dp45663
g11
(lp45664
sg13
S'com.google.common.collect.testing.testers.ListAddAllAtIndexTester'
p45665
sg15
(lp45666
sg17
(lp45667
sg19
(lp45668
sg21
I0
sba(iArchitecture
Entity
p45669
(dp45670
g11
(lp45671
sg13
S'com.google.common.collect.testing.testers.ListAddAllTester'
p45672
sg15
(lp45673
sg17
(lp45674
sg19
(lp45675
sg21
I0
sba(iArchitecture
Entity
p45676
(dp45677
g11
(lp45678
sg13
S'com.google.common.collect.testing.testers.ListAddAtIndexTester'
p45679
sg15
(lp45680
sg17
(lp45681
sg19
(lp45682
sg21
I0
sba(iArchitecture
Entity
p45683
(dp45684
g11
(lp45685
sg13
S'com.google.common.collect.testing.testers.ListAddTester'
p45686
sg15
(lp45687
sg17
(lp45688
sg19
(lp45689
sg21
I0
sba(iArchitecture
Entity
p45690
(dp45691
g11
(lp45692
sg13
S'com.google.common.collect.testing.testers.ListCreationTester'
p45693
sg15
(lp45694
sg17
(lp45695
sg19
(lp45696
sg21
I0
sba(iArchitecture
Entity
p45697
(dp45698
g11
(lp45699
sg13
S'com.google.common.collect.testing.testers.ListEqualsTester'
p45700
sg15
(lp45701
sg17
(lp45702
sg19
(lp45703
sg21
I0
sba(iArchitecture
Entity
p45704
(dp45705
g11
(lp45706
sg13
S'com.google.common.collect.testing.testers.ListGetTester'
p45707
sg15
(lp45708
sg17
(lp45709
sg19
(lp45710
sg21
I0
sba(iArchitecture
Entity
p45711
(dp45712
g11
(lp45713
sg13
S'com.google.common.collect.testing.testers.ListHashCodeTester'
p45714
sg15
(lp45715
sg17
(lp45716
sg19
(lp45717
sg21
I0
sba(iArchitecture
Entity
p45718
(dp45719
g11
(lp45720
sg13
S'com.google.common.collect.testing.testers.ListIndexOfTester'
p45721
sg15
(lp45722
sg17
(lp45723
sg19
(lp45724
sg21
I0
sba(iArchitecture
Entity
p45725
(dp45726
g11
(lp45727
sg13
S'com.google.common.collect.testing.testers.ListLastIndexOfTester'
p45728
sg15
(lp45729
sg17
(lp45730
sg19
(lp45731
sg21
I0
sba(iArchitecture
Entity
p45732
(dp45733
g11
(lp45734
sg13
S'com.google.common.collect.testing.testers.ListRemoveAllTester'
p45735
sg15
(lp45736
sg17
(lp45737
sg19
(lp45738
sg21
I0
sba(iArchitecture
Entity
p45739
(dp45740
g11
(lp45741
sg13
S'com.google.common.collect.testing.testers.ListRemoveAtIndexTester'
p45742
sg15
(lp45743
sg17
(lp45744
sg19
(lp45745
sg21
I0
sba(iArchitecture
Entity
p45746
(dp45747
g11
(lp45748
sg13
S'com.google.common.collect.testing.testers.ListRemoveTester'
p45749
sg15
(lp45750
sg17
(lp45751
sg19
(lp45752
sg21
I0
sba(iArchitecture
Entity
p45753
(dp45754
g11
(lp45755
sg13
S'com.google.common.collect.testing.testers.ListRetainAllTester'
p45756
sg15
(lp45757
sg17
(lp45758
sg19
(lp45759
sg21
I0
sba(iArchitecture
Entity
p45760
(dp45761
g11
(lp45762
sg13
S'com.google.common.collect.testing.testers.ListSetTester'
p45763
sg15
(lp45764
sg17
(lp45765
sg19
(lp45766
sg21
I0
sba(iArchitecture
Entity
p45767
(dp45768
g11
(lp45769
sg13
S'com.google.common.collect.testing.testers.ListSubListTester'
p45770
sg15
(lp45771
sg17
(lp45772
sg19
(lp45773
sg21
I0
sba(iArchitecture
Entity
p45774
(dp45775
g11
(lp45776
sg13
S'com.google.common.collect.testing.testers.ListToArrayTester'
p45777
sg15
(lp45778
sg17
(lp45779
sg19
(lp45780
sg21
I0
sba(iArchitecture
Entity
p45781
(dp45782
g11
(lp45783
sg13
S'com.google.common.collect.testing.testers.MapClearTester'
p45784
sg15
(lp45785
sg17
(lp45786
sg19
(lp45787
sg21
I0
sba(iArchitecture
Entity
p45788
(dp45789
g11
(lp45790
sg13
S'com.google.common.collect.testing.testers.MapContainsKeyTester'
p45791
sg15
(lp45792
sg17
(lp45793
sg19
(lp45794
sg21
I0
sba(iArchitecture
Entity
p45795
(dp45796
g11
(lp45797
sg13
S'com.google.common.collect.testing.testers.MapContainsValueTester'
p45798
sg15
(lp45799
sg17
(lp45800
sg19
(lp45801
sg21
I0
sba(iArchitecture
Entity
p45802
(dp45803
g11
(lp45804
sg13
S'com.google.common.collect.testing.testers.MapCreationTester'
p45805
sg15
(lp45806
sg17
(lp45807
sg19
(lp45808
sg21
I0
sba(iArchitecture
Entity
p45809
(dp45810
g11
(lp45811
sg13
S'com.google.common.collect.testing.testers.MapEqualsTester'
p45812
sg15
(lp45813
sg17
(lp45814
sg19
(lp45815
sg21
I0
sba(iArchitecture
Entity
p45816
(dp45817
g11
(lp45818
sg13
S'com.google.common.collect.testing.testers.MapGetTester'
p45819
sg15
(lp45820
sg17
(lp45821
sg19
(lp45822
sg21
I0
sba(iArchitecture
Entity
p45823
(dp45824
g11
(lp45825
sg13
S'com.google.common.collect.testing.testers.MapHashCodeTester'
p45826
sg15
(lp45827
sg17
(lp45828
sg19
(lp45829
sg21
I0
sba(iArchitecture
Entity
p45830
(dp45831
g11
(lp45832
sg13
S'com.google.common.collect.testing.testers.MapIsEmptyTester'
p45833
sg15
(lp45834
sg17
(lp45835
sg19
(lp45836
sg21
I0
sba(iArchitecture
Entity
p45837
(dp45838
g11
(lp45839
sg13
S'com.google.common.collect.testing.testers.MapPutAllTester'
p45840
sg15
(lp45841
sg17
(lp45842
sg19
(lp45843
sg21
I0
sba(iArchitecture
Entity
p45844
(dp45845
g11
(lp45846
sg13
S'com.google.common.collect.testing.testers.MapPutTester'
p45847
sg15
(lp45848
sg17
(lp45849
sg19
(lp45850
sg21
I0
sba(iArchitecture
Entity
p45851
(dp45852
g11
(lp45853
sg13
S'com.google.common.collect.testing.testers.MapRemoveTester'
p45854
sg15
(lp45855
sg17
(lp45856
sg19
(lp45857
sg21
I0
sba(iArchitecture
Entity
p45858
(dp45859
g11
(lp45860
sg13
S'com.google.common.collect.testing.testers.MapSerializationTester'
p45861
sg15
(lp45862
sg17
(lp45863
sg19
(lp45864
sg21
I0
sba(iArchitecture
Entity
p45865
(dp45866
g11
(lp45867
sg13
S'com.google.common.collect.testing.testers.MapSizeTester'
p45868
sg15
(lp45869
sg17
(lp45870
sg19
(lp45871
sg21
I0
sba(iArchitecture
Entity
p45872
(dp45873
g11
(lp45874
sg13
S'com.google.common.collect.testing.testers.MapToStringTester'
p45875
sg15
(lp45876
sg17
(lp45877
sg19
(lp45878
sg21
I0
sba(iArchitecture
Entity
p45879
(dp45880
g11
(lp45881
sg13
S'com.google.common.collect.testing.testers.NavigableMapNavigationTester'
p45882
sg15
(lp45883
sg17
(lp45884
sg19
(lp45885
sg21
I0
sba(iArchitecture
Entity
p45886
(dp45887
g11
(lp45888
sg13
S'com.google.common.collect.testing.testers.NavigableSetNavigationTester'
p45889
sg15
(lp45890
sg17
(lp45891
sg19
(lp45892
sg21
I0
sba(iArchitecture
Entity
p45893
(dp45894
g11
(lp45895
sg13
S'com.google.common.collect.testing.testers.Platform'
p45896
sg15
(lp45897
sg17
(lp45898
sg19
(lp45899
sg21
I0
sba(iArchitecture
Entity
p45900
(dp45901
g11
(lp45902
sg13
S'com.google.common.collect.testing.testers.QueueElementTester'
p45903
sg15
(lp45904
sg17
(lp45905
sg19
(lp45906
sg21
I0
sba(iArchitecture
Entity
p45907
(dp45908
g11
(lp45909
sg13
S'com.google.common.collect.testing.testers.QueueOfferTester'
p45910
sg15
(lp45911
sg17
(lp45912
sg19
(lp45913
sg21
I0
sba(iArchitecture
Entity
p45914
(dp45915
g11
(lp45916
sg13
S'com.google.common.collect.testing.testers.QueuePeekTester'
p45917
sg15
(lp45918
sg17
(lp45919
sg19
(lp45920
sg21
I0
sba(iArchitecture
Entity
p45921
(dp45922
g11
(lp45923
sg13
S'com.google.common.collect.testing.testers.QueuePollTester'
p45924
sg15
(lp45925
sg17
(lp45926
sg19
(lp45927
sg21
I0
sba(iArchitecture
Entity
p45928
(dp45929
g11
(lp45930
sg13
S'com.google.common.collect.testing.testers.QueueRemoveTester'
p45931
sg15
(lp45932
sg17
(lp45933
sg19
(lp45934
sg21
I0
sba(iArchitecture
Entity
p45935
(dp45936
g11
(lp45937
sg13
S'com.google.common.collect.testing.testers.SetAddAllTester'
p45938
sg15
(lp45939
sg17
(lp45940
sg19
(lp45941
sg21
I0
sba(iArchitecture
Entity
p45942
(dp45943
g11
(lp45944
sg13
S'com.google.common.collect.testing.testers.SetAddTester'
p45945
sg15
(lp45946
sg17
(lp45947
sg19
(lp45948
sg21
I0
sba(iArchitecture
Entity
p45949
(dp45950
g11
(lp45951
sg13
S'com.google.common.collect.testing.testers.SetEqualsTester'
p45952
sg15
(lp45953
sg17
(lp45954
sg19
(lp45955
sg21
I0
sba(iArchitecture
Entity
p45956
(dp45957
g11
(lp45958
sg13
S'com.google.common.collect.testing.testers.SetHashCodeTester'
p45959
sg15
(lp45960
sg17
(lp45961
sg19
(lp45962
sg21
I0
sba(iArchitecture
Entity
p45963
(dp45964
g11
(lp45965
sg13
S'com.google.common.collect.testing.testers.SetRemoveTester'
p45966
sg15
(lp45967
sg17
(lp45968
sg19
(lp45969
sg21
I0
sba(iArchitecture
Entity
p45970
(dp45971
g11
(lp45972
sg13
S'com.google.common.collect.testing.testers.SortedSetNavigationTester'
p45973
sg15
(lp45974
sg17
(lp45975
sg19
(lp45976
sg21
I0
sba(iArchitecture
Entity
p45977
(dp45978
g11
(lp45979
sg13
S'com.google.common.util.concurrent.testing.MockFutureListener'
p45980
sg15
(lp45981
sg17
(lp45982
sg19
(lp45983
sg21
I0
sba(iArchitecture
Entity
p45984
(dp45985
g11
(lp45986
sg13
S'junit.framework.Assert'
p45987
sg15
(lp45988
sg17
(lp45989
sg19
(lp45990
sg21
I0
sba(iArchitecture
Entity
p45991
(dp45992
g11
(lp45993
sg13
S'junit.framework.Test'
p45994
sg15
(lp45995
sg17
(lp45996
sg19
(lp45997
sg21
I0
sba(iArchitecture
Entity
p45998
(dp45999
g11
(lp46000
sg13
S'junit.framework.TestCase'
p46001
sg15
(lp46002
sg17
(lp46003
sg19
(lp46004
sg21
I0
sbasg1055
(lp46005
g44258
ag44265
ag44272
ag44279
ag44286
ag44293
ag44300
ag44307
ag44314
ag44321
ag44328
ag44335
ag44342
ag44349
ag44356
ag44363
ag44370
ag44377
ag44384
ag44391
ag44398
ag44405
ag44412
ag44419
ag44426
ag44433
ag44440
ag44447
ag44454
ag44461
ag44468
ag44475
ag44482
ag44489
ag44496
ag44503
ag44510
ag44517
ag44524
ag44531
ag44538
ag44545
ag44552
ag44559
ag44566
ag44573
ag44580
ag44587
ag44594
ag44601
ag44608
ag44615
ag44622
ag44629
ag44636
ag44643
ag44650
ag44657
ag44664
ag44671
ag44678
ag44685
ag44692
ag44699
ag44706
ag44713
ag44720
ag44727
ag44734
ag44741
ag44748
ag44755
ag44762
ag44769
ag44776
ag44783
ag44790
ag44797
ag44804
ag44811
ag44818
ag44825
ag44832
ag44839
ag44846
ag44853
ag44860
ag44867
ag44874
ag44881
ag44888
ag44895
ag44902
ag44909
ag44916
ag44923
ag44930
ag44937
ag44944
ag44951
ag44958
ag44965
ag44972
ag44979
ag44986
ag44993
ag45000
ag45007
ag45014
ag45021
ag45028
ag45035
ag45042
ag45049
ag45056
ag45063
ag45070
ag45077
ag45084
ag45091
ag45098
ag45105
ag45112
ag45119
ag45126
ag45133
ag45140
ag45147
ag45154
ag45161
ag45168
ag45175
ag45182
ag45189
ag45196
ag45203
ag45210
ag45217
ag45224
ag45231
ag45238
ag45245
ag45252
ag45259
ag45266
ag45273
ag45280
ag45287
ag45294
ag45301
ag45308
ag45315
ag45322
ag45329
ag45336
ag45343
ag45350
ag45357
ag45364
ag45371
ag45378
ag45385
ag45392
ag45399
ag45406
ag45413
ag45420
ag45427
ag45434
ag45441
ag45448
ag45455
ag45462
ag45469
ag45476
ag45483
ag45490
ag45497
ag45504
ag45511
ag45518
ag45525
ag45532
ag45539
ag45546
ag45553
ag45560
ag45567
ag45574
ag45581
ag45588
ag45595
ag45602
ag45609
ag45616
ag45623
ag45630
ag45637
ag45644
ag45651
ag45658
ag45665
ag45672
ag45679
ag45686
ag45693
ag45700
ag45707
ag45714
ag45721
ag45728
ag45735
ag45742
ag45749
ag45756
ag45763
ag45770
ag45777
ag45784
ag45791
ag45798
ag45805
ag45812
ag45819
ag45826
ag45833
ag45840
ag45847
ag45854
ag45861
ag45868
ag45875
ag45882
ag45889
ag45896
ag45903
ag45910
ag45917
ag45924
ag45931
ag45938
ag45945
ag45952
ag45959
ag45966
ag45973
ag45980
ag45987
ag45994
ag46001
asg21
I0
sg1057
S'com.google.common.collect.testing.ss'
p46006
sba(iArchitecture
Cluster
p46007
(dp46008
g7
(lp46009
(iArchitecture
Entity
p46010
(dp46011
g11
(lp46012
sg13
S'com.google.common.collect.testing.ListIteratorTester'
p46013
sg15
(lp46014
sg17
(lp46015
sg19
(lp46016
sg21
I0
sba(iArchitecture
Entity
p46017
(dp46018
g11
(lp46019
sg13
S'com.google.common.collect.testing.testers.CollectionIteratorTester'
p46020
sg15
(lp46021
sg17
(lp46022
sg19
(lp46023
sg21
I0
sba(iArchitecture
Entity
p46024
(dp46025
g11
(lp46026
sg13
S'com.google.common.collect.testing.testers.CollectionIteratorTester$1'
p46027
sg15
(lp46028
sg17
(lp46029
sg19
(lp46030
sg21
I0
sba(iArchitecture
Entity
p46031
(dp46032
g11
(lp46033
sg13
S'com.google.common.collect.testing.testers.CollectionRetainAllTester'
p46034
sg15
(lp46035
sg17
(lp46036
sg19
(lp46037
sg21
I0
sba(iArchitecture
Entity
p46038
(dp46039
g11
(lp46040
sg13
S'com.google.common.collect.testing.testers.CollectionRetainAllTester$1'
p46041
sg15
(lp46042
sg17
(lp46043
sg19
(lp46044
sg21
I0
sba(iArchitecture
Entity
p46045
(dp46046
g11
(lp46047
sg13
S'com.google.common.collect.testing.testers.CollectionRetainAllTester$Target'
p46048
sg15
(lp46049
sg17
(lp46050
sg19
(lp46051
sg21
I0
sba(iArchitecture
Entity
p46052
(dp46053
g11
(lp46054
sg13
S'com.google.common.collect.testing.testers.ListListIteratorTester'
p46055
sg15
(lp46056
sg17
(lp46057
sg19
(lp46058
sg21
I0
sba(iArchitecture
Entity
p46059
(dp46060
g11
(lp46061
sg13
S'com.google.common.collect.testing.testers.ListListIteratorTester$1'
p46062
sg15
(lp46063
sg17
(lp46064
sg19
(lp46065
sg21
I0
sba(iArchitecture
Entity
p46066
(dp46067
g11
(lp46068
sg13
S'com.google.common.collect.testing.testers.MapEntrySetTester'
p46069
sg15
(lp46070
sg17
(lp46071
sg19
(lp46072
sg21
I0
sba(iArchitecture
Entity
p46073
(dp46074
g11
(lp46075
sg13
S'com.google.common.collect.testing.testers.MapEntrySetTester$IncomparableType'
p46076
sg15
(lp46077
sg17
(lp46078
sg19
(lp46079
sg21
I0
sba(iArchitecture
Entity
p46080
(dp46081
g11
(lp46082
sg13
S'com.google.common.collect.testing.testers.SortedMapNavigationTester'
p46083
sg15
(lp46084
sg17
(lp46085
sg19
(lp46086
sg21
I0
sba(iArchitecture
Entity
p46087
(dp46088
g11
(lp46089
sg13
S'com.google.common.collect.testing.testers.SortedMapNavigationTester$1'
p46090
sg15
(lp46091
sg17
(lp46092
sg19
(lp46093
sg21
I0
sbasg1055
(lp46094
g46013
ag46020
ag46027
ag46034
ag46041
ag46048
ag46055
ag46062
ag46069
ag46076
ag46083
ag46090
asg21
I0
sg1057
S'com.google.common.collect.testing.testers.ss'
p46095
sba(iArchitecture
Cluster
p46096
(dp46097
g7
(lp46098
(iArchitecture
Entity
p46099
(dp46100
g11
(lp46101
sg13
S'com.google.common.escape.ArrayBasedCharEscaper'
p46102
sg15
(lp46103
sg17
(lp46104
sg19
(lp46105
sg21
I0
sba(iArchitecture
Entity
p46106
(dp46107
g11
(lp46108
sg13
S'com.google.common.escape.ArrayBasedEscaperMap'
p46109
sg15
(lp46110
sg17
(lp46111
sg19
(lp46112
sg21
I0
sba(iArchitecture
Entity
p46113
(dp46114
g11
(lp46115
sg13
S'com.google.common.escape.CharEscaper'
p46116
sg15
(lp46117
sg17
(lp46118
sg19
(lp46119
sg21
I0
sba(iArchitecture
Entity
p46120
(dp46121
g11
(lp46122
sg13
S'com.google.common.escape.CharEscaperBuilder'
p46123
sg15
(lp46124
sg17
(lp46125
sg19
(lp46126
sg21
I0
sba(iArchitecture
Entity
p46127
(dp46128
g11
(lp46129
sg13
S'com.google.common.escape.CharEscaperBuilder$CharArrayDecorator'
p46130
sg15
(lp46131
sg17
(lp46132
sg19
(lp46133
sg21
I0
sba(iArchitecture
Entity
p46134
(dp46135
g11
(lp46136
sg13
S'com.google.common.escape.Escaper'
p46137
sg15
(lp46138
sg17
(lp46139
sg19
(lp46140
sg21
I0
sba(iArchitecture
Entity
p46141
(dp46142
g11
(lp46143
sg13
S'com.google.common.escape.Escaper$1'
p46144
sg15
(lp46145
sg17
(lp46146
sg19
(lp46147
sg21
I0
sba(iArchitecture
Entity
p46148
(dp46149
g11
(lp46150
sg13
S'com.google.common.escape.Escapers'
p46151
sg15
(lp46152
sg17
(lp46153
sg19
(lp46154
sg21
I0
sba(iArchitecture
Entity
p46155
(dp46156
g11
(lp46157
sg13
S'com.google.common.escape.Escapers$1'
p46158
sg15
(lp46159
sg17
(lp46160
sg19
(lp46161
sg21
I0
sba(iArchitecture
Entity
p46162
(dp46163
g11
(lp46164
sg13
S'com.google.common.escape.Escapers$2'
p46165
sg15
(lp46166
sg17
(lp46167
sg19
(lp46168
sg21
I0
sba(iArchitecture
Entity
p46169
(dp46170
g11
(lp46171
sg13
S'com.google.common.escape.Escapers$Builder'
p46172
sg15
(lp46173
sg17
(lp46174
sg19
(lp46175
sg21
I0
sba(iArchitecture
Entity
p46176
(dp46177
g11
(lp46178
sg13
S'com.google.common.escape.Escapers$Builder$1'
p46179
sg15
(lp46180
sg17
(lp46181
sg19
(lp46182
sg21
I0
sba(iArchitecture
Entity
p46183
(dp46184
g11
(lp46185
sg13
S'com.google.common.escape.Platform'
p46186
sg15
(lp46187
sg17
(lp46188
sg19
(lp46189
sg21
I0
sba(iArchitecture
Entity
p46190
(dp46191
g11
(lp46192
sg13
S'com.google.common.escape.Platform$1'
p46193
sg15
(lp46194
sg17
(lp46195
sg19
(lp46196
sg21
I0
sba(iArchitecture
Entity
p46197
(dp46198
g11
(lp46199
sg13
S'com.google.common.escape.UnicodeEscaper'
p46200
sg15
(lp46201
sg17
(lp46202
sg19
(lp46203
sg21
I0
sba(iArchitecture
Entity
p46204
(dp46205
g11
(lp46206
sg13
S'com.google.common.escape.testing.EscaperAsserts'
p46207
sg15
(lp46208
sg17
(lp46209
sg19
(lp46210
sg21
I0
sba(iArchitecture
Entity
p46211
(dp46212
g11
(lp46213
sg13
S'com.google.common.html.HtmlEscapers'
p46214
sg15
(lp46215
sg17
(lp46216
sg19
(lp46217
sg21
I0
sba(iArchitecture
Entity
p46218
(dp46219
g11
(lp46220
sg13
S'com.google.common.xml.XmlEscapers'
p46221
sg15
(lp46222
sg17
(lp46223
sg19
(lp46224
sg21
I0
sbasg1055
(lp46225
g46102
ag46109
ag46116
ag46123
ag46130
ag46137
ag46144
ag46151
ag46158
ag46165
ag46172
ag46179
ag46186
ag46193
ag46200
ag46207
ag46214
ag46221
asg21
I0
sg1057
S'com.google.common.escape.ss'
p46226
sba(iArchitecture
Cluster
p46227
(dp46228
g7
(lp46229
(iArchitecture
Entity
p46230
(dp46231
g11
(lp46232
sg13
S'com.google.common.eventbus.AllowConcurrentEvents'
p46233
sg15
(lp46234
sg17
(lp46235
sg19
(lp46236
sg21
I0
sba(iArchitecture
Entity
p46237
(dp46238
g11
(lp46239
sg13
S'com.google.common.eventbus.AsyncEventBus'
p46240
sg15
(lp46241
sg17
(lp46242
sg19
(lp46243
sg21
I0
sba(iArchitecture
Entity
p46244
(dp46245
g11
(lp46246
sg13
S'com.google.common.eventbus.DeadEvent'
p46247
sg15
(lp46248
sg17
(lp46249
sg19
(lp46250
sg21
I0
sba(iArchitecture
Entity
p46251
(dp46252
g11
(lp46253
sg13
S'com.google.common.eventbus.Dispatcher'
p46254
sg15
(lp46255
sg17
(lp46256
sg19
(lp46257
sg21
I0
sba(iArchitecture
Entity
p46258
(dp46259
g11
(lp46260
sg13
S'com.google.common.eventbus.Dispatcher$1'
p46261
sg15
(lp46262
sg17
(lp46263
sg19
(lp46264
sg21
I0
sba(iArchitecture
Entity
p46265
(dp46266
g11
(lp46267
sg13
S'com.google.common.eventbus.Dispatcher$ImmediateDispatcher'
p46268
sg15
(lp46269
sg17
(lp46270
sg19
(lp46271
sg21
I0
sba(iArchitecture
Entity
p46272
(dp46273
g11
(lp46274
sg13
S'com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher'
p46275
sg15
(lp46276
sg17
(lp46277
sg19
(lp46278
sg21
I0
sba(iArchitecture
Entity
p46279
(dp46280
g11
(lp46281
sg13
S'com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher$EventWithSubscriber'
p46282
sg15
(lp46283
sg17
(lp46284
sg19
(lp46285
sg21
I0
sba(iArchitecture
Entity
p46286
(dp46287
g11
(lp46288
sg13
S'com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher'
p46289
sg15
(lp46290
sg17
(lp46291
sg19
(lp46292
sg21
I0
sba(iArchitecture
Entity
p46293
(dp46294
g11
(lp46295
sg13
S'com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$1'
p46296
sg15
(lp46297
sg17
(lp46298
sg19
(lp46299
sg21
I0
sba(iArchitecture
Entity
p46300
(dp46301
g11
(lp46302
sg13
S'com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$2'
p46303
sg15
(lp46304
sg17
(lp46305
sg19
(lp46306
sg21
I0
sba(iArchitecture
Entity
p46307
(dp46308
g11
(lp46309
sg13
S'com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$Event'
p46310
sg15
(lp46311
sg17
(lp46312
sg19
(lp46313
sg21
I0
sba(iArchitecture
Entity
p46314
(dp46315
g11
(lp46316
sg13
S'com.google.common.eventbus.EventBus'
p46317
sg15
(lp46318
sg17
(lp46319
sg19
(lp46320
sg21
I0
sba(iArchitecture
Entity
p46321
(dp46322
g11
(lp46323
sg13
S'com.google.common.eventbus.EventBus$LoggingHandler'
p46324
sg15
(lp46325
sg17
(lp46326
sg19
(lp46327
sg21
I0
sba(iArchitecture
Entity
p46328
(dp46329
g11
(lp46330
sg13
S'com.google.common.eventbus.Subscribe'
p46331
sg15
(lp46332
sg17
(lp46333
sg19
(lp46334
sg21
I0
sba(iArchitecture
Entity
p46335
(dp46336
g11
(lp46337
sg13
S'com.google.common.eventbus.Subscriber'
p46338
sg15
(lp46339
sg17
(lp46340
sg19
(lp46341
sg21
I0
sba(iArchitecture
Entity
p46342
(dp46343
g11
(lp46344
sg13
S'com.google.common.eventbus.Subscriber$1'
p46345
sg15
(lp46346
sg17
(lp46347
sg19
(lp46348
sg21
I0
sba(iArchitecture
Entity
p46349
(dp46350
g11
(lp46351
sg13
S'com.google.common.eventbus.Subscriber$SynchronizedSubscriber'
p46352
sg15
(lp46353
sg17
(lp46354
sg19
(lp46355
sg21
I0
sba(iArchitecture
Entity
p46356
(dp46357
g11
(lp46358
sg13
S'com.google.common.eventbus.SubscriberExceptionContext'
p46359
sg15
(lp46360
sg17
(lp46361
sg19
(lp46362
sg21
I0
sba(iArchitecture
Entity
p46363
(dp46364
g11
(lp46365
sg13
S'com.google.common.eventbus.SubscriberExceptionHandler'
p46366
sg15
(lp46367
sg17
(lp46368
sg19
(lp46369
sg21
I0
sba(iArchitecture
Entity
p46370
(dp46371
g11
(lp46372
sg13
S'com.google.common.eventbus.SubscriberRegistry'
p46373
sg15
(lp46374
sg17
(lp46375
sg19
(lp46376
sg21
I0
sba(iArchitecture
Entity
p46377
(dp46378
g11
(lp46379
sg13
S'com.google.common.eventbus.SubscriberRegistry$1'
p46380
sg15
(lp46381
sg17
(lp46382
sg19
(lp46383
sg21
I0
sba(iArchitecture
Entity
p46384
(dp46385
g11
(lp46386
sg13
S'com.google.common.eventbus.SubscriberRegistry$2'
p46387
sg15
(lp46388
sg17
(lp46389
sg19
(lp46390
sg21
I0
sba(iArchitecture
Entity
p46391
(dp46392
g11
(lp46393
sg13
S'com.google.common.eventbus.SubscriberRegistry$MethodIdentifier'
p46394
sg15
(lp46395
sg17
(lp46396
sg19
(lp46397
sg21
I0
sba(iArchitecture
Entity
p46398
(dp46399
g11
(lp46400
sg13
S'com.google.common.reflect.TypeToken$ClassSet'
p46401
sg15
(lp46402
sg17
(lp46403
sg19
(lp46404
sg21
I0
sba(iArchitecture
Entity
p46405
(dp46406
g11
(lp46407
sg13
S'com.google.common.reflect.TypeToken$TypeSet'
p46408
sg15
(lp46409
sg17
(lp46410
sg19
(lp46411
sg21
I0
sbasg1055
(lp46412
g46233
ag46240
ag46247
ag46254
ag46261
ag46268
ag46275
ag46282
ag46289
ag46296
ag46303
ag46310
ag46317
ag46324
ag46331
ag46338
ag46345
ag46352
ag46359
ag46366
ag46373
ag46380
ag46387
ag46394
ag46401
ag46408
asg21
I0
sg1057
S'com.google.common.eventbus.ss'
p46413
sba(iArchitecture
Cluster
p46414
(dp46415
g7
(lp46416
(iArchitecture
Entity
p46417
(dp46418
g11
(lp46419
sg13
S'com.google.common.graph.AbstractDirectedNetworkConnections'
p46420
sg15
(lp46421
sg17
(lp46422
sg19
(lp46423
sg21
I0
sba(iArchitecture
Entity
p46424
(dp46425
g11
(lp46426
sg13
S'com.google.common.graph.AbstractDirectedNetworkConnections$1'
p46427
sg15
(lp46428
sg17
(lp46429
sg19
(lp46430
sg21
I0
sba(iArchitecture
Entity
p46431
(dp46432
g11
(lp46433
sg13
S'com.google.common.graph.AbstractGraph'
p46434
sg15
(lp46435
sg17
(lp46436
sg19
(lp46437
sg21
I0
sba(iArchitecture
Entity
p46438
(dp46439
g11
(lp46440
sg13
S'com.google.common.graph.AbstractGraph$1'
p46441
sg15
(lp46442
sg17
(lp46443
sg19
(lp46444
sg21
I0
sba(iArchitecture
Entity
p46445
(dp46446
g11
(lp46447
sg13
S'com.google.common.graph.AbstractGraphBuilder'
p46448
sg15
(lp46449
sg17
(lp46450
sg19
(lp46451
sg21
I0
sba(iArchitecture
Entity
p46452
(dp46453
g11
(lp46454
sg13
S'com.google.common.graph.AbstractNetwork'
p46455
sg15
(lp46456
sg17
(lp46457
sg19
(lp46458
sg21
I0
sba(iArchitecture
Entity
p46459
(dp46460
g11
(lp46461
sg13
S'com.google.common.graph.AbstractNetwork$1'
p46462
sg15
(lp46463
sg17
(lp46464
sg19
(lp46465
sg21
I0
sba(iArchitecture
Entity
p46466
(dp46467
g11
(lp46468
sg13
S'com.google.common.graph.AbstractNetwork$1$1'
p46469
sg15
(lp46470
sg17
(lp46471
sg19
(lp46472
sg21
I0
sba(iArchitecture
Entity
p46473
(dp46474
g11
(lp46475
sg13
S'com.google.common.graph.AbstractNetwork$1$1$1'
p46476
sg15
(lp46477
sg17
(lp46478
sg19
(lp46479
sg21
I0
sba(iArchitecture
Entity
p46480
(dp46481
g11
(lp46482
sg13
S'com.google.common.graph.AbstractNetwork$2'
p46483
sg15
(lp46484
sg17
(lp46485
sg19
(lp46486
sg21
I0
sba(iArchitecture
Entity
p46487
(dp46488
g11
(lp46489
sg13
S'com.google.common.graph.AbstractUndirectedNetworkConnections'
p46490
sg15
(lp46491
sg17
(lp46492
sg19
(lp46493
sg21
I0
sba(iArchitecture
Entity
p46494
(dp46495
g11
(lp46496
sg13
S'com.google.common.graph.AbstractValueGraph'
p46497
sg15
(lp46498
sg17
(lp46499
sg19
(lp46500
sg21
I0
sba(iArchitecture
Entity
p46501
(dp46502
g11
(lp46503
sg13
S'com.google.common.graph.AbstractValueGraph$1'
p46504
sg15
(lp46505
sg17
(lp46506
sg19
(lp46507
sg21
I0
sba(iArchitecture
Entity
p46508
(dp46509
g11
(lp46510
sg13
S'com.google.common.graph.ConfigurableMutableGraph'
p46511
sg15
(lp46512
sg17
(lp46513
sg19
(lp46514
sg21
I0
sba(iArchitecture
Entity
p46515
(dp46516
g11
(lp46517
sg13
S'com.google.common.graph.ConfigurableMutableNetwork'
p46518
sg15
(lp46519
sg17
(lp46520
sg19
(lp46521
sg21
I0
sba(iArchitecture
Entity
p46522
(dp46523
g11
(lp46524
sg13
S'com.google.common.graph.ConfigurableMutableValueGraph'
p46525
sg15
(lp46526
sg17
(lp46527
sg19
(lp46528
sg21
I0
sba(iArchitecture
Entity
p46529
(dp46530
g11
(lp46531
sg13
S'com.google.common.graph.ConfigurableNetwork'
p46532
sg15
(lp46533
sg17
(lp46534
sg19
(lp46535
sg21
I0
sba(iArchitecture
Entity
p46536
(dp46537
g11
(lp46538
sg13
S'com.google.common.graph.ConfigurableValueGraph'
p46539
sg15
(lp46540
sg17
(lp46541
sg19
(lp46542
sg21
I0
sba(iArchitecture
Entity
p46543
(dp46544
g11
(lp46545
sg13
S'com.google.common.graph.DirectedGraphConnections'
p46546
sg15
(lp46547
sg17
(lp46548
sg19
(lp46549
sg21
I0
sba(iArchitecture
Entity
p46550
(dp46551
g11
(lp46552
sg13
S'com.google.common.graph.DirectedGraphConnections$1'
p46553
sg15
(lp46554
sg17
(lp46555
sg19
(lp46556
sg21
I0
sba(iArchitecture
Entity
p46557
(dp46558
g11
(lp46559
sg13
S'com.google.common.graph.DirectedGraphConnections$1$1'
p46560
sg15
(lp46561
sg17
(lp46562
sg19
(lp46563
sg21
I0
sba(iArchitecture
Entity
p46564
(dp46565
g11
(lp46566
sg13
S'com.google.common.graph.DirectedGraphConnections$2'
p46567
sg15
(lp46568
sg17
(lp46569
sg19
(lp46570
sg21
I0
sba(iArchitecture
Entity
p46571
(dp46572
g11
(lp46573
sg13
S'com.google.common.graph.DirectedGraphConnections$2$1'
p46574
sg15
(lp46575
sg17
(lp46576
sg19
(lp46577
sg21
I0
sba(iArchitecture
Entity
p46578
(dp46579
g11
(lp46580
sg13
S'com.google.common.graph.DirectedGraphConnections$PredAndSucc'
p46581
sg15
(lp46582
sg17
(lp46583
sg19
(lp46584
sg21
I0
sba(iArchitecture
Entity
p46585
(dp46586
g11
(lp46587
sg13
S'com.google.common.graph.DirectedMultiNetworkConnections'
p46588
sg15
(lp46589
sg17
(lp46590
sg19
(lp46591
sg21
I0
sba(iArchitecture
Entity
p46592
(dp46593
g11
(lp46594
sg13
S'com.google.common.graph.DirectedMultiNetworkConnections$1'
p46595
sg15
(lp46596
sg17
(lp46597
sg19
(lp46598
sg21
I0
sba(iArchitecture
Entity
p46599
(dp46600
g11
(lp46601
sg13
S'com.google.common.graph.DirectedNetworkConnections'
p46602
sg15
(lp46603
sg17
(lp46604
sg19
(lp46605
sg21
I0
sba(iArchitecture
Entity
p46606
(dp46607
g11
(lp46608
sg13
S'com.google.common.graph.EdgesConnecting'
p46609
sg15
(lp46610
sg17
(lp46611
sg19
(lp46612
sg21
I0
sba(iArchitecture
Entity
p46613
(dp46614
g11
(lp46615
sg13
S'com.google.common.graph.ElementOrder'
p46616
sg15
(lp46617
sg17
(lp46618
sg19
(lp46619
sg21
I0
sba(iArchitecture
Entity
p46620
(dp46621
g11
(lp46622
sg13
S'com.google.common.graph.ElementOrder$1'
p46623
sg15
(lp46624
sg17
(lp46625
sg19
(lp46626
sg21
I0
sba(iArchitecture
Entity
p46627
(dp46628
g11
(lp46629
sg13
S'com.google.common.graph.ElementOrder$Type'
p46630
sg15
(lp46631
sg17
(lp46632
sg19
(lp46633
sg21
I0
sba(iArchitecture
Entity
p46634
(dp46635
g11
(lp46636
sg13
S'com.google.common.graph.EndpointPair'
p46637
sg15
(lp46638
sg17
(lp46639
sg19
(lp46640
sg21
I0
sba(iArchitecture
Entity
p46641
(dp46642
g11
(lp46643
sg13
S'com.google.common.graph.EndpointPair$1'
p46644
sg15
(lp46645
sg17
(lp46646
sg19
(lp46647
sg21
I0
sba(iArchitecture
Entity
p46648
(dp46649
g11
(lp46650
sg13
S'com.google.common.graph.EndpointPair$Ordered'
p46651
sg15
(lp46652
sg17
(lp46653
sg19
(lp46654
sg21
I0
sba(iArchitecture
Entity
p46655
(dp46656
g11
(lp46657
sg13
S'com.google.common.graph.EndpointPair$Unordered'
p46658
sg15
(lp46659
sg17
(lp46660
sg19
(lp46661
sg21
I0
sba(iArchitecture
Entity
p46662
(dp46663
g11
(lp46664
sg13
S'com.google.common.graph.EndpointPairIterator'
p46665
sg15
(lp46666
sg17
(lp46667
sg19
(lp46668
sg21
I0
sba(iArchitecture
Entity
p46669
(dp46670
g11
(lp46671
sg13
S'com.google.common.graph.EndpointPairIterator$1'
p46672
sg15
(lp46673
sg17
(lp46674
sg19
(lp46675
sg21
I0
sba(iArchitecture
Entity
p46676
(dp46677
g11
(lp46678
sg13
S'com.google.common.graph.EndpointPairIterator$Directed'
p46679
sg15
(lp46680
sg17
(lp46681
sg19
(lp46682
sg21
I0
sba(iArchitecture
Entity
p46683
(dp46684
g11
(lp46685
sg13
S'com.google.common.graph.EndpointPairIterator$Undirected'
p46686
sg15
(lp46687
sg17
(lp46688
sg19
(lp46689
sg21
I0
sba(iArchitecture
Entity
p46690
(dp46691
g11
(lp46692
sg13
S'com.google.common.graph.ForwardingGraph'
p46693
sg15
(lp46694
sg17
(lp46695
sg19
(lp46696
sg21
I0
sba(iArchitecture
Entity
p46697
(dp46698
g11
(lp46699
sg13
S'com.google.common.graph.Graph'
p46700
sg15
(lp46701
sg17
(lp46702
sg19
(lp46703
sg21
I0
sba(iArchitecture
Entity
p46704
(dp46705
g11
(lp46706
sg13
S'com.google.common.graph.GraphBuilder'
p46707
sg15
(lp46708
sg17
(lp46709
sg19
(lp46710
sg21
I0
sba(iArchitecture
Entity
p46711
(dp46712
g11
(lp46713
sg13
S'com.google.common.graph.GraphConnections'
p46714
sg15
(lp46715
sg17
(lp46716
sg19
(lp46717
sg21
I0
sba(iArchitecture
Entity
p46718
(dp46719
g11
(lp46720
sg13
S'com.google.common.graph.GraphConstants'
p46721
sg15
(lp46722
sg17
(lp46723
sg19
(lp46724
sg21
I0
sba(iArchitecture
Entity
p46725
(dp46726
g11
(lp46727
sg13
S'com.google.common.graph.GraphConstants$Presence'
p46728
sg15
(lp46729
sg17
(lp46730
sg19
(lp46731
sg21
I0
sba(iArchitecture
Entity
p46732
(dp46733
g11
(lp46734
sg13
S'com.google.common.graph.Graphs'
p46735
sg15
(lp46736
sg17
(lp46737
sg19
(lp46738
sg21
I0
sba(iArchitecture
Entity
p46739
(dp46740
g11
(lp46741
sg13
S'com.google.common.graph.Graphs$NodeVisitState'
p46742
sg15
(lp46743
sg17
(lp46744
sg19
(lp46745
sg21
I0
sba(iArchitecture
Entity
p46746
(dp46747
g11
(lp46748
sg13
S'com.google.common.graph.Graphs$TransposedGraph'
p46749
sg15
(lp46750
sg17
(lp46751
sg19
(lp46752
sg21
I0
sba(iArchitecture
Entity
p46753
(dp46754
g11
(lp46755
sg13
S'com.google.common.graph.Graphs$TransposedNetwork'
p46756
sg15
(lp46757
sg17
(lp46758
sg19
(lp46759
sg21
I0
sba(iArchitecture
Entity
p46760
(dp46761
g11
(lp46762
sg13
S'com.google.common.graph.Graphs$TransposedValueGraph'
p46763
sg15
(lp46764
sg17
(lp46765
sg19
(lp46766
sg21
I0
sba(iArchitecture
Entity
p46767
(dp46768
g11
(lp46769
sg13
S'com.google.common.graph.ImmutableGraph'
p46770
sg15
(lp46771
sg17
(lp46772
sg19
(lp46773
sg21
I0
sba(iArchitecture
Entity
p46774
(dp46775
g11
(lp46776
sg13
S'com.google.common.graph.ImmutableGraph$ValueBackedImpl'
p46777
sg15
(lp46778
sg17
(lp46779
sg19
(lp46780
sg21
I0
sba(iArchitecture
Entity
p46781
(dp46782
g11
(lp46783
sg13
S'com.google.common.graph.ImmutableNetwork'
p46784
sg15
(lp46785
sg17
(lp46786
sg19
(lp46787
sg21
I0
sba(iArchitecture
Entity
p46788
(dp46789
g11
(lp46790
sg13
S'com.google.common.graph.ImmutableNetwork$1'
p46791
sg15
(lp46792
sg17
(lp46793
sg19
(lp46794
sg21
I0
sba(iArchitecture
Entity
p46795
(dp46796
g11
(lp46797
sg13
S'com.google.common.graph.ImmutableNetwork$2'
p46798
sg15
(lp46799
sg17
(lp46800
sg19
(lp46801
sg21
I0
sba(iArchitecture
Entity
p46802
(dp46803
g11
(lp46804
sg13
S'com.google.common.graph.ImmutableNetwork$3'
p46805
sg15
(lp46806
sg17
(lp46807
sg19
(lp46808
sg21
I0
sba(iArchitecture
Entity
p46809
(dp46810
g11
(lp46811
sg13
S'com.google.common.graph.ImmutableNetwork$4'
p46812
sg15
(lp46813
sg17
(lp46814
sg19
(lp46815
sg21
I0
sba(iArchitecture
Entity
p46816
(dp46817
g11
(lp46818
sg13
S'com.google.common.graph.ImmutableValueGraph'
p46819
sg15
(lp46820
sg17
(lp46821
sg19
(lp46822
sg21
I0
sba(iArchitecture
Entity
p46823
(dp46824
g11
(lp46825
sg13
S'com.google.common.graph.ImmutableValueGraph$1'
p46826
sg15
(lp46827
sg17
(lp46828
sg19
(lp46829
sg21
I0
sba(iArchitecture
Entity
p46830
(dp46831
g11
(lp46832
sg13
S'com.google.common.graph.MapIteratorCache'
p46833
sg15
(lp46834
sg17
(lp46835
sg19
(lp46836
sg21
I0
sba(iArchitecture
Entity
p46837
(dp46838
g11
(lp46839
sg13
S'com.google.common.graph.MapIteratorCache$1'
p46840
sg15
(lp46841
sg17
(lp46842
sg19
(lp46843
sg21
I0
sba(iArchitecture
Entity
p46844
(dp46845
g11
(lp46846
sg13
S'com.google.common.graph.MapIteratorCache$1$1'
p46847
sg15
(lp46848
sg17
(lp46849
sg19
(lp46850
sg21
I0
sba(iArchitecture
Entity
p46851
(dp46852
g11
(lp46853
sg13
S'com.google.common.graph.MapRetrievalCache'
p46854
sg15
(lp46855
sg17
(lp46856
sg19
(lp46857
sg21
I0
sba(iArchitecture
Entity
p46858
(dp46859
g11
(lp46860
sg13
S'com.google.common.graph.MapRetrievalCache$CacheEntry'
p46861
sg15
(lp46862
sg17
(lp46863
sg19
(lp46864
sg21
I0
sba(iArchitecture
Entity
p46865
(dp46866
g11
(lp46867
sg13
S'com.google.common.graph.MultiEdgesConnecting'
p46868
sg15
(lp46869
sg17
(lp46870
sg19
(lp46871
sg21
I0
sba(iArchitecture
Entity
p46872
(dp46873
g11
(lp46874
sg13
S'com.google.common.graph.MultiEdgesConnecting$1'
p46875
sg15
(lp46876
sg17
(lp46877
sg19
(lp46878
sg21
I0
sba(iArchitecture
Entity
p46879
(dp46880
g11
(lp46881
sg13
S'com.google.common.graph.MutableGraph'
p46882
sg15
(lp46883
sg17
(lp46884
sg19
(lp46885
sg21
I0
sba(iArchitecture
Entity
p46886
(dp46887
g11
(lp46888
sg13
S'com.google.common.graph.MutableNetwork'
p46889
sg15
(lp46890
sg17
(lp46891
sg19
(lp46892
sg21
I0
sba(iArchitecture
Entity
p46893
(dp46894
g11
(lp46895
sg13
S'com.google.common.graph.MutableValueGraph'
p46896
sg15
(lp46897
sg17
(lp46898
sg19
(lp46899
sg21
I0
sba(iArchitecture
Entity
p46900
(dp46901
g11
(lp46902
sg13
S'com.google.common.graph.Network'
p46903
sg15
(lp46904
sg17
(lp46905
sg19
(lp46906
sg21
I0
sba(iArchitecture
Entity
p46907
(dp46908
g11
(lp46909
sg13
S'com.google.common.graph.NetworkBuilder'
p46910
sg15
(lp46911
sg17
(lp46912
sg19
(lp46913
sg21
I0
sba(iArchitecture
Entity
p46914
(dp46915
g11
(lp46916
sg13
S'com.google.common.graph.NetworkConnections'
p46917
sg15
(lp46918
sg17
(lp46919
sg19
(lp46920
sg21
I0
sba(iArchitecture
Entity
p46921
(dp46922
g11
(lp46923
sg13
S'com.google.common.graph.UndirectedGraphConnections'
p46924
sg15
(lp46925
sg17
(lp46926
sg19
(lp46927
sg21
I0
sba(iArchitecture
Entity
p46928
(dp46929
g11
(lp46930
sg13
S'com.google.common.graph.UndirectedMultiNetworkConnections'
p46931
sg15
(lp46932
sg17
(lp46933
sg19
(lp46934
sg21
I0
sba(iArchitecture
Entity
p46935
(dp46936
g11
(lp46937
sg13
S'com.google.common.graph.UndirectedMultiNetworkConnections$1'
p46938
sg15
(lp46939
sg17
(lp46940
sg19
(lp46941
sg21
I0
sba(iArchitecture
Entity
p46942
(dp46943
g11
(lp46944
sg13
S'com.google.common.graph.UndirectedNetworkConnections'
p46945
sg15
(lp46946
sg17
(lp46947
sg19
(lp46948
sg21
I0
sba(iArchitecture
Entity
p46949
(dp46950
g11
(lp46951
sg13
S'com.google.common.graph.ValueGraph'
p46952
sg15
(lp46953
sg17
(lp46954
sg19
(lp46955
sg21
I0
sba(iArchitecture
Entity
p46956
(dp46957
g11
(lp46958
sg13
S'com.google.common.graph.ValueGraphBuilder'
p46959
sg15
(lp46960
sg17
(lp46961
sg19
(lp46962
sg21
I0
sbasg1055
(lp46963
g46420
ag46427
ag46434
ag46441
ag46448
ag46455
ag46462
ag46469
ag46476
ag46483
ag46490
ag46497
ag46504
ag46511
ag46518
ag46525
ag46532
ag46539
ag46546
ag46553
ag46560
ag46567
ag46574
ag46581
ag46588
ag46595
ag46602
ag46609
ag46616
ag46623
ag46630
ag46637
ag46644
ag46651
ag46658
ag46665
ag46672
ag46679
ag46686
ag46693
ag46700
ag46707
ag46714
ag46721
ag46728
ag46735
ag46742
ag46749
ag46756
ag46763
ag46770
ag46777
ag46784
ag46791
ag46798
ag46805
ag46812
ag46819
ag46826
ag46833
ag46840
ag46847
ag46854
ag46861
ag46868
ag46875
ag46882
ag46889
ag46896
ag46903
ag46910
ag46917
ag46924
ag46931
ag46938
ag46945
ag46952
ag46959
asg21
I0
sg1057
S'com.google.common.graph.ss'
p46964
sba(iArchitecture
Cluster
p46965
(dp46966
g7
(lp46967
(iArchitecture
Entity
p46968
(dp46969
g11
(lp46970
sg13
S'com.google.common.hash.AbstractByteHasher'
p46971
sg15
(lp46972
sg17
(lp46973
sg19
(lp46974
sg21
I0
sba(iArchitecture
Entity
p46975
(dp46976
g11
(lp46977
sg13
S'com.google.common.hash.AbstractCompositeHashFunction'
p46978
sg15
(lp46979
sg17
(lp46980
sg19
(lp46981
sg21
I0
sba(iArchitecture
Entity
p46982
(dp46983
g11
(lp46984
sg13
S'com.google.common.hash.AbstractCompositeHashFunction$1'
p46985
sg15
(lp46986
sg17
(lp46987
sg19
(lp46988
sg21
I0
sba(iArchitecture
Entity
p46989
(dp46990
g11
(lp46991
sg13
S'com.google.common.hash.AbstractHasher'
p46992
sg15
(lp46993
sg17
(lp46994
sg19
(lp46995
sg21
I0
sba(iArchitecture
Entity
p46996
(dp46997
g11
(lp46998
sg13
S'com.google.common.hash.AbstractNonStreamingHashFunction'
p46999
sg15
(lp47000
sg17
(lp47001
sg19
(lp47002
sg21
I0
sba(iArchitecture
Entity
p47003
(dp47004
g11
(lp47005
sg13
S'com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher'
p47006
sg15
(lp47007
sg17
(lp47008
sg19
(lp47009
sg21
I0
sba(iArchitecture
Entity
p47010
(dp47011
g11
(lp47012
sg13
S'com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream'
p47013
sg15
(lp47014
sg17
(lp47015
sg19
(lp47016
sg21
I0
sba(iArchitecture
Entity
p47017
(dp47018
g11
(lp47019
sg13
S'com.google.common.hash.AbstractStreamingHashFunction'
p47020
sg15
(lp47021
sg17
(lp47022
sg19
(lp47023
sg21
I0
sba(iArchitecture
Entity
p47024
(dp47025
g11
(lp47026
sg13
S'com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher'
p47027
sg15
(lp47028
sg17
(lp47029
sg19
(lp47030
sg21
I0
sba(iArchitecture
Entity
p47031
(dp47032
g11
(lp47033
sg13
S'com.google.common.hash.BloomFilter'
p47034
sg15
(lp47035
sg17
(lp47036
sg19
(lp47037
sg21
I0
sba(iArchitecture
Entity
p47038
(dp47039
g11
(lp47040
sg13
S'com.google.common.hash.BloomFilter$1'
p47041
sg15
(lp47042
sg17
(lp47043
sg19
(lp47044
sg21
I0
sba(iArchitecture
Entity
p47045
(dp47046
g11
(lp47047
sg13
S'com.google.common.hash.BloomFilter$SerialForm'
p47048
sg15
(lp47049
sg17
(lp47050
sg19
(lp47051
sg21
I0
sba(iArchitecture
Entity
p47052
(dp47053
g11
(lp47054
sg13
S'com.google.common.hash.BloomFilter$Strategy'
p47055
sg15
(lp47056
sg17
(lp47057
sg19
(lp47058
sg21
I0
sba(iArchitecture
Entity
p47059
(dp47060
g11
(lp47061
sg13
S'com.google.common.hash.BloomFilterStrategies'
p47062
sg15
(lp47063
sg17
(lp47064
sg19
(lp47065
sg21
I0
sba(iArchitecture
Entity
p47066
(dp47067
g11
(lp47068
sg13
S'com.google.common.hash.BloomFilterStrategies$1'
p47069
sg15
(lp47070
sg17
(lp47071
sg19
(lp47072
sg21
I0
sba(iArchitecture
Entity
p47073
(dp47074
g11
(lp47075
sg13
S'com.google.common.hash.BloomFilterStrategies$2'
p47076
sg15
(lp47077
sg17
(lp47078
sg19
(lp47079
sg21
I0
sba(iArchitecture
Entity
p47080
(dp47081
g11
(lp47082
sg13
S'com.google.common.hash.BloomFilterStrategies$BitArray'
p47083
sg15
(lp47084
sg17
(lp47085
sg19
(lp47086
sg21
I0
sba(iArchitecture
Entity
p47087
(dp47088
g11
(lp47089
sg13
S'com.google.common.hash.ChecksumHashFunction'
p47090
sg15
(lp47091
sg17
(lp47092
sg19
(lp47093
sg21
I0
sba(iArchitecture
Entity
p47094
(dp47095
g11
(lp47096
sg13
S'com.google.common.hash.ChecksumHashFunction$1'
p47097
sg15
(lp47098
sg17
(lp47099
sg19
(lp47100
sg21
I0
sba(iArchitecture
Entity
p47101
(dp47102
g11
(lp47103
sg13
S'com.google.common.hash.ChecksumHashFunction$ChecksumHasher'
p47104
sg15
(lp47105
sg17
(lp47106
sg19
(lp47107
sg21
I0
sba(iArchitecture
Entity
p47108
(dp47109
g11
(lp47110
sg13
S'com.google.common.hash.Crc32cHashFunction'
p47111
sg15
(lp47112
sg17
(lp47113
sg19
(lp47114
sg21
I0
sba(iArchitecture
Entity
p47115
(dp47116
g11
(lp47117
sg13
S'com.google.common.hash.Crc32cHashFunction$Crc32cHasher'
p47118
sg15
(lp47119
sg17
(lp47120
sg19
(lp47121
sg21
I0
sba(iArchitecture
Entity
p47122
(dp47123
g11
(lp47124
sg13
S'com.google.common.hash.FarmHashFingerprint64'
p47125
sg15
(lp47126
sg17
(lp47127
sg19
(lp47128
sg21
I0
sba(iArchitecture
Entity
p47129
(dp47130
g11
(lp47131
sg13
S'com.google.common.hash.Funnel'
p47132
sg15
(lp47133
sg17
(lp47134
sg19
(lp47135
sg21
I0
sba(iArchitecture
Entity
p47136
(dp47137
g11
(lp47138
sg13
S'com.google.common.hash.Funnels'
p47139
sg15
(lp47140
sg17
(lp47141
sg19
(lp47142
sg21
I0
sba(iArchitecture
Entity
p47143
(dp47144
g11
(lp47145
sg13
S'com.google.common.hash.Funnels$ByteArrayFunnel'
p47146
sg15
(lp47147
sg17
(lp47148
sg19
(lp47149
sg21
I0
sba(iArchitecture
Entity
p47150
(dp47151
g11
(lp47152
sg13
S'com.google.common.hash.Funnels$IntegerFunnel'
p47153
sg15
(lp47154
sg17
(lp47155
sg19
(lp47156
sg21
I0
sba(iArchitecture
Entity
p47157
(dp47158
g11
(lp47159
sg13
S'com.google.common.hash.Funnels$LongFunnel'
p47160
sg15
(lp47161
sg17
(lp47162
sg19
(lp47163
sg21
I0
sba(iArchitecture
Entity
p47164
(dp47165
g11
(lp47166
sg13
S'com.google.common.hash.Funnels$SequentialFunnel'
p47167
sg15
(lp47168
sg17
(lp47169
sg19
(lp47170
sg21
I0
sba(iArchitecture
Entity
p47171
(dp47172
g11
(lp47173
sg13
S'com.google.common.hash.Funnels$SinkAsStream'
p47174
sg15
(lp47175
sg17
(lp47176
sg19
(lp47177
sg21
I0
sba(iArchitecture
Entity
p47178
(dp47179
g11
(lp47180
sg13
S'com.google.common.hash.Funnels$StringCharsetFunnel'
p47181
sg15
(lp47182
sg17
(lp47183
sg19
(lp47184
sg21
I0
sba(iArchitecture
Entity
p47185
(dp47186
g11
(lp47187
sg13
S'com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm'
p47188
sg15
(lp47189
sg17
(lp47190
sg19
(lp47191
sg21
I0
sba(iArchitecture
Entity
p47192
(dp47193
g11
(lp47194
sg13
S'com.google.common.hash.Funnels$UnencodedCharsFunnel'
p47195
sg15
(lp47196
sg17
(lp47197
sg19
(lp47198
sg21
I0
sba(iArchitecture
Entity
p47199
(dp47200
g11
(lp47201
sg13
S'com.google.common.hash.HashCode'
p47202
sg15
(lp47203
sg17
(lp47204
sg19
(lp47205
sg21
I0
sba(iArchitecture
Entity
p47206
(dp47207
g11
(lp47208
sg13
S'com.google.common.hash.HashCode$BytesHashCode'
p47209
sg15
(lp47210
sg17
(lp47211
sg19
(lp47212
sg21
I0
sba(iArchitecture
Entity
p47213
(dp47214
g11
(lp47215
sg13
S'com.google.common.hash.HashCode$IntHashCode'
p47216
sg15
(lp47217
sg17
(lp47218
sg19
(lp47219
sg21
I0
sba(iArchitecture
Entity
p47220
(dp47221
g11
(lp47222
sg13
S'com.google.common.hash.HashCode$LongHashCode'
p47223
sg15
(lp47224
sg17
(lp47225
sg19
(lp47226
sg21
I0
sba(iArchitecture
Entity
p47227
(dp47228
g11
(lp47229
sg13
S'com.google.common.hash.HashFunction'
p47230
sg15
(lp47231
sg17
(lp47232
sg19
(lp47233
sg21
I0
sba(iArchitecture
Entity
p47234
(dp47235
g11
(lp47236
sg13
S'com.google.common.hash.Hasher'
p47237
sg15
(lp47238
sg17
(lp47239
sg19
(lp47240
sg21
I0
sba(iArchitecture
Entity
p47241
(dp47242
g11
(lp47243
sg13
S'com.google.common.hash.Hashing'
p47244
sg15
(lp47245
sg17
(lp47246
sg19
(lp47247
sg21
I0
sba(iArchitecture
Entity
p47248
(dp47249
g11
(lp47250
sg13
S'com.google.common.hash.Hashing$1'
p47251
sg15
(lp47252
sg17
(lp47253
sg19
(lp47254
sg21
I0
sba(iArchitecture
Entity
p47255
(dp47256
g11
(lp47257
sg13
S'com.google.common.hash.Hashing$Adler32Holder'
p47258
sg15
(lp47259
sg17
(lp47260
sg19
(lp47261
sg21
I0
sba(iArchitecture
Entity
p47262
(dp47263
g11
(lp47264
sg13
S'com.google.common.hash.Hashing$ChecksumType'
p47265
sg15
(lp47266
sg17
(lp47267
sg19
(lp47268
sg21
I0
sba(iArchitecture
Entity
p47269
(dp47270
g11
(lp47271
sg13
S'com.google.common.hash.Hashing$ChecksumType$1'
p47272
sg15
(lp47273
sg17
(lp47274
sg19
(lp47275
sg21
I0
sba(iArchitecture
Entity
p47276
(dp47277
g11
(lp47278
sg13
S'com.google.common.hash.Hashing$ChecksumType$2'
p47279
sg15
(lp47280
sg17
(lp47281
sg19
(lp47282
sg21
I0
sba(iArchitecture
Entity
p47283
(dp47284
g11
(lp47285
sg13
S'com.google.common.hash.Hashing$ConcatenatedHashFunction'
p47286
sg15
(lp47287
sg17
(lp47288
sg19
(lp47289
sg21
I0
sba(iArchitecture
Entity
p47290
(dp47291
g11
(lp47292
sg13
S'com.google.common.hash.Hashing$Crc32Holder'
p47293
sg15
(lp47294
sg17
(lp47295
sg19
(lp47296
sg21
I0
sba(iArchitecture
Entity
p47297
(dp47298
g11
(lp47299
sg13
S'com.google.common.hash.Hashing$Crc32cHolder'
p47300
sg15
(lp47301
sg17
(lp47302
sg19
(lp47303
sg21
I0
sba(iArchitecture
Entity
p47304
(dp47305
g11
(lp47306
sg13
S'com.google.common.hash.Hashing$FarmHashFingerprint64Holder'
p47307
sg15
(lp47308
sg17
(lp47309
sg19
(lp47310
sg21
I0
sba(iArchitecture
Entity
p47311
(dp47312
g11
(lp47313
sg13
S'com.google.common.hash.Hashing$LinearCongruentialGenerator'
p47314
sg15
(lp47315
sg17
(lp47316
sg19
(lp47317
sg21
I0
sba(iArchitecture
Entity
p47318
(dp47319
g11
(lp47320
sg13
S'com.google.common.hash.Hashing$Md5Holder'
p47321
sg15
(lp47322
sg17
(lp47323
sg19
(lp47324
sg21
I0
sba(iArchitecture
Entity
p47325
(dp47326
g11
(lp47327
sg13
S'com.google.common.hash.Hashing$Murmur3_128Holder'
p47328
sg15
(lp47329
sg17
(lp47330
sg19
(lp47331
sg21
I0
sba(iArchitecture
Entity
p47332
(dp47333
g11
(lp47334
sg13
S'com.google.common.hash.Hashing$Murmur3_32Holder'
p47335
sg15
(lp47336
sg17
(lp47337
sg19
(lp47338
sg21
I0
sba(iArchitecture
Entity
p47339
(dp47340
g11
(lp47341
sg13
S'com.google.common.hash.Hashing$Sha1Holder'
p47342
sg15
(lp47343
sg17
(lp47344
sg19
(lp47345
sg21
I0
sba(iArchitecture
Entity
p47346
(dp47347
g11
(lp47348
sg13
S'com.google.common.hash.Hashing$Sha256Holder'
p47349
sg15
(lp47350
sg17
(lp47351
sg19
(lp47352
sg21
I0
sba(iArchitecture
Entity
p47353
(dp47354
g11
(lp47355
sg13
S'com.google.common.hash.Hashing$Sha384Holder'
p47356
sg15
(lp47357
sg17
(lp47358
sg19
(lp47359
sg21
I0
sba(iArchitecture
Entity
p47360
(dp47361
g11
(lp47362
sg13
S'com.google.common.hash.Hashing$Sha512Holder'
p47363
sg15
(lp47364
sg17
(lp47365
sg19
(lp47366
sg21
I0
sba(iArchitecture
Entity
p47367
(dp47368
g11
(lp47369
sg13
S'com.google.common.hash.Hashing$SipHash24Holder'
p47370
sg15
(lp47371
sg17
(lp47372
sg19
(lp47373
sg21
I0
sba(iArchitecture
Entity
p47374
(dp47375
g11
(lp47376
sg13
S'com.google.common.hash.LittleEndianByteArray'
p47377
sg15
(lp47378
sg17
(lp47379
sg19
(lp47380
sg21
I0
sba(iArchitecture
Entity
p47381
(dp47382
g11
(lp47383
sg13
S'com.google.common.hash.LittleEndianByteArray$1'
p47384
sg15
(lp47385
sg17
(lp47386
sg19
(lp47387
sg21
I0
sba(iArchitecture
Entity
p47388
(dp47389
g11
(lp47390
sg13
S'com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes'
p47391
sg15
(lp47392
sg17
(lp47393
sg19
(lp47394
sg21
I0
sba(iArchitecture
Entity
p47395
(dp47396
g11
(lp47397
sg13
S'com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes$1'
p47398
sg15
(lp47399
sg17
(lp47400
sg19
(lp47401
sg21
I0
sba(iArchitecture
Entity
p47402
(dp47403
g11
(lp47404
sg13
S'com.google.common.hash.LittleEndianByteArray$LittleEndianBytes'
p47405
sg15
(lp47406
sg17
(lp47407
sg19
(lp47408
sg21
I0
sba(iArchitecture
Entity
p47409
(dp47410
g11
(lp47411
sg13
S'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray'
p47412
sg15
(lp47413
sg17
(lp47414
sg19
(lp47415
sg21
I0
sba(iArchitecture
Entity
p47416
(dp47417
g11
(lp47418
sg13
S'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$1'
p47419
sg15
(lp47420
sg17
(lp47421
sg19
(lp47422
sg21
I0
sba(iArchitecture
Entity
p47423
(dp47424
g11
(lp47425
sg13
S'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$2'
p47426
sg15
(lp47427
sg17
(lp47428
sg19
(lp47429
sg21
I0
sba(iArchitecture
Entity
p47430
(dp47431
g11
(lp47432
sg13
S'com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$3'
p47433
sg15
(lp47434
sg17
(lp47435
sg19
(lp47436
sg21
I0
sba(iArchitecture
Entity
p47437
(dp47438
g11
(lp47439
sg13
S'com.google.common.hash.MacHashFunction'
p47440
sg15
(lp47441
sg17
(lp47442
sg19
(lp47443
sg21
I0
sba(iArchitecture
Entity
p47444
(dp47445
g11
(lp47446
sg13
S'com.google.common.hash.MacHashFunction$1'
p47447
sg15
(lp47448
sg17
(lp47449
sg19
(lp47450
sg21
I0
sba(iArchitecture
Entity
p47451
(dp47452
g11
(lp47453
sg13
S'com.google.common.hash.MacHashFunction$MacHasher'
p47454
sg15
(lp47455
sg17
(lp47456
sg19
(lp47457
sg21
I0
sba(iArchitecture
Entity
p47458
(dp47459
g11
(lp47460
sg13
S'com.google.common.hash.MessageDigestHashFunction'
p47461
sg15
(lp47462
sg17
(lp47463
sg19
(lp47464
sg21
I0
sba(iArchitecture
Entity
p47465
(dp47466
g11
(lp47467
sg13
S'com.google.common.hash.MessageDigestHashFunction$1'
p47468
sg15
(lp47469
sg17
(lp47470
sg19
(lp47471
sg21
I0
sba(iArchitecture
Entity
p47472
(dp47473
g11
(lp47474
sg13
S'com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher'
p47475
sg15
(lp47476
sg17
(lp47477
sg19
(lp47478
sg21
I0
sba(iArchitecture
Entity
p47479
(dp47480
g11
(lp47481
sg13
S'com.google.common.hash.MessageDigestHashFunction$SerializedForm'
p47482
sg15
(lp47483
sg17
(lp47484
sg19
(lp47485
sg21
I0
sba(iArchitecture
Entity
p47486
(dp47487
g11
(lp47488
sg13
S'com.google.common.hash.Murmur3_128HashFunction'
p47489
sg15
(lp47490
sg17
(lp47491
sg19
(lp47492
sg21
I0
sba(iArchitecture
Entity
p47493
(dp47494
g11
(lp47495
sg13
S'com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher'
p47496
sg15
(lp47497
sg17
(lp47498
sg19
(lp47499
sg21
I0
sba(iArchitecture
Entity
p47500
(dp47501
g11
(lp47502
sg13
S'com.google.common.hash.Murmur3_32HashFunction'
p47503
sg15
(lp47504
sg17
(lp47505
sg19
(lp47506
sg21
I0
sba(iArchitecture
Entity
p47507
(dp47508
g11
(lp47509
sg13
S'com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher'
p47510
sg15
(lp47511
sg17
(lp47512
sg19
(lp47513
sg21
I0
sba(iArchitecture
Entity
p47514
(dp47515
g11
(lp47516
sg13
S'com.google.common.hash.PrimitiveSink'
p47517
sg15
(lp47518
sg17
(lp47519
sg19
(lp47520
sg21
I0
sba(iArchitecture
Entity
p47521
(dp47522
g11
(lp47523
sg13
S'com.google.common.hash.SipHashFunction'
p47524
sg15
(lp47525
sg17
(lp47526
sg19
(lp47527
sg21
I0
sba(iArchitecture
Entity
p47528
(dp47529
g11
(lp47530
sg13
S'com.google.common.hash.SipHashFunction$SipHasher'
p47531
sg15
(lp47532
sg17
(lp47533
sg19
(lp47534
sg21
I0
sba(iArchitecture
Entity
p47535
(dp47536
g11
(lp47537
sg13
S'sun.misc.Unsafe'
p47538
sg15
(lp47539
sg17
(lp47540
sg19
(lp47541
sg21
I0
sbasg1055
(lp47542
g46971
ag46978
ag46985
ag46992
ag46999
ag47006
ag47013
ag47020
ag47027
ag47034
ag47041
ag47048
ag47055
ag47062
ag47069
ag47076
ag47083
ag47090
ag47097
ag47104
ag47111
ag47118
ag47125
ag47132
ag47139
ag47146
ag47153
ag47160
ag47167
ag47174
ag47181
ag47188
ag47195
ag47202
ag47209
ag47216
ag47223
ag47230
ag47237
ag47244
ag47251
ag47258
ag47265
ag47272
ag47279
ag47286
ag47293
ag47300
ag47307
ag47314
ag47321
ag47328
ag47335
ag47342
ag47349
ag47356
ag47363
ag47370
ag47377
ag47384
ag47391
ag47398
ag47405
ag47412
ag47419
ag47426
ag47433
ag47440
ag47447
ag47454
ag47461
ag47468
ag47475
ag47482
ag47489
ag47496
ag47503
ag47510
ag47517
ag47524
ag47531
ag47538
asg21
I0
sg1057
S'com.google.common.hash.ss'
p47543
sba(iArchitecture
Cluster
p47544
(dp47545
g7
(lp47546
(iArchitecture
Entity
p47547
(dp47548
g11
(lp47549
sg13
S'com.google.common.io.AppendableWriter'
p47550
sg15
(lp47551
sg17
(lp47552
sg19
(lp47553
sg21
I0
sba(iArchitecture
Entity
p47554
(dp47555
g11
(lp47556
sg13
S'com.google.common.io.BaseEncoding'
p47557
sg15
(lp47558
sg17
(lp47559
sg19
(lp47560
sg21
I0
sba(iArchitecture
Entity
p47561
(dp47562
g11
(lp47563
sg13
S'com.google.common.io.BaseEncoding$1'
p47564
sg15
(lp47565
sg17
(lp47566
sg19
(lp47567
sg21
I0
sba(iArchitecture
Entity
p47568
(dp47569
g11
(lp47570
sg13
S'com.google.common.io.BaseEncoding$2'
p47571
sg15
(lp47572
sg17
(lp47573
sg19
(lp47574
sg21
I0
sba(iArchitecture
Entity
p47575
(dp47576
g11
(lp47577
sg13
S'com.google.common.io.BaseEncoding$3'
p47578
sg15
(lp47579
sg17
(lp47580
sg19
(lp47581
sg21
I0
sba(iArchitecture
Entity
p47582
(dp47583
g11
(lp47584
sg13
S'com.google.common.io.BaseEncoding$4'
p47585
sg15
(lp47586
sg17
(lp47587
sg19
(lp47588
sg21
I0
sba(iArchitecture
Entity
p47589
(dp47590
g11
(lp47591
sg13
S'com.google.common.io.BaseEncoding$5'
p47592
sg15
(lp47593
sg17
(lp47594
sg19
(lp47595
sg21
I0
sba(iArchitecture
Entity
p47596
(dp47597
g11
(lp47598
sg13
S'com.google.common.io.BaseEncoding$Alphabet'
p47599
sg15
(lp47600
sg17
(lp47601
sg19
(lp47602
sg21
I0
sba(iArchitecture
Entity
p47603
(dp47604
g11
(lp47605
sg13
S'com.google.common.io.BaseEncoding$Base16Encoding'
p47606
sg15
(lp47607
sg17
(lp47608
sg19
(lp47609
sg21
I0
sba(iArchitecture
Entity
p47610
(dp47611
g11
(lp47612
sg13
S'com.google.common.io.BaseEncoding$Base64Encoding'
p47613
sg15
(lp47614
sg17
(lp47615
sg19
(lp47616
sg21
I0
sba(iArchitecture
Entity
p47617
(dp47618
g11
(lp47619
sg13
S'com.google.common.io.BaseEncoding$DecodingException'
p47620
sg15
(lp47621
sg17
(lp47622
sg19
(lp47623
sg21
I0
sba(iArchitecture
Entity
p47624
(dp47625
g11
(lp47626
sg13
S'com.google.common.io.BaseEncoding$SeparatedBaseEncoding'
p47627
sg15
(lp47628
sg17
(lp47629
sg19
(lp47630
sg21
I0
sba(iArchitecture
Entity
p47631
(dp47632
g11
(lp47633
sg13
S'com.google.common.io.BaseEncoding$StandardBaseEncoding'
p47634
sg15
(lp47635
sg17
(lp47636
sg19
(lp47637
sg21
I0
sba(iArchitecture
Entity
p47638
(dp47639
g11
(lp47640
sg13
S'com.google.common.io.BaseEncoding$StandardBaseEncoding$1'
p47641
sg15
(lp47642
sg17
(lp47643
sg19
(lp47644
sg21
I0
sba(iArchitecture
Entity
p47645
(dp47646
g11
(lp47647
sg13
S'com.google.common.io.BaseEncoding$StandardBaseEncoding$2'
p47648
sg15
(lp47649
sg17
(lp47650
sg19
(lp47651
sg21
I0
sba(iArchitecture
Entity
p47652
(dp47653
g11
(lp47654
sg13
S'com.google.common.io.ByteArrayDataInput'
p47655
sg15
(lp47656
sg17
(lp47657
sg19
(lp47658
sg21
I0
sba(iArchitecture
Entity
p47659
(dp47660
g11
(lp47661
sg13
S'com.google.common.io.ByteArrayDataOutput'
p47662
sg15
(lp47663
sg17
(lp47664
sg19
(lp47665
sg21
I0
sba(iArchitecture
Entity
p47666
(dp47667
g11
(lp47668
sg13
S'com.google.common.io.ByteProcessor'
p47669
sg15
(lp47670
sg17
(lp47671
sg19
(lp47672
sg21
I0
sba(iArchitecture
Entity
p47673
(dp47674
g11
(lp47675
V2693
p47676
asg13
S'com.google.common.io.ByteSink'
p47677
sg15
(lp47678
VJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47679
asg17
(lp47680
(lp47681
I5
aasg19
(lp47682
VAdd Stream<String> lines() to CharSource
p47683
asg21
I0
sba(iArchitecture
Entity
p47684
(dp47685
g11
(lp47686
g47676
asg13
S'com.google.common.io.ByteSink$1'
p47687
sg15
(lp47688
VJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47689
asg17
(lp47690
g47681
asg19
(lp47691
g47683
asg21
I0
sba(iArchitecture
Entity
p47692
(dp47693
g11
(lp47694
g47676
asg13
S'com.google.common.io.ByteSink$AsCharSink'
p47695
sg15
(lp47696
VJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47697
asg17
(lp47698
g47681
asg19
(lp47699
g47683
asg21
I0
sba(iArchitecture
Entity
p47700
(dp47701
g11
(lp47702
V2843
p47703
ag47703
ag47676
asg13
S'com.google.common.io.ByteSource'
p47704
sg15
(lp47705
VThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47706
aVThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47707
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47708
asg17
(lp47709
(lp47710
I0
aag47710
ag47681
asg19
(lp47711
VOptimize {Byte,Char}Source.isEmpty() for known-non-empty sources
p47712
ag47712
ag47683
asg21
I0
sba(iArchitecture
Entity
p47713
(dp47714
g11
(lp47715
g47703
ag47703
ag47676
asg13
S'com.google.common.io.ByteSource$AsCharSource'
p47716
sg15
(lp47717
VThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47718
aVThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47719
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47720
asg17
(lp47721
g47710
ag47710
ag47681
asg19
(lp47722
g47712
ag47712
ag47683
asg21
I0
sba(iArchitecture
Entity
p47723
(dp47724
g11
(lp47725
g47703
ag47703
ag47676
asg13
S'com.google.common.io.ByteSource$ByteArrayByteSource'
p47726
sg15
(lp47727
VThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47728
aVThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47729
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47730
asg17
(lp47731
g47710
ag47710
ag47681
asg19
(lp47732
g47712
ag47712
ag47683
asg21
I0
sba(iArchitecture
Entity
p47733
(dp47734
g11
(lp47735
g47703
ag47703
ag47676
asg13
S'com.google.common.io.ByteSource$ConcatenatedByteSource'
p47736
sg15
(lp47737
VThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47738
aVThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47739
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47740
asg17
(lp47741
g47710
ag47710
ag47681
asg19
(lp47742
g47712
ag47712
ag47683
asg21
I0
sba(iArchitecture
Entity
p47743
(dp47744
g11
(lp47745
g47703
ag47703
ag47676
asg13
S'com.google.common.io.ByteSource$EmptyByteSource'
p47746
sg15
(lp47747
VThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47748
aVThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47749
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47750
asg17
(lp47751
g47710
ag47710
ag47681
asg19
(lp47752
g47712
ag47712
ag47683
asg21
I0
sba(iArchitecture
Entity
p47753
(dp47754
g11
(lp47755
g47703
ag47703
ag47676
asg13
S'com.google.common.io.ByteSource$SlicedByteSource'
p47756
sg15
(lp47757
VThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47758
aVThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47759
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47760
asg17
(lp47761
g47710
ag47710
ag47681
asg19
(lp47762
g47712
ag47712
ag47683
asg21
I0
sba(iArchitecture
Entity
p47763
(dp47764
g11
(lp47765
sg13
S'com.google.common.io.ByteStreams'
p47766
sg15
(lp47767
sg17
(lp47768
sg19
(lp47769
sg21
I0
sba(iArchitecture
Entity
p47770
(dp47771
g11
(lp47772
sg13
S'com.google.common.io.ByteStreams$1'
p47773
sg15
(lp47774
sg17
(lp47775
sg19
(lp47776
sg21
I0
sba(iArchitecture
Entity
p47777
(dp47778
g11
(lp47779
sg13
S'com.google.common.io.ByteStreams$ByteArrayDataInputStream'
p47780
sg15
(lp47781
sg17
(lp47782
sg19
(lp47783
sg21
I0
sba(iArchitecture
Entity
p47784
(dp47785
g11
(lp47786
sg13
S'com.google.common.io.ByteStreams$ByteArrayDataOutputStream'
p47787
sg15
(lp47788
sg17
(lp47789
sg19
(lp47790
sg21
I0
sba(iArchitecture
Entity
p47791
(dp47792
g11
(lp47793
sg13
S'com.google.common.io.ByteStreams$FastByteArrayOutputStream'
p47794
sg15
(lp47795
sg17
(lp47796
sg19
(lp47797
sg21
I0
sba(iArchitecture
Entity
p47798
(dp47799
g11
(lp47800
sg13
S'com.google.common.io.ByteStreams$LimitedInputStream'
p47801
sg15
(lp47802
sg17
(lp47803
sg19
(lp47804
sg21
I0
sba(iArchitecture
Entity
p47805
(dp47806
g11
(lp47807
sg13
S'com.google.common.io.CharSequenceReader'
p47808
sg15
(lp47809
sg17
(lp47810
sg19
(lp47811
sg21
I0
sba(iArchitecture
Entity
p47812
(dp47813
g11
(lp47814
g47676
asg13
S'com.google.common.io.CharSink'
p47815
sg15
(lp47816
VJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47817
asg17
(lp47818
g47681
asg19
(lp47819
g47683
asg21
I0
sba(iArchitecture
Entity
p47820
(dp47821
g11
(lp47822
g47703
ag47703
ag47676
ag47676
ag47676
asg13
S'com.google.common.io.CharSource'
p47823
sg15
(lp47824
VThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47825
aVThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47826
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47827
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47828
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47829
asg17
(lp47830
g47710
ag47710
ag47681
ag47681
ag47681
asg19
(lp47831
g47712
ag47712
ag47683
ag47683
ag47683
asg21
I0
sba(iArchitecture
Entity
p47832
(dp47833
g11
(lp47834
g47703
ag47703
ag47676
ag47676
ag47676
asg13
S'com.google.common.io.CharSource$AsByteSource'
p47835
sg15
(lp47836
VThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47837
aVThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47838
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47839
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47840
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47841
asg17
(lp47842
g47710
ag47710
ag47681
ag47681
ag47681
asg19
(lp47843
g47712
ag47712
ag47683
ag47683
ag47683
asg21
I0
sba(iArchitecture
Entity
p47844
(dp47845
g11
(lp47846
g47703
ag47703
ag47676
ag47676
ag47676
asg13
S'com.google.common.io.CharSource$CharSequenceCharSource'
p47847
sg15
(lp47848
VThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47849
aVThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47850
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47851
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47852
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47853
asg17
(lp47854
g47710
ag47710
ag47681
ag47681
ag47681
asg19
(lp47855
g47712
ag47712
ag47683
ag47683
ag47683
asg21
I0
sba(iArchitecture
Entity
p47856
(dp47857
g11
(lp47858
g47703
ag47703
ag47676
ag47676
ag47676
asg13
S'com.google.common.io.CharSource$CharSequenceCharSource$1'
p47859
sg15
(lp47860
VThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47861
aVThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47862
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47863
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47864
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47865
asg17
(lp47866
g47710
ag47710
ag47681
ag47681
ag47681
asg19
(lp47867
g47712
ag47712
ag47683
ag47683
ag47683
asg21
I0
sba(iArchitecture
Entity
p47868
(dp47869
g11
(lp47870
g47703
ag47703
ag47676
ag47676
ag47676
asg13
S'com.google.common.io.CharSource$CharSequenceCharSource$1$1'
p47871
sg15
(lp47872
VThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47873
aVThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47874
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47875
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47876
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47877
asg17
(lp47878
g47710
ag47710
ag47681
ag47681
ag47681
asg19
(lp47879
g47712
ag47712
ag47683
ag47683
ag47683
asg21
I0
sba(iArchitecture
Entity
p47880
(dp47881
g11
(lp47882
g47703
ag47703
ag47676
ag47676
ag47676
asg13
S'com.google.common.io.CharSource$ConcatenatedCharSource'
p47883
sg15
(lp47884
VThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47885
aVThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47886
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47887
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47888
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47889
asg17
(lp47890
g47710
ag47710
ag47681
ag47681
ag47681
asg19
(lp47891
g47712
ag47712
ag47683
ag47683
ag47683
asg21
I0
sba(iArchitecture
Entity
p47892
(dp47893
g11
(lp47894
g47703
ag47703
ag47676
ag47676
ag47676
asg13
S'com.google.common.io.CharSource$EmptyCharSource'
p47895
sg15
(lp47896
VThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47897
aVThe default implementations of `{Byte,Char}Source.isEmpty()` seem to do unnecessary work when the size is known to be non-zero.\u000a\u000aHere is what `ByteSource` does now:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {\u000a    return true;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aI feel like it should do this instead:\u000a\u000a```java\u000apublic boolean isEmpty() throws IOException {\u000a  Optional<Long> sizeIfKnown = sizeIfKnown();\u000a  if (sizeIfKnown.isPresent()) {\u000a    return sizeIfKnown.get() == 0L;\u000a  }\u000a  // Fall back to reading a byte from the input stream...\u000a```\u000a\u000aThat way it avoids reading the input stream when the size is known to be non-zero.\u000a\u000aI see warnings in the javadocs that some sources report inaccurate sizes, but the example given is non-empty files that report a size of zero.  Are there empty files that falsely report a non-zero size?  If not, I think this change is safe.
p47898
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47899
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47900
aVJust like `java.nio.file.Files.lines()` and `java.io.BufferedReader.lines()`, for CharSource to have a `lines()` method returning a `Stream<String>` of lines.\u000a\u000aOf course this can be trivially accomplished by the caller with `charSource.openBufferedStream().lines()` and indeed a default implementation could trivially just be `return openBufferedStream().lines();`, it being the caller's responsibility to ensure the `Stream`, and thus the `Reader`, are closed; and that would be job-done for concrete implementations based on streaming sources like files, resources, URLs etc.\u000a\u000aBut a concrete `CharSource` implementation is best-placed to know if it could better override that with something more efficient than a `BufferedReader` wrapping whatever `Reader` is actually used to access the characters. For a case in point the `CharSource.CharSequenceCharSource` implementation already has a `private Iterable<String> lines()` method (which would need to be renamed, because the proposed new public method really ought to have that name, for consistency with other APIs, especially in JDK, but such a rename shouldn't have too great an impact being of a private method), which would easily be the basis of a `Stream<String> lines()` method. Say the existing private `lines()` method became `getLines()`, the implementation here would literally just be `return Streams.stream(getLines());`.\u000a\u000aFor reference my private library code that I'm hoping to replace chunks of with Guava, has a `StringLinesSpliterator` and a `CharSequenceLinesSpliterator` for these purposes, in order to get a `Stream<String>` and `Stream<CharSequence>` from such sources. The latter meaning that the subsequences aren't potentially wastefully converted to Strings; the caller can always do that themselves with `.map(String::valueOf)`. (There's also a `CharBuffer` based one, that advances the position as it goes, but honestly it doesn't get used!)\u000a\u000aAt the moment, the code that wants to get a stream of lines from the `CharSource` would have to know more than it should about the circumstances of that `CharSource`'s creation, to know if it would be least wasteful in terms of copying of character sequences of arbitrary length, or Readers wrapping Readers, to access it via `read()`, `readLines()` or `openBufferedStream()`. Instead they ought to be able to trust that the implementation of `CharSource` will do it the best way.\u000a\u000aPossibly the first in a series of missing `Stream` based conveniences, as Java8-only features are a relatively new thing in Guava. ;-)
p47901
asg17
(lp47902
g47710
ag47710
ag47681
ag47681
ag47681
asg19
(lp47903
g47712
ag47712
ag47683
ag47683
ag47683
asg21
I0
sba(iArchitecture
Entity
p47904
(dp47905
g11
(lp47906
sg13
S'com.google.common.io.CharStreams'
p47907
sg15
(lp47908
sg17
(lp47909
sg19
(lp47910
sg21
I0
sba(iArchitecture
Entity
p47911
(dp47912
g11
(lp47913
sg13
S'com.google.common.io.CharStreams$NullWriter'
p47914
sg15
(lp47915
sg17
(lp47916
sg19
(lp47917
sg21
I0
sba(iArchitecture
Entity
p47918
(dp47919
g11
(lp47920
sg13
S'com.google.common.io.Closeables'
p47921
sg15
(lp47922
sg17
(lp47923
sg19
(lp47924
sg21
I0
sba(iArchitecture
Entity
p47925
(dp47926
g11
(lp47927
sg13
S'com.google.common.io.Closer'
p47928
sg15
(lp47929
sg17
(lp47930
sg19
(lp47931
sg21
I0
sba(iArchitecture
Entity
p47932
(dp47933
g11
(lp47934
sg13
S'com.google.common.io.Closer$LoggingSuppressor'
p47935
sg15
(lp47936
sg17
(lp47937
sg19
(lp47938
sg21
I0
sba(iArchitecture
Entity
p47939
(dp47940
g11
(lp47941
sg13
S'com.google.common.io.Closer$SuppressingSuppressor'
p47942
sg15
(lp47943
sg17
(lp47944
sg19
(lp47945
sg21
I0
sba(iArchitecture
Entity
p47946
(dp47947
g11
(lp47948
sg13
S'com.google.common.io.Closer$Suppressor'
p47949
sg15
(lp47950
sg17
(lp47951
sg19
(lp47952
sg21
I0
sba(iArchitecture
Entity
p47953
(dp47954
g11
(lp47955
sg13
S'com.google.common.io.FileBackedOutputStream'
p47956
sg15
(lp47957
sg17
(lp47958
sg19
(lp47959
sg21
I0
sba(iArchitecture
Entity
p47960
(dp47961
g11
(lp47962
sg13
S'com.google.common.io.FileBackedOutputStream$1'
p47963
sg15
(lp47964
sg17
(lp47965
sg19
(lp47966
sg21
I0
sba(iArchitecture
Entity
p47967
(dp47968
g11
(lp47969
sg13
S'com.google.common.io.FileBackedOutputStream$2'
p47970
sg15
(lp47971
sg17
(lp47972
sg19
(lp47973
sg21
I0
sba(iArchitecture
Entity
p47974
(dp47975
g11
(lp47976
sg13
S'com.google.common.io.FileBackedOutputStream$MemoryOutput'
p47977
sg15
(lp47978
sg17
(lp47979
sg19
(lp47980
sg21
I0
sba(iArchitecture
Entity
p47981
(dp47982
g11
(lp47983
sg13
S'com.google.common.io.FileWriteMode'
p47984
sg15
(lp47985
sg17
(lp47986
sg19
(lp47987
sg21
I0
sba(iArchitecture
Entity
p47988
(dp47989
g11
(lp47990
sg13
S'com.google.common.io.Files'
p47991
sg15
(lp47992
sg17
(lp47993
sg19
(lp47994
sg21
I0
sba(iArchitecture
Entity
p47995
(dp47996
g11
(lp47997
sg13
S'com.google.common.io.Files$1'
p47998
sg15
(lp47999
sg17
(lp48000
sg19
(lp48001
sg21
I0
sba(iArchitecture
Entity
p48002
(dp48003
g11
(lp48004
sg13
S'com.google.common.io.Files$2'
p48005
sg15
(lp48006
sg17
(lp48007
sg19
(lp48008
sg21
I0
sba(iArchitecture
Entity
p48009
(dp48010
g11
(lp48011
sg13
S'com.google.common.io.Files$FileByteSink'
p48012
sg15
(lp48013
sg17
(lp48014
sg19
(lp48015
sg21
I0
sba(iArchitecture
Entity
p48016
(dp48017
g11
(lp48018
sg13
S'com.google.common.io.Files$FileByteSource'
p48019
sg15
(lp48020
sg17
(lp48021
sg19
(lp48022
sg21
I0
sba(iArchitecture
Entity
p48023
(dp48024
g11
(lp48025
sg13
S'com.google.common.io.Files$FilePredicate'
p48026
sg15
(lp48027
sg17
(lp48028
sg19
(lp48029
sg21
I0
sba(iArchitecture
Entity
p48030
(dp48031
g11
(lp48032
sg13
S'com.google.common.io.Files$FilePredicate$1'
p48033
sg15
(lp48034
sg17
(lp48035
sg19
(lp48036
sg21
I0
sba(iArchitecture
Entity
p48037
(dp48038
g11
(lp48039
sg13
S'com.google.common.io.Files$FilePredicate$2'
p48040
sg15
(lp48041
sg17
(lp48042
sg19
(lp48043
sg21
I0
sba(iArchitecture
Entity
p48044
(dp48045
g11
(lp48046
sg13
S'com.google.common.io.LineBuffer'
p48047
sg15
(lp48048
sg17
(lp48049
sg19
(lp48050
sg21
I0
sba(iArchitecture
Entity
p48051
(dp48052
g11
(lp48053
sg13
S'com.google.common.io.LineProcessor'
p48054
sg15
(lp48055
sg17
(lp48056
sg19
(lp48057
sg21
I0
sba(iArchitecture
Entity
p48058
(dp48059
g11
(lp48060
sg13
S'com.google.common.io.LineReader'
p48061
sg15
(lp48062
sg17
(lp48063
sg19
(lp48064
sg21
I0
sba(iArchitecture
Entity
p48065
(dp48066
g11
(lp48067
sg13
S'com.google.common.io.LineReader$1'
p48068
sg15
(lp48069
sg17
(lp48070
sg19
(lp48071
sg21
I0
sba(iArchitecture
Entity
p48072
(dp48073
g11
(lp48074
V2996
p48075
ag48075
ag48075
ag48075
asg13
S'com.google.common.io.MultiInputStream'
p48076
sg15
(lp48077
VUsing `guava-23.0` (and earlier versions), `com.google.common.io.MultiInputStream` produces a stack overflow when it is given sufficiently many empty `ByteSource` instances.\u000a\u000aTest cases that reproduce the behavior:\u000a\u000a```java\u000aimport java.io.InputStream;\u000aimport java.util.List;\u000a\u000aimport org.junit.Before;\u000aimport org.junit.Test;\u000a\u000aimport com.google.common.collect.Lists;\u000aimport com.google.common.io.ByteSource;\u000a\u000apublic class MultiInputStreamTest {\u000a\u000a  /** Adjust this according to the thread stack size. */\u000a  private static final int LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE = 1000000;\u000a\u000a  private ByteSource       concatenated;\u000a\u000a  public @Before void setup() throws Exception {\u000a    final List<ByteSource> emptySources = Lists.newArrayList();\u000a    for (int i = 0; i < LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE; i++) {\u000a      emptySources.add(ByteSource.empty());\u000a    }\u000a    // produce a ConcatenatedByteSource which in turn produces\u000a    // a MultiInputStream\u000a    concatenated = ByteSource.concat(emptySources);\u000a  }\u000a\u000a  public @Test void stackOverflowErrorOnEmptySources1() throws Exception {\u000a    try (InputStream in = concatenated.openStream()) {\u000a      in.read();\u000a    }\u000a  }\u000a\u000a  public @Test void stackOverflowErrorOnEmptySources2() throws Exception {\u000a    try (InputStream in = concatenated.openStream()) {\u000a      in.read(new byte[1], 0, 1);\u000a    }\u000a  }\u000a\u000a}\u000a```\u000a\u000aThe condensed exception stack traces produced by the respective test case (which appear to be truncated):\u000a\u000a```\u000a$ uniq -c stack1\u000a   1 java.lang.StackOverflowError\u000a   1 	at com.google.common.io.ByteSource$ByteArrayByteSource.openStream(ByteSource.java:574)\u000a   1 	at com.google.common.io.MultiInputStream.advance(MultiInputStream.java:65)\u000a   1 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:89)\u000a1021 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:90)\u000a```\u000a\u000a```\u000a$ uniq -c stack2\u000a   1 java.lang.StackOverflowError\u000a   1 	at com.google.common.io.MultiInputStream.close(MultiInputStream.java:52)\u000a   1 	at com.google.common.io.MultiInputStream.advance(MultiInputStream.java:63)\u000a   1 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:102)\u000a1021 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:103)\u000a```
p48078
aVUsing `guava-23.0` (and earlier versions), `com.google.common.io.MultiInputStream` produces a stack overflow when it is given sufficiently many empty `ByteSource` instances.\u000a\u000aTest cases that reproduce the behavior:\u000a\u000a```java\u000aimport java.io.InputStream;\u000aimport java.util.List;\u000a\u000aimport org.junit.Before;\u000aimport org.junit.Test;\u000a\u000aimport com.google.common.collect.Lists;\u000aimport com.google.common.io.ByteSource;\u000a\u000apublic class MultiInputStreamTest {\u000a\u000a  /** Adjust this according to the thread stack size. */\u000a  private static final int LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE = 1000000;\u000a\u000a  private ByteSource       concatenated;\u000a\u000a  public @Before void setup() throws Exception {\u000a    final List<ByteSource> emptySources = Lists.newArrayList();\u000a    for (int i = 0; i < LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE; i++) {\u000a      emptySources.add(ByteSource.empty());\u000a    }\u000a    // produce a ConcatenatedByteSource which in turn produces\u000a    // a MultiInputStream\u000a    concatenated = ByteSource.concat(emptySources);\u000a  }\u000a\u000a  public @Test void stackOverflowErrorOnEmptySources1() throws Exception {\u000a    try (InputStream in = concatenated.openStream()) {\u000a      in.read();\u000a    }\u000a  }\u000a\u000a  public @Test void stackOverflowErrorOnEmptySources2() throws Exception {\u000a    try (InputStream in = concatenated.openStream()) {\u000a      in.read(new byte[1], 0, 1);\u000a    }\u000a  }\u000a\u000a}\u000a```\u000a\u000aThe condensed exception stack traces produced by the respective test case (which appear to be truncated):\u000a\u000a```\u000a$ uniq -c stack1\u000a   1 java.lang.StackOverflowError\u000a   1 	at com.google.common.io.ByteSource$ByteArrayByteSource.openStream(ByteSource.java:574)\u000a   1 	at com.google.common.io.MultiInputStream.advance(MultiInputStream.java:65)\u000a   1 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:89)\u000a1021 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:90)\u000a```\u000a\u000a```\u000a$ uniq -c stack2\u000a   1 java.lang.StackOverflowError\u000a   1 	at com.google.common.io.MultiInputStream.close(MultiInputStream.java:52)\u000a   1 	at com.google.common.io.MultiInputStream.advance(MultiInputStream.java:63)\u000a   1 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:102)\u000a1021 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:103)\u000a```
p48079
aVUsing `guava-23.0` (and earlier versions), `com.google.common.io.MultiInputStream` produces a stack overflow when it is given sufficiently many empty `ByteSource` instances.\u000a\u000aTest cases that reproduce the behavior:\u000a\u000a```java\u000aimport java.io.InputStream;\u000aimport java.util.List;\u000a\u000aimport org.junit.Before;\u000aimport org.junit.Test;\u000a\u000aimport com.google.common.collect.Lists;\u000aimport com.google.common.io.ByteSource;\u000a\u000apublic class MultiInputStreamTest {\u000a\u000a  /** Adjust this according to the thread stack size. */\u000a  private static final int LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE = 1000000;\u000a\u000a  private ByteSource       concatenated;\u000a\u000a  public @Before void setup() throws Exception {\u000a    final List<ByteSource> emptySources = Lists.newArrayList();\u000a    for (int i = 0; i < LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE; i++) {\u000a      emptySources.add(ByteSource.empty());\u000a    }\u000a    // produce a ConcatenatedByteSource which in turn produces\u000a    // a MultiInputStream\u000a    concatenated = ByteSource.concat(emptySources);\u000a  }\u000a\u000a  public @Test void stackOverflowErrorOnEmptySources1() throws Exception {\u000a    try (InputStream in = concatenated.openStream()) {\u000a      in.read();\u000a    }\u000a  }\u000a\u000a  public @Test void stackOverflowErrorOnEmptySources2() throws Exception {\u000a    try (InputStream in = concatenated.openStream()) {\u000a      in.read(new byte[1], 0, 1);\u000a    }\u000a  }\u000a\u000a}\u000a```\u000a\u000aThe condensed exception stack traces produced by the respective test case (which appear to be truncated):\u000a\u000a```\u000a$ uniq -c stack1\u000a   1 java.lang.StackOverflowError\u000a   1 	at com.google.common.io.ByteSource$ByteArrayByteSource.openStream(ByteSource.java:574)\u000a   1 	at com.google.common.io.MultiInputStream.advance(MultiInputStream.java:65)\u000a   1 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:89)\u000a1021 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:90)\u000a```\u000a\u000a```\u000a$ uniq -c stack2\u000a   1 java.lang.StackOverflowError\u000a   1 	at com.google.common.io.MultiInputStream.close(MultiInputStream.java:52)\u000a   1 	at com.google.common.io.MultiInputStream.advance(MultiInputStream.java:63)\u000a   1 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:102)\u000a1021 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:103)\u000a```
p48080
aVUsing `guava-23.0` (and earlier versions), `com.google.common.io.MultiInputStream` produces a stack overflow when it is given sufficiently many empty `ByteSource` instances.\u000a\u000aTest cases that reproduce the behavior:\u000a\u000a```java\u000aimport java.io.InputStream;\u000aimport java.util.List;\u000a\u000aimport org.junit.Before;\u000aimport org.junit.Test;\u000a\u000aimport com.google.common.collect.Lists;\u000aimport com.google.common.io.ByteSource;\u000a\u000apublic class MultiInputStreamTest {\u000a\u000a  /** Adjust this according to the thread stack size. */\u000a  private static final int LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE = 1000000;\u000a\u000a  private ByteSource       concatenated;\u000a\u000a  public @Before void setup() throws Exception {\u000a    final List<ByteSource> emptySources = Lists.newArrayList();\u000a    for (int i = 0; i < LARGE_ENOUGH_FOR_CURRENT_STACK_SIZE; i++) {\u000a      emptySources.add(ByteSource.empty());\u000a    }\u000a    // produce a ConcatenatedByteSource which in turn produces\u000a    // a MultiInputStream\u000a    concatenated = ByteSource.concat(emptySources);\u000a  }\u000a\u000a  public @Test void stackOverflowErrorOnEmptySources1() throws Exception {\u000a    try (InputStream in = concatenated.openStream()) {\u000a      in.read();\u000a    }\u000a  }\u000a\u000a  public @Test void stackOverflowErrorOnEmptySources2() throws Exception {\u000a    try (InputStream in = concatenated.openStream()) {\u000a      in.read(new byte[1], 0, 1);\u000a    }\u000a  }\u000a\u000a}\u000a```\u000a\u000aThe condensed exception stack traces produced by the respective test case (which appear to be truncated):\u000a\u000a```\u000a$ uniq -c stack1\u000a   1 java.lang.StackOverflowError\u000a   1 	at com.google.common.io.ByteSource$ByteArrayByteSource.openStream(ByteSource.java:574)\u000a   1 	at com.google.common.io.MultiInputStream.advance(MultiInputStream.java:65)\u000a   1 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:89)\u000a1021 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:90)\u000a```\u000a\u000a```\u000a$ uniq -c stack2\u000a   1 java.lang.StackOverflowError\u000a   1 	at com.google.common.io.MultiInputStream.close(MultiInputStream.java:52)\u000a   1 	at com.google.common.io.MultiInputStream.advance(MultiInputStream.java:63)\u000a   1 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:102)\u000a1021 	at com.google.common.io.MultiInputStream.read(MultiInputStream.java:103)\u000a```
p48081
asg17
(lp48082
(lp48083
I7
aag48083
ag48083
ag48083
asg19
(lp48084
VMultiInputStream produces stack overflow
p48085
ag48085
ag48085
ag48085
asg21
I0
sba(iArchitecture
Entity
p48086
(dp48087
g11
(lp48088
sg13
S'com.google.common.io.MultiReader'
p48089
sg15
(lp48090
sg17
(lp48091
sg19
(lp48092
sg21
I0
sba(iArchitecture
Entity
p48093
(dp48094
g11
(lp48095
sg13
S'com.google.common.io.ReaderInputStream'
p48096
sg15
(lp48097
sg17
(lp48098
sg19
(lp48099
sg21
I0
sba(iArchitecture
Entity
p48100
(dp48101
g11
(lp48102
sg13
S'com.google.common.io.Resources'
p48103
sg15
(lp48104
sg17
(lp48105
sg19
(lp48106
sg21
I0
sba(iArchitecture
Entity
p48107
(dp48108
g11
(lp48109
sg13
S'com.google.common.io.Resources$1'
p48110
sg15
(lp48111
sg17
(lp48112
sg19
(lp48113
sg21
I0
sba(iArchitecture
Entity
p48114
(dp48115
g11
(lp48116
sg13
S'com.google.common.io.Resources$UrlByteSource'
p48117
sg15
(lp48118
sg17
(lp48119
sg19
(lp48120
sg21
I0
sbasg1055
(lp48121
g47550
ag47557
ag47564
ag47571
ag47578
ag47585
ag47592
ag47599
ag47606
ag47613
ag47620
ag47627
ag47634
ag47641
ag47648
ag47655
ag47662
ag47669
ag47677
ag47687
ag47695
ag47704
ag47716
ag47726
ag47736
ag47746
ag47756
ag47766
ag47773
ag47780
ag47787
ag47794
ag47801
ag47808
ag47815
ag47823
ag47835
ag47847
ag47859
ag47871
ag47883
ag47895
ag47907
ag47914
ag47921
ag47928
ag47935
ag47942
ag47949
ag47956
ag47963
ag47970
ag47977
ag47984
ag47991
ag47998
ag48005
ag48012
ag48019
ag48026
ag48033
ag48040
ag48047
ag48054
ag48061
ag48068
ag48076
ag48089
ag48096
ag48103
ag48110
ag48117
asg21
I0
sg1057
S'com.google.common.io.ss'
p48122
sba(iArchitecture
Cluster
p48123
(dp48124
g7
(lp48125
(iArchitecture
Entity
p48126
(dp48127
g11
(lp48128
sg13
S'com.google.common.annotations.Beta'
p48129
sg15
(lp48130
sg17
(lp48131
sg19
(lp48132
sg21
I0
sba(iArchitecture
Entity
p48133
(dp48134
g11
(lp48135
sg13
S'com.google.common.math.BigIntegerMath'
p48136
sg15
(lp48137
sg17
(lp48138
sg19
(lp48139
sg21
I0
sba(iArchitecture
Entity
p48140
(dp48141
g11
(lp48142
sg13
S'com.google.common.math.BigIntegerMath$1'
p48143
sg15
(lp48144
sg17
(lp48145
sg19
(lp48146
sg21
I0
sba(iArchitecture
Entity
p48147
(dp48148
g11
(lp48149
sg13
S'com.google.common.math.DoubleMath'
p48150
sg15
(lp48151
sg17
(lp48152
sg19
(lp48153
sg21
I0
sba(iArchitecture
Entity
p48154
(dp48155
g11
(lp48156
sg13
S'com.google.common.math.DoubleMath$1'
p48157
sg15
(lp48158
sg17
(lp48159
sg19
(lp48160
sg21
I0
sba(iArchitecture
Entity
p48161
(dp48162
g11
(lp48163
sg13
S'com.google.common.math.DoubleUtils'
p48164
sg15
(lp48165
sg17
(lp48166
sg19
(lp48167
sg21
I0
sba(iArchitecture
Entity
p48168
(dp48169
g11
(lp48170
sg13
S'com.google.common.math.IntMath'
p48171
sg15
(lp48172
sg17
(lp48173
sg19
(lp48174
sg21
I0
sba(iArchitecture
Entity
p48175
(dp48176
g11
(lp48177
sg13
S'com.google.common.math.IntMath$1'
p48178
sg15
(lp48179
sg17
(lp48180
sg19
(lp48181
sg21
I0
sba(iArchitecture
Entity
p48182
(dp48183
g11
(lp48184
sg13
S'com.google.common.math.LinearTransformation'
p48185
sg15
(lp48186
sg17
(lp48187
sg19
(lp48188
sg21
I0
sba(iArchitecture
Entity
p48189
(dp48190
g11
(lp48191
sg13
S'com.google.common.math.LinearTransformation$1'
p48192
sg15
(lp48193
sg17
(lp48194
sg19
(lp48195
sg21
I0
sba(iArchitecture
Entity
p48196
(dp48197
g11
(lp48198
sg13
S'com.google.common.math.LinearTransformation$LinearTransformationBuilder'
p48199
sg15
(lp48200
sg17
(lp48201
sg19
(lp48202
sg21
I0
sba(iArchitecture
Entity
p48203
(dp48204
g11
(lp48205
sg13
S'com.google.common.math.LinearTransformation$NaNLinearTransformation'
p48206
sg15
(lp48207
sg17
(lp48208
sg19
(lp48209
sg21
I0
sba(iArchitecture
Entity
p48210
(dp48211
g11
(lp48212
sg13
S'com.google.common.math.LinearTransformation$RegularLinearTransformation'
p48213
sg15
(lp48214
sg17
(lp48215
sg19
(lp48216
sg21
I0
sba(iArchitecture
Entity
p48217
(dp48218
g11
(lp48219
sg13
S'com.google.common.math.LinearTransformation$VerticalLinearTransformation'
p48220
sg15
(lp48221
sg17
(lp48222
sg19
(lp48223
sg21
I0
sba(iArchitecture
Entity
p48224
(dp48225
g11
(lp48226
sg13
S'com.google.common.math.LongMath'
p48227
sg15
(lp48228
sg17
(lp48229
sg19
(lp48230
sg21
I0
sba(iArchitecture
Entity
p48231
(dp48232
g11
(lp48233
sg13
S'com.google.common.math.LongMath$1'
p48234
sg15
(lp48235
sg17
(lp48236
sg19
(lp48237
sg21
I0
sba(iArchitecture
Entity
p48238
(dp48239
g11
(lp48240
sg13
S'com.google.common.math.LongMath$MillerRabinTester'
p48241
sg15
(lp48242
sg17
(lp48243
sg19
(lp48244
sg21
I0
sba(iArchitecture
Entity
p48245
(dp48246
g11
(lp48247
sg13
S'com.google.common.math.LongMath$MillerRabinTester$1'
p48248
sg15
(lp48249
sg17
(lp48250
sg19
(lp48251
sg21
I0
sba(iArchitecture
Entity
p48252
(dp48253
g11
(lp48254
sg13
S'com.google.common.math.LongMath$MillerRabinTester$2'
p48255
sg15
(lp48256
sg17
(lp48257
sg19
(lp48258
sg21
I0
sba(iArchitecture
Entity
p48259
(dp48260
g11
(lp48261
sg13
S'com.google.common.math.MathPreconditions'
p48262
sg15
(lp48263
sg17
(lp48264
sg19
(lp48265
sg21
I0
sba(iArchitecture
Entity
p48266
(dp48267
g11
(lp48268
sg13
S'com.google.common.math.PairedStats'
p48269
sg15
(lp48270
sg17
(lp48271
sg19
(lp48272
sg21
I0
sba(iArchitecture
Entity
p48273
(dp48274
g11
(lp48275
sg13
S'com.google.common.math.PairedStatsAccumulator'
p48276
sg15
(lp48277
sg17
(lp48278
sg19
(lp48279
sg21
I0
sba(iArchitecture
Entity
p48280
(dp48281
g11
(lp48282
sg13
S'com.google.common.math.Quantiles'
p48283
sg15
(lp48284
sg17
(lp48285
sg19
(lp48286
sg21
I0
sba(iArchitecture
Entity
p48287
(dp48288
g11
(lp48289
sg13
S'com.google.common.math.Quantiles$1'
p48290
sg15
(lp48291
sg17
(lp48292
sg19
(lp48293
sg21
I0
sba(iArchitecture
Entity
p48294
(dp48295
g11
(lp48296
sg13
S'com.google.common.math.Quantiles$Scale'
p48297
sg15
(lp48298
sg17
(lp48299
sg19
(lp48300
sg21
I0
sba(iArchitecture
Entity
p48301
(dp48302
g11
(lp48303
sg13
S'com.google.common.math.Quantiles$ScaleAndIndex'
p48304
sg15
(lp48305
sg17
(lp48306
sg19
(lp48307
sg21
I0
sba(iArchitecture
Entity
p48308
(dp48309
g11
(lp48310
sg13
S'com.google.common.math.Quantiles$ScaleAndIndexes'
p48311
sg15
(lp48312
sg17
(lp48313
sg19
(lp48314
sg21
I0
sba(iArchitecture
Entity
p48315
(dp48316
g11
(lp48317
sg13
S'com.google.common.math.Stats'
p48318
sg15
(lp48319
sg17
(lp48320
sg19
(lp48321
sg21
I0
sba(iArchitecture
Entity
p48322
(dp48323
g11
(lp48324
sg13
S'com.google.common.math.StatsAccumulator'
p48325
sg15
(lp48326
sg17
(lp48327
sg19
(lp48328
sg21
I0
sbasg1055
(lp48329
g48129
ag48136
ag48143
ag48150
ag48157
ag48164
ag48171
ag48178
ag48185
ag48192
ag48199
ag48206
ag48213
ag48220
ag48227
ag48234
ag48241
ag48248
ag48255
ag48262
ag48269
ag48276
ag48283
ag48290
ag48297
ag48304
ag48311
ag48318
ag48325
asg21
I0
sg1057
S'com.google.common.math.ss'
p48330
sba(iArchitecture
Cluster
p48331
(dp48332
g7
(lp48333
(iArchitecture
Entity
p48334
(dp48335
g11
(lp48336
sg13
S'com.google.common.base.Strings'
p48337
sg15
(lp48338
sg17
(lp48339
sg19
(lp48340
sg21
I0
sba(iArchitecture
Entity
p48341
(dp48342
g11
(lp48343
sg13
S'com.google.common.collect.EmptyImmutableListMultimap'
p48344
sg15
(lp48345
sg17
(lp48346
sg19
(lp48347
sg21
I0
sba(iArchitecture
Entity
p48348
(dp48349
g11
(lp48350
sg13
S'com.google.common.collect.ImmutableListMultimap'
p48351
sg15
(lp48352
sg17
(lp48353
sg19
(lp48354
sg21
I0
sba(iArchitecture
Entity
p48355
(dp48356
g11
(lp48357
sg13
S'com.google.common.collect.ImmutableListMultimap$Builder'
p48358
sg15
(lp48359
sg17
(lp48360
sg19
(lp48361
sg21
I0
sba(iArchitecture
Entity
p48362
(dp48363
g11
(lp48364
sg13
S'com.google.common.net.HostAndPort'
p48365
sg15
(lp48366
sg17
(lp48367
sg19
(lp48368
sg21
I0
sba(iArchitecture
Entity
p48369
(dp48370
g11
(lp48371
sg13
S'com.google.common.net.HostSpecifier'
p48372
sg15
(lp48373
sg17
(lp48374
sg19
(lp48375
sg21
I0
sba(iArchitecture
Entity
p48376
(dp48377
g11
(lp48378
sg13
S'com.google.common.net.InetAddresses'
p48379
sg15
(lp48380
sg17
(lp48381
sg19
(lp48382
sg21
I0
sba(iArchitecture
Entity
p48383
(dp48384
g11
(lp48385
sg13
S'com.google.common.net.InetAddresses$TeredoInfo'
p48386
sg15
(lp48387
sg17
(lp48388
sg19
(lp48389
sg21
I0
sba(iArchitecture
Entity
p48390
(dp48391
g11
(lp48392
sg13
S'com.google.common.net.InternetDomainName'
p48393
sg15
(lp48394
sg17
(lp48395
sg19
(lp48396
sg21
I0
sba(iArchitecture
Entity
p48397
(dp48398
g11
(lp48399
sg13
S'com.google.common.net.MediaType'
p48400
sg15
(lp48401
sg17
(lp48402
sg19
(lp48403
sg21
I0
sba(iArchitecture
Entity
p48404
(dp48405
g11
(lp48406
sg13
S'com.google.common.net.MediaType$1'
p48407
sg15
(lp48408
sg17
(lp48409
sg19
(lp48410
sg21
I0
sba(iArchitecture
Entity
p48411
(dp48412
g11
(lp48413
sg13
S'com.google.common.net.MediaType$2'
p48414
sg15
(lp48415
sg17
(lp48416
sg19
(lp48417
sg21
I0
sba(iArchitecture
Entity
p48418
(dp48419
g11
(lp48420
sg13
S'com.google.common.net.MediaType$Tokenizer'
p48421
sg15
(lp48422
sg17
(lp48423
sg19
(lp48424
sg21
I0
sba(iArchitecture
Entity
p48425
(dp48426
g11
(lp48427
sg13
S'com.google.common.net.PercentEscaper'
p48428
sg15
(lp48429
sg17
(lp48430
sg19
(lp48431
sg21
I0
sba(iArchitecture
Entity
p48432
(dp48433
g11
(lp48434
sg13
S'com.google.common.net.UrlEscapers'
p48435
sg15
(lp48436
sg17
(lp48437
sg19
(lp48438
sg21
I0
sba(iArchitecture
Entity
p48439
(dp48440
g11
(lp48441
sg13
S'com.google.errorprone.annotations.concurrent.LazyInit'
p48442
sg15
(lp48443
sg17
(lp48444
sg19
(lp48445
sg21
I0
sbasg1055
(lp48446
g48337
ag48344
ag48351
ag48358
ag48365
ag48372
ag48379
ag48386
ag48393
ag48400
ag48407
ag48414
ag48421
ag48428
ag48435
ag48442
asg21
I0
sg1057
S'com.google.common.net.ss'
p48447
sba(iArchitecture
Cluster
p48448
(dp48449
g7
(lp48450
(iArchitecture
Entity
p48451
(dp48452
g11
(lp48453
sg13
S'com.google.common.io.LittleEndianDataInputStream'
p48454
sg15
(lp48455
sg17
(lp48456
sg19
(lp48457
sg21
I0
sba(iArchitecture
Entity
p48458
(dp48459
g11
(lp48460
sg13
S'com.google.common.io.LittleEndianDataOutputStream'
p48461
sg15
(lp48462
sg17
(lp48463
sg19
(lp48464
sg21
I0
sba(iArchitecture
Entity
p48465
(dp48466
g11
(lp48467
sg13
S'com.google.common.primitives.Booleans'
p48468
sg15
(lp48469
sg17
(lp48470
sg19
(lp48471
sg21
I0
sba(iArchitecture
Entity
p48472
(dp48473
g11
(lp48474
sg13
S'com.google.common.primitives.Booleans$BooleanArrayAsList'
p48475
sg15
(lp48476
sg17
(lp48477
sg19
(lp48478
sg21
I0
sba(iArchitecture
Entity
p48479
(dp48480
g11
(lp48481
sg13
S'com.google.common.primitives.Booleans$LexicographicalComparator'
p48482
sg15
(lp48483
sg17
(lp48484
sg19
(lp48485
sg21
I0
sba(iArchitecture
Entity
p48486
(dp48487
g11
(lp48488
sg13
S'com.google.common.primitives.Bytes'
p48489
sg15
(lp48490
sg17
(lp48491
sg19
(lp48492
sg21
I0
sba(iArchitecture
Entity
p48493
(dp48494
g11
(lp48495
sg13
S'com.google.common.primitives.Bytes$ByteArrayAsList'
p48496
sg15
(lp48497
sg17
(lp48498
sg19
(lp48499
sg21
I0
sba(iArchitecture
Entity
p48500
(dp48501
g11
(lp48502
sg13
S'com.google.common.primitives.Chars'
p48503
sg15
(lp48504
sg17
(lp48505
sg19
(lp48506
sg21
I0
sba(iArchitecture
Entity
p48507
(dp48508
g11
(lp48509
sg13
S'com.google.common.primitives.Chars$CharArrayAsList'
p48510
sg15
(lp48511
sg17
(lp48512
sg19
(lp48513
sg21
I0
sba(iArchitecture
Entity
p48514
(dp48515
g11
(lp48516
sg13
S'com.google.common.primitives.Chars$LexicographicalComparator'
p48517
sg15
(lp48518
sg17
(lp48519
sg19
(lp48520
sg21
I0
sba(iArchitecture
Entity
p48521
(dp48522
g11
(lp48523
sg13
S'com.google.common.primitives.Doubles'
p48524
sg15
(lp48525
sg17
(lp48526
sg19
(lp48527
sg21
I0
sba(iArchitecture
Entity
p48528
(dp48529
g11
(lp48530
sg13
S'com.google.common.primitives.Doubles$DoubleArrayAsList'
p48531
sg15
(lp48532
sg17
(lp48533
sg19
(lp48534
sg21
I0
sba(iArchitecture
Entity
p48535
(dp48536
g11
(lp48537
sg13
S'com.google.common.primitives.Doubles$DoubleConverter'
p48538
sg15
(lp48539
sg17
(lp48540
sg19
(lp48541
sg21
I0
sba(iArchitecture
Entity
p48542
(dp48543
g11
(lp48544
sg13
S'com.google.common.primitives.Doubles$LexicographicalComparator'
p48545
sg15
(lp48546
sg17
(lp48547
sg19
(lp48548
sg21
I0
sba(iArchitecture
Entity
p48549
(dp48550
g11
(lp48551
sg13
S'com.google.common.primitives.Floats'
p48552
sg15
(lp48553
sg17
(lp48554
sg19
(lp48555
sg21
I0
sba(iArchitecture
Entity
p48556
(dp48557
g11
(lp48558
sg13
S'com.google.common.primitives.Floats$FloatArrayAsList'
p48559
sg15
(lp48560
sg17
(lp48561
sg19
(lp48562
sg21
I0
sba(iArchitecture
Entity
p48563
(dp48564
g11
(lp48565
sg13
S'com.google.common.primitives.Floats$FloatConverter'
p48566
sg15
(lp48567
sg17
(lp48568
sg19
(lp48569
sg21
I0
sba(iArchitecture
Entity
p48570
(dp48571
g11
(lp48572
sg13
S'com.google.common.primitives.Floats$LexicographicalComparator'
p48573
sg15
(lp48574
sg17
(lp48575
sg19
(lp48576
sg21
I0
sba(iArchitecture
Entity
p48577
(dp48578
g11
(lp48579
sg13
S'com.google.common.primitives.Ints'
p48580
sg15
(lp48581
sg17
(lp48582
sg19
(lp48583
sg21
I0
sba(iArchitecture
Entity
p48584
(dp48585
g11
(lp48586
sg13
S'com.google.common.primitives.Ints$IntArrayAsList'
p48587
sg15
(lp48588
sg17
(lp48589
sg19
(lp48590
sg21
I0
sba(iArchitecture
Entity
p48591
(dp48592
g11
(lp48593
sg13
S'com.google.common.primitives.Ints$IntConverter'
p48594
sg15
(lp48595
sg17
(lp48596
sg19
(lp48597
sg21
I0
sba(iArchitecture
Entity
p48598
(dp48599
g11
(lp48600
sg13
S'com.google.common.primitives.Ints$LexicographicalComparator'
p48601
sg15
(lp48602
sg17
(lp48603
sg19
(lp48604
sg21
I0
sba(iArchitecture
Entity
p48605
(dp48606
g11
(lp48607
sg13
S'com.google.common.primitives.Longs'
p48608
sg15
(lp48609
sg17
(lp48610
sg19
(lp48611
sg21
I0
sba(iArchitecture
Entity
p48612
(dp48613
g11
(lp48614
sg13
S'com.google.common.primitives.Longs$LexicographicalComparator'
p48615
sg15
(lp48616
sg17
(lp48617
sg19
(lp48618
sg21
I0
sba(iArchitecture
Entity
p48619
(dp48620
g11
(lp48621
sg13
S'com.google.common.primitives.Longs$LongArrayAsList'
p48622
sg15
(lp48623
sg17
(lp48624
sg19
(lp48625
sg21
I0
sba(iArchitecture
Entity
p48626
(dp48627
g11
(lp48628
sg13
S'com.google.common.primitives.Longs$LongConverter'
p48629
sg15
(lp48630
sg17
(lp48631
sg19
(lp48632
sg21
I0
sba(iArchitecture
Entity
p48633
(dp48634
g11
(lp48635
sg13
S'com.google.common.primitives.ParseRequest'
p48636
sg15
(lp48637
sg17
(lp48638
sg19
(lp48639
sg21
I0
sba(iArchitecture
Entity
p48640
(dp48641
g11
(lp48642
sg13
S'com.google.common.primitives.Shorts'
p48643
sg15
(lp48644
sg17
(lp48645
sg19
(lp48646
sg21
I0
sba(iArchitecture
Entity
p48647
(dp48648
g11
(lp48649
sg13
S'com.google.common.primitives.Shorts$LexicographicalComparator'
p48650
sg15
(lp48651
sg17
(lp48652
sg19
(lp48653
sg21
I0
sba(iArchitecture
Entity
p48654
(dp48655
g11
(lp48656
sg13
S'com.google.common.primitives.Shorts$ShortArrayAsList'
p48657
sg15
(lp48658
sg17
(lp48659
sg19
(lp48660
sg21
I0
sba(iArchitecture
Entity
p48661
(dp48662
g11
(lp48663
sg13
S'com.google.common.primitives.Shorts$ShortConverter'
p48664
sg15
(lp48665
sg17
(lp48666
sg19
(lp48667
sg21
I0
sba(iArchitecture
Entity
p48668
(dp48669
g11
(lp48670
sg13
S'com.google.common.primitives.SignedBytes'
p48671
sg15
(lp48672
sg17
(lp48673
sg19
(lp48674
sg21
I0
sba(iArchitecture
Entity
p48675
(dp48676
g11
(lp48677
sg13
S'com.google.common.primitives.SignedBytes$LexicographicalComparator'
p48678
sg15
(lp48679
sg17
(lp48680
sg19
(lp48681
sg21
I0
sba(iArchitecture
Entity
p48682
(dp48683
g11
(lp48684
sg13
S'com.google.common.primitives.UnsignedBytes'
p48685
sg15
(lp48686
sg17
(lp48687
sg19
(lp48688
sg21
I0
sba(iArchitecture
Entity
p48689
(dp48690
g11
(lp48691
sg13
S'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder'
p48692
sg15
(lp48693
sg17
(lp48694
sg19
(lp48695
sg21
I0
sba(iArchitecture
Entity
p48696
(dp48697
g11
(lp48698
sg13
S'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator'
p48699
sg15
(lp48700
sg17
(lp48701
sg19
(lp48702
sg21
I0
sba(iArchitecture
Entity
p48703
(dp48704
g11
(lp48705
sg13
S'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator'
p48706
sg15
(lp48707
sg17
(lp48708
sg19
(lp48709
sg21
I0
sba(iArchitecture
Entity
p48710
(dp48711
g11
(lp48712
sg13
S'com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1'
p48713
sg15
(lp48714
sg17
(lp48715
sg19
(lp48716
sg21
I0
sba(iArchitecture
Entity
p48717
(dp48718
g11
(lp48719
sg13
S'com.google.common.primitives.UnsignedInts'
p48720
sg15
(lp48721
sg17
(lp48722
sg19
(lp48723
sg21
I0
sba(iArchitecture
Entity
p48724
(dp48725
g11
(lp48726
sg13
S'com.google.common.primitives.UnsignedInts$LexicographicalComparator'
p48727
sg15
(lp48728
sg17
(lp48729
sg19
(lp48730
sg21
I0
sba(iArchitecture
Entity
p48731
(dp48732
g11
(lp48733
sg13
S'com.google.common.primitives.UnsignedLongs'
p48734
sg15
(lp48735
sg17
(lp48736
sg19
(lp48737
sg21
I0
sba(iArchitecture
Entity
p48738
(dp48739
g11
(lp48740
sg13
S'com.google.common.primitives.UnsignedLongs$LexicographicalComparator'
p48741
sg15
(lp48742
sg17
(lp48743
sg19
(lp48744
sg21
I0
sbasg1055
(lp48745
g48454
ag48461
ag48468
ag48475
ag48482
ag48489
ag48496
ag48503
ag48510
ag48517
ag48524
ag48531
ag48538
ag48545
ag48552
ag48559
ag48566
ag48573
ag48580
ag48587
ag48594
ag48601
ag48608
ag48615
ag48622
ag48629
ag48636
ag48643
ag48650
ag48657
ag48664
ag48671
ag48678
ag48685
ag48692
ag48699
ag48706
ag48713
ag48720
ag48727
ag48734
ag48741
asg21
I0
sg1057
S'com.google.common.primitives.ss'
p48746
sba(iArchitecture
Cluster
p48747
(dp48748
g7
(lp48749
(iArchitecture
Entity
p48750
(dp48751
g11
(lp48752
sg13
S'com.google.common.collect.ForwardingMapEntry'
p48753
sg15
(lp48754
sg17
(lp48755
sg19
(lp48756
sg21
I0
sba(iArchitecture
Entity
p48757
(dp48758
g11
(lp48759
sg13
S'com.google.common.collect.ImmutableSet$Builder'
p48760
sg15
(lp48761
sg17
(lp48762
sg19
(lp48763
sg21
I0
sba(iArchitecture
Entity
p48764
(dp48765
g11
(lp48766
sg13
S'com.google.common.reflect.ClassPath'
p48767
sg15
(lp48768
sg17
(lp48769
sg19
(lp48770
sg21
I0
sba(iArchitecture
Entity
p48771
(dp48772
g11
(lp48773
sg13
S'com.google.common.reflect.ClassPath$1'
p48774
sg15
(lp48775
sg17
(lp48776
sg19
(lp48777
sg21
I0
sba(iArchitecture
Entity
p48778
(dp48779
g11
(lp48780
sg13
S'com.google.common.reflect.ClassPath$ClassInfo'
p48781
sg15
(lp48782
sg17
(lp48783
sg19
(lp48784
sg21
I0
sba(iArchitecture
Entity
p48785
(dp48786
g11
(lp48787
sg13
S'com.google.common.reflect.ClassPath$DefaultScanner'
p48788
sg15
(lp48789
sg17
(lp48790
sg19
(lp48791
sg21
I0
sba(iArchitecture
Entity
p48792
(dp48793
g11
(lp48794
sg13
S'com.google.common.reflect.ClassPath$ResourceInfo'
p48795
sg15
(lp48796
sg17
(lp48797
sg19
(lp48798
sg21
I0
sba(iArchitecture
Entity
p48799
(dp48800
g11
(lp48801
sg13
S'com.google.common.reflect.ClassPath$Scanner'
p48802
sg15
(lp48803
sg17
(lp48804
sg19
(lp48805
sg21
I0
sba(iArchitecture
Entity
p48806
(dp48807
g11
(lp48808
sg13
S'com.google.common.reflect.Element'
p48809
sg15
(lp48810
sg17
(lp48811
sg19
(lp48812
sg21
I0
sba(iArchitecture
Entity
p48813
(dp48814
g11
(lp48815
sg13
S'com.google.common.reflect.ImmutableTypeToInstanceMap'
p48816
sg15
(lp48817
sg17
(lp48818
sg19
(lp48819
sg21
I0
sba(iArchitecture
Entity
p48820
(dp48821
g11
(lp48822
sg13
S'com.google.common.reflect.ImmutableTypeToInstanceMap$1'
p48823
sg15
(lp48824
sg17
(lp48825
sg19
(lp48826
sg21
I0
sba(iArchitecture
Entity
p48827
(dp48828
g11
(lp48829
sg13
S'com.google.common.reflect.ImmutableTypeToInstanceMap$Builder'
p48830
sg15
(lp48831
sg17
(lp48832
sg19
(lp48833
sg21
I0
sba(iArchitecture
Entity
p48834
(dp48835
g11
(lp48836
sg13
S'com.google.common.reflect.Invokable'
p48837
sg15
(lp48838
sg17
(lp48839
sg19
(lp48840
sg21
I0
sba(iArchitecture
Entity
p48841
(dp48842
g11
(lp48843
sg13
S'com.google.common.reflect.Invokable$ConstructorInvokable'
p48844
sg15
(lp48845
sg17
(lp48846
sg19
(lp48847
sg21
I0
sba(iArchitecture
Entity
p48848
(dp48849
g11
(lp48850
sg13
S'com.google.common.reflect.Invokable$MethodInvokable'
p48851
sg15
(lp48852
sg17
(lp48853
sg19
(lp48854
sg21
I0
sba(iArchitecture
Entity
p48855
(dp48856
g11
(lp48857
sg13
S'com.google.common.reflect.MutableTypeToInstanceMap'
p48858
sg15
(lp48859
sg17
(lp48860
sg19
(lp48861
sg21
I0
sba(iArchitecture
Entity
p48862
(dp48863
g11
(lp48864
sg13
S'com.google.common.reflect.MutableTypeToInstanceMap$1'
p48865
sg15
(lp48866
sg17
(lp48867
sg19
(lp48868
sg21
I0
sba(iArchitecture
Entity
p48869
(dp48870
g11
(lp48871
sg13
S'com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry'
p48872
sg15
(lp48873
sg17
(lp48874
sg19
(lp48875
sg21
I0
sba(iArchitecture
Entity
p48876
(dp48877
g11
(lp48878
sg13
S'com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1'
p48879
sg15
(lp48880
sg17
(lp48881
sg19
(lp48882
sg21
I0
sba(iArchitecture
Entity
p48883
(dp48884
g11
(lp48885
sg13
S'com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2'
p48886
sg15
(lp48887
sg17
(lp48888
sg19
(lp48889
sg21
I0
sba(iArchitecture
Entity
p48890
(dp48891
g11
(lp48892
sg13
S'com.google.common.reflect.TypeCapture'
p48893
sg15
(lp48894
sg17
(lp48895
sg19
(lp48896
sg21
I0
sba(iArchitecture
Entity
p48897
(dp48898
g11
(lp48899
sg13
S'com.google.common.reflect.TypeParameter'
p48900
sg15
(lp48901
sg17
(lp48902
sg19
(lp48903
sg21
I0
sba(iArchitecture
Entity
p48904
(dp48905
g11
(lp48906
sg13
S'com.google.common.reflect.TypeResolver'
p48907
sg15
(lp48908
sg17
(lp48909
sg19
(lp48910
sg21
I0
sba(iArchitecture
Entity
p48911
(dp48912
g11
(lp48913
sg13
S'com.google.common.reflect.TypeResolver$1'
p48914
sg15
(lp48915
sg17
(lp48916
sg19
(lp48917
sg21
I0
sba(iArchitecture
Entity
p48918
(dp48919
g11
(lp48920
sg13
S'com.google.common.reflect.TypeResolver$TypeMappingIntrospector'
p48921
sg15
(lp48922
sg17
(lp48923
sg19
(lp48924
sg21
I0
sba(iArchitecture
Entity
p48925
(dp48926
g11
(lp48927
sg13
S'com.google.common.reflect.TypeResolver$TypeTable'
p48928
sg15
(lp48929
sg17
(lp48930
sg19
(lp48931
sg21
I0
sba(iArchitecture
Entity
p48932
(dp48933
g11
(lp48934
sg13
S'com.google.common.reflect.TypeResolver$TypeTable$1'
p48935
sg15
(lp48936
sg17
(lp48937
sg19
(lp48938
sg21
I0
sba(iArchitecture
Entity
p48939
(dp48940
g11
(lp48941
sg13
S'com.google.common.reflect.TypeResolver$TypeVariableKey'
p48942
sg15
(lp48943
sg17
(lp48944
sg19
(lp48945
sg21
I0
sba(iArchitecture
Entity
p48946
(dp48947
g11
(lp48948
sg13
S'com.google.common.reflect.TypeResolver$WildcardCapturer'
p48949
sg15
(lp48950
sg17
(lp48951
sg19
(lp48952
sg21
I0
sba(iArchitecture
Entity
p48953
(dp48954
g11
(lp48955
sg13
S'com.google.common.reflect.TypeToInstanceMap'
p48956
sg15
(lp48957
sg17
(lp48958
sg19
(lp48959
sg21
I0
sba(iArchitecture
Entity
p48960
(dp48961
g11
(lp48962
sg13
S'com.google.common.reflect.TypeToken'
p48963
sg15
(lp48964
sg17
(lp48965
sg19
(lp48966
sg21
I0
sba(iArchitecture
Entity
p48967
(dp48968
g11
(lp48969
sg13
S'com.google.common.reflect.TypeToken$1'
p48970
sg15
(lp48971
sg17
(lp48972
sg19
(lp48973
sg21
I0
sba(iArchitecture
Entity
p48974
(dp48975
g11
(lp48976
sg13
S'com.google.common.reflect.TypeToken$2'
p48977
sg15
(lp48978
sg17
(lp48979
sg19
(lp48980
sg21
I0
sba(iArchitecture
Entity
p48981
(dp48982
g11
(lp48983
sg13
S'com.google.common.reflect.TypeToken$3'
p48984
sg15
(lp48985
sg17
(lp48986
sg19
(lp48987
sg21
I0
sba(iArchitecture
Entity
p48988
(dp48989
g11
(lp48990
sg13
S'com.google.common.reflect.TypeToken$4'
p48991
sg15
(lp48992
sg17
(lp48993
sg19
(lp48994
sg21
I0
sba(iArchitecture
Entity
p48995
(dp48996
g11
(lp48997
sg13
S'com.google.common.reflect.TypeToken$Bounds'
p48998
sg15
(lp48999
sg17
(lp49000
sg19
(lp49001
sg21
I0
sba(iArchitecture
Entity
p49002
(dp49003
g11
(lp49004
sg13
S'com.google.common.reflect.TypeToken$InterfaceSet'
p49005
sg15
(lp49006
sg17
(lp49007
sg19
(lp49008
sg21
I0
sba(iArchitecture
Entity
p49009
(dp49010
g11
(lp49011
sg13
S'com.google.common.reflect.TypeToken$InterfaceSet$1'
p49012
sg15
(lp49013
sg17
(lp49014
sg19
(lp49015
sg21
I0
sba(iArchitecture
Entity
p49016
(dp49017
g11
(lp49018
sg13
S'com.google.common.reflect.TypeToken$SimpleTypeToken'
p49019
sg15
(lp49020
sg17
(lp49021
sg19
(lp49022
sg21
I0
sba(iArchitecture
Entity
p49023
(dp49024
g11
(lp49025
sg13
S'com.google.common.reflect.TypeToken$TypeCollector'
p49026
sg15
(lp49027
sg17
(lp49028
sg19
(lp49029
sg21
I0
sba(iArchitecture
Entity
p49030
(dp49031
g11
(lp49032
sg13
S'com.google.common.reflect.TypeToken$TypeCollector$1'
p49033
sg15
(lp49034
sg17
(lp49035
sg19
(lp49036
sg21
I0
sba(iArchitecture
Entity
p49037
(dp49038
g11
(lp49039
sg13
S'com.google.common.reflect.TypeToken$TypeCollector$2'
p49040
sg15
(lp49041
sg17
(lp49042
sg19
(lp49043
sg21
I0
sba(iArchitecture
Entity
p49044
(dp49045
g11
(lp49046
sg13
S'com.google.common.reflect.TypeToken$TypeCollector$3'
p49047
sg15
(lp49048
sg17
(lp49049
sg19
(lp49050
sg21
I0
sba(iArchitecture
Entity
p49051
(dp49052
g11
(lp49053
sg13
S'com.google.common.reflect.TypeToken$TypeCollector$4'
p49054
sg15
(lp49055
sg17
(lp49056
sg19
(lp49057
sg21
I0
sba(iArchitecture
Entity
p49058
(dp49059
g11
(lp49060
sg13
S'com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector'
p49061
sg15
(lp49062
sg17
(lp49063
sg19
(lp49064
sg21
I0
sba(iArchitecture
Entity
p49065
(dp49066
g11
(lp49067
sg13
S'com.google.common.reflect.TypeToken$TypeFilter'
p49068
sg15
(lp49069
sg17
(lp49070
sg19
(lp49071
sg21
I0
sba(iArchitecture
Entity
p49072
(dp49073
g11
(lp49074
sg13
S'com.google.common.reflect.TypeToken$TypeFilter$1'
p49075
sg15
(lp49076
sg17
(lp49077
sg19
(lp49078
sg21
I0
sba(iArchitecture
Entity
p49079
(dp49080
g11
(lp49081
sg13
S'com.google.common.reflect.TypeToken$TypeFilter$2'
p49082
sg15
(lp49083
sg17
(lp49084
sg19
(lp49085
sg21
I0
sba(iArchitecture
Entity
p49086
(dp49087
g11
(lp49088
sg13
S'com.google.common.reflect.TypeVisitor'
p49089
sg15
(lp49090
sg17
(lp49091
sg19
(lp49092
sg21
I0
sba(iArchitecture
Entity
p49093
(dp49094
g11
(lp49095
sg13
S'com.google.common.reflect.Types'
p49096
sg15
(lp49097
sg17
(lp49098
sg19
(lp49099
sg21
I0
sba(iArchitecture
Entity
p49100
(dp49101
g11
(lp49102
sg13
S'com.google.common.reflect.Types$1'
p49103
sg15
(lp49104
sg17
(lp49105
sg19
(lp49106
sg21
I0
sba(iArchitecture
Entity
p49107
(dp49108
g11
(lp49109
sg13
S'com.google.common.reflect.Types$2'
p49110
sg15
(lp49111
sg17
(lp49112
sg19
(lp49113
sg21
I0
sba(iArchitecture
Entity
p49114
(dp49115
g11
(lp49116
sg13
S'com.google.common.reflect.Types$ClassOwnership'
p49117
sg15
(lp49118
sg17
(lp49119
sg19
(lp49120
sg21
I0
sba(iArchitecture
Entity
p49121
(dp49122
g11
(lp49123
sg13
S'com.google.common.reflect.Types$ClassOwnership$1'
p49124
sg15
(lp49125
sg17
(lp49126
sg19
(lp49127
sg21
I0
sba(iArchitecture
Entity
p49128
(dp49129
g11
(lp49130
sg13
S'com.google.common.reflect.Types$ClassOwnership$1LocalClass'
p49131
sg15
(lp49132
sg17
(lp49133
sg19
(lp49134
sg21
I0
sba(iArchitecture
Entity
p49135
(dp49136
g11
(lp49137
sg13
S'com.google.common.reflect.Types$ClassOwnership$2'
p49138
sg15
(lp49139
sg17
(lp49140
sg19
(lp49141
sg21
I0
sba(iArchitecture
Entity
p49142
(dp49143
g11
(lp49144
sg13
S'com.google.common.reflect.Types$ClassOwnership$3'
p49145
sg15
(lp49146
sg17
(lp49147
sg19
(lp49148
sg21
I0
sba(iArchitecture
Entity
p49149
(dp49150
g11
(lp49151
sg13
S'com.google.common.reflect.Types$GenericArrayTypeImpl'
p49152
sg15
(lp49153
sg17
(lp49154
sg19
(lp49155
sg21
I0
sba(iArchitecture
Entity
p49156
(dp49157
g11
(lp49158
sg13
S'com.google.common.reflect.Types$JavaVersion'
p49159
sg15
(lp49160
sg17
(lp49161
sg19
(lp49162
sg21
I0
sba(iArchitecture
Entity
p49163
(dp49164
g11
(lp49165
sg13
S'com.google.common.reflect.Types$JavaVersion$1'
p49166
sg15
(lp49167
sg17
(lp49168
sg19
(lp49169
sg21
I0
sba(iArchitecture
Entity
p49170
(dp49171
g11
(lp49172
sg13
S'com.google.common.reflect.Types$JavaVersion$2'
p49173
sg15
(lp49174
sg17
(lp49175
sg19
(lp49176
sg21
I0
sba(iArchitecture
Entity
p49177
(dp49178
g11
(lp49179
sg13
S'com.google.common.reflect.Types$JavaVersion$3'
p49180
sg15
(lp49181
sg17
(lp49182
sg19
(lp49183
sg21
I0
sba(iArchitecture
Entity
p49184
(dp49185
g11
(lp49186
sg13
S'com.google.common.reflect.Types$JavaVersion$4'
p49187
sg15
(lp49188
sg17
(lp49189
sg19
(lp49190
sg21
I0
sba(iArchitecture
Entity
p49191
(dp49192
g11
(lp49193
sg13
S'com.google.common.reflect.Types$NativeTypeVariableEquals'
p49194
sg15
(lp49195
sg17
(lp49196
sg19
(lp49197
sg21
I0
sba(iArchitecture
Entity
p49198
(dp49199
g11
(lp49200
sg13
S'com.google.common.reflect.Types$ParameterizedTypeImpl'
p49201
sg15
(lp49202
sg17
(lp49203
sg19
(lp49204
sg21
I0
sba(iArchitecture
Entity
p49205
(dp49206
g11
(lp49207
sg13
S'com.google.common.reflect.Types$TypeVariableImpl'
p49208
sg15
(lp49209
sg17
(lp49210
sg19
(lp49211
sg21
I0
sba(iArchitecture
Entity
p49212
(dp49213
g11
(lp49214
sg13
S'com.google.common.reflect.Types$TypeVariableInvocationHandler'
p49215
sg15
(lp49216
sg17
(lp49217
sg19
(lp49218
sg21
I0
sba(iArchitecture
Entity
p49219
(dp49220
g11
(lp49221
sg13
S'com.google.common.reflect.Types$WildcardTypeImpl'
p49222
sg15
(lp49223
sg17
(lp49224
sg19
(lp49225
sg21
I0
sbasg1055
(lp49226
g48753
ag48760
ag48767
ag48774
ag48781
ag48788
ag48795
ag48802
ag48809
ag48816
ag48823
ag48830
ag48837
ag48844
ag48851
ag48858
ag48865
ag48872
ag48879
ag48886
ag48893
ag48900
ag48907
ag48914
ag48921
ag48928
ag48935
ag48942
ag48949
ag48956
ag48963
ag48970
ag48977
ag48984
ag48991
ag48998
ag49005
ag49012
ag49019
ag49026
ag49033
ag49040
ag49047
ag49054
ag49061
ag49068
ag49075
ag49082
ag49089
ag49096
ag49103
ag49110
ag49117
ag49124
ag49131
ag49138
ag49145
ag49152
ag49159
ag49166
ag49173
ag49180
ag49187
ag49194
ag49201
ag49208
ag49215
ag49222
asg21
I0
sg1057
S'com.google.common.reflect.ss'
p49227
sba(iArchitecture
Cluster
p49228
(dp49229
g7
(lp49230
(iArchitecture
Entity
p49231
(dp49232
g11
(lp49233
sg13
S'com.google.common.ForceGuavaCompilationEntryPoint'
p49234
sg15
(lp49235
sg17
(lp49236
sg19
(lp49237
sg21
I0
sba(iArchitecture
Entity
p49238
(dp49239
g11
(lp49240
sg13
S'com.google.gwt.core.client.EntryPoint'
p49241
sg15
(lp49242
sg17
(lp49243
sg19
(lp49244
sg21
I0
sbasg1055
(lp49245
g49234
ag49241
asg21
I0
sg1057
S'com.google.common.ss'
p49246
sba(iArchitecture
Cluster
p49247
(dp49248
g7
(lp49249
(iArchitecture
Entity
p49250
(dp49251
g11
(lp49252
sg13
S'com.google.common.base.Charsets'
p49253
sg15
(lp49254
sg17
(lp49255
sg19
(lp49256
sg21
I0
sba(iArchitecture
Entity
p49257
(dp49258
g11
(lp49259
sg13
S'com.google.common.base.Defaults'
p49260
sg15
(lp49261
sg17
(lp49262
sg19
(lp49263
sg21
I0
sba(iArchitecture
Entity
p49264
(dp49265
g11
(lp49266
sg13
S'com.google.common.collect.ArrayListMultimap'
p49267
sg15
(lp49268
sg17
(lp49269
sg19
(lp49270
sg21
I0
sba(iArchitecture
Entity
p49271
(dp49272
g11
(lp49273
sg13
S'com.google.common.collect.ClassToInstanceMap'
p49274
sg15
(lp49275
sg17
(lp49276
sg19
(lp49277
sg21
I0
sba(iArchitecture
Entity
p49278
(dp49279
g11
(lp49280
sg13
S'com.google.common.collect.HashBasedTable'
p49281
sg15
(lp49282
sg17
(lp49283
sg19
(lp49284
sg21
I0
sba(iArchitecture
Entity
p49285
(dp49286
g11
(lp49287
sg13
S'com.google.common.collect.HashBasedTable$Factory'
p49288
sg15
(lp49289
sg17
(lp49290
sg19
(lp49291
sg21
I0
sba(iArchitecture
Entity
p49292
(dp49293
g11
(lp49294
sg13
S'com.google.common.collect.HashMultimap'
p49295
sg15
(lp49296
sg17
(lp49297
sg19
(lp49298
sg21
I0
sba(iArchitecture
Entity
p49299
(dp49300
g11
(lp49301
sg13
S'com.google.common.collect.ImmutableClassToInstanceMap'
p49302
sg15
(lp49303
sg17
(lp49304
sg19
(lp49305
sg21
I0
sba(iArchitecture
Entity
p49306
(dp49307
g11
(lp49308
sg13
S'com.google.common.collect.ImmutableClassToInstanceMap$1'
p49309
sg15
(lp49310
sg17
(lp49311
sg19
(lp49312
sg21
I0
sba(iArchitecture
Entity
p49313
(dp49314
g11
(lp49315
sg13
S'com.google.common.collect.ImmutableClassToInstanceMap$Builder'
p49316
sg15
(lp49317
sg17
(lp49318
sg19
(lp49319
sg21
I0
sba(iArchitecture
Entity
p49320
(dp49321
g11
(lp49322
sg13
S'com.google.common.collect.ImmutableList$Builder'
p49323
sg15
(lp49324
sg17
(lp49325
sg19
(lp49326
sg21
I0
sba(iArchitecture
Entity
p49327
(dp49328
g11
(lp49329
sg13
S'com.google.common.primitives.Primitives'
p49330
sg15
(lp49331
sg17
(lp49332
sg19
(lp49333
sg21
I0
sba(iArchitecture
Entity
p49334
(dp49335
g11
(lp49336
sg13
S'com.google.common.primitives.UnsignedInteger'
p49337
sg15
(lp49338
sg17
(lp49339
sg19
(lp49340
sg21
I0
sba(iArchitecture
Entity
p49341
(dp49342
g11
(lp49343
sg13
S'com.google.common.primitives.UnsignedLong'
p49344
sg15
(lp49345
sg17
(lp49346
sg19
(lp49347
sg21
I0
sba(iArchitecture
Entity
p49348
(dp49349
g11
(lp49350
sg13
S'com.google.common.reflect.AbstractInvocationHandler'
p49351
sg15
(lp49352
sg17
(lp49353
sg19
(lp49354
sg21
I0
sba(iArchitecture
Entity
p49355
(dp49356
g11
(lp49357
sg13
S'com.google.common.reflect.Parameter'
p49358
sg15
(lp49359
sg17
(lp49360
sg19
(lp49361
sg21
I0
sba(iArchitecture
Entity
p49362
(dp49363
g11
(lp49364
sg13
S'com.google.common.reflect.Reflection'
p49365
sg15
(lp49366
sg17
(lp49367
sg19
(lp49368
sg21
I0
sba(iArchitecture
Entity
p49369
(dp49370
g11
(lp49371
sg13
S'com.google.common.testing.AbstractPackageSanityTests'
p49372
sg15
(lp49373
sg17
(lp49374
sg19
(lp49375
sg21
I0
sba(iArchitecture
Entity
p49376
(dp49377
g11
(lp49378
sg13
S'com.google.common.testing.AbstractPackageSanityTests$1'
p49379
sg15
(lp49380
sg17
(lp49381
sg19
(lp49382
sg21
I0
sba(iArchitecture
Entity
p49383
(dp49384
g11
(lp49385
sg13
S'com.google.common.testing.AbstractPackageSanityTests$2'
p49386
sg15
(lp49387
sg17
(lp49388
sg19
(lp49389
sg21
I0
sba(iArchitecture
Entity
p49390
(dp49391
g11
(lp49392
sg13
S'com.google.common.testing.AbstractPackageSanityTests$Chopper'
p49393
sg15
(lp49394
sg17
(lp49395
sg19
(lp49396
sg21
I0
sba(iArchitecture
Entity
p49397
(dp49398
g11
(lp49399
sg13
S'com.google.common.testing.AbstractPackageSanityTests$Chopper$1'
p49400
sg15
(lp49401
sg17
(lp49402
sg19
(lp49403
sg21
I0
sba(iArchitecture
Entity
p49404
(dp49405
g11
(lp49406
sg13
S'com.google.common.testing.AbstractPackageSanityTests$Chopper$2'
p49407
sg15
(lp49408
sg17
(lp49409
sg19
(lp49410
sg21
I0
sba(iArchitecture
Entity
p49411
(dp49412
g11
(lp49413
sg13
S'com.google.common.testing.ArbitraryInstances'
p49414
sg15
(lp49415
sg17
(lp49416
sg19
(lp49417
sg21
I0
sba(iArchitecture
Entity
p49418
(dp49419
g11
(lp49420
sg13
S'com.google.common.testing.ArbitraryInstances$1'
p49421
sg15
(lp49422
sg17
(lp49423
sg19
(lp49424
sg21
I0
sba(iArchitecture
Entity
p49425
(dp49426
g11
(lp49427
sg13
S'com.google.common.testing.ArbitraryInstances$AlwaysEqual'
p49428
sg15
(lp49429
sg17
(lp49430
sg19
(lp49431
sg21
I0
sba(iArchitecture
Entity
p49432
(dp49433
g11
(lp49434
sg13
S'com.google.common.testing.ArbitraryInstances$ByToString'
p49435
sg15
(lp49436
sg17
(lp49437
sg19
(lp49438
sg21
I0
sba(iArchitecture
Entity
p49439
(dp49440
g11
(lp49441
sg13
S'com.google.common.testing.ArbitraryInstances$Dummies'
p49442
sg15
(lp49443
sg17
(lp49444
sg19
(lp49445
sg21
I0
sba(iArchitecture
Entity
p49446
(dp49447
g11
(lp49448
sg13
S'com.google.common.testing.ArbitraryInstances$Dummies$DeterministicRandom'
p49449
sg15
(lp49450
sg17
(lp49451
sg19
(lp49452
sg21
I0
sba(iArchitecture
Entity
p49453
(dp49454
g11
(lp49455
sg13
S'com.google.common.testing.ArbitraryInstances$Dummies$DummyCountDownLatch'
p49456
sg15
(lp49457
sg17
(lp49458
sg19
(lp49459
sg21
I0
sba(iArchitecture
Entity
p49460
(dp49461
g11
(lp49462
sg13
S'com.google.common.testing.ArbitraryInstances$Dummies$DummyExecutor'
p49463
sg15
(lp49464
sg17
(lp49465
sg19
(lp49466
sg21
I0
sba(iArchitecture
Entity
p49467
(dp49468
g11
(lp49469
sg13
S'com.google.common.testing.ArbitraryInstances$Dummies$DummyRunnable'
p49470
sg15
(lp49471
sg17
(lp49472
sg19
(lp49473
sg21
I0
sba(iArchitecture
Entity
p49474
(dp49475
g11
(lp49476
sg13
S'com.google.common.testing.ArbitraryInstances$Dummies$DummyScheduledThreadPoolExecutor'
p49477
sg15
(lp49478
sg17
(lp49479
sg19
(lp49480
sg21
I0
sba(iArchitecture
Entity
p49481
(dp49482
g11
(lp49483
sg13
S'com.google.common.testing.ArbitraryInstances$Dummies$DummyThreadFactory'
p49484
sg15
(lp49485
sg17
(lp49486
sg19
(lp49487
sg21
I0
sba(iArchitecture
Entity
p49488
(dp49489
g11
(lp49490
sg13
S'com.google.common.testing.ArbitraryInstances$Dummies$InMemoryPrintStream'
p49491
sg15
(lp49492
sg17
(lp49493
sg19
(lp49494
sg21
I0
sba(iArchitecture
Entity
p49495
(dp49496
g11
(lp49497
sg13
S'com.google.common.testing.ArbitraryInstances$Dummies$InMemoryPrintWriter'
p49498
sg15
(lp49499
sg17
(lp49500
sg19
(lp49501
sg21
I0
sba(iArchitecture
Entity
p49502
(dp49503
g11
(lp49504
sg13
S'com.google.common.testing.ArbitraryInstances$NullByteSink'
p49505
sg15
(lp49506
sg17
(lp49507
sg19
(lp49508
sg21
I0
sba(iArchitecture
Entity
p49509
(dp49510
g11
(lp49511
sg13
S'com.google.common.testing.ClassSanityTester'
p49512
sg15
(lp49513
sg17
(lp49514
sg19
(lp49515
sg21
I0
sba(iArchitecture
Entity
p49516
(dp49517
g11
(lp49518
sg13
S'com.google.common.testing.ClassSanityTester$1'
p49519
sg15
(lp49520
sg17
(lp49521
sg19
(lp49522
sg21
I0
sba(iArchitecture
Entity
p49523
(dp49524
g11
(lp49525
sg13
S'com.google.common.testing.ClassSanityTester$2'
p49526
sg15
(lp49527
sg17
(lp49528
sg19
(lp49529
sg21
I0
sba(iArchitecture
Entity
p49530
(dp49531
g11
(lp49532
sg13
S'com.google.common.testing.ClassSanityTester$3'
p49533
sg15
(lp49534
sg17
(lp49535
sg19
(lp49536
sg21
I0
sba(iArchitecture
Entity
p49537
(dp49538
g11
(lp49539
sg13
S'com.google.common.testing.ClassSanityTester$4'
p49540
sg15
(lp49541
sg17
(lp49542
sg19
(lp49543
sg21
I0
sba(iArchitecture
Entity
p49544
(dp49545
g11
(lp49546
sg13
S'com.google.common.testing.ClassSanityTester$5'
p49547
sg15
(lp49548
sg17
(lp49549
sg19
(lp49550
sg21
I0
sba(iArchitecture
Entity
p49551
(dp49552
g11
(lp49553
sg13
S'com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester'
p49554
sg15
(lp49555
sg17
(lp49556
sg19
(lp49557
sg21
I0
sba(iArchitecture
Entity
p49558
(dp49559
g11
(lp49560
sg13
S'com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException'
p49561
sg15
(lp49562
sg17
(lp49563
sg19
(lp49564
sg21
I0
sba(iArchitecture
Entity
p49565
(dp49566
g11
(lp49567
sg13
S'com.google.common.testing.ClassSanityTester$ParameterHasNoDistinctValueException'
p49568
sg15
(lp49569
sg17
(lp49570
sg19
(lp49571
sg21
I0
sba(iArchitecture
Entity
p49572
(dp49573
g11
(lp49574
sg13
S'com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException'
p49575
sg15
(lp49576
sg17
(lp49577
sg19
(lp49578
sg21
I0
sba(iArchitecture
Entity
p49579
(dp49580
g11
(lp49581
sg13
S'com.google.common.testing.ClassSanityTester$SerializableDummyProxy'
p49582
sg15
(lp49583
sg17
(lp49584
sg19
(lp49585
sg21
I0
sba(iArchitecture
Entity
p49586
(dp49587
g11
(lp49588
sg13
S'com.google.common.testing.ClusterException'
p49589
sg15
(lp49590
sg17
(lp49591
sg19
(lp49592
sg21
I0
sba(iArchitecture
Entity
p49593
(dp49594
g11
(lp49595
sg13
S'com.google.common.testing.DummyProxy'
p49596
sg15
(lp49597
sg17
(lp49598
sg19
(lp49599
sg21
I0
sba(iArchitecture
Entity
p49600
(dp49601
g11
(lp49602
sg13
S'com.google.common.testing.DummyProxy$DummyHandler'
p49603
sg15
(lp49604
sg17
(lp49605
sg19
(lp49606
sg21
I0
sba(iArchitecture
Entity
p49607
(dp49608
g11
(lp49609
sg13
S'com.google.common.testing.EqualsTester'
p49610
sg15
(lp49611
sg17
(lp49612
sg19
(lp49613
sg21
I0
sba(iArchitecture
Entity
p49614
(dp49615
g11
(lp49616
sg13
S'com.google.common.testing.EqualsTester$NotAnInstance'
p49617
sg15
(lp49618
sg17
(lp49619
sg19
(lp49620
sg21
I0
sba(iArchitecture
Entity
p49621
(dp49622
g11
(lp49623
sg13
S'com.google.common.testing.EquivalenceTester'
p49624
sg15
(lp49625
sg17
(lp49626
sg19
(lp49627
sg21
I0
sba(iArchitecture
Entity
p49628
(dp49629
g11
(lp49630
sg13
S'com.google.common.testing.ForwardingWrapperTester'
p49631
sg15
(lp49632
sg17
(lp49633
sg19
(lp49634
sg21
I0
sba(iArchitecture
Entity
p49635
(dp49636
g11
(lp49637
sg13
S'com.google.common.testing.ForwardingWrapperTester$1'
p49638
sg15
(lp49639
sg17
(lp49640
sg19
(lp49641
sg21
I0
sba(iArchitecture
Entity
p49642
(dp49643
g11
(lp49644
sg13
S'com.google.common.testing.ForwardingWrapperTester$InteractionTester'
p49645
sg15
(lp49646
sg17
(lp49647
sg19
(lp49648
sg21
I0
sba(iArchitecture
Entity
p49649
(dp49650
g11
(lp49651
sg13
S'com.google.common.testing.FreshValueGenerator'
p49652
sg15
(lp49653
sg17
(lp49654
sg19
(lp49655
sg21
I0
sba(iArchitecture
Entity
p49656
(dp49657
g11
(lp49658
sg13
S'com.google.common.testing.FreshValueGenerator$1'
p49659
sg15
(lp49660
sg17
(lp49661
sg19
(lp49662
sg21
I0
sba(iArchitecture
Entity
p49663
(dp49664
g11
(lp49665
sg13
S'com.google.common.testing.FreshValueGenerator$2'
p49666
sg15
(lp49667
sg17
(lp49668
sg19
(lp49669
sg21
I0
sba(iArchitecture
Entity
p49670
(dp49671
g11
(lp49672
sg13
S'com.google.common.testing.FreshValueGenerator$3'
p49673
sg15
(lp49674
sg17
(lp49675
sg19
(lp49676
sg21
I0
sba(iArchitecture
Entity
p49677
(dp49678
g11
(lp49679
sg13
S'com.google.common.testing.FreshValueGenerator$4'
p49680
sg15
(lp49681
sg17
(lp49682
sg19
(lp49683
sg21
I0
sba(iArchitecture
Entity
p49684
(dp49685
g11
(lp49686
sg13
S'com.google.common.testing.FreshValueGenerator$Empty'
p49687
sg15
(lp49688
sg17
(lp49689
sg19
(lp49690
sg21
I0
sba(iArchitecture
Entity
p49691
(dp49692
g11
(lp49693
sg13
S'com.google.common.testing.FreshValueGenerator$FreshInvocationHandler'
p49694
sg15
(lp49695
sg17
(lp49696
sg19
(lp49697
sg21
I0
sba(iArchitecture
Entity
p49698
(dp49699
g11
(lp49700
sg13
S'com.google.common.testing.FreshValueGenerator$Generates'
p49701
sg15
(lp49702
sg17
(lp49703
sg19
(lp49704
sg21
I0
sba(iArchitecture
Entity
p49705
(dp49706
g11
(lp49707
sg13
S'com.google.common.testing.GcFinalization'
p49708
sg15
(lp49709
sg17
(lp49710
sg19
(lp49711
sg21
I0
sba(iArchitecture
Entity
p49712
(dp49713
g11
(lp49714
sg13
S'com.google.common.testing.GcFinalization$1'
p49715
sg15
(lp49716
sg17
(lp49717
sg19
(lp49718
sg21
I0
sba(iArchitecture
Entity
p49719
(dp49720
g11
(lp49721
sg13
S'com.google.common.testing.GcFinalization$2'
p49722
sg15
(lp49723
sg17
(lp49724
sg19
(lp49725
sg21
I0
sba(iArchitecture
Entity
p49726
(dp49727
g11
(lp49728
sg13
S'com.google.common.testing.GcFinalization$3'
p49729
sg15
(lp49730
sg17
(lp49731
sg19
(lp49732
sg21
I0
sba(iArchitecture
Entity
p49733
(dp49734
g11
(lp49735
sg13
S'com.google.common.testing.GcFinalization$FinalizationPredicate'
p49736
sg15
(lp49737
sg17
(lp49738
sg19
(lp49739
sg21
I0
sba(iArchitecture
Entity
p49740
(dp49741
g11
(lp49742
sg13
S'com.google.common.testing.NullPointerTester'
p49743
sg15
(lp49744
sg17
(lp49745
sg19
(lp49746
sg21
I0
sba(iArchitecture
Entity
p49747
(dp49748
g11
(lp49749
sg13
S'com.google.common.testing.NullPointerTester$1'
p49750
sg15
(lp49751
sg17
(lp49752
sg19
(lp49753
sg21
I0
sba(iArchitecture
Entity
p49754
(dp49755
g11
(lp49756
sg13
S'com.google.common.testing.NullPointerTester$2'
p49757
sg15
(lp49758
sg17
(lp49759
sg19
(lp49760
sg21
I0
sba(iArchitecture
Entity
p49761
(dp49762
g11
(lp49763
sg13
S'com.google.common.testing.NullPointerTester$ExceptionTypePolicy'
p49764
sg15
(lp49765
sg17
(lp49766
sg19
(lp49767
sg21
I0
sba(iArchitecture
Entity
p49768
(dp49769
g11
(lp49770
sg13
S'com.google.common.testing.NullPointerTester$ExceptionTypePolicy$1'
p49771
sg15
(lp49772
sg17
(lp49773
sg19
(lp49774
sg21
I0
sba(iArchitecture
Entity
p49775
(dp49776
g11
(lp49777
sg13
S'com.google.common.testing.NullPointerTester$ExceptionTypePolicy$2'
p49778
sg15
(lp49779
sg17
(lp49780
sg19
(lp49781
sg21
I0
sba(iArchitecture
Entity
p49782
(dp49783
g11
(lp49784
sg13
S'com.google.common.testing.NullPointerTester$Signature'
p49785
sg15
(lp49786
sg17
(lp49787
sg19
(lp49788
sg21
I0
sba(iArchitecture
Entity
p49789
(dp49790
g11
(lp49791
sg13
S'com.google.common.testing.NullPointerTester$Visibility'
p49792
sg15
(lp49793
sg17
(lp49794
sg19
(lp49795
sg21
I0
sba(iArchitecture
Entity
p49796
(dp49797
g11
(lp49798
sg13
S'com.google.common.testing.NullPointerTester$Visibility$1'
p49799
sg15
(lp49800
sg17
(lp49801
sg19
(lp49802
sg21
I0
sba(iArchitecture
Entity
p49803
(dp49804
g11
(lp49805
sg13
S'com.google.common.testing.NullPointerTester$Visibility$2'
p49806
sg15
(lp49807
sg17
(lp49808
sg19
(lp49809
sg21
I0
sba(iArchitecture
Entity
p49810
(dp49811
g11
(lp49812
sg13
S'com.google.common.testing.NullPointerTester$Visibility$3'
p49813
sg15
(lp49814
sg17
(lp49815
sg19
(lp49816
sg21
I0
sba(iArchitecture
Entity
p49817
(dp49818
g11
(lp49819
sg13
S'com.google.common.testing.Platform'
p49820
sg15
(lp49821
sg17
(lp49822
sg19
(lp49823
sg21
I0
sba(iArchitecture
Entity
p49824
(dp49825
g11
(lp49826
sg13
S'com.google.common.testing.RelationshipTester'
p49827
sg15
(lp49828
sg17
(lp49829
sg19
(lp49830
sg21
I0
sba(iArchitecture
Entity
p49831
(dp49832
g11
(lp49833
sg13
S'com.google.common.testing.RelationshipTester$Item'
p49834
sg15
(lp49835
sg17
(lp49836
sg19
(lp49837
sg21
I0
sba(iArchitecture
Entity
p49838
(dp49839
g11
(lp49840
sg13
S'com.google.common.testing.RelationshipTester$ItemReporter'
p49841
sg15
(lp49842
sg17
(lp49843
sg19
(lp49844
sg21
I0
sba(iArchitecture
Entity
p49845
(dp49846
g11
(lp49847
sg13
S'com.google.common.testing.SerializableTester'
p49848
sg15
(lp49849
sg17
(lp49850
sg19
(lp49851
sg21
I0
sba(iArchitecture
Entity
p49852
(dp49853
g11
(lp49854
sg13
S'com.google.common.testing.TearDown'
p49855
sg15
(lp49856
sg17
(lp49857
sg19
(lp49858
sg21
I0
sba(iArchitecture
Entity
p49859
(dp49860
g11
(lp49861
sg13
S'com.google.common.testing.TearDownAccepter'
p49862
sg15
(lp49863
sg17
(lp49864
sg19
(lp49865
sg21
I0
sba(iArchitecture
Entity
p49866
(dp49867
g11
(lp49868
sg13
S'com.google.common.testing.TearDownStack'
p49869
sg15
(lp49870
sg17
(lp49871
sg19
(lp49872
sg21
I0
sba(iArchitecture
Entity
p49873
(dp49874
g11
(lp49875
sg13
S'junit.framework.AssertionFailedError'
p49876
sg15
(lp49877
sg17
(lp49878
sg19
(lp49879
sg21
I0
sba(iArchitecture
Entity
p49880
(dp49881
g11
(lp49882
sg13
S'org.junit.Test'
p49883
sg15
(lp49884
sg17
(lp49885
sg19
(lp49886
sg21
I0
sbasg1055
(lp49887
g49253
ag49260
ag49267
ag49274
ag49281
ag49288
ag49295
ag49302
ag49309
ag49316
ag49323
ag49330
ag49337
ag49344
ag49351
ag49358
ag49365
ag49372
ag49379
ag49386
ag49393
ag49400
ag49407
ag49414
ag49421
ag49428
ag49435
ag49442
ag49449
ag49456
ag49463
ag49470
ag49477
ag49484
ag49491
ag49498
ag49505
ag49512
ag49519
ag49526
ag49533
ag49540
ag49547
ag49554
ag49561
ag49568
ag49575
ag49582
ag49589
ag49596
ag49603
ag49610
ag49617
ag49624
ag49631
ag49638
ag49645
ag49652
ag49659
ag49666
ag49673
ag49680
ag49687
ag49694
ag49701
ag49708
ag49715
ag49722
ag49729
ag49736
ag49743
ag49750
ag49757
ag49764
ag49771
ag49778
ag49785
ag49792
ag49799
ag49806
ag49813
ag49820
ag49827
ag49834
ag49841
ag49848
ag49855
ag49862
ag49869
ag49876
ag49883
asg21
I0
sg1057
S'com.google.common.testing.ss'
p49888
sba(iArchitecture
Cluster
p49889
(dp49890
g7
(lp49891
(iArchitecture
Entity
p49892
(dp49893
g11
(lp49894
sg13
S'com.google.common.base.Supplier'
p49895
sg15
(lp49896
sg17
(lp49897
sg19
(lp49898
sg21
I0
sba(iArchitecture
Entity
p49899
(dp49900
g11
(lp49901
sg13
S'com.google.common.collect.ForwardingObject'
p49902
sg15
(lp49903
sg17
(lp49904
sg19
(lp49905
sg21
I0
sba(iArchitecture
Entity
p49906
(dp49907
g11
(lp49908
sg13
S'com.google.common.collect.ObjectArrays'
p49909
sg15
(lp49910
sg17
(lp49911
sg19
(lp49912
sg21
I0
sba(iArchitecture
Entity
p49913
(dp49914
g11
(lp49915
sg13
S'com.google.common.collect.Queues'
p49916
sg15
(lp49917
sg17
(lp49918
sg19
(lp49919
sg21
I0
sba(iArchitecture
Entity
p49920
(dp49921
g11
(lp49922
sg13
S'com.google.common.util.concurrent.AbstractCatchingFuture'
p49923
sg15
(lp49924
sg17
(lp49925
sg19
(lp49926
sg21
I0
sba(iArchitecture
Entity
p49927
(dp49928
g11
(lp49929
sg13
S'com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture'
p49930
sg15
(lp49931
sg17
(lp49932
sg19
(lp49933
sg21
I0
sba(iArchitecture
Entity
p49934
(dp49935
g11
(lp49936
sg13
S'com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture'
p49937
sg15
(lp49938
sg17
(lp49939
sg19
(lp49940
sg21
I0
sba(iArchitecture
Entity
p49941
(dp49942
g11
(lp49943
sg13
S'com.google.common.util.concurrent.AbstractCheckedFuture'
p49944
sg15
(lp49945
sg17
(lp49946
sg19
(lp49947
sg21
I0
sba(iArchitecture
Entity
p49948
(dp49949
g11
(lp49950
sg13
S'com.google.common.util.concurrent.AbstractExecutionThreadService'
p49951
sg15
(lp49952
sg17
(lp49953
sg19
(lp49954
sg21
I0
sba(iArchitecture
Entity
p49955
(dp49956
g11
(lp49957
sg13
S'com.google.common.util.concurrent.AbstractExecutionThreadService$1'
p49958
sg15
(lp49959
sg17
(lp49960
sg19
(lp49961
sg21
I0
sba(iArchitecture
Entity
p49962
(dp49963
g11
(lp49964
sg13
S'com.google.common.util.concurrent.AbstractExecutionThreadService$1$1'
p49965
sg15
(lp49966
sg17
(lp49967
sg19
(lp49968
sg21
I0
sba(iArchitecture
Entity
p49969
(dp49970
g11
(lp49971
sg13
S'com.google.common.util.concurrent.AbstractExecutionThreadService$1$2'
p49972
sg15
(lp49973
sg17
(lp49974
sg19
(lp49975
sg21
I0
sba(iArchitecture
Entity
p49976
(dp49977
g11
(lp49978
sg13
S'com.google.common.util.concurrent.AbstractExecutionThreadService$2'
p49979
sg15
(lp49980
sg17
(lp49981
sg19
(lp49982
sg21
I0
sba(iArchitecture
Entity
p49983
(dp49984
g11
(lp49985
sg13
S'com.google.common.util.concurrent.AbstractFuture'
p49986
sg15
(lp49987
sg17
(lp49988
sg19
(lp49989
sg21
I0
sba(iArchitecture
Entity
p49990
(dp49991
g11
(lp49992
sg13
S'com.google.common.util.concurrent.AbstractFuture$1'
p49993
sg15
(lp49994
sg17
(lp49995
sg19
(lp49996
sg21
I0
sba(iArchitecture
Entity
p49997
(dp49998
g11
(lp49999
sg13
S'com.google.common.util.concurrent.AbstractFuture$AtomicHelper'
p50000
sg15
(lp50001
sg17
(lp50002
sg19
(lp50003
sg21
I0
sba(iArchitecture
Entity
p50004
(dp50005
g11
(lp50006
sg13
S'com.google.common.util.concurrent.AbstractFuture$Cancellation'
p50007
sg15
(lp50008
sg17
(lp50009
sg19
(lp50010
sg21
I0
sba(iArchitecture
Entity
p50011
(dp50012
g11
(lp50013
sg13
S'com.google.common.util.concurrent.AbstractFuture$Failure'
p50014
sg15
(lp50015
sg17
(lp50016
sg19
(lp50017
sg21
I0
sba(iArchitecture
Entity
p50018
(dp50019
g11
(lp50020
sg13
S'com.google.common.util.concurrent.AbstractFuture$Failure$1'
p50021
sg15
(lp50022
sg17
(lp50023
sg19
(lp50024
sg21
I0
sba(iArchitecture
Entity
p50025
(dp50026
g11
(lp50027
sg13
S'com.google.common.util.concurrent.AbstractFuture$Listener'
p50028
sg15
(lp50029
sg17
(lp50030
sg19
(lp50031
sg21
I0
sba(iArchitecture
Entity
p50032
(dp50033
g11
(lp50034
sg13
S'com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper'
p50035
sg15
(lp50036
sg17
(lp50037
sg19
(lp50038
sg21
I0
sba(iArchitecture
Entity
p50039
(dp50040
g11
(lp50041
sg13
S'com.google.common.util.concurrent.AbstractFuture$SetFuture'
p50042
sg15
(lp50043
sg17
(lp50044
sg19
(lp50045
sg21
I0
sba(iArchitecture
Entity
p50046
(dp50047
g11
(lp50048
sg13
S'com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper'
p50049
sg15
(lp50050
sg17
(lp50051
sg19
(lp50052
sg21
I0
sba(iArchitecture
Entity
p50053
(dp50054
g11
(lp50055
sg13
S'com.google.common.util.concurrent.AbstractFuture$TrustedFuture'
p50056
sg15
(lp50057
sg17
(lp50058
sg19
(lp50059
sg21
I0
sba(iArchitecture
Entity
p50060
(dp50061
g11
(lp50062
sg13
S'com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper'
p50063
sg15
(lp50064
sg17
(lp50065
sg19
(lp50066
sg21
I0
sba(iArchitecture
Entity
p50067
(dp50068
g11
(lp50069
sg13
S'com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1'
p50070
sg15
(lp50071
sg17
(lp50072
sg19
(lp50073
sg21
I0
sba(iArchitecture
Entity
p50074
(dp50075
g11
(lp50076
sg13
S'com.google.common.util.concurrent.AbstractFuture$Waiter'
p50077
sg15
(lp50078
sg17
(lp50079
sg19
(lp50080
sg21
I0
sba(iArchitecture
Entity
p50081
(dp50082
g11
(lp50083
sg13
S'com.google.common.util.concurrent.AbstractIdleService'
p50084
sg15
(lp50085
sg17
(lp50086
sg19
(lp50087
sg21
I0
sba(iArchitecture
Entity
p50088
(dp50089
g11
(lp50090
sg13
S'com.google.common.util.concurrent.AbstractIdleService$1'
p50091
sg15
(lp50092
sg17
(lp50093
sg19
(lp50094
sg21
I0
sba(iArchitecture
Entity
p50095
(dp50096
g11
(lp50097
sg13
S'com.google.common.util.concurrent.AbstractIdleService$DelegateService'
p50098
sg15
(lp50099
sg17
(lp50100
sg19
(lp50101
sg21
I0
sba(iArchitecture
Entity
p50102
(dp50103
g11
(lp50104
sg13
S'com.google.common.util.concurrent.AbstractIdleService$DelegateService$1'
p50105
sg15
(lp50106
sg17
(lp50107
sg19
(lp50108
sg21
I0
sba(iArchitecture
Entity
p50109
(dp50110
g11
(lp50111
sg13
S'com.google.common.util.concurrent.AbstractIdleService$DelegateService$2'
p50112
sg15
(lp50113
sg17
(lp50114
sg19
(lp50115
sg21
I0
sba(iArchitecture
Entity
p50116
(dp50117
g11
(lp50118
sg13
S'com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier'
p50119
sg15
(lp50120
sg17
(lp50121
sg19
(lp50122
sg21
I0
sba(iArchitecture
Entity
p50123
(dp50124
g11
(lp50125
sg13
S'com.google.common.util.concurrent.AbstractScheduledService'
p50126
sg15
(lp50127
sg17
(lp50128
sg19
(lp50129
sg21
I0
sba(iArchitecture
Entity
p50130
(dp50131
g11
(lp50132
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$1'
p50133
sg15
(lp50134
sg17
(lp50135
sg19
(lp50136
sg21
I0
sba(iArchitecture
Entity
p50137
(dp50138
g11
(lp50139
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$1ThreadFactoryImpl'
p50140
sg15
(lp50141
sg17
(lp50142
sg19
(lp50143
sg21
I0
sba(iArchitecture
Entity
p50144
(dp50145
g11
(lp50146
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler'
p50147
sg15
(lp50148
sg17
(lp50149
sg19
(lp50150
sg21
I0
sba(iArchitecture
Entity
p50151
(dp50152
g11
(lp50153
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable'
p50154
sg15
(lp50155
sg17
(lp50156
sg19
(lp50157
sg21
I0
sba(iArchitecture
Entity
p50158
(dp50159
g11
(lp50160
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule'
p50161
sg15
(lp50162
sg17
(lp50163
sg19
(lp50164
sg21
I0
sba(iArchitecture
Entity
p50165
(dp50166
g11
(lp50167
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$Scheduler'
p50168
sg15
(lp50169
sg17
(lp50170
sg19
(lp50171
sg21
I0
sba(iArchitecture
Entity
p50172
(dp50173
g11
(lp50174
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1'
p50175
sg15
(lp50176
sg17
(lp50177
sg19
(lp50178
sg21
I0
sba(iArchitecture
Entity
p50179
(dp50180
g11
(lp50181
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2'
p50182
sg15
(lp50183
sg17
(lp50184
sg19
(lp50185
sg21
I0
sba(iArchitecture
Entity
p50186
(dp50187
g11
(lp50188
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate'
p50189
sg15
(lp50190
sg17
(lp50191
sg19
(lp50192
sg21
I0
sba(iArchitecture
Entity
p50193
(dp50194
g11
(lp50195
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$1'
p50196
sg15
(lp50197
sg17
(lp50198
sg19
(lp50199
sg21
I0
sba(iArchitecture
Entity
p50200
(dp50201
g11
(lp50202
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$2'
p50203
sg15
(lp50204
sg17
(lp50205
sg19
(lp50206
sg21
I0
sba(iArchitecture
Entity
p50207
(dp50208
g11
(lp50209
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$3'
p50210
sg15
(lp50211
sg17
(lp50212
sg19
(lp50213
sg21
I0
sba(iArchitecture
Entity
p50214
(dp50215
g11
(lp50216
sg13
S'com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$Task'
p50217
sg15
(lp50218
sg17
(lp50219
sg19
(lp50220
sg21
I0
sba(iArchitecture
Entity
p50221
(dp50222
g11
(lp50223
sg13
S'com.google.common.util.concurrent.AbstractService'
p50224
sg15
(lp50225
sg17
(lp50226
sg19
(lp50227
sg21
I0
sba(iArchitecture
Entity
p50228
(dp50229
g11
(lp50230
sg13
S'com.google.common.util.concurrent.AbstractService$1'
p50231
sg15
(lp50232
sg17
(lp50233
sg19
(lp50234
sg21
I0
sba(iArchitecture
Entity
p50235
(dp50236
g11
(lp50237
sg13
S'com.google.common.util.concurrent.AbstractService$2'
p50238
sg15
(lp50239
sg17
(lp50240
sg19
(lp50241
sg21
I0
sba(iArchitecture
Entity
p50242
(dp50243
g11
(lp50244
sg13
S'com.google.common.util.concurrent.AbstractService$3'
p50245
sg15
(lp50246
sg17
(lp50247
sg19
(lp50248
sg21
I0
sba(iArchitecture
Entity
p50249
(dp50250
g11
(lp50251
sg13
S'com.google.common.util.concurrent.AbstractService$4'
p50252
sg15
(lp50253
sg17
(lp50254
sg19
(lp50255
sg21
I0
sba(iArchitecture
Entity
p50256
(dp50257
g11
(lp50258
sg13
S'com.google.common.util.concurrent.AbstractService$5'
p50259
sg15
(lp50260
sg17
(lp50261
sg19
(lp50262
sg21
I0
sba(iArchitecture
Entity
p50263
(dp50264
g11
(lp50265
sg13
S'com.google.common.util.concurrent.AbstractService$6'
p50266
sg15
(lp50267
sg17
(lp50268
sg19
(lp50269
sg21
I0
sba(iArchitecture
Entity
p50270
(dp50271
g11
(lp50272
sg13
S'com.google.common.util.concurrent.AbstractService$HasReachedRunningGuard'
p50273
sg15
(lp50274
sg17
(lp50275
sg19
(lp50276
sg21
I0
sba(iArchitecture
Entity
p50277
(dp50278
g11
(lp50279
sg13
S'com.google.common.util.concurrent.AbstractService$IsStartableGuard'
p50280
sg15
(lp50281
sg17
(lp50282
sg19
(lp50283
sg21
I0
sba(iArchitecture
Entity
p50284
(dp50285
g11
(lp50286
sg13
S'com.google.common.util.concurrent.AbstractService$IsStoppableGuard'
p50287
sg15
(lp50288
sg17
(lp50289
sg19
(lp50290
sg21
I0
sba(iArchitecture
Entity
p50291
(dp50292
g11
(lp50293
sg13
S'com.google.common.util.concurrent.AbstractService$IsStoppedGuard'
p50294
sg15
(lp50295
sg17
(lp50296
sg19
(lp50297
sg21
I0
sba(iArchitecture
Entity
p50298
(dp50299
g11
(lp50300
sg13
S'com.google.common.util.concurrent.AbstractService$StateSnapshot'
p50301
sg15
(lp50302
sg17
(lp50303
sg19
(lp50304
sg21
I0
sba(iArchitecture
Entity
p50305
(dp50306
g11
(lp50307
sg13
S'com.google.common.util.concurrent.AbstractTransformFuture'
p50308
sg15
(lp50309
sg17
(lp50310
sg19
(lp50311
sg21
I0
sba(iArchitecture
Entity
p50312
(dp50313
g11
(lp50314
sg13
S'com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture'
p50315
sg15
(lp50316
sg17
(lp50317
sg19
(lp50318
sg21
I0
sba(iArchitecture
Entity
p50319
(dp50320
g11
(lp50321
sg13
S'com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture'
p50322
sg15
(lp50323
sg17
(lp50324
sg19
(lp50325
sg21
I0
sba(iArchitecture
Entity
p50326
(dp50327
g11
(lp50328
sg13
S'com.google.common.util.concurrent.AggregateFuture'
p50329
sg15
(lp50330
sg17
(lp50331
sg19
(lp50332
sg21
I0
sba(iArchitecture
Entity
p50333
(dp50334
g11
(lp50335
sg13
S'com.google.common.util.concurrent.AggregateFuture$RunningState'
p50336
sg15
(lp50337
sg17
(lp50338
sg19
(lp50339
sg21
I0
sba(iArchitecture
Entity
p50340
(dp50341
g11
(lp50342
sg13
S'com.google.common.util.concurrent.AggregateFuture$RunningState$1'
p50343
sg15
(lp50344
sg17
(lp50345
sg19
(lp50346
sg21
I0
sba(iArchitecture
Entity
p50347
(dp50348
g11
(lp50349
sg13
S'com.google.common.util.concurrent.AggregateFutureState'
p50350
sg15
(lp50351
sg17
(lp50352
sg19
(lp50353
sg21
I0
sba(iArchitecture
Entity
p50354
(dp50355
g11
(lp50356
sg13
S'com.google.common.util.concurrent.AggregateFutureState$1'
p50357
sg15
(lp50358
sg17
(lp50359
sg19
(lp50360
sg21
I0
sba(iArchitecture
Entity
p50361
(dp50362
g11
(lp50363
sg13
S'com.google.common.util.concurrent.AggregateFutureState$AtomicHelper'
p50364
sg15
(lp50365
sg17
(lp50366
sg19
(lp50367
sg21
I0
sba(iArchitecture
Entity
p50368
(dp50369
g11
(lp50370
sg13
S'com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper'
p50371
sg15
(lp50372
sg17
(lp50373
sg19
(lp50374
sg21
I0
sba(iArchitecture
Entity
p50375
(dp50376
g11
(lp50377
sg13
S'com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper'
p50378
sg15
(lp50379
sg17
(lp50380
sg19
(lp50381
sg21
I0
sba(iArchitecture
Entity
p50382
(dp50383
g11
(lp50384
sg13
S'com.google.common.util.concurrent.AsyncCallable'
p50385
sg15
(lp50386
sg17
(lp50387
sg19
(lp50388
sg21
I0
sba(iArchitecture
Entity
p50389
(dp50390
g11
(lp50391
sg13
S'com.google.common.util.concurrent.AsyncFunction'
p50392
sg15
(lp50393
sg17
(lp50394
sg19
(lp50395
sg21
I0
sba(iArchitecture
Entity
p50396
(dp50397
g11
(lp50398
sg13
S'com.google.common.util.concurrent.AtomicLongMap'
p50399
sg15
(lp50400
sg17
(lp50401
sg19
(lp50402
sg21
I0
sba(iArchitecture
Entity
p50403
(dp50404
g11
(lp50405
sg13
S'com.google.common.util.concurrent.AtomicLongMap$1'
p50406
sg15
(lp50407
sg17
(lp50408
sg19
(lp50409
sg21
I0
sba(iArchitecture
Entity
p50410
(dp50411
g11
(lp50412
sg13
S'com.google.common.util.concurrent.Callables'
p50413
sg15
(lp50414
sg17
(lp50415
sg19
(lp50416
sg21
I0
sba(iArchitecture
Entity
p50417
(dp50418
g11
(lp50419
sg13
S'com.google.common.util.concurrent.Callables$1'
p50420
sg15
(lp50421
sg17
(lp50422
sg19
(lp50423
sg21
I0
sba(iArchitecture
Entity
p50424
(dp50425
g11
(lp50426
sg13
S'com.google.common.util.concurrent.Callables$2'
p50427
sg15
(lp50428
sg17
(lp50429
sg19
(lp50430
sg21
I0
sba(iArchitecture
Entity
p50431
(dp50432
g11
(lp50433
sg13
S'com.google.common.util.concurrent.Callables$3'
p50434
sg15
(lp50435
sg17
(lp50436
sg19
(lp50437
sg21
I0
sba(iArchitecture
Entity
p50438
(dp50439
g11
(lp50440
sg13
S'com.google.common.util.concurrent.Callables$4'
p50441
sg15
(lp50442
sg17
(lp50443
sg19
(lp50444
sg21
I0
sba(iArchitecture
Entity
p50445
(dp50446
g11
(lp50447
sg13
S'com.google.common.util.concurrent.CheckedFuture'
p50448
sg15
(lp50449
sg17
(lp50450
sg19
(lp50451
sg21
I0
sba(iArchitecture
Entity
p50452
(dp50453
g11
(lp50454
sg13
S'com.google.common.util.concurrent.CollectionFuture'
p50455
sg15
(lp50456
sg17
(lp50457
sg19
(lp50458
sg21
I0
sba(iArchitecture
Entity
p50459
(dp50460
g11
(lp50461
sg13
S'com.google.common.util.concurrent.CollectionFuture$CollectionFutureRunningState'
p50462
sg15
(lp50463
sg17
(lp50464
sg19
(lp50465
sg21
I0
sba(iArchitecture
Entity
p50466
(dp50467
g11
(lp50468
sg13
S'com.google.common.util.concurrent.CollectionFuture$ListFuture'
p50469
sg15
(lp50470
sg17
(lp50471
sg19
(lp50472
sg21
I0
sba(iArchitecture
Entity
p50473
(dp50474
g11
(lp50475
sg13
S'com.google.common.util.concurrent.CollectionFuture$ListFuture$ListFutureRunningState'
p50476
sg15
(lp50477
sg17
(lp50478
sg19
(lp50479
sg21
I0
sba(iArchitecture
Entity
p50480
(dp50481
g11
(lp50482
sg13
S'com.google.common.util.concurrent.CombinedFuture'
p50483
sg15
(lp50484
sg17
(lp50485
sg19
(lp50486
sg21
I0
sba(iArchitecture
Entity
p50487
(dp50488
g11
(lp50489
sg13
S'com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask'
p50490
sg15
(lp50491
sg17
(lp50492
sg19
(lp50493
sg21
I0
sba(iArchitecture
Entity
p50494
(dp50495
g11
(lp50496
sg13
S'com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask'
p50497
sg15
(lp50498
sg17
(lp50499
sg19
(lp50500
sg21
I0
sba(iArchitecture
Entity
p50501
(dp50502
g11
(lp50503
sg13
S'com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask'
p50504
sg15
(lp50505
sg17
(lp50506
sg19
(lp50507
sg21
I0
sba(iArchitecture
Entity
p50508
(dp50509
g11
(lp50510
sg13
S'com.google.common.util.concurrent.CombinedFuture$CombinedFutureRunningState'
p50511
sg15
(lp50512
sg17
(lp50513
sg19
(lp50514
sg21
I0
sba(iArchitecture
Entity
p50515
(dp50516
g11
(lp50517
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory'
p50518
sg15
(lp50519
sg17
(lp50520
sg19
(lp50521
sg21
I0
sba(iArchitecture
Entity
p50522
(dp50523
g11
(lp50524
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$1'
p50525
sg15
(lp50526
sg17
(lp50527
sg19
(lp50528
sg21
I0
sba(iArchitecture
Entity
p50529
(dp50530
g11
(lp50531
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock'
p50532
sg15
(lp50533
sg17
(lp50534
sg19
(lp50535
sg21
I0
sba(iArchitecture
Entity
p50536
(dp50537
g11
(lp50538
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock'
p50539
sg15
(lp50540
sg17
(lp50541
sg19
(lp50542
sg21
I0
sba(iArchitecture
Entity
p50543
(dp50544
g11
(lp50545
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock'
p50546
sg15
(lp50547
sg17
(lp50548
sg19
(lp50549
sg21
I0
sba(iArchitecture
Entity
p50550
(dp50551
g11
(lp50552
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock'
p50553
sg15
(lp50554
sg17
(lp50555
sg19
(lp50556
sg21
I0
sba(iArchitecture
Entity
p50557
(dp50558
g11
(lp50559
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock'
p50560
sg15
(lp50561
sg17
(lp50562
sg19
(lp50563
sg21
I0
sba(iArchitecture
Entity
p50564
(dp50565
g11
(lp50566
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace'
p50567
sg15
(lp50568
sg17
(lp50569
sg19
(lp50570
sg21
I0
sba(iArchitecture
Entity
p50571
(dp50572
g11
(lp50573
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode'
p50574
sg15
(lp50575
sg17
(lp50576
sg19
(lp50577
sg21
I0
sba(iArchitecture
Entity
p50578
(dp50579
g11
(lp50580
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$Policies'
p50581
sg15
(lp50582
sg17
(lp50583
sg19
(lp50584
sg21
I0
sba(iArchitecture
Entity
p50585
(dp50586
g11
(lp50587
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$1'
p50588
sg15
(lp50589
sg17
(lp50590
sg19
(lp50591
sg21
I0
sba(iArchitecture
Entity
p50592
(dp50593
g11
(lp50594
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$2'
p50595
sg15
(lp50596
sg17
(lp50597
sg19
(lp50598
sg21
I0
sba(iArchitecture
Entity
p50599
(dp50600
g11
(lp50601
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$3'
p50602
sg15
(lp50603
sg17
(lp50604
sg19
(lp50605
sg21
I0
sba(iArchitecture
Entity
p50606
(dp50607
g11
(lp50608
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$Policy'
p50609
sg15
(lp50610
sg17
(lp50611
sg19
(lp50612
sg21
I0
sba(iArchitecture
Entity
p50613
(dp50614
g11
(lp50615
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException'
p50616
sg15
(lp50617
sg17
(lp50618
sg19
(lp50619
sg21
I0
sba(iArchitecture
Entity
p50620
(dp50621
g11
(lp50622
sg13
S'com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering'
p50623
sg15
(lp50624
sg17
(lp50625
sg19
(lp50626
sg21
I0
sba(iArchitecture
Entity
p50627
(dp50628
g11
(lp50629
sg13
S'com.google.common.util.concurrent.ExecutionError'
p50630
sg15
(lp50631
sg17
(lp50632
sg19
(lp50633
sg21
I0
sba(iArchitecture
Entity
p50634
(dp50635
g11
(lp50636
sg13
S'com.google.common.util.concurrent.ExecutionList'
p50637
sg15
(lp50638
sg17
(lp50639
sg19
(lp50640
sg21
I0
sba(iArchitecture
Entity
p50641
(dp50642
g11
(lp50643
sg13
S'com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair'
p50644
sg15
(lp50645
sg17
(lp50646
sg19
(lp50647
sg21
I0
sba(iArchitecture
Entity
p50648
(dp50649
g11
(lp50650
sg13
S'com.google.common.util.concurrent.ForwardingCheckedFuture'
p50651
sg15
(lp50652
sg17
(lp50653
sg19
(lp50654
sg21
I0
sba(iArchitecture
Entity
p50655
(dp50656
g11
(lp50657
sg13
S'com.google.common.util.concurrent.ForwardingCheckedFuture$SimpleForwardingCheckedFuture'
p50658
sg15
(lp50659
sg17
(lp50660
sg19
(lp50661
sg21
I0
sba(iArchitecture
Entity
p50662
(dp50663
g11
(lp50664
sg13
S'com.google.common.util.concurrent.ForwardingExecutorService'
p50665
sg15
(lp50666
sg17
(lp50667
sg19
(lp50668
sg21
I0
sba(iArchitecture
Entity
p50669
(dp50670
g11
(lp50671
sg13
S'com.google.common.util.concurrent.ForwardingFuture'
p50672
sg15
(lp50673
sg17
(lp50674
sg19
(lp50675
sg21
I0
sba(iArchitecture
Entity
p50676
(dp50677
g11
(lp50678
sg13
S'com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture'
p50679
sg15
(lp50680
sg17
(lp50681
sg19
(lp50682
sg21
I0
sba(iArchitecture
Entity
p50683
(dp50684
g11
(lp50685
sg13
S'com.google.common.util.concurrent.ForwardingListeningExecutorService'
p50686
sg15
(lp50687
sg17
(lp50688
sg19
(lp50689
sg21
I0
sba(iArchitecture
Entity
p50690
(dp50691
g11
(lp50692
sg13
S'com.google.common.util.concurrent.FutureCallback'
p50693
sg15
(lp50694
sg17
(lp50695
sg19
(lp50696
sg21
I0
sba(iArchitecture
Entity
p50697
(dp50698
g11
(lp50699
sg13
S'com.google.common.util.concurrent.Futures'
p50700
sg15
(lp50701
sg17
(lp50702
sg19
(lp50703
sg21
I0
sba(iArchitecture
Entity
p50704
(dp50705
g11
(lp50706
sg13
S'com.google.common.util.concurrent.Futures$1'
p50707
sg15
(lp50708
sg17
(lp50709
sg19
(lp50710
sg21
I0
sba(iArchitecture
Entity
p50711
(dp50712
g11
(lp50713
sg13
S'com.google.common.util.concurrent.Futures$2'
p50714
sg15
(lp50715
sg17
(lp50716
sg19
(lp50717
sg21
I0
sba(iArchitecture
Entity
p50718
(dp50719
g11
(lp50720
sg13
S'com.google.common.util.concurrent.Futures$3'
p50721
sg15
(lp50722
sg17
(lp50723
sg19
(lp50724
sg21
I0
sba(iArchitecture
Entity
p50725
(dp50726
g11
(lp50727
sg13
S'com.google.common.util.concurrent.Futures$4'
p50728
sg15
(lp50729
sg17
(lp50730
sg19
(lp50731
sg21
I0
sba(iArchitecture
Entity
p50732
(dp50733
g11
(lp50734
sg13
S'com.google.common.util.concurrent.Futures$FutureCombiner'
p50735
sg15
(lp50736
sg17
(lp50737
sg19
(lp50738
sg21
I0
sba(iArchitecture
Entity
p50739
(dp50740
g11
(lp50741
sg13
S'com.google.common.util.concurrent.Futures$MappingCheckedFuture'
p50742
sg15
(lp50743
sg17
(lp50744
sg19
(lp50745
sg21
I0
sba(iArchitecture
Entity
p50746
(dp50747
g11
(lp50748
sg13
S'com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture'
p50749
sg15
(lp50750
sg17
(lp50751
sg19
(lp50752
sg21
I0
sba(iArchitecture
Entity
p50753
(dp50754
g11
(lp50755
sg13
S'com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture$1'
p50756
sg15
(lp50757
sg17
(lp50758
sg19
(lp50759
sg21
I0
sba(iArchitecture
Entity
p50760
(dp50761
g11
(lp50762
sg13
S'com.google.common.util.concurrent.FuturesGetChecked'
p50763
sg15
(lp50764
sg17
(lp50765
sg19
(lp50766
sg21
I0
sba(iArchitecture
Entity
p50767
(dp50768
g11
(lp50769
sg13
S'com.google.common.util.concurrent.FuturesGetChecked$1'
p50770
sg15
(lp50771
sg17
(lp50772
sg19
(lp50773
sg21
I0
sba(iArchitecture
Entity
p50774
(dp50775
g11
(lp50776
sg13
S'com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator'
p50777
sg15
(lp50778
sg17
(lp50779
sg19
(lp50780
sg21
I0
sba(iArchitecture
Entity
p50781
(dp50782
g11
(lp50783
sg13
S'com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder'
p50784
sg15
(lp50785
sg17
(lp50786
sg19
(lp50787
sg21
I0
sba(iArchitecture
Entity
p50788
(dp50789
g11
(lp50790
sg13
S'com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator'
p50791
sg15
(lp50792
sg17
(lp50793
sg19
(lp50794
sg21
I0
sba(iArchitecture
Entity
p50795
(dp50796
g11
(lp50797
sg13
S'com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator$1'
p50798
sg15
(lp50799
sg17
(lp50800
sg19
(lp50801
sg21
I0
sba(iArchitecture
Entity
p50802
(dp50803
g11
(lp50804
sg13
S'com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator'
p50805
sg15
(lp50806
sg17
(lp50807
sg19
(lp50808
sg21
I0
sba(iArchitecture
Entity
p50809
(dp50810
g11
(lp50811
sg13
S'com.google.common.util.concurrent.GwtFuturesCatchingSpecialization'
p50812
sg15
(lp50813
sg17
(lp50814
sg19
(lp50815
sg21
I0
sba(iArchitecture
Entity
p50816
(dp50817
g11
(lp50818
sg13
S'com.google.common.util.concurrent.ImmediateFuture'
p50819
sg15
(lp50820
sg17
(lp50821
sg19
(lp50822
sg21
I0
sba(iArchitecture
Entity
p50823
(dp50824
g11
(lp50825
sg13
S'com.google.common.util.concurrent.ImmediateFuture$ImmediateCancelledFuture'
p50826
sg15
(lp50827
sg17
(lp50828
sg19
(lp50829
sg21
I0
sba(iArchitecture
Entity
p50830
(dp50831
g11
(lp50832
sg13
S'com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedCheckedFuture'
p50833
sg15
(lp50834
sg17
(lp50835
sg19
(lp50836
sg21
I0
sba(iArchitecture
Entity
p50837
(dp50838
g11
(lp50839
sg13
S'com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedFuture'
p50840
sg15
(lp50841
sg17
(lp50842
sg19
(lp50843
sg21
I0
sba(iArchitecture
Entity
p50844
(dp50845
g11
(lp50846
sg13
S'com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulCheckedFuture'
p50847
sg15
(lp50848
sg17
(lp50849
sg19
(lp50850
sg21
I0
sba(iArchitecture
Entity
p50851
(dp50852
g11
(lp50853
sg13
S'com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulFuture'
p50854
sg15
(lp50855
sg17
(lp50856
sg19
(lp50857
sg21
I0
sba(iArchitecture
Entity
p50858
(dp50859
g11
(lp50860
sg13
S'com.google.common.util.concurrent.InterruptibleTask'
p50861
sg15
(lp50862
sg17
(lp50863
sg19
(lp50864
sg21
I0
sba(iArchitecture
Entity
p50865
(dp50866
g11
(lp50867
sg13
S'com.google.common.util.concurrent.InterruptibleTask$1'
p50868
sg15
(lp50869
sg17
(lp50870
sg19
(lp50871
sg21
I0
sba(iArchitecture
Entity
p50872
(dp50873
g11
(lp50874
sg13
S'com.google.common.util.concurrent.InterruptibleTask$AtomicHelper'
p50875
sg15
(lp50876
sg17
(lp50877
sg19
(lp50878
sg21
I0
sba(iArchitecture
Entity
p50879
(dp50880
g11
(lp50881
sg13
S'com.google.common.util.concurrent.InterruptibleTask$SafeAtomicHelper'
p50882
sg15
(lp50883
sg17
(lp50884
sg19
(lp50885
sg21
I0
sba(iArchitecture
Entity
p50886
(dp50887
g11
(lp50888
sg13
S'com.google.common.util.concurrent.InterruptibleTask$SynchronizedAtomicHelper'
p50889
sg15
(lp50890
sg17
(lp50891
sg19
(lp50892
sg21
I0
sba(iArchitecture
Entity
p50893
(dp50894
g11
(lp50895
sg13
S'com.google.common.util.concurrent.JdkFutureAdapters'
p50896
sg15
(lp50897
sg17
(lp50898
sg19
(lp50899
sg21
I0
sba(iArchitecture
Entity
p50900
(dp50901
g11
(lp50902
sg13
S'com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter'
p50903
sg15
(lp50904
sg17
(lp50905
sg19
(lp50906
sg21
I0
sba(iArchitecture
Entity
p50907
(dp50908
g11
(lp50909
sg13
S'com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter$1'
p50910
sg15
(lp50911
sg17
(lp50912
sg19
(lp50913
sg21
I0
sba(iArchitecture
Entity
p50914
(dp50915
g11
(lp50916
sg13
S'com.google.common.util.concurrent.ListenableFuture'
p50917
sg15
(lp50918
sg17
(lp50919
sg19
(lp50920
sg21
I0
sba(iArchitecture
Entity
p50921
(dp50922
g11
(lp50923
sg13
S'com.google.common.util.concurrent.ListenerCallQueue'
p50924
sg15
(lp50925
sg17
(lp50926
sg19
(lp50927
sg21
I0
sba(iArchitecture
Entity
p50928
(dp50929
g11
(lp50930
sg13
S'com.google.common.util.concurrent.ListenerCallQueue$Callback'
p50931
sg15
(lp50932
sg17
(lp50933
sg19
(lp50934
sg21
I0
sba(iArchitecture
Entity
p50935
(dp50936
g11
(lp50937
sg13
S'com.google.common.util.concurrent.ListeningExecutorService'
p50938
sg15
(lp50939
sg17
(lp50940
sg19
(lp50941
sg21
I0
sba(iArchitecture
Entity
p50942
(dp50943
g11
(lp50944
sg13
S'com.google.common.util.concurrent.Monitor'
p50945
sg15
(lp50946
sg17
(lp50947
sg19
(lp50948
sg21
I0
sba(iArchitecture
Entity
p50949
(dp50950
g11
(lp50951
sg13
S'com.google.common.util.concurrent.Monitor$Guard'
p50952
sg15
(lp50953
sg17
(lp50954
sg19
(lp50955
sg21
I0
sba(iArchitecture
Entity
p50956
(dp50957
g11
(lp50958
sg13
S'com.google.common.util.concurrent.MoreExecutors'
p50959
sg15
(lp50960
sg17
(lp50961
sg19
(lp50962
sg21
I0
sba(iArchitecture
Entity
p50963
(dp50964
g11
(lp50965
sg13
S'com.google.common.util.concurrent.MoreExecutors$1'
p50966
sg15
(lp50967
sg17
(lp50968
sg19
(lp50969
sg21
I0
sba(iArchitecture
Entity
p50970
(dp50971
g11
(lp50972
sg13
S'com.google.common.util.concurrent.MoreExecutors$2'
p50973
sg15
(lp50974
sg17
(lp50975
sg19
(lp50976
sg21
I0
sba(iArchitecture
Entity
p50977
(dp50978
g11
(lp50979
sg13
S'com.google.common.util.concurrent.MoreExecutors$3'
p50980
sg15
(lp50981
sg17
(lp50982
sg19
(lp50983
sg21
I0
sba(iArchitecture
Entity
p50984
(dp50985
g11
(lp50986
sg13
S'com.google.common.util.concurrent.MoreExecutors$4'
p50987
sg15
(lp50988
sg17
(lp50989
sg19
(lp50990
sg21
I0
sba(iArchitecture
Entity
p50991
(dp50992
g11
(lp50993
sg13
S'com.google.common.util.concurrent.MoreExecutors$5'
p50994
sg15
(lp50995
sg17
(lp50996
sg19
(lp50997
sg21
I0
sba(iArchitecture
Entity
p50998
(dp50999
g11
(lp51000
sg13
S'com.google.common.util.concurrent.MoreExecutors$5$1'
p51001
sg15
(lp51002
sg17
(lp51003
sg19
(lp51004
sg21
I0
sba(iArchitecture
Entity
p51005
(dp51006
g11
(lp51007
sg13
S'com.google.common.util.concurrent.MoreExecutors$Application'
p51008
sg15
(lp51009
sg17
(lp51010
sg19
(lp51011
sg21
I0
sba(iArchitecture
Entity
p51012
(dp51013
g11
(lp51014
sg13
S'com.google.common.util.concurrent.MoreExecutors$Application$1'
p51015
sg15
(lp51016
sg17
(lp51017
sg19
(lp51018
sg21
I0
sba(iArchitecture
Entity
p51019
(dp51020
g11
(lp51021
sg13
S'com.google.common.util.concurrent.MoreExecutors$DirectExecutor'
p51022
sg15
(lp51023
sg17
(lp51024
sg19
(lp51025
sg21
I0
sba(iArchitecture
Entity
p51026
(dp51027
g11
(lp51028
sg13
S'com.google.common.util.concurrent.MoreExecutors$DirectExecutorService'
p51029
sg15
(lp51030
sg17
(lp51031
sg19
(lp51032
sg21
I0
sba(iArchitecture
Entity
p51033
(dp51034
g11
(lp51035
sg13
S'com.google.common.util.concurrent.MoreExecutors$ListeningDecorator'
p51036
sg15
(lp51037
sg17
(lp51038
sg19
(lp51039
sg21
I0
sba(iArchitecture
Entity
p51040
(dp51041
g11
(lp51042
sg13
S'com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator'
p51043
sg15
(lp51044
sg17
(lp51045
sg19
(lp51046
sg21
I0
sba(iArchitecture
Entity
p51047
(dp51048
g11
(lp51049
sg13
S'com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask'
p51050
sg15
(lp51051
sg17
(lp51052
sg19
(lp51053
sg21
I0
sba(iArchitecture
Entity
p51054
(dp51055
g11
(lp51056
sg13
S'com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask'
p51057
sg15
(lp51058
sg17
(lp51059
sg19
(lp51060
sg21
I0
sba(iArchitecture
Entity
p51061
(dp51062
g11
(lp51063
sg13
S'com.google.common.util.concurrent.Partially'
p51064
sg15
(lp51065
sg17
(lp51066
sg19
(lp51067
sg21
I0
sba(iArchitecture
Entity
p51068
(dp51069
g11
(lp51070
sg13
S'com.google.common.util.concurrent.Partially$GwtIncompatible'
p51071
sg15
(lp51072
sg17
(lp51073
sg19
(lp51074
sg21
I0
sba(iArchitecture
Entity
p51075
(dp51076
g11
(lp51077
sg13
S'com.google.common.util.concurrent.Platform'
p51078
sg15
(lp51079
sg17
(lp51080
sg19
(lp51081
sg21
I0
sba(iArchitecture
Entity
p51082
(dp51083
g11
(lp51084
sg13
S'com.google.common.util.concurrent.RateLimiter'
p51085
sg15
(lp51086
sg17
(lp51087
sg19
(lp51088
sg21
I0
sba(iArchitecture
Entity
p51089
(dp51090
g11
(lp51091
sg13
S'com.google.common.util.concurrent.RateLimiter$SleepingStopwatch'
p51092
sg15
(lp51093
sg17
(lp51094
sg19
(lp51095
sg21
I0
sba(iArchitecture
Entity
p51096
(dp51097
g11
(lp51098
sg13
S'com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1'
p51099
sg15
(lp51100
sg17
(lp51101
sg19
(lp51102
sg21
I0
sba(iArchitecture
Entity
p51103
(dp51104
g11
(lp51105
sg13
S'com.google.common.util.concurrent.Runnables'
p51106
sg15
(lp51107
sg17
(lp51108
sg19
(lp51109
sg21
I0
sba(iArchitecture
Entity
p51110
(dp51111
g11
(lp51112
sg13
S'com.google.common.util.concurrent.Runnables$1'
p51113
sg15
(lp51114
sg17
(lp51115
sg19
(lp51116
sg21
I0
sba(iArchitecture
Entity
p51117
(dp51118
g11
(lp51119
sg13
S'com.google.common.util.concurrent.SerializingExecutor'
p51120
sg15
(lp51121
sg17
(lp51122
sg19
(lp51123
sg21
I0
sba(iArchitecture
Entity
p51124
(dp51125
g11
(lp51126
sg13
S'com.google.common.util.concurrent.SerializingExecutor$1'
p51127
sg15
(lp51128
sg17
(lp51129
sg19
(lp51130
sg21
I0
sba(iArchitecture
Entity
p51131
(dp51132
g11
(lp51133
sg13
S'com.google.common.util.concurrent.SerializingExecutor$QueueWorker'
p51134
sg15
(lp51135
sg17
(lp51136
sg19
(lp51137
sg21
I0
sba(iArchitecture
Entity
p51138
(dp51139
g11
(lp51140
sg13
S'com.google.common.util.concurrent.Service'
p51141
sg15
(lp51142
sg17
(lp51143
sg19
(lp51144
sg21
I0
sba(iArchitecture
Entity
p51145
(dp51146
g11
(lp51147
sg13
S'com.google.common.util.concurrent.Service$1'
p51148
sg15
(lp51149
sg17
(lp51150
sg19
(lp51151
sg21
I0
sba(iArchitecture
Entity
p51152
(dp51153
g11
(lp51154
sg13
S'com.google.common.util.concurrent.Service$Listener'
p51155
sg15
(lp51156
sg17
(lp51157
sg19
(lp51158
sg21
I0
sba(iArchitecture
Entity
p51159
(dp51160
g11
(lp51161
sg13
S'com.google.common.util.concurrent.Service$State'
p51162
sg15
(lp51163
sg17
(lp51164
sg19
(lp51165
sg21
I0
sba(iArchitecture
Entity
p51166
(dp51167
g11
(lp51168
sg13
S'com.google.common.util.concurrent.Service$State$1'
p51169
sg15
(lp51170
sg17
(lp51171
sg19
(lp51172
sg21
I0
sba(iArchitecture
Entity
p51173
(dp51174
g11
(lp51175
sg13
S'com.google.common.util.concurrent.Service$State$2'
p51176
sg15
(lp51177
sg17
(lp51178
sg19
(lp51179
sg21
I0
sba(iArchitecture
Entity
p51180
(dp51181
g11
(lp51182
sg13
S'com.google.common.util.concurrent.Service$State$3'
p51183
sg15
(lp51184
sg17
(lp51185
sg19
(lp51186
sg21
I0
sba(iArchitecture
Entity
p51187
(dp51188
g11
(lp51189
sg13
S'com.google.common.util.concurrent.Service$State$4'
p51190
sg15
(lp51191
sg17
(lp51192
sg19
(lp51193
sg21
I0
sba(iArchitecture
Entity
p51194
(dp51195
g11
(lp51196
sg13
S'com.google.common.util.concurrent.Service$State$5'
p51197
sg15
(lp51198
sg17
(lp51199
sg19
(lp51200
sg21
I0
sba(iArchitecture
Entity
p51201
(dp51202
g11
(lp51203
sg13
S'com.google.common.util.concurrent.Service$State$6'
p51204
sg15
(lp51205
sg17
(lp51206
sg19
(lp51207
sg21
I0
sba(iArchitecture
Entity
p51208
(dp51209
g11
(lp51210
sg13
S'com.google.common.util.concurrent.ServiceManager'
p51211
sg15
(lp51212
sg17
(lp51213
sg19
(lp51214
sg21
I0
sba(iArchitecture
Entity
p51215
(dp51216
g11
(lp51217
sg13
S'com.google.common.util.concurrent.ServiceManager$1'
p51218
sg15
(lp51219
sg17
(lp51220
sg19
(lp51221
sg21
I0
sba(iArchitecture
Entity
p51222
(dp51223
g11
(lp51224
sg13
S'com.google.common.util.concurrent.ServiceManager$2'
p51225
sg15
(lp51226
sg17
(lp51227
sg19
(lp51228
sg21
I0
sba(iArchitecture
Entity
p51229
(dp51230
g11
(lp51231
sg13
S'com.google.common.util.concurrent.ServiceManager$EmptyServiceManagerWarning'
p51232
sg15
(lp51233
sg17
(lp51234
sg19
(lp51235
sg21
I0
sba(iArchitecture
Entity
p51236
(dp51237
g11
(lp51238
sg13
S'com.google.common.util.concurrent.ServiceManager$Listener'
p51239
sg15
(lp51240
sg17
(lp51241
sg19
(lp51242
sg21
I0
sba(iArchitecture
Entity
p51243
(dp51244
g11
(lp51245
sg13
S'com.google.common.util.concurrent.ServiceManager$NoOpService'
p51246
sg15
(lp51247
sg17
(lp51248
sg19
(lp51249
sg21
I0
sba(iArchitecture
Entity
p51250
(dp51251
g11
(lp51252
sg13
S'com.google.common.util.concurrent.ServiceManager$ServiceListener'
p51253
sg15
(lp51254
sg17
(lp51255
sg19
(lp51256
sg21
I0
sba(iArchitecture
Entity
p51257
(dp51258
g11
(lp51259
sg13
S'com.google.common.util.concurrent.ServiceManager$ServiceManagerState'
p51260
sg15
(lp51261
sg17
(lp51262
sg19
(lp51263
sg21
I0
sba(iArchitecture
Entity
p51264
(dp51265
g11
(lp51266
sg13
S'com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1'
p51267
sg15
(lp51268
sg17
(lp51269
sg19
(lp51270
sg21
I0
sba(iArchitecture
Entity
p51271
(dp51272
g11
(lp51273
sg13
S'com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2'
p51274
sg15
(lp51275
sg17
(lp51276
sg19
(lp51277
sg21
I0
sba(iArchitecture
Entity
p51278
(dp51279
g11
(lp51280
sg13
S'com.google.common.util.concurrent.ServiceManager$ServiceManagerState$AwaitHealthGuard'
p51281
sg15
(lp51282
sg17
(lp51283
sg19
(lp51284
sg21
I0
sba(iArchitecture
Entity
p51285
(dp51286
g11
(lp51287
sg13
S'com.google.common.util.concurrent.ServiceManager$ServiceManagerState$StoppedGuard'
p51288
sg15
(lp51289
sg17
(lp51290
sg19
(lp51291
sg21
I0
sba(iArchitecture
Entity
p51292
(dp51293
g11
(lp51294
sg13
S'com.google.common.util.concurrent.SettableFuture'
p51295
sg15
(lp51296
sg17
(lp51297
sg19
(lp51298
sg21
I0
sba(iArchitecture
Entity
p51299
(dp51300
g11
(lp51301
sg13
S'com.google.common.util.concurrent.SimpleTimeLimiter'
p51302
sg15
(lp51303
sg17
(lp51304
sg19
(lp51305
sg21
I0
sba(iArchitecture
Entity
p51306
(dp51307
g11
(lp51308
sg13
S'com.google.common.util.concurrent.SimpleTimeLimiter$1'
p51309
sg15
(lp51310
sg17
(lp51311
sg19
(lp51312
sg21
I0
sba(iArchitecture
Entity
p51313
(dp51314
g11
(lp51315
sg13
S'com.google.common.util.concurrent.SimpleTimeLimiter$1$1'
p51316
sg15
(lp51317
sg17
(lp51318
sg19
(lp51319
sg21
I0
sba(iArchitecture
Entity
p51320
(dp51321
g11
(lp51322
sg13
S'com.google.common.util.concurrent.SmoothRateLimiter'
p51323
sg15
(lp51324
sg17
(lp51325
sg19
(lp51326
sg21
I0
sba(iArchitecture
Entity
p51327
(dp51328
g11
(lp51329
sg13
S'com.google.common.util.concurrent.SmoothRateLimiter$1'
p51330
sg15
(lp51331
sg17
(lp51332
sg19
(lp51333
sg21
I0
sba(iArchitecture
Entity
p51334
(dp51335
g11
(lp51336
sg13
S'com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty'
p51337
sg15
(lp51338
sg17
(lp51339
sg19
(lp51340
sg21
I0
sba(iArchitecture
Entity
p51341
(dp51342
g11
(lp51343
sg13
S'com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp'
p51344
sg15
(lp51345
sg17
(lp51346
sg19
(lp51347
sg21
I0
sba(iArchitecture
Entity
p51348
(dp51349
g11
(lp51350
sg13
S'com.google.common.util.concurrent.Striped'
p51351
sg15
(lp51352
sg17
(lp51353
sg19
(lp51354
sg21
I0
sba(iArchitecture
Entity
p51355
(dp51356
g11
(lp51357
sg13
S'com.google.common.util.concurrent.Striped$1'
p51358
sg15
(lp51359
sg17
(lp51360
sg19
(lp51361
sg21
I0
sba(iArchitecture
Entity
p51362
(dp51363
g11
(lp51364
sg13
S'com.google.common.util.concurrent.Striped$2'
p51365
sg15
(lp51366
sg17
(lp51367
sg19
(lp51368
sg21
I0
sba(iArchitecture
Entity
p51369
(dp51370
g11
(lp51371
sg13
S'com.google.common.util.concurrent.Striped$3'
p51372
sg15
(lp51373
sg17
(lp51374
sg19
(lp51375
sg21
I0
sba(iArchitecture
Entity
p51376
(dp51377
g11
(lp51378
sg13
S'com.google.common.util.concurrent.Striped$4'
p51379
sg15
(lp51380
sg17
(lp51381
sg19
(lp51382
sg21
I0
sba(iArchitecture
Entity
p51383
(dp51384
g11
(lp51385
sg13
S'com.google.common.util.concurrent.Striped$5'
p51386
sg15
(lp51387
sg17
(lp51388
sg19
(lp51389
sg21
I0
sba(iArchitecture
Entity
p51390
(dp51391
g11
(lp51392
sg13
S'com.google.common.util.concurrent.Striped$CompactStriped'
p51393
sg15
(lp51394
sg17
(lp51395
sg19
(lp51396
sg21
I0
sba(iArchitecture
Entity
p51397
(dp51398
g11
(lp51399
sg13
S'com.google.common.util.concurrent.Striped$LargeLazyStriped'
p51400
sg15
(lp51401
sg17
(lp51402
sg19
(lp51403
sg21
I0
sba(iArchitecture
Entity
p51404
(dp51405
g11
(lp51406
sg13
S'com.google.common.util.concurrent.Striped$PaddedLock'
p51407
sg15
(lp51408
sg17
(lp51409
sg19
(lp51410
sg21
I0
sba(iArchitecture
Entity
p51411
(dp51412
g11
(lp51413
sg13
S'com.google.common.util.concurrent.Striped$PaddedSemaphore'
p51414
sg15
(lp51415
sg17
(lp51416
sg19
(lp51417
sg21
I0
sba(iArchitecture
Entity
p51418
(dp51419
g11
(lp51420
sg13
S'com.google.common.util.concurrent.Striped$PowerOfTwoStriped'
p51421
sg15
(lp51422
sg17
(lp51423
sg19
(lp51424
sg21
I0
sba(iArchitecture
Entity
p51425
(dp51426
g11
(lp51427
sg13
S'com.google.common.util.concurrent.Striped$SmallLazyStriped'
p51428
sg15
(lp51429
sg17
(lp51430
sg19
(lp51431
sg21
I0
sba(iArchitecture
Entity
p51432
(dp51433
g11
(lp51434
sg13
S'com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference'
p51435
sg15
(lp51436
sg17
(lp51437
sg19
(lp51438
sg21
I0
sba(iArchitecture
Entity
p51439
(dp51440
g11
(lp51441
sg13
S'com.google.common.util.concurrent.ThreadFactoryBuilder'
p51442
sg15
(lp51443
sg17
(lp51444
sg19
(lp51445
sg21
I0
sba(iArchitecture
Entity
p51446
(dp51447
g11
(lp51448
sg13
S'com.google.common.util.concurrent.ThreadFactoryBuilder$1'
p51449
sg15
(lp51450
sg17
(lp51451
sg19
(lp51452
sg21
I0
sba(iArchitecture
Entity
p51453
(dp51454
g11
(lp51455
sg13
S'com.google.common.util.concurrent.TimeLimiter'
p51456
sg15
(lp51457
sg17
(lp51458
sg19
(lp51459
sg21
I0
sba(iArchitecture
Entity
p51460
(dp51461
g11
(lp51462
sg13
S'com.google.common.util.concurrent.TimeoutFuture'
p51463
sg15
(lp51464
sg17
(lp51465
sg19
(lp51466
sg21
I0
sba(iArchitecture
Entity
p51467
(dp51468
g11
(lp51469
sg13
S'com.google.common.util.concurrent.TimeoutFuture$Fire'
p51470
sg15
(lp51471
sg17
(lp51472
sg19
(lp51473
sg21
I0
sba(iArchitecture
Entity
p51474
(dp51475
g11
(lp51476
sg13
S'com.google.common.util.concurrent.TrustedListenableFutureTask'
p51477
sg15
(lp51478
sg17
(lp51479
sg19
(lp51480
sg21
I0
sba(iArchitecture
Entity
p51481
(dp51482
g11
(lp51483
sg13
S'com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask'
p51484
sg15
(lp51485
sg17
(lp51486
sg19
(lp51487
sg21
I0
sba(iArchitecture
Entity
p51488
(dp51489
g11
(lp51490
sg13
S'com.google.common.util.concurrent.UncaughtExceptionHandlers'
p51491
sg15
(lp51492
sg17
(lp51493
sg19
(lp51494
sg21
I0
sba(iArchitecture
Entity
p51495
(dp51496
g11
(lp51497
sg13
S'com.google.common.util.concurrent.UncaughtExceptionHandlers$Exiter'
p51498
sg15
(lp51499
sg17
(lp51500
sg19
(lp51501
sg21
I0
sba(iArchitecture
Entity
p51502
(dp51503
g11
(lp51504
sg13
S'com.google.common.util.concurrent.UncheckedExecutionException'
p51505
sg15
(lp51506
sg17
(lp51507
sg19
(lp51508
sg21
I0
sba(iArchitecture
Entity
p51509
(dp51510
g11
(lp51511
sg13
S'com.google.common.util.concurrent.UncheckedTimeoutException'
p51512
sg15
(lp51513
sg17
(lp51514
sg19
(lp51515
sg21
I0
sba(iArchitecture
Entity
p51516
(dp51517
g11
(lp51518
sg13
S'com.google.common.util.concurrent.Uninterruptibles'
p51519
sg15
(lp51520
sg17
(lp51521
sg19
(lp51522
sg21
I0
sba(iArchitecture
Entity
p51523
(dp51524
g11
(lp51525
sg13
S'com.google.common.util.concurrent.WrappingExecutorService'
p51526
sg15
(lp51527
sg17
(lp51528
sg19
(lp51529
sg21
I0
sba(iArchitecture
Entity
p51530
(dp51531
g11
(lp51532
sg13
S'com.google.common.util.concurrent.WrappingExecutorService$1'
p51533
sg15
(lp51534
sg17
(lp51535
sg19
(lp51536
sg21
I0
sba(iArchitecture
Entity
p51537
(dp51538
g11
(lp51539
sg13
S'com.google.common.util.concurrent.WrappingScheduledExecutorService'
p51540
sg15
(lp51541
sg17
(lp51542
sg19
(lp51543
sg21
I0
sba(iArchitecture
Entity
p51544
(dp51545
g11
(lp51546
sg13
S'com.google.errorprone.annotations.ForOverride'
p51547
sg15
(lp51548
sg17
(lp51549
sg19
(lp51550
sg21
I0
sba(iArchitecture
Entity
p51551
(dp51552
g11
(lp51553
sg13
S'istFutureRunningState'
p51554
sg15
(lp51555
sg17
(lp51556
sg19
(lp51557
sg21
I0
sba(iArchitecture
Entity
p51558
(dp51559
g11
(lp51560
sg13
S'org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement'
p51561
sg15
(lp51562
sg17
(lp51563
sg19
(lp51564
sg21
I0
sbasg1055
(lp51565
g49895
ag49902
ag49909
ag49916
ag49923
ag49930
ag49937
ag49944
ag49951
ag49958
ag49965
ag49972
ag49979
ag49986
ag49993
ag50000
ag50007
ag50014
ag50021
ag50028
ag50035
ag50042
ag50049
ag50056
ag50063
ag50070
ag50077
ag50084
ag50091
ag50098
ag50105
ag50112
ag50119
ag50126
ag50133
ag50140
ag50147
ag50154
ag50161
ag50168
ag50175
ag50182
ag50189
ag50196
ag50203
ag50210
ag50217
ag50224
ag50231
ag50238
ag50245
ag50252
ag50259
ag50266
ag50273
ag50280
ag50287
ag50294
ag50301
ag50308
ag50315
ag50322
ag50329
ag50336
ag50343
ag50350
ag50357
ag50364
ag50371
ag50378
ag50385
ag50392
ag50399
ag50406
ag50413
ag50420
ag50427
ag50434
ag50441
ag50448
ag50455
ag50462
ag50469
ag50476
ag50483
ag50490
ag50497
ag50504
ag50511
ag50518
ag50525
ag50532
ag50539
ag50546
ag50553
ag50560
ag50567
ag50574
ag50581
ag50588
ag50595
ag50602
ag50609
ag50616
ag50623
ag50630
ag50637
ag50644
ag50651
ag50658
ag50665
ag50672
ag50679
ag50686
ag50693
ag50700
ag50707
ag50714
ag50721
ag50728
ag50735
ag50742
ag50749
ag50756
ag50763
ag50770
ag50777
ag50784
ag50791
ag50798
ag50805
ag50812
ag50819
ag50826
ag50833
ag50840
ag50847
ag50854
ag50861
ag50868
ag50875
ag50882
ag50889
ag50896
ag50903
ag50910
ag50917
ag50924
ag50931
ag50938
ag50945
ag50952
ag50959
ag50966
ag50973
ag50980
ag50987
ag50994
ag51001
ag51008
ag51015
ag51022
ag51029
ag51036
ag51043
ag51050
ag51057
ag51064
ag51071
ag51078
ag51085
ag51092
ag51099
ag51106
ag51113
ag51120
ag51127
ag51134
ag51141
ag51148
ag51155
ag51162
ag51169
ag51176
ag51183
ag51190
ag51197
ag51204
ag51211
ag51218
ag51225
ag51232
ag51239
ag51246
ag51253
ag51260
ag51267
ag51274
ag51281
ag51288
ag51295
ag51302
ag51309
ag51316
ag51323
ag51330
ag51337
ag51344
ag51351
ag51358
ag51365
ag51372
ag51379
ag51386
ag51393
ag51400
ag51407
ag51414
ag51421
ag51428
ag51435
ag51442
ag51449
ag51456
ag51463
ag51470
ag51477
ag51484
ag51491
ag51498
ag51505
ag51512
ag51519
ag51526
ag51533
ag51540
ag51547
ag51554
ag51561
asg21
I0
sg1057
S'com.google.common.util.concurrent.ss'
p51566
sba(iArchitecture
Cluster
p51567
(dp51568
g7
(lp51569
(iArchitecture
Entity
p51570
(dp51571
g11
(lp51572
sg13
S'com.google.common.util.concurrent.AbstractListeningExecutorService'
p51573
sg15
(lp51574
sg17
(lp51575
sg19
(lp51576
sg21
I0
sba(iArchitecture
Entity
p51577
(dp51578
g11
(lp51579
sg13
S'com.google.common.util.concurrent.ForwardingListenableFuture'
p51580
sg15
(lp51581
sg17
(lp51582
sg19
(lp51583
sg21
I0
sba(iArchitecture
Entity
p51584
(dp51585
g11
(lp51586
sg13
S'com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture'
p51587
sg15
(lp51588
sg17
(lp51589
sg19
(lp51590
sg21
I0
sba(iArchitecture
Entity
p51591
(dp51592
g11
(lp51593
sg13
S'com.google.common.util.concurrent.ListenableScheduledFuture'
p51594
sg15
(lp51595
sg17
(lp51596
sg19
(lp51597
sg21
I0
sba(iArchitecture
Entity
p51598
(dp51599
g11
(lp51600
sg13
S'com.google.common.util.concurrent.ListeningScheduledExecutorService'
p51601
sg15
(lp51602
sg17
(lp51603
sg19
(lp51604
sg21
I0
sba(iArchitecture
Entity
p51605
(dp51606
g11
(lp51607
sg13
S'com.google.common.util.concurrent.testing.AbstractCheckedFutureTest'
p51608
sg15
(lp51609
sg17
(lp51610
sg19
(lp51611
sg21
I0
sba(iArchitecture
Entity
p51612
(dp51613
g11
(lp51614
sg13
S'com.google.common.util.concurrent.testing.AbstractCheckedFutureTest$1'
p51615
sg15
(lp51616
sg17
(lp51617
sg19
(lp51618
sg21
I0
sba(iArchitecture
Entity
p51619
(dp51620
g11
(lp51621
sg13
S'com.google.common.util.concurrent.testing.AbstractCheckedFutureTest$2'
p51622
sg15
(lp51623
sg17
(lp51624
sg19
(lp51625
sg21
I0
sba(iArchitecture
Entity
p51626
(dp51627
g11
(lp51628
sg13
S'com.google.common.util.concurrent.testing.AbstractCheckedFutureTest$3'
p51629
sg15
(lp51630
sg17
(lp51631
sg19
(lp51632
sg21
I0
sba(iArchitecture
Entity
p51633
(dp51634
g11
(lp51635
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest'
p51636
sg15
(lp51637
sg17
(lp51638
sg19
(lp51639
sg21
I0
sba(iArchitecture
Entity
p51640
(dp51641
g11
(lp51642
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest$1'
p51643
sg15
(lp51644
sg17
(lp51645
sg19
(lp51646
sg21
I0
sba(iArchitecture
Entity
p51647
(dp51648
g11
(lp51649
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest$2'
p51650
sg15
(lp51651
sg17
(lp51652
sg19
(lp51653
sg21
I0
sba(iArchitecture
Entity
p51654
(dp51655
g11
(lp51656
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest$3'
p51657
sg15
(lp51658
sg17
(lp51659
sg19
(lp51660
sg21
I0
sba(iArchitecture
Entity
p51661
(dp51662
g11
(lp51663
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest$4'
p51664
sg15
(lp51665
sg17
(lp51666
sg19
(lp51667
sg21
I0
sba(iArchitecture
Entity
p51668
(dp51669
g11
(lp51670
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest$5'
p51671
sg15
(lp51672
sg17
(lp51673
sg19
(lp51674
sg21
I0
sba(iArchitecture
Entity
p51675
(dp51676
g11
(lp51677
sg13
S'com.google.common.util.concurrent.testing.AbstractListenableFutureTest$6'
p51678
sg15
(lp51679
sg17
(lp51680
sg19
(lp51681
sg21
I0
sba(iArchitecture
Entity
p51682
(dp51683
g11
(lp51684
sg13
S'com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService'
p51685
sg15
(lp51686
sg17
(lp51687
sg19
(lp51688
sg21
I0
sba(iArchitecture
Entity
p51689
(dp51690
g11
(lp51691
sg13
S'com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService$ImmediateScheduledFuture'
p51692
sg15
(lp51693
sg17
(lp51694
sg19
(lp51695
sg21
I0
sba(iArchitecture
Entity
p51696
(dp51697
g11
(lp51698
sg13
S'com.google.common.util.concurrent.testing.TestingExecutors'
p51699
sg15
(lp51700
sg17
(lp51701
sg19
(lp51702
sg21
I0
sba(iArchitecture
Entity
p51703
(dp51704
g11
(lp51705
sg13
S'com.google.common.util.concurrent.testing.TestingExecutors$1'
p51706
sg15
(lp51707
sg17
(lp51708
sg19
(lp51709
sg21
I0
sba(iArchitecture
Entity
p51710
(dp51711
g11
(lp51712
sg13
S'com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService'
p51713
sg15
(lp51714
sg17
(lp51715
sg19
(lp51716
sg21
I0
sba(iArchitecture
Entity
p51717
(dp51718
g11
(lp51719
sg13
S'com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService$NeverScheduledFuture'
p51720
sg15
(lp51721
sg17
(lp51722
sg19
(lp51723
sg21
I0
sbasg1055
(lp51724
g51573
ag51580
ag51587
ag51594
ag51601
ag51608
ag51615
ag51622
ag51629
ag51636
ag51643
ag51650
ag51657
ag51664
ag51671
ag51678
ag51685
ag51692
ag51699
ag51706
ag51713
ag51720
asg21
I0
sg1057
S'com.google.common.util.concurrent.testing.ss'
p51725
sba(iArchitecture
Cluster
p51726
(dp51727
g7
(lp51728
(iArchitecture
Entity
p51729
(dp51730
g11
(lp51731
sg13
S'com.google.thirdparty.publicsuffix.PublicSuffixPatterns'
p51732
sg15
(lp51733
sg17
(lp51734
sg19
(lp51735
sg21
I0
sba(iArchitecture
Entity
p51736
(dp51737
g11
(lp51738
sg13
S'com.google.thirdparty.publicsuffix.PublicSuffixType'
p51739
sg15
(lp51740
sg17
(lp51741
sg19
(lp51742
sg21
I0
sba(iArchitecture
Entity
p51743
(dp51744
g11
(lp51745
sg13
S'com.google.thirdparty.publicsuffix.TrieParser'
p51746
sg15
(lp51747
sg17
(lp51748
sg19
(lp51749
sg21
I0
sbasg1055
(lp51750
g51732
ag51739
ag51746
asg21
I0
sg1057
S'com.google.thirdparty.publicsuffix.ss'
p51751
sbasg17405
g17406
sg1055
(lp51752
sg17408
I00
sg1057
S'20.0'
p51753
sba.